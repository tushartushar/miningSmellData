Implementation smell,Namespace,Class,File,Method,Description
Long Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,The method has 305 lines of code.
Long Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The method has 184 lines of code.
Long Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop,The method has 141 lines of code.
Complex Method,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,DoAutocomplete,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,Cyclomatic complexity of the method is 26
Complex Method,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,Cyclomatic complexity of the method is 30
Complex Method,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetCss,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,Cyclomatic complexity of the method is 26
Complex Method,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Clear,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,HotkeysEditorForm,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\HotkeysEditorForm.cs,dgv_RowsAdded,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,HotkeysEditorForm,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\HotkeysEditorForm.cs,GetUnAssignedActions,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,HighlightSyntax,Cyclomatic complexity of the method is 23
Complex Method,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,AutoIndentNeeded,Cyclomatic complexity of the method is 23
Complex Method,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseXmlDescription,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitStyleSchema,Cyclomatic complexity of the method is 58
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RecalcWordWrap,Cyclomatic complexity of the method is 20
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcCutOffs,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoVisibleRectangle,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,Cyclomatic complexity of the method is 274
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ProcessKey,Cyclomatic complexity of the method is 11
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,IsInputKey,Cyclomatic complexity of the method is 12
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawText,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,Cyclomatic complexity of the method is 41
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawFoldingLines,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseDown,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseMove,Cyclomatic complexity of the method is 11
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PointToPlace,Cyclomatic complexity of the method is 10
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnTextChanged,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,HighlightFoldings,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FindEndOfFoldingBlock,Cyclomatic complexity of the method is 16
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RecalcFoldingLines,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,IncreaseIndent,Cyclomatic complexity of the method is 13
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndent,Cyclomatic complexity of the method is 11
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,HighlightBrackets1,Cyclomatic complexity of the method is 12
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,HighlightBrackets2,Cyclomatic complexity of the method is 15
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnSyntaxHighlight,Cyclomatic complexity of the method is 11
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop_old,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop,Cyclomatic complexity of the method is 16
Complex Method,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,Cyclomatic complexity of the method is 38
Complex Method,FastColoredTextBoxNS,InsertCharCommand,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Commands.cs,Undo,Cyclomatic complexity of the method is 16
Complex Method,FastColoredTextBoxNS,InsertCharCommand,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Commands.cs,InsertChar,Cyclomatic complexity of the method is 29
Complex Method,FastColoredTextBoxNS,FindForm,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FindForm.cs,FindNext,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoUp,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoPageUp,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoDown,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoPageDown,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GetRangesByLinesReversed,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GetEnumerator,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GetFragment,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetCSS,Cyclomatic complexity of the method is 9
Complex Method,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,SaveToFile,Cyclomatic complexity of the method is 12
Long Parameter List,FastColoredTextBoxNS,AutocompleteItem,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteItem.cs,AutocompleteItem,The method has 5 parameters.
Long Parameter List,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteListView,The method has 15 parameters.
Long Parameter List,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Hint,The method has 5 parameters.
Long Parameter List,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,AddHint,The method has 5 parameters.
Long Parameter List,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,AddHint,The method has 5 parameters.
Long Parameter List,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcCutOffs,The method has 6 parameters.
Long Parameter List,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawLineChars,The method has 7 parameters.
Long Parameter List,FastColoredTextBoxNS,AutoIndentEventArgs,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,AutoIndentEventArgs,The method has 5 parameters.
Long Parameter List,FastColoredTextBoxNS,ReplaceTextCommand,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Commands.cs,ReplaceTextCommand,The method has 5 parameters.
Long Parameter List,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,Range,The method has 5 parameters.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,IncreaseIndent,The length of the parameter newSelectionStartCharacterIndex is 31.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndent,The length of the parameter numberOfDeletedWhitespacesOfFirstLine is 37.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndent,The length of the parameter numberOfDeletetWhitespacesOfLastLine is 36.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndent,The length of the parameter newSelectionStartCharacterIndex is 31.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndentOfSingleLine,The length of the parameter currentLeftSelectionStartIndex is 30.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndentOfSingleLine,The length of the parameter whitespacesLeftOfSelectionStartMatch is 36.
Long Identifier,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndentOfSingleLine,The length of the parameter newSelectionStartCharacterIndex is 31.
Long Statement,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,DoAutocomplete,The length of the statement  "	if (forced || (text.Length >= Menu.MinFragmentLength && tb.Selection.IsEmpty /*pops up only if selected range is empty*/&& (tb.Selection.Start > fragment.Start || text.Length == 0/*pops up only if caret is after first letter*/))) { " is 231.
Long Statement,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,OnPaint,The length of the statement  "			using (var selectedBrush = new LinearGradientBrush (new Point (0' y - 3)' new Point (0' y + itemHeight)' Color.Transparent' SelectedColor)) " is 139.
Long Statement,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,DoSelectedVisible,The length of the statement  "		VerticalScroll.Value = Math.Min (VerticalScroll.Maximum' FocussedItemIndex * itemHeight - ClientSize.Height + itemHeight); " is 122.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectTextFileEncoding,The length of the statement  "	byte[] sampleBytes = new byte[HeuristicSampleSize > InputFileStream.Length ? InputFileStream.Length : HeuristicSampleSize]; " is 123.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "	if (((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6) " is 128.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "	if (((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6) " is 128.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "	Regex UTF8Validator = new Regex (@"\A(" + @"[\x09\x0A\x0D\x20-\x7E]" + @"|[\xC2-\xDF][\x80-\xBF]" + @"|\xE0[\xA0-\xBF][\x80-\xBF]" + @"|[\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}" + @"|\xED[\x80-\x9F][\x80-\xBF]" + @"|\xF0[\x90-\xBF][\x80-\xBF]{2}" + @"|[\xF1-\xF3][\x80-\xBF]{3}" + @"|\xF4[\x80-\x8F][\x80-\xBF]{2}" + @")*\z"); " is 319.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "		//If some of the characters were in the upper range (western accented characters)' however' they would likely be mangled to 2-byte by the UTF-8 encoding process. " is 161.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The length of the statement  "		SampleBytes.Length - suspiciousUTF8BytesTotal == 0 || likelyUSASCIIBytesInSample * 1.0 / (SampleBytes.Length - suspiciousUTF8BytesTotal) >= 0.8)) " is 145.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The length of the statement  "		if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F) " is 121.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The length of the statement  "		else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE) " is 126.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The length of the statement  "			if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A) " is 121.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The length of the statement  "			if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E) " is 121.
Long Statement,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The length of the statement  "			if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2) " is 121.
Long Statement,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,The length of the statement  "		sb.AppendFormat ("<font style=\"font-family: {0}' monospace; font-size: {1}pt; line-height: {2}px;\">"' r.tb.Font.Name' r.tb.Font.SizeInPoints' r.tb.CharHeight); " is 161.
Long Statement,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The length of the statement  "		sb.Insert (0' string.Format (@"{{\fonttbl{{\f0\fmodern {0};}}}}{{\fs{1} "' tb.Font.Name' (int)(2 * tb.Font.SizeInPoints)' tb.CharHeight)); " is 138.
Long Statement,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,LayoutHint,The length of the statement  "			hint.HostPanel.Top = tb.LineInfos [hint.Range.Start.iLine + 1].startY - hint.TopPadding - hint.HostPanel.Height - tb.VerticalScroll.Value; " is 138.
Long Statement,FastColoredTextBoxNS,HotkeysEditorForm,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\HotkeysEditorForm.cs,HotkeysEditorForm_FormClosing,The length of the statement  "			if (MessageBox.Show ("Some actions are not assigned!\r\nActions: " + actions + "\r\nPress Yes to save and exit' press No to continue editing"' "Some actions is not assigned"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.No) " is 264.
Long Statement,FastColoredTextBoxNS,PlatformType,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\PlatformType.cs,GetOperationSystemPlatform,The length of the statement  "	if (Environment.OSVersion.Version.Major > 5 || (Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1)) { " is 136.
Long Statement,FastColoredTextBoxNS,HotkeysEditor,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hotkeys.cs,EditValue,The length of the statement  "	if ((provider != null) && (((IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService))) != null)) { " is 125.
Long Statement,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The length of the statement  "	e.Graphics.FillRectangle (new LinearGradientBrush (new Rectangle (0' 0' Width' Height)' BackColor' BackColor2' 270)' new Rectangle (0' 0' Width' Height)); " is 154.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,VBAutoIndentNeeded,The length of the statement  "	if (Regex.IsMatch (args.LineText' @"\b(Class|Property|Enum|Structure|Sub|Function|Namespace|Interface|Get)\b|(Set\s*\()"' RegexOptions.IgnoreCase)) { " is 149.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseXmlDescription,The length of the statement  "		if (brackets.Attributes ["left"] == null || brackets.Attributes ["right"] == null || brackets.Attributes ["left"].Value == "" || brackets.Attributes ["right"].Value == "") { " is 173.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseXmlDescription,The length of the statement  "		if (brackets.Attributes ["left2"] == null || brackets.Attributes ["right2"] == null || brackets.Attributes ["left2"].Value == "" || brackets.Attributes ["right2"].Value == "") { " is 177.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseXmlDescription,The length of the statement  "			desc.bracketsHighlightStrategy = (BracketsHighlightStrategy)Enum.Parse (typeof(BracketsHighlightStrategy)' brackets.Attributes ["strategy"].Value); " is 147.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitCShaprRegex,The length of the statement  "	//CSharpStringRegex = new Regex( @"""""|@""""|''|@"".*?""|(?<!@)(?<range>"".*?[^\\]"")|'.*?[^\\]'"' RegexCompiledOption); " is 121.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitCShaprRegex,The length of the statement  "						"' RegexOptions.ExplicitCapture | RegexOptions.Singleline | RegexOptions.IgnorePatternWhitespace | RegexCompiledOption); " is 120.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitCShaprRegex,The length of the statement  "	CSharpCommentRegex3 = new Regex (@"(/\*.*?\*/)|(.*\*/)"' RegexOptions.Singleline | RegexOptions.RightToLeft | RegexCompiledOption); " is 131.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitCShaprRegex,The length of the statement  "	CSharpKeywordRegex = new Regex (@"\b(abstract|as|base|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|double|else|enum|event|explicit|extern|false|finally|fixed|float|for|foreach|goto|if|implicit|in|int|interface|internal|is|lock|long|namespace|new|null|object|operator|out|override|params|private|protected|public|readonly|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|this|throw|true|try|typeof|uint|ulong|unchecked|unsafe|ushort|using|virtual|void|volatile|while|add|alias|ascending|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b|#region\b|#endregion\b"' RegexCompiledOption); " is 717.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitFShaprRegex,The length of the statement  "	//FSharpStringRegex = new Regex( @"""""|@""""|''|@"".*?""|(?<!@)(?<range>"".*?[^\\]"")|'.*?[^\\]'"' RegexCompiledOption); " is 121.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitFShaprRegex,The length of the statement  "						"' RegexOptions.ExplicitCapture | RegexOptions.Singleline | RegexOptions.IgnorePatternWhitespace | RegexCompiledOption); " is 120.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitFShaprRegex,The length of the statement  "	FSharpCommentRegex3 = new Regex (@"(/\*.*?\*/)|(.*\*/)"' RegexOptions.Singleline | RegexOptions.RightToLeft | RegexCompiledOption); " is 131.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitFShaprRegex,The length of the statement  "	FSharpKeywordRegex = new Regex (@"\b(abstract|and|as|assert|base|begin|bool|break|byte|case|catch|char|checked|class|const|continue|decimal|default|delegate|do|done|downcast|downto|double|elif|else|end|enum|event|excertion|explicit|extern|false|finally|fixed|float|for|foreach|fun|function|goto|if|implicit|in|inline|int|interface|internal|is|lazy|let|lock|long|match|member|module|mutable|namespace|new|null|object|of|open|operator|or|out|override|params|private|protected|public|readonly|rec|ref|return|sbyte|sealed|short|sizeof|stackalloc|static|string|struct|switch|then|this|throw|to|true|try|type|typeof|uint|ulong|unchecked|unsafe|upcast|use|ushort|using|val|virtual|void|volatile|when|while|with|add|alias|ascending|descending|dynamic|from|get|global|group|into|join|let|orderby|partial|remove|select|set|value|var|where|yield)\b|#region\b|#endregion\b"' RegexCompiledOption); " is 884.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitVBRegex,The length of the statement  "	VBClassNameRegex = new Regex (@"\b(Class|Structure|Enum|Interface)[ ]+(?<range>\w+?)\b"' RegexOptions.IgnoreCase | RegexCompiledOption); " is 136.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitVBRegex,The length of the statement  "	VBKeywordRegex = new Regex (@"\b(AddHandler|AddressOf|Alias|And|AndAlso|As|Boolean|ByRef|Byte|ByVal|Call|Case|Catch|CBool|CByte|CChar|CDate|CDbl|CDec|Char|CInt|Class|CLng|CObj|Const|Continue|CSByte|CShort|CSng|CStr|CType|CUInt|CULng|CUShort|Date|Decimal|Declare|Default|Delegate|Dim|DirectCast|Do|Double|Each|Else|ElseIf|End|EndIf|Enum|Erase|Error|Event|Exit|False|Finally|For|Friend|Function|Get|GetType|GetXMLNamespace|Global|GoSub|GoTo|Handles|If|Implements|Imports|In|Inherits|Integer|Interface|Is|IsNot|Let|Lib|Like|Long|Loop|Me|Mod|Module|MustInherit|MustOverride|MyBase|MyClass|Namespace|Narrowing|New|Next|Not|Nothing|NotInheritable|NotOverridable|Object|Of|On|Operator|Option|Optional|Or|OrElse|Overloads|Overridable|Overrides|ParamArray|Partial|Private|Property|Protected|Public|RaiseEvent|ReadOnly|ReDim|REM|RemoveHandler|Resume|Return|SByte|Select|Set|Shadows|Shared|Short|Single|Static|Step|Stop|String|Structure|Sub|SyncLock|Then|Throw|To|True|Try|TryCast|TypeOf|UInteger|ULong|UShort|Using|Variant|Wend|When|While|Widening|With|WithEvents|WriteOnly|Xor|Region)\b|(#Const|#Else|#ElseIf|#End|#If|#Region)\b"' RegexOptions.IgnoreCase | RegexCompiledOption); " is 1169.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,VBSyntaxHighlight,The length of the statement  "	range.SetFoldingMarkers (@"\b(Class|Property|Enum|Structure|Interface)[ \t]+\S+"' @"\bEnd (Class|Property|Enum|Structure|Interface)\b"' RegexOptions.IgnoreCase); " is 161.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,VBSyntaxHighlight,The length of the statement  "	range.SetFoldingMarkers (@"^\s*(?<range>While)[ \t]+\S+"' @"^\s*(?<range>End While)\b"' RegexOptions.Multiline | RegexOptions.IgnoreCase); " is 138.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,VBSyntaxHighlight,The length of the statement  "	range.SetFoldingMarkers (@"(\r|\n|^)[ \t]*(?<range>Get|Set)[ \t]*(\r|\n|$)"' @"\bEnd (Get|Set)\b"' RegexOptions.IgnoreCase); " is 124.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,VBSyntaxHighlight,The length of the statement  "	range.SetFoldingMarkers (@"^\s*(?<range>For|For\s+Each)\b"' @"^\s*(?<range>Next)\b"' RegexOptions.Multiline | RegexOptions.IgnoreCase); " is 135.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,VBSyntaxHighlight,The length of the statement  "	range.SetFoldingMarkers (@"^\s*(?<range>Do)\b"' @"^\s*(?<range>Loop)\b"' RegexOptions.Multiline | RegexOptions.IgnoreCase); " is 123.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitHTMLRegex,The length of the statement  "	HTMLCommentRegex2 = new Regex (@"(<!--.*?-->)|(.*-->)"' RegexOptions.Singleline | RegexOptions.RightToLeft | RegexCompiledOption); " is 130.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitHTMLRegex,The length of the statement  "	HTMLAttrRegex = new Regex (@"(?<range>[\w\d\-]{1'20}?)='[^']*'|(?<range>[\w\d\-]{1'20})=""[^""]*""|(?<range>[\w\d\-]{1'20})=[\w\d\-]{1'20}"' RegexCompiledOption); " is 162.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitHTMLRegex,The length of the statement  "	HTMLAttrValRegex = new Regex (@"[\w\d\-]{1'20}?=(?<range>'[^']*')|[\w\d\-]{1'20}=(?<range>""[^""]*"")|[\w\d\-]{1'20}=(?<range>[\w\d\-]{1'20})"' RegexCompiledOption); " is 165.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitHTMLRegex,The length of the statement  "	HTMLEntityRegex = new Regex (@"\&(amp|gt|lt|nbsp|quot|apos|copy|reg|#[0-9]{1'8}|#x[0-9a-f]{1'8});"' RegexCompiledOption | RegexOptions.IgnoreCase); " is 147.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitSQLRegex,The length of the statement  "	SQLCommentRegex3 = new Regex (@"(/\*.*?\*/)|(.*\*/)"' RegexOptions.Singleline | RegexOptions.RightToLeft | RegexCompiledOption); " is 128.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitSQLRegex,The length of the statement  "	SQLStatementsRegex = new Regex (@"\b(ALTER APPLICATION ROLE|ALTER ASSEMBLY|ALTER ASYMMETRIC KEY|ALTER AUTHORIZATION|ALTER BROKER PRIORITY|ALTER CERTIFICATE|ALTER CREDENTIAL|ALTER CRYPTOGRAPHIC PROVIDER|ALTER DATABASE|ALTER DATABASE AUDIT SPECIFICATION|ALTER DATABASE ENCRYPTION KEY|ALTER ENDPOINT|ALTER EVENT SESSION|ALTER FULLTEXT CATALOG|ALTER FULLTEXT INDEX|ALTER FULLTEXT STOPLIST|ALTER FUNCTION|ALTER INDEX|ALTER LOGIN|ALTER MASTER KEY|ALTER MESSAGE TYPE|ALTER PARTITION FUNCTION|ALTER PARTITION SCHEME|ALTER PROCEDURE|ALTER QUEUE|ALTER REMOTE SERVICE BINDING|ALTER RESOURCE GOVERNOR|ALTER RESOURCE POOL|ALTER ROLE|ALTER ROUTE|ALTER SCHEMA|ALTER SERVER AUDIT|ALTER SERVER AUDIT SPECIFICATION|ALTER SERVICE|ALTER SERVICE MASTER KEY|ALTER SYMMETRIC KEY|ALTER TABLE|ALTER TRIGGER|ALTER USER|ALTER VIEW|ALTER WORKLOAD GROUP|ALTER XML SCHEMA COLLECTION|BULK INSERT|CREATE AGGREGATE|CREATE APPLICATION ROLE|CREATE ASSEMBLY|CREATE ASYMMETRIC KEY|CREATE BROKER PRIORITY|CREATE CERTIFICATE|CREATE CONTRACT|CREATE CREDENTIAL|CREATE CRYPTOGRAPHIC PROVIDER|CREATE DATABASE|CREATE DATABASE AUDIT SPECIFICATION|CREATE DATABASE ENCRYPTION KEY|CREATE DEFAULT|CREATE ENDPOINT|CREATE EVENT NOTIFICATION|CREATE EVENT SESSION|CREATE FULLTEXT CATALOG|CREATE FULLTEXT INDEX|CREATE FULLTEXT STOPLIST|CREATE FUNCTION|CREATE INDEX|CREATE LOGIN|CREATE MASTER KEY|CREATE MESSAGE TYPE|CREATE PARTITION FUNCTION|CREATE PARTITION SCHEME|CREATE PROCEDURE|CREATE QUEUE|CREATE REMOTE SERVICE BINDING|CREATE RESOURCE POOL|CREATE ROLE|CREATE ROUTE|CREATE RULE|CREATE SCHEMA|CREATE SERVER AUDIT|CREATE SERVER AUDIT SPECIFICATION|CREATE SERVICE|CREATE SPATIAL INDEX|CREATE STATISTICS|CREATE SYMMETRIC KEY|CREATE SYNONYM|CREATE TABLE|CREATE TRIGGER|CREATE TYPE|CREATE USER|CREATE VIEW|CREATE WORKLOAD GROUP|CREATE XML INDEX|CREATE XML SCHEMA COLLECTION|DELETE|DISABLE TRIGGER|DROP AGGREGATE|DROP APPLICATION ROLE|DROP ASSEMBLY|DROP ASYMMETRIC KEY|DROP BROKER PRIORITY|DROP CERTIFICATE|DROP CONTRACT|DROP CREDENTIAL|DROP CRYPTOGRAPHIC PROVIDER|DROP DATABASE|DROP DATABASE AUDIT SPECIFICATION|DROP DATABASE ENCRYPTION KEY|DROP DEFAULT|DROP ENDPOINT|DROP EVENT NOTIFICATION|DROP EVENT SESSION|DROP FULLTEXT CATALOG|DROP FULLTEXT INDEX|DROP FULLTEXT STOPLIST|DROP FUNCTION|DROP INDEX|DROP LOGIN|DROP MASTER KEY|DROP MESSAGE TYPE|DROP PARTITION FUNCTION|DROP PARTITION SCHEME|DROP PROCEDURE|DROP QUEUE|DROP REMOTE SERVICE BINDING|DROP RESOURCE POOL|DROP ROLE|DROP ROUTE|DROP RULE|DROP SCHEMA|DROP SERVER AUDIT|DROP SERVER AUDIT SPECIFICATION|DROP SERVICE|DROP SIGNATURE|DROP STATISTICS|DROP SYMMETRIC KEY|DROP SYNONYM|DROP TABLE|DROP TRIGGER|DROP TYPE|DROP USER|DROP VIEW|DROP WORKLOAD GROUP|DROP XML SCHEMA COLLECTION|ENABLE TRIGGER|EXEC|EXECUTE|FROM|INSERT|MERGE|OPTION|OUTPUT|SELECT|TOP|TRUNCATE TABLE|UPDATE|UPDATE STATISTICS|WHERE|WITH)\b"' RegexOptions.IgnoreCase | RegexCompiledOption); " is 2855.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitSQLRegex,The length of the statement  "	SQLKeywordsRegex = new Regex (@"\b(ADD|ALL|AND|ANY|AS|ASC|AUTHORIZATION|BACKUP|BEGIN|BETWEEN|BREAK|BROWSE|BY|CASCADE|CHECK|CHECKPOINT|CLOSE|CLUSTERED|COLLATE|COLUMN|COMMIT|COMPUTE|CONSTRAINT|CONTAINS|CONTINUE|CROSS|CURRENT|CURRENT_DATE|CURRENT_TIME|CURSOR|DATABASE|DBCC|DEALLOCATE|DECLARE|DEFAULT|DENY|DESC|DISK|DISTINCT|DISTRIBUTED|DOUBLE|DUMP|ELSE|END|ERRLVL|ESCAPE|EXCEPT|EXISTS|EXIT|EXTERNAL|FETCH|FILE|FILLFACTOR|FOR|FOREIGN|FREETEXT|FULL|FUNCTION|GOTO|GRANT|GROUP|HAVING|HOLDLOCK|IDENTITY|IDENTITY_INSERT|IDENTITYCOL|IF|IN|INDEX|INNER|INTERSECT|INTO|IS|JOIN|KEY|KILL|LIKE|LINENO|LOAD|NATIONAL|NOCHECK|NONCLUSTERED|NOT|NULL|OF|OFF|OFFSETS|ON|OPEN|OR|ORDER|OUTER|OVER|PERCENT|PIVOT|PLAN|PRECISION|PRIMARY|PRINT|PROC|PROCEDURE|PUBLIC|RAISERROR|READ|READTEXT|RECONFIGURE|REFERENCES|REPLICATION|RESTORE|RESTRICT|RETURN|REVERT|REVOKE|ROLLBACK|ROWCOUNT|ROWGUIDCOL|RULE|SAVE|SCHEMA|SECURITYAUDIT|SET|SHUTDOWN|SOME|STATISTICS|TABLE|TABLESAMPLE|TEXTSIZE|THEN|TO|TRAN|TRANSACTION|TRIGGER|TSEQUAL|UNION|UNIQUE|UNPIVOT|UPDATETEXT|USE|USER|VALUES|VARYING|VIEW|WAITFOR|WHEN|WHILE|WRITETEXT)\b"' RegexOptions.IgnoreCase | RegexCompiledOption); " is 1133.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitSQLRegex,The length of the statement  "	SQLFunctionsRegex = new Regex (@"(@@CONNECTIONS|@@CPU_BUSY|@@CURSOR_ROWS|@@DATEFIRST|@@DATEFIRST|@@DBTS|@@ERROR|@@FETCH_STATUS|@@IDENTITY|@@IDLE|@@IO_BUSY|@@LANGID|@@LANGUAGE|@@LOCK_TIMEOUT|@@MAX_CONNECTIONS|@@MAX_PRECISION|@@NESTLEVEL|@@OPTIONS|@@PACKET_ERRORS|@@PROCID|@@REMSERVER|@@ROWCOUNT|@@SERVERNAME|@@SERVICENAME|@@SPID|@@TEXTSIZE|@@TRANCOUNT|@@VERSION)\b|\b(ABS|ACOS|APP_NAME|ASCII|ASIN|ASSEMBLYPROPERTY|AsymKey_ID|ASYMKEY_ID|asymkeyproperty|ASYMKEYPROPERTY|ATAN|ATN2|AVG|CASE|CAST|CEILING|Cert_ID|Cert_ID|CertProperty|CHAR|CHARINDEX|CHECKSUM_AGG|COALESCE|COL_LENGTH|COL_NAME|COLLATIONPROPERTY|COLLATIONPROPERTY|COLUMNPROPERTY|COLUMNS_UPDATED|COLUMNS_UPDATED|CONTAINSTABLE|CONVERT|COS|COT|COUNT|COUNT_BIG|CRYPT_GEN_RANDOM|CURRENT_TIMESTAMP|CURRENT_TIMESTAMP|CURRENT_USER|CURRENT_USER|CURSOR_STATUS|DATABASE_PRINCIPAL_ID|DATABASE_PRINCIPAL_ID|DATABASEPROPERTY|DATABASEPROPERTYEX|DATALENGTH|DATALENGTH|DATEADD|DATEDIFF|DATENAME|DATEPART|DAY|DB_ID|DB_NAME|DECRYPTBYASYMKEY|DECRYPTBYCERT|DECRYPTBYKEY|DECRYPTBYKEYAUTOASYMKEY|DECRYPTBYKEYAUTOCERT|DECRYPTBYPASSPHRASE|DEGREES|DENSE_RANK|DIFFERENCE|ENCRYPTBYASYMKEY|ENCRYPTBYCERT|ENCRYPTBYKEY|ENCRYPTBYPASSPHRASE|ERROR_LINE|ERROR_MESSAGE|ERROR_NUMBER|ERROR_PROCEDURE|ERROR_SEVERITY|ERROR_STATE|EVENTDATA|EXP|FILE_ID|FILE_IDEX|FILE_NAME|FILEGROUP_ID|FILEGROUP_NAME|FILEGROUPPROPERTY|FILEPROPERTY|FLOOR|fn_helpcollations|fn_listextendedproperty|fn_servershareddrives|fn_virtualfilestats|fn_virtualfilestats|FORMATMESSAGE|FREETEXTTABLE|FULLTEXTCATALOGPROPERTY|FULLTEXTSERVICEPROPERTY|GETANSINULL|GETDATE|GETUTCDATE|GROUPING|HAS_PERMS_BY_NAME|HOST_ID|HOST_NAME|IDENT_CURRENT|IDENT_CURRENT|IDENT_INCR|IDENT_INCR|IDENT_SEED|IDENTITY\(|INDEX_COL|INDEXKEY_PROPERTY|INDEXPROPERTY|IS_MEMBER|IS_OBJECTSIGNED|IS_SRVROLEMEMBER|ISDATE|ISDATE|ISNULL|ISNUMERIC|Key_GUID|Key_GUID|Key_ID|Key_ID|KEY_NAME|KEY_NAME|LEFT|LEN|LOG|LOG10|LOWER|LTRIM|MAX|MIN|MONTH|NCHAR|NEWID|NTILE|NULLIF|OBJECT_DEFINITION|OBJECT_ID|OBJECT_NAME|OBJECT_SCHEMA_NAME|OBJECTPROPERTY|OBJECTPROPERTYEX|OPENDATASOURCE|OPENQUERY|OPENROWSET|OPENXML|ORIGINAL_LOGIN|ORIGINAL_LOGIN|PARSENAME|PATINDEX|PATINDEX|PERMISSIONS|PI|POWER|PUBLISHINGSERVERNAME|PWDCOMPARE|PWDENCRYPT|QUOTENAME|RADIANS|RAND|RANK|REPLACE|REPLICATE|REVERSE|RIGHT|ROUND|ROW_NUMBER|ROWCOUNT_BIG|RTRIM|SCHEMA_ID|SCHEMA_ID|SCHEMA_NAME|SCHEMA_NAME|SCOPE_IDENTITY|SERVERPROPERTY|SESSION_USER|SESSION_USER|SESSIONPROPERTY|SETUSER|SIGN|SignByAsymKey|SignByCert|SIN|SOUNDEX|SPACE|SQL_VARIANT_PROPERTY|SQRT|SQUARE|STATS_DATE|STDEV|STDEVP|STR|STUFF|SUBSTRING|SUM|SUSER_ID|SUSER_NAME|SUSER_SID|SUSER_SNAME|SWITCHOFFSET|SYMKEYPROPERTY|symkeyproperty|sys\.dm_db_index_physical_stats|sys\.fn_builtin_permissions|sys\.fn_my_permissions|SYSDATETIME|SYSDATETIMEOFFSET|SYSTEM_USER|SYSTEM_USER|SYSUTCDATETIME|TAN|TERTIARY_WEIGHTS|TEXTPTR|TODATETIMEOFFSET|TRIGGER_NESTLEVEL|TYPE_ID|TYPE_NAME|TYPEPROPERTY|UNICODE|UPDATE\(|UPPER|USER_ID|USER_NAME|USER_NAME|VAR|VARP|VerifySignedByAsymKey|VerifySignedByCert|XACT_STATE|YEAR)\b"' RegexOptions.IgnoreCase | RegexCompiledOption); " is 3024.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitSQLRegex,The length of the statement  "	SQLTypesRegex = new Regex (@"\b(BIGINT|NUMERIC|BIT|SMALLINT|DECIMAL|SMALLMONEY|INT|TINYINT|MONEY|FLOAT|REAL|DATE|DATETIMEOFFSET|DATETIME2|SMALLDATETIME|DATETIME|TIME|CHAR|VARCHAR|TEXT|NCHAR|NVARCHAR|NTEXT|BINARY|VARBINARY|IMAGE|TIMESTAMP|HIERARCHYID|TABLE|UNIQUEIDENTIFIER|SQL_VARIANT|XML)\b"' RegexOptions.IgnoreCase | RegexCompiledOption); " is 341.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,SQLSyntaxHighlight,The length of the statement  "	range.ClearStyle (CommentStyle' StringStyle' NumberStyle' VariableStyle' StatementsStyle' KeywordStyle' FunctionsStyle' TypesStyle); " is 132.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitPHPRegex,The length of the statement  "	PHPCommentRegex3 = new Regex (@"(/\*.*?\*/)|(.*\*/)"' RegexOptions.Singleline | RegexOptions.RightToLeft | RegexCompiledOption); " is 128.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitPHPRegex,The length of the statement  "	PHPKeywordRegex1 = new Regex (@"\b(die|echo|empty|exit|eval|include|include_once|isset|list|require|require_once|return|print|unset)\b"' RegexCompiledOption); " is 158.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitPHPRegex,The length of the statement  "	PHPKeywordRegex2 = new Regex (@"\b(abstract|and|array|as|break|case|catch|cfunction|class|clone|const|continue|declare|default|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|final|for|foreach|function|global|goto|if|implements|instanceof|interface|namespace|new|or|private|protected|public|static|switch|throw|try|use|var|while|xor)\b"' RegexCompiledOption); " is 388.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitPHPRegex,The length of the statement  "	PHPKeywordRegex3 = new Regex (@"__CLASS__|__DIR__|__FILE__|__LINE__|__FUNCTION__|__METHOD__|__NAMESPACE__"' RegexCompiledOption); " is 129.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitJScriptRegex,The length of the statement  "	JScriptCommentRegex3 = new Regex (@"(/\*.*?\*/)|(.*\*/)"' RegexOptions.Singleline | RegexOptions.RightToLeft | RegexCompiledOption); " is 132.
Long Statement,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitJScriptRegex,The length of the statement  "	JScriptKeywordRegex = new Regex (@"\b(true|false|break|case|catch|const|continue|default|delete|do|else|export|for|function|if|in|instanceof|new|null|return|switch|this|throw|try|var|void|while|with|typeof)\b"' RegexCompiledOption); " is 232.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PrepareHtmlForClipboard,The length of the statement  "	string begin = "Version:0.9\r\nStartHTML:{0:000000}\r\nEndHTML:{1:000000}" + "\r\nStartFragment:{2:000000}\r\nEndFragment:{3:000000}\r\n"; " is 138.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PrepareHtmlForClipboard,The length of the statement  "	string html_begin = "<html>\r\n<head>\r\n" + "<meta http-equiv=\"Content-Type\"" + " content=\"text/html; charset=" + enc.WebName + "\">\r\n" + "<title>HTML clipboard</title>\r\n</head>\r\n<body>\r\n" + "<!--StartFragment-->"; " is 226.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PrepareHtmlForClipboard,The length of the statement  "	string html_total = String.Format (begin' count_begin' count_begin + count_html_begin + count_html + count_html_end' count_begin + count_html_begin' count_begin + count_html_begin + count_html) + html_begin + html + html_end; " is 225.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RecalcWordWrap,The length of the statement  "					CalcCutOffs (li.CutOffPositions' maxCharsPerLine' maxCharsPerLine - li.wordWrapIndent' ImeAllowed' charWrap' lines [iLine]); " is 124.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,IsCJKLetter,The length of the statement  "	return (code >= 0x3300 && code <= 0x33FF) || (code >= 0xFE30 && code <= 0xFE4F) || (code >= 0xF900 && code <= 0xFAFF) || (code >= 0x2E80 && code <= 0x2EFF) || (code >= 0x31C0 && code <= 0x31EF) || (code >= 0x4E00 && code <= 0x9FFF) || (code >= 0x3400 && code <= 0x4DBF) || (code >= 0x3200 && code <= 0x32FF) || (code >= 0x2460 && code <= 0x24FF) || (code >= 0x3040 && code <= 0x309F) || (code >= 0x2F00 && code <= 0x2FDF) || (code >= 0x31A0 && code <= 0x31BF) || (code >= 0x4DC0 && code <= 0x4DFF) || (code >= 0x3100 && code <= 0x312F) || (code >= 0x30A0 && code <= 0x30FF) || (code >= 0x31F0 && code <= 0x31FF) || (code >= 0x2FF0 && code <= 0x2FFF) || (code >= 0x1100 && code <= 0x11FF) || (code >= 0xA960 && code <= 0xA97F) || (code >= 0xD7B0 && code <= 0xD7FF) || (code >= 0x3130 && code <= 0x318F) || (code >= 0xAC00 && code <= 0xD7AF); " is 840.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoSelectionVisible,The length of the statement  "	DoVisibleRectangle (new Rectangle (PlaceToPoint (new Place (0' Selection.End.iLine))' new Size (2 * CharWidth' 2 * CharHeight))); " is 129.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoRangeVisible,The length of the statement  "	range.End = new Place (range.End.iChar' Math.Min (range.End.iLine' range.Start.iLine + ClientSize.Height / CharHeight)); " is 120.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ProcessKey,The length of the statement  "		if (!HotkeysMapping.ContainsKey (keyData) || (HotkeysMapping [keyData] != FCTBAction.MacroExecute && HotkeysMapping [keyData] != FCTBAction.MacroRecord)) " is 153.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ProcessKey,The length of the statement  "	if (modifiers != Keys.None && modifiers != Keys.Shift && modifiers != (Keys.Control | Keys.Alt) && //ALT+CTRL is special chars (AltGr) " is 134.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcAutoIndent,The length of the statement  "	var a = new AutoIndentEventArgs (iLine' lines [iLine].Text' iLine > 0 ? lines [iLine - 1].Text : ""' TabLength' indent); " is 120.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcAutoIndentShiftByCodeFolding,The length of the statement  "	if (string.IsNullOrEmpty (lines [args.iLine].FoldingEndMarker) && !string.IsNullOrEmpty (lines [args.iLine].FoldingStartMarker)) { " is 130.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcAutoIndentShiftByCodeFolding,The length of the statement  "	if (!string.IsNullOrEmpty (lines [args.iLine].FoldingEndMarker) && string.IsNullOrEmpty (lines [args.iLine].FoldingStartMarker)) { " is 130.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "	Brush currentLineBrush = new SolidBrush (Color.FromArgb (CurrentLineColor.A == 255 ? 50 : CurrentLineColor.A' CurrentLineColor)); " is 129.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "		e.Graphics.FillRectangle (paddingBrush' LeftIndent - HorizontalScroll.Value - 2' 0' Math.Max (0' Paddings.Left - 1)' ClientSize.Height); " is 136.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "		e.Graphics.DrawLine (servicePen' new Point (LeftIndent + Paddings.Left + PreferredLineWidth * CharWidth - HorizontalScroll.Value + 1' textAreaRect.Top + 1)' new Point (LeftIndent + Paddings.Left + PreferredLineWidth * CharWidth - HorizontalScroll.Value + 1' textAreaRect.Bottom - 1)); " is 284.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "				e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount)); " is 150.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1)); " is 122.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)); " is 130.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle)); " is 156.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "				e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft)); " is 223.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "		if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker)) " is 149.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8))); " is 121.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "		if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker)) " is 149.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1); " is 173.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "				e.Graphics.DrawRectangle (pen' Rectangle.FromLTRB (Math.Min (p1.X' p2.X) - 1' Math.Min (p1.Y' p2.Y)' Math.Max (p1.X' p2.X)' Math.Max (p1.Y' p2.Y) + CharHeight)); " is 161.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2; " is 126.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The length of the statement  "			int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight; " is 207.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawLineChars,The length of the statement  "		FoldedBlockStyle.Draw (gr' new Point (startX + firstChar * CharWidth' y)' new Range (this' from + firstChar' iLine' from + lastChar + 1' iLine)); " is 145.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawLineChars,The length of the statement  "				FlushRendering (gr' currentStyleIndex' new Point (startX + (iLastFlushedChar + 1) * CharWidth' y)' new Range (this' from + iLastFlushedChar + 1' iLine' from + iChar' iLine)); " is 174.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawLineChars,The length of the statement  "		FlushRendering (gr' currentStyleIndex' new Point (startX + (iLastFlushedChar + 1) * CharWidth' y)' new Range (this' from + iLastFlushedChar + 1' iLine' from + lastChar + 1' iLine)); " is 181.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoScrollVertical,The length of the statement  "	var ea = new ScrollEventArgs (direction > 0 ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement' VerticalScroll.Value' newScrollPos' ScrollOrientation.VerticalScroll); " is 181.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PlaceToPosition,The length of the statement  "	if (point.iLine < 0 || point.iLine >= lines.Count || point.iChar >= lines [point.iLine].Count + Environment.NewLine.Length) " is 123.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,IncreaseIndent,The length of the statement  "		int newSelectionEndCharacterIndex = currentSelection.End.iChar + (currentSelection.End.iLine == to ? this.TabLength : 0); " is 121.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndent,The length of the statement  "		int newSelectionStartCharacterIndex = Math.Max (0' currentSelection.Start.iChar - numberOfDeletedWhitespacesOfFirstLine); " is 121.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndentOfSingleLine,The length of the statement  "	Match whitespacesLeftOfSelectionStartMatch = new Regex (@"\s*"' RegexOptions.RightToLeft).Match (lineText' currentLeftSelectionStartIndex); " is 139.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DecreaseIndentOfSingleLine,The length of the statement  "		numberOfCharactersToRemove = (remainder != 0) ? Math.Min (remainder' countOfWhitespaces) : Math.Min (this.TabLength' countOfWhitespaces); " is 137.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,HighlightBrackets2,The length of the statement  "		rightBracketPosition = new Range (this' range.Start.iChar - 1' range.Start.iLine' range.Start.iChar' range.Start.iLine); " is 120.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,Print,The length of the statement  "	HTML = "<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\"><head><title>" + PrepareHtmlText (settings.Title) + "</title></head>" + HTML + "<br>" + SelectHTMLRangeScript (); " is 192.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop_old,The length of the statement  "		insertRange = new Range (this' place' new Place (place.iChar' place.iLine + draggedRange.End.iLine - draggedRange.Start.iLine)) { " is 129.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop_old,The length of the statement  "			Selection = new Range (this' place' new Place (place.iChar + draggedRange.End.iChar - draggedRange.Start.iChar' place.iLine + draggedRange.End.iLine - draggedRange.Start.iLine)) { " is 179.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop,The length of the statement  "				insertRange = new Range (this' place' new Place (place.iChar' place.iLine + draggedRange.End.iLine - draggedRange.Start.iLine)) { " is 129.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop,The length of the statement  "				if ((copyMode == false) && (place.iLine >= dR.Start.iLine) && (place.iLine <= dR.End.iLine) && (place.iChar >= dR.End.iChar)) { " is 127.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RestoreScrollsAfterMiddleClickScrollingMode,The length of the statement  "	var xea = new ScrollEventArgs (ScrollEventType.ThumbPosition' HorizontalScroll.Value' middleClickScrollingOriginScroll.X' ScrollOrientation.HorizontalScroll); " is 158.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RestoreScrollsAfterMiddleClickScrollingMode,The length of the statement  "	var yea = new ScrollEventArgs (ScrollEventType.ThumbPosition' VerticalScroll.Value' middleClickScrollingOriginScroll.Y' ScrollOrientation.VerticalScroll); " is 154.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The length of the statement  "	var xea = new ScrollEventArgs (xScrollOffset < 0 ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement' HorizontalScroll.Value' HorizontalScroll.Value + xScrollOffset' ScrollOrientation.HorizontalScroll); " is 216.
Long Statement,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The length of the statement  "	var yea = new ScrollEventArgs (yScrollOffset < 0 ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement' VerticalScroll.Value' VerticalScroll.Value + yScrollOffset' ScrollOrientation.VerticalScroll); " is 210.
Long Statement,FastColoredTextBoxNS,InsertCharCommand,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Commands.cs,Execute,The length of the statement  "	ts.NeedRecalc (new TextSource.TextChangedEventArgs (ts.CurrentTB.Selection.Start.iLine' ts.CurrentTB.Selection.Start.iLine)); " is 125.
Long Statement,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoUp,The length of the statement  "		preferedPos = start.iChar - tb.LineInfos [start.iLine].GetWordWrapStringStartPosition (tb.LineInfos [start.iLine].GetWordWrapStringIndex (start.iChar)); " is 152.
Long Statement,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoPageUp,The length of the statement  "		preferedPos = start.iChar - tb.LineInfos [start.iLine].GetWordWrapStringStartPosition (tb.LineInfos [start.iLine].GetWordWrapStringIndex (start.iChar)); " is 152.
Long Statement,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoDown,The length of the statement  "		preferedPos = start.iChar - tb.LineInfos [start.iLine].GetWordWrapStringStartPosition (tb.LineInfos [start.iLine].GetWordWrapStringIndex (start.iChar)); " is 152.
Long Statement,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GoPageDown,The length of the statement  "		preferedPos = start.iChar - tb.LineInfos [start.iLine].GetWordWrapStringStartPosition (tb.LineInfos [start.iLine].GetWordWrapStringIndex (start.iChar)); " is 152.
Long Statement,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,GetIntersectionWith_ColumnSelectionMode,The length of the statement  "	return new Range (tb' rect.iStartChar' range.Start.iLine' rect.iEndChar' range.Start.iLine).GetIntersectionWith (range); " is 120.
Long Statement,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The length of the statement  "		gr.FillRectangle (BackgroundBrush' position.X' position.Y' (range.End.iChar - range.Start.iChar) * range.tb.CharWidth' range.tb.CharHeight); " is 140.
Long Statement,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The length of the statement  "		range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (firstNonSpaceSymbolX' position.Y' position.X + (range.End.iChar - range.Start.iChar) * range.tb.CharWidth - firstNonSpaceSymbolX' range.tb.CharHeight))); " is 235.
Long Statement,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The length of the statement  "		range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (range.tb.LeftIndent + 2' position.Y' 2 * range.tb.CharHeight' range.tb.CharHeight))); " is 167.
Long Statement,FastColoredTextBoxNS,SelectionStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The length of the statement  "		Rectangle rect = new Rectangle (position.X' position.Y' (range.End.iChar - range.Start.iChar) * range.tb.CharWidth' range.tb.CharHeight); " is 137.
Long Statement,FastColoredTextBoxNS,MarkerStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The length of the statement  "		Rectangle rect = new Rectangle (position.X' position.Y' (range.End.iChar - range.Start.iChar) * range.tb.CharWidth' range.tb.CharHeight); " is 137.
Long Statement,FastColoredTextBoxNS,ShortcutStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The length of the statement  "	AddVisualMarker (range.tb' new StyleVisualMarker (new Rectangle (p.X - range.tb.CharWidth' p.Y' range.tb.CharWidth' range.tb.CharHeight)' this)); " is 145.
Long Statement,FastColoredTextBoxNS,CollapseFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The length of the statement  "	gr.DrawLine (pen' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2); " is 135.
Long Statement,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The length of the statement  "	gr.DrawLine (Pens.Red' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2); " is 140.
Long Statement,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The length of the statement  "	gr.DrawLine (Pens.Red' rectangle.Left + rectangle.Width / 2' rectangle.Top + 2' rectangle.Left + rectangle.Width / 2' rectangle.Bottom - 2); " is 140.
Complex Conditional,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,DoAutocomplete,The conditional expression  "forced || (text.Length >= Menu.MinFragmentLength && tb.Selection.IsEmpty /*pops up only if selected range is empty*/&& (tb.Selection.Start > fragment.Start || text.Length == 0/*pops up only if caret is after first letter*/))"  is complex.
Complex Conditional,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The conditional expression  "BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && (BOMBytes.Length < 4 || BOMBytes [2] != 0 || BOMBytes [3] != 0)"  is complex.
Complex Conditional,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The conditional expression  "BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && BOMBytes [2] == 0 && BOMBytes [3] == 0"  is complex.
Complex Conditional,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The conditional expression  "BOMBytes [0] == 0 && BOMBytes [1] == 0 && BOMBytes [2] == 0xfe && BOMBytes [3] == 0xff"  is complex.
Complex Conditional,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,IsCommonUSASCIIByte,The conditional expression  "testByte == 0x0A //lf  || testByte == 0x0D //cr  || testByte == 0x09 //tab  || (testByte >= 0x20 && testByte <= 0x2F) //common punctuation  || (testByte >= 0x30 && testByte <= 0x39) //digits  || (testByte >= 0x3A && testByte <= 0x40) //common punctuation  || (testByte >= 0x41 && testByte <= 0x5A) //capital letters  || (testByte >= 0x5B && testByte <= 0x60) //common punctuation  || (testByte >= 0x61 && testByte <= 0x7A) //lowercase letters  || (testByte >= 0x7B && testByte <= 0x7E)"  is complex.
Complex Conditional,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseXmlDescription,The conditional expression  "brackets.Attributes ["left"] == null || brackets.Attributes ["right"] == null || brackets.Attributes ["left"].Value == "" || brackets.Attributes ["right"].Value == """  is complex.
Complex Conditional,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseXmlDescription,The conditional expression  "brackets.Attributes ["left2"] == null || brackets.Attributes ["right2"] == null || brackets.Attributes ["left2"].Value == "" || brackets.Attributes ["right2"].Value == """  is complex.
Complex Conditional,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ProcessKey,The conditional expression  "c == '\b' && (modifiers == Keys.None || modifiers == Keys.Shift || (modifiers & Keys.Alt) != 0)"  is complex.
Complex Conditional,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ProcessKey,The conditional expression  "modifiers != Keys.None && modifiers != Keys.Shift && modifiers != (Keys.Control | Keys.Alt) && //ALT+CTRL is special chars (AltGr)  modifiers != (Keys.Shift | Keys.Control | Keys.Alt) && //SHIFT + ALT + CTRL is special chars (AltGr)  (modifiers != (Keys.Alt) || char.IsLetterOrDigit (c))"  is complex.
Complex Conditional,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The conditional expression  "(Focused || IsDragDrop) && car.X >= LeftIndent && CaretVisible"  is complex.
Complex Conditional,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseDown,The conditional expression  "Selection.IsEmpty || !Selection.Contains (p) || this [p.iLine].Count <= p.iChar || ReadOnly"  is complex.
Complex Conditional,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoDragDrop,The conditional expression  "(copyMode == false) && (place.iLine >= dR.Start.iLine) && (place.iLine <= dR.End.iLine) && (place.iChar >= dR.End.iChar)"  is complex.
Complex Conditional,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The conditional expression  "signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4"  is complex.
Complex Conditional,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The conditional expression  "signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF"  is complex.
Virtual Method Call from Constructor,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Hint,The constructor "Hint" calls a virtual method "Init".
Virtual Method Call from Constructor,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The constructor "FastColoredTextBox" calls a virtual method "InsertLine".
Virtual Method Call from Constructor,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The constructor "FastColoredTextBox" calls a virtual method "CreateLine".
Virtual Method Call from Constructor,FastColoredTextBoxNS,TextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\TextSource.cs,TextSource,The constructor "TextSource" calls a virtual method "InitDefaultStyle".
Empty Catch Block,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,SetClipboard,The method has an empty catch block.
Empty Catch Block,FastColoredTextBoxNS,MultiRangeCommand,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Commands.cs,Execute,The method has an empty catch block.
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteMenu,The following statement contains a magic number: host.Margin = new Padding (2' 2' 2' 2);  
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteMenu,The following statement contains a magic number: host.Margin = new Padding (2' 2' 2' 2);  
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteMenu,The following statement contains a magic number: host.Margin = new Padding (2' 2' 2' 2);  
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteMenu,The following statement contains a magic number: host.Margin = new Padding (2' 2' 2' 2);  
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteMenu,The following statement contains a magic number: MinFragmentLength = 2;  
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,CalcSize,The following statement contains a magic number: Size = new System.Drawing.Size (listView.Size.Width + 4' listView.Size.Height + 4);  
Magic Number,FastColoredTextBoxNS,AutocompleteMenu,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,CalcSize,The following statement contains a magic number: Size = new System.Drawing.Size (listView.Size.Width + 4' listView.Size.Height + 4);  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteListView,The following statement contains a magic number: base.Font = new Font (FontFamily.GenericSansSerif' 9);  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteListView,The following statement contains a magic number: itemHeight = Font.Height + 2;  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteListView,The following statement contains a magic number: MaximumSize = new Size (Size.Width' 180);  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteListView,The following statement contains a magic number: AppearInterval = 500;  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,AutocompleteListView,The following statement contains a magic number: ToolTipDuration = 3000;  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,DoAutocomplete,The following statement contains a magic number: point.Offset (2' tb.CharHeight);  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,OnPaint,The following statement contains a magic number: for (int i = startI; i < finishI; i++) {  	y = i * itemHeight - VerticalScroll.Value;  	var item = visibleItems [i];  	if (item.BackColor != Color.Transparent)  		using (var brush = new SolidBrush (item.BackColor))  			e.Graphics.FillRectangle (brush' 1' y' ClientSize.Width - 1 - 1' itemHeight - 1);  	if (ImageList != null && visibleItems [i].ImageIndex >= 0)  		e.Graphics.DrawImage (ImageList.Images [item.ImageIndex]' 1' y);  	if (i == FocussedItemIndex)  		using (var selectedBrush = new LinearGradientBrush (new Point (0' y - 3)' new Point (0' y + itemHeight)' Color.Transparent' SelectedColor))  			using (var pen = new Pen (SelectedColor)) {  				e.Graphics.FillRectangle (selectedBrush' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  				e.Graphics.DrawRectangle (pen' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  			}  	if (i == hoveredItemIndex)  		using (var pen = new Pen (HoveredColor))  			e.Graphics.DrawRectangle (pen' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  	using (var brush = new SolidBrush (item.ForeColor != Color.Transparent ? item.ForeColor : ForeColor))  		e.Graphics.DrawString (item.ToString ()' Font' brush' leftPadding' y);  }  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,OnPaint,The following statement contains a magic number: if (i == FocussedItemIndex)  	using (var selectedBrush = new LinearGradientBrush (new Point (0' y - 3)' new Point (0' y + itemHeight)' Color.Transparent' SelectedColor))  		using (var pen = new Pen (SelectedColor)) {  			e.Graphics.FillRectangle (selectedBrush' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  			e.Graphics.DrawRectangle (pen' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  		}  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,OnPaint,The following statement contains a magic number: using (var selectedBrush = new LinearGradientBrush (new Point (0' y - 3)' new Point (0' y + itemHeight)' Color.Transparent' SelectedColor))  	using (var pen = new Pen (SelectedColor)) {  		e.Graphics.FillRectangle (selectedBrush' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  		e.Graphics.DrawRectangle (pen' leftPadding' y' ClientSize.Width - 1 - leftPadding' itemHeight - 1);  	}  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following statement contains a magic number: if (keyModifiers == Keys.None)  	switch (keyData) {  	case Keys.Down:  		SelectNext (+1);  		return true;  	case Keys.PageDown:  		SelectNext (+10);  		return true;  	case Keys.Up:  		SelectNext (-1);  		return true;  	case Keys.PageUp:  		SelectNext (-10);  		return true;  	case Keys.Enter:  		OnSelecting ();  		return true;  	case Keys.Tab:  		if (!AllowTabKey)  			break;  		OnSelecting ();  		return true;  	case Keys.Escape:  		Menu.Close ();  		return true;  	}  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following statement contains a magic number: if (keyModifiers == Keys.None)  	switch (keyData) {  	case Keys.Down:  		SelectNext (+1);  		return true;  	case Keys.PageDown:  		SelectNext (+10);  		return true;  	case Keys.Up:  		SelectNext (-1);  		return true;  	case Keys.PageUp:  		SelectNext (-10);  		return true;  	case Keys.Enter:  		OnSelecting ();  		return true;  	case Keys.Tab:  		if (!AllowTabKey)  			break;  		OnSelecting ();  		return true;  	case Keys.Escape:  		Menu.Close ();  		return true;  	}  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following statement contains a magic number: switch (keyData) {  case Keys.Down:  	SelectNext (+1);  	return true;  case Keys.PageDown:  	SelectNext (+10);  	return true;  case Keys.Up:  	SelectNext (-1);  	return true;  case Keys.PageUp:  	SelectNext (-10);  	return true;  case Keys.Enter:  	OnSelecting ();  	return true;  case Keys.Tab:  	if (!AllowTabKey)  		break;  	OnSelecting ();  	return true;  case Keys.Escape:  	Menu.Close ();  	return true;  }  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following statement contains a magic number: switch (keyData) {  case Keys.Down:  	SelectNext (+1);  	return true;  case Keys.PageDown:  	SelectNext (+10);  	return true;  case Keys.Up:  	SelectNext (-1);  	return true;  case Keys.PageUp:  	SelectNext (-10);  	return true;  case Keys.Enter:  	OnSelecting ();  	return true;  case Keys.Tab:  	if (!AllowTabKey)  		break;  	OnSelecting ();  	return true;  case Keys.Escape:  	Menu.Close ();  	return true;  }  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following statement contains a magic number: SelectNext (+10);  
Magic Number,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following statement contains a magic number: SelectNext (-10);  
Magic Number,FastColoredTextBoxNS,Bookmark,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Bookmarks.cs,Paint,The following statement contains a magic number: using (var brush = new LinearGradientBrush (new Rectangle (0' lineRect.Top' size' size)' Color.White' Color' 45))  	gr.FillEllipse (brush' 0' lineRect.Top' size' size);  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (50' ForeColor)))  	using (var pen = new Pen (brush' 1 / zoom)) {  		var rect = new Rectangle (0' y1' (int)((ClientSize.Width - 1) / zoom)' y2 - y1);  		e.Graphics.FillRectangle (brush' rect);  		e.Graphics.DrawRectangle (pen' rect);  	}  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: if (scrollbarVisible) {  	e.Graphics.ResetTransform ();  	e.Graphics.SmoothingMode = SmoothingMode.None;  	using (var brush = new SolidBrush (Color.FromArgb (200' ForeColor))) {  		var rect = new RectangleF (ClientSize.Width - 3' ClientSize.Height * sp1' 2' ClientSize.Height * (sp2 - sp1));  		e.Graphics.FillRectangle (brush' rect);  	}  }  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: if (scrollbarVisible) {  	e.Graphics.ResetTransform ();  	e.Graphics.SmoothingMode = SmoothingMode.None;  	using (var brush = new SolidBrush (Color.FromArgb (200' ForeColor))) {  		var rect = new RectangleF (ClientSize.Width - 3' ClientSize.Height * sp1' 2' ClientSize.Height * (sp2 - sp1));  		e.Graphics.FillRectangle (brush' rect);  	}  }  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: if (scrollbarVisible) {  	e.Graphics.ResetTransform ();  	e.Graphics.SmoothingMode = SmoothingMode.None;  	using (var brush = new SolidBrush (Color.FromArgb (200' ForeColor))) {  		var rect = new RectangleF (ClientSize.Width - 3' ClientSize.Height * sp1' 2' ClientSize.Height * (sp2 - sp1));  		e.Graphics.FillRectangle (brush' rect);  	}  }  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (200' ForeColor))) {  	var rect = new RectangleF (ClientSize.Width - 3' ClientSize.Height * sp1' 2' ClientSize.Height * (sp2 - sp1));  	e.Graphics.FillRectangle (brush' rect);  }  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (200' ForeColor))) {  	var rect = new RectangleF (ClientSize.Width - 3' ClientSize.Height * sp1' 2' ClientSize.Height * (sp2 - sp1));  	e.Graphics.FillRectangle (brush' rect);  }  
Magic Number,FastColoredTextBoxNS,DocumentMap,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\DocumentMap.cs,OnPaint,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (200' ForeColor))) {  	var rect = new RectangleF (ClientSize.Width - 3' ClientSize.Height * sp1' 2' ClientSize.Height * (sp2 - sp1));  	e.Graphics.FillRectangle (brush' rect);  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes.Length < 2)  	return null;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && (BOMBytes.Length < 4 || BOMBytes [2] != 0 || BOMBytes [3] != 0))  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && (BOMBytes.Length < 4 || BOMBytes [2] != 0 || BOMBytes [3] != 0))  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && (BOMBytes.Length < 4 || BOMBytes [2] != 0 || BOMBytes [3] != 0))  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes.Length < 3)  	return null;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0xef && BOMBytes [1] == 0xbb && BOMBytes [2] == 0xbf)  	return Encoding.UTF8;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0x2b && BOMBytes [1] == 0x2f && BOMBytes [2] == 0x76)  	return Encoding.UTF7;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes.Length < 4)  	return null;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && BOMBytes [2] == 0 && BOMBytes [3] == 0)  	return Encoding.UTF32;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0xff && BOMBytes [1] == 0xfe && BOMBytes [2] == 0 && BOMBytes [3] == 0)  	return Encoding.UTF32;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0 && BOMBytes [1] == 0 && BOMBytes [2] == 0xfe && BOMBytes [3] == 0xff)  	return Encoding.GetEncoding (12001);  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0 && BOMBytes [1] == 0 && BOMBytes [2] == 0xfe && BOMBytes [3] == 0xff)  	return Encoding.GetEncoding (12001);  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: if (BOMBytes [0] == 0 && BOMBytes [1] == 0 && BOMBytes [2] == 0xfe && BOMBytes [3] == 0xff)  	return Encoding.GetEncoding (12001);  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectBOMBytes,The following statement contains a magic number: return Encoding.GetEncoding (12001);  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: while (currentPos < SampleBytes.Length) {  	//binary null distribution  	if (SampleBytes [currentPos] == 0) {  		if (currentPos % 2 == 0)  			evenBinaryNullsInSample++;  		else  			oddBinaryNullsInSample++;  	}  	//likely US-ASCII characters  	if (IsCommonUSASCIIByte (SampleBytes [currentPos]))  		likelyUSASCIIBytesInSample++;  	//suspicious sequences (look like UTF-8)  	if (skipUTF8Bytes == 0) {  		int lengthFound = DetectSuspiciousUTF8SequenceLength (SampleBytes' currentPos);  		if (lengthFound > 0) {  			suspiciousUTF8SequenceCount++;  			suspiciousUTF8BytesTotal += lengthFound;  			skipUTF8Bytes = lengthFound - 1;  		}  	}  	else {  		skipUTF8Bytes--;  	}  	currentPos++;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (SampleBytes [currentPos] == 0) {  	if (currentPos % 2 == 0)  		evenBinaryNullsInSample++;  	else  		oddBinaryNullsInSample++;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (currentPos % 2 == 0)  	evenBinaryNullsInSample++;  else  	oddBinaryNullsInSample++;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.Unicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (((oddBinaryNullsInSample * 2.0) / SampleBytes.Length) < 0.2 && ((evenBinaryNullsInSample * 2.0) / SampleBytes.Length) > 0.6)  	return Encoding.BigEndianUnicode;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (UTF8Validator.IsMatch (potentiallyMangledString)) {  	//Unfortunately' just the fact that it CAN be UTF-8 doesn't tell you much about probabilities.  	//If all the characters are in the 0-127 range' no harm done' most western charsets are same as UTF-8 in these ranges.  	//If some of the characters were in the upper range (western accented characters)' however' they would likely be mangled to 2-byte by the UTF-8 encoding process.  	// So' we need to play stats.  	// The "Random" likelihood of any pair of randomly generated characters being one   	//   of these "suspicious" character sequences is:  	//     128 / (256 * 256) = 0.2%.  	//  	// In western text data' that is SIGNIFICANTLY reduced - most text data stays in the <127   	//   character range' so we assume that more than 1 in 500'000 of these character   	//   sequences indicates UTF-8. The number 500'000 is completely arbitrary - so sue me.  	//  	// We can only assume these character sequences will be rare if we ALSO assume that this  	//   IS in fact western text - in which case the bulk of the UTF-8 encoded data (that is   	//   not already suspicious sequences) should be plain US-ASCII bytes. This' I   	//   arbitrarily decided' should be 80% (a random distribution' eg binary data' would yield   	//   approx 40%' so the chances of hitting this threshold by accident in random data are   	//   VERY low).   	if ((suspiciousUTF8SequenceCount * 500000.0 / SampleBytes.Length >= 1) //suspicious sequences  	&& (//all suspicious' so cannot evaluate proportion of US-Ascii  	SampleBytes.Length - suspiciousUTF8BytesTotal == 0 || likelyUSASCIIBytesInSample * 1.0 / (SampleBytes.Length - suspiciousUTF8BytesTotal) >= 0.8))  		return Encoding.UTF8;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if (UTF8Validator.IsMatch (potentiallyMangledString)) {  	//Unfortunately' just the fact that it CAN be UTF-8 doesn't tell you much about probabilities.  	//If all the characters are in the 0-127 range' no harm done' most western charsets are same as UTF-8 in these ranges.  	//If some of the characters were in the upper range (western accented characters)' however' they would likely be mangled to 2-byte by the UTF-8 encoding process.  	// So' we need to play stats.  	// The "Random" likelihood of any pair of randomly generated characters being one   	//   of these "suspicious" character sequences is:  	//     128 / (256 * 256) = 0.2%.  	//  	// In western text data' that is SIGNIFICANTLY reduced - most text data stays in the <127   	//   character range' so we assume that more than 1 in 500'000 of these character   	//   sequences indicates UTF-8. The number 500'000 is completely arbitrary - so sue me.  	//  	// We can only assume these character sequences will be rare if we ALSO assume that this  	//   IS in fact western text - in which case the bulk of the UTF-8 encoded data (that is   	//   not already suspicious sequences) should be plain US-ASCII bytes. This' I   	//   arbitrarily decided' should be 80% (a random distribution' eg binary data' would yield   	//   approx 40%' so the chances of hitting this threshold by accident in random data are   	//   VERY low).   	if ((suspiciousUTF8SequenceCount * 500000.0 / SampleBytes.Length >= 1) //suspicious sequences  	&& (//all suspicious' so cannot evaluate proportion of US-Ascii  	SampleBytes.Length - suspiciousUTF8BytesTotal == 0 || likelyUSASCIIBytesInSample * 1.0 / (SampleBytes.Length - suspiciousUTF8BytesTotal) >= 0.8))  		return Encoding.UTF8;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if ((suspiciousUTF8SequenceCount * 500000.0 / SampleBytes.Length >= 1) //suspicious sequences  && (//all suspicious' so cannot evaluate proportion of US-Ascii  SampleBytes.Length - suspiciousUTF8BytesTotal == 0 || likelyUSASCIIBytesInSample * 1.0 / (SampleBytes.Length - suspiciousUTF8BytesTotal) >= 0.8))  	return Encoding.UTF8;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectUnicodeInByteSampleByHeuristics,The following statement contains a magic number: if ((suspiciousUTF8SequenceCount * 500000.0 / SampleBytes.Length >= 1) //suspicious sequences  && (//all suspicious' so cannot evaluate proportion of US-Ascii  SampleBytes.Length - suspiciousUTF8BytesTotal == 0 || likelyUSASCIIBytesInSample * 1.0 / (SampleBytes.Length - suspiciousUTF8BytesTotal) >= 0.8))  	return Encoding.UTF8;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC2) {  	if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x81 || SampleBytes [currentPos + 1] == 0x8D || SampleBytes [currentPos + 1] == 0x8F)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x90 || SampleBytes [currentPos + 1] == 0x9D)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] >= 0xA0 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC3) {  	if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] >= 0x80 && SampleBytes [currentPos + 1] <= 0xBF)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC5) {  	if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  		lengthFound = 2;  	else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x92 || SampleBytes [currentPos + 1] == 0x93)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0xA0 || SampleBytes [currentPos + 1] == 0xA1)  	lengthFound = 2;  else if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0xB8 || SampleBytes [currentPos + 1] == 0xBD || SampleBytes [currentPos + 1] == 0xBE)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xC6) {  	if (SampleBytes [currentPos + 1] == 0x92)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x92)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 1 && SampleBytes [currentPos] == 0xCB) {  	if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  		lengthFound = 2;  }  else if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x86 || SampleBytes [currentPos + 1] == 0x9C)  	lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 2;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes.Length >= currentPos + 2 && SampleBytes [currentPos] == 0xE2) {  	if (SampleBytes [currentPos + 1] == 0x80) {  		if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xA6)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB0)  			lengthFound = 3;  		if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  			lengthFound = 3;  	}  	else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  		lengthFound = 3;  	else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  }  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x80) {  	if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xA6)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB0)  		lengthFound = 3;  	if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  		lengthFound = 3;  }  else if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x93 || SampleBytes [currentPos + 2] == 0x94)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x98 || SampleBytes [currentPos + 2] == 0x99 || SampleBytes [currentPos + 2] == 0x9A)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0x9C || SampleBytes [currentPos + 2] == 0x9D || SampleBytes [currentPos + 2] == 0x9E)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xA0 || SampleBytes [currentPos + 2] == 0xA1 || SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xA6)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xA6)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xB0)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xB0)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 2] == 0xB9 || SampleBytes [currentPos + 2] == 0xBA)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x82 && SampleBytes [currentPos + 2] == 0xAC)  	lengthFound = 3;  else if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: if (SampleBytes [currentPos + 1] == 0x84 && SampleBytes [currentPos + 2] == 0xA2)  	lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,EncodingDetector,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\EncodingDetector.cs,DetectSuspiciousUTF8SequenceLength,The following statement contains a magic number: lengthFound = 3;  
Magic Number,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,The following statement contains a magic number: foreach (Place p in r) {  	Char c = r.tb [p.iLine] [p.iChar];  	if (c.style != currentStyleId) {  		Flush (sb' tempSB' currentStyleId);  		currentStyleId = c.style;  		styles [currentStyleId] = null;  	}  	if (p.iLine != currentLine) {  		for (int i = currentLine; i < p.iLine; i++) {  			tempSB.Append (UseBr ? "<br>" : "");  			if (IncludeLineNumbers)  				tempSB.AppendFormat ("<span class=lineNumber>{0}</span>  "' i + 2);  		}  		currentLine = p.iLine;  		hasNonSpace = false;  	}  	switch (c.c) {  	case ' ':  		if ((hasNonSpace || !UseForwardNbsp) && !UseNbsp)  			goto default;  		tempSB.Append ("&nbsp;");  		break;  	case '<':  		tempSB.Append ("&lt;");  		break;  	case '>':  		tempSB.Append ("&gt;");  		break;  	case '&':  		tempSB.Append ("&amp;");  		break;  	default:  		hasNonSpace = true;  		tempSB.Append (c.c);  		break;  	}  }  
Magic Number,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,The following statement contains a magic number: if (p.iLine != currentLine) {  	for (int i = currentLine; i < p.iLine; i++) {  		tempSB.Append (UseBr ? "<br>" : "");  		if (IncludeLineNumbers)  			tempSB.AppendFormat ("<span class=lineNumber>{0}</span>  "' i + 2);  	}  	currentLine = p.iLine;  	hasNonSpace = false;  }  
Magic Number,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,The following statement contains a magic number: for (int i = currentLine; i < p.iLine; i++) {  	tempSB.Append (UseBr ? "<br>" : "");  	if (IncludeLineNumbers)  		tempSB.AppendFormat ("<span class=lineNumber>{0}</span>  "' i + 2);  }  
Magic Number,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,The following statement contains a magic number: if (IncludeLineNumbers)  	tempSB.AppendFormat ("<span class=lineNumber>{0}</span>  "' i + 2);  
Magic Number,FastColoredTextBoxNS,ExportToHTML,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToHTML.cs,GetHtml,The following statement contains a magic number: tempSB.AppendFormat ("<span class=lineNumber>{0}</span>  "' i + 2);  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: foreach (Place p in r) {  	Char c = r.tb [p.iLine] [p.iChar];  	if (c.style != currentStyleId) {  		Flush (sb' tempSB' currentStyleId);  		currentStyleId = c.style;  		styles [currentStyleId] = null;  	}  	if (p.iLine != currentLine) {  		for (int i = currentLine; i < p.iLine; i++) {  			tempSB.AppendLine (@"\line");  			if (IncludeLineNumbers)  				tempSB.AppendFormat (@"{{\cf{1} {0}}}\tab"' i + 2' lineNumberColor);  		}  		currentLine = p.iLine;  	}  	switch (c.c) {  	case '\\':  		tempSB.Append (@"\\");  		break;  	case '{':  		tempSB.Append (@"\{");  		break;  	case '}':  		tempSB.Append (@"\}");  		break;  	default:  		var ch = c.c;  		var code = (int)ch;  		if (code < 128)  			tempSB.Append (c.c);  		else  			tempSB.AppendFormat (@"{{\u{0}}}"' code);  		break;  	}  }  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: foreach (Place p in r) {  	Char c = r.tb [p.iLine] [p.iChar];  	if (c.style != currentStyleId) {  		Flush (sb' tempSB' currentStyleId);  		currentStyleId = c.style;  		styles [currentStyleId] = null;  	}  	if (p.iLine != currentLine) {  		for (int i = currentLine; i < p.iLine; i++) {  			tempSB.AppendLine (@"\line");  			if (IncludeLineNumbers)  				tempSB.AppendFormat (@"{{\cf{1} {0}}}\tab"' i + 2' lineNumberColor);  		}  		currentLine = p.iLine;  	}  	switch (c.c) {  	case '\\':  		tempSB.Append (@"\\");  		break;  	case '{':  		tempSB.Append (@"\{");  		break;  	case '}':  		tempSB.Append (@"\}");  		break;  	default:  		var ch = c.c;  		var code = (int)ch;  		if (code < 128)  			tempSB.Append (c.c);  		else  			tempSB.AppendFormat (@"{{\u{0}}}"' code);  		break;  	}  }  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: if (p.iLine != currentLine) {  	for (int i = currentLine; i < p.iLine; i++) {  		tempSB.AppendLine (@"\line");  		if (IncludeLineNumbers)  			tempSB.AppendFormat (@"{{\cf{1} {0}}}\tab"' i + 2' lineNumberColor);  	}  	currentLine = p.iLine;  }  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: for (int i = currentLine; i < p.iLine; i++) {  	tempSB.AppendLine (@"\line");  	if (IncludeLineNumbers)  		tempSB.AppendFormat (@"{{\cf{1} {0}}}\tab"' i + 2' lineNumberColor);  }  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: if (IncludeLineNumbers)  	tempSB.AppendFormat (@"{{\cf{1} {0}}}\tab"' i + 2' lineNumberColor);  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: tempSB.AppendFormat (@"{{\cf{1} {0}}}\tab"' i + 2' lineNumberColor);  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: switch (c.c) {  case '\\':  	tempSB.Append (@"\\");  	break;  case '{':  	tempSB.Append (@"\{");  	break;  case '}':  	tempSB.Append (@"\}");  	break;  default:  	var ch = c.c;  	var code = (int)ch;  	if (code < 128)  		tempSB.Append (c.c);  	else  		tempSB.AppendFormat (@"{{\u{0}}}"' code);  	break;  }  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: if (code < 128)  	tempSB.Append (c.c);  else  	tempSB.AppendFormat (@"{{\u{0}}}"' code);  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: if (UseOriginalFont) {  	sb.Insert (0' string.Format (@"{{\fonttbl{{\f0\fmodern {0};}}}}{{\fs{1} "' tb.Font.Name' (int)(2 * tb.Font.SizeInPoints)' tb.CharHeight));  	sb.AppendLine (@"}");  }  
Magic Number,FastColoredTextBoxNS,ExportToRTF,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\ExportToRTF.cs,GetRtf,The following statement contains a magic number: sb.Insert (0' string.Format (@"{{\fonttbl{{\f0\fmodern {0};}}}}{{\fs{1} "' tb.Font.Name' (int)(2 * tb.Font.SizeInPoints)' tb.CharHeight));  
Magic Number,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,LayoutHint,The following statement contains a magic number: if (hint.Dock == DockStyle.Fill) {  	hint.Width = tb.ClientSize.Width - tb.LeftIndent - 2;  	hint.HostPanel.Left = tb.LeftIndent;  }  else {  	var p1 = tb.PlaceToPoint (hint.Range.Start);  	var p2 = tb.PlaceToPoint (hint.Range.End);  	var cx = (p1.X + p2.X) / 2;  	hint.HostPanel.Left = Math.Max (tb.LeftIndent' cx - hint.HostPanel.Width / 2);  }  
Magic Number,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,LayoutHint,The following statement contains a magic number: if (hint.Dock == DockStyle.Fill) {  	hint.Width = tb.ClientSize.Width - tb.LeftIndent - 2;  	hint.HostPanel.Left = tb.LeftIndent;  }  else {  	var p1 = tb.PlaceToPoint (hint.Range.Start);  	var p2 = tb.PlaceToPoint (hint.Range.End);  	var cx = (p1.X + p2.X) / 2;  	hint.HostPanel.Left = Math.Max (tb.LeftIndent' cx - hint.HostPanel.Width / 2);  }  
Magic Number,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,LayoutHint,The following statement contains a magic number: if (hint.Dock == DockStyle.Fill) {  	hint.Width = tb.ClientSize.Width - tb.LeftIndent - 2;  	hint.HostPanel.Left = tb.LeftIndent;  }  else {  	var p1 = tb.PlaceToPoint (hint.Range.Start);  	var p2 = tb.PlaceToPoint (hint.Range.End);  	var cx = (p1.X + p2.X) / 2;  	hint.HostPanel.Left = Math.Max (tb.LeftIndent' cx - hint.HostPanel.Width / 2);  }  
Magic Number,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,LayoutHint,The following statement contains a magic number: hint.Width = tb.ClientSize.Width - tb.LeftIndent - 2;  
Magic Number,FastColoredTextBoxNS,Hints,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,LayoutHint,The following statement contains a magic number: hint.HostPanel.Left = Math.Max (tb.LeftIndent' cx - hint.HostPanel.Width / 2);  
Magic Number,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Init,The following statement contains a magic number: if (InnerControl != null) {  	HostPanel.Controls.Add (InnerControl);  	HostPanel.Width = InnerControl.Width + 2;  	HostPanel.Height = InnerControl.Height + 2;  	InnerControl.Dock = DockStyle.Fill;  	InnerControl.Visible = true;  	BackColor = SystemColors.Control;  }  else {  	HostPanel.Height = Range.tb.CharHeight + 5;  }  
Magic Number,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Init,The following statement contains a magic number: if (InnerControl != null) {  	HostPanel.Controls.Add (InnerControl);  	HostPanel.Width = InnerControl.Width + 2;  	HostPanel.Height = InnerControl.Height + 2;  	InnerControl.Dock = DockStyle.Fill;  	InnerControl.Visible = true;  	BackColor = SystemColors.Control;  }  else {  	HostPanel.Height = Range.tb.CharHeight + 5;  }  
Magic Number,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Init,The following statement contains a magic number: if (InnerControl != null) {  	HostPanel.Controls.Add (InnerControl);  	HostPanel.Width = InnerControl.Width + 2;  	HostPanel.Height = InnerControl.Height + 2;  	InnerControl.Dock = DockStyle.Fill;  	InnerControl.Visible = true;  	BackColor = SystemColors.Control;  }  else {  	HostPanel.Height = Range.tb.CharHeight + 5;  }  
Magic Number,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Init,The following statement contains a magic number: HostPanel.Width = InnerControl.Width + 2;  
Magic Number,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Init,The following statement contains a magic number: HostPanel.Height = InnerControl.Height + 2;  
Magic Number,FastColoredTextBoxNS,Hint,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hints.cs,Init,The following statement contains a magic number: HostPanel.Height = Range.tb.CharHeight + 5;  
Magic Number,FastColoredTextBoxNS,HotkeysEditorForm,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\HotkeysEditorForm.cs,dgv_RowsAdded,The following statement contains a magic number: cell = (dgv [2' e.RowIndex] as DataGridViewComboBoxCell);  
Magic Number,FastColoredTextBoxNS,PlatformType,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\PlatformType.cs,GetOperationSystemPlatform,The following statement contains a magic number: if (Environment.OSVersion.Version.Major > 5 || (Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1)) {  	GetNativeSystemInfo (ref sysInfo);  }  // else use GetSystemInfo  else {  	GetSystemInfo (ref sysInfo);  }  
Magic Number,FastColoredTextBoxNS,PlatformType,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\PlatformType.cs,GetOperationSystemPlatform,The following statement contains a magic number: if (Environment.OSVersion.Version.Major > 5 || (Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1)) {  	GetNativeSystemInfo (ref sysInfo);  }  // else use GetSystemInfo  else {  	GetSystemInfo (ref sysInfo);  }  
Magic Number,FastColoredTextBoxNS,HotkeysMapping,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hotkeys.cs,ToString,The following statement contains a magic number: if (sb.Length > 1)  	sb.Remove (sb.Length - 2' 2);  
Magic Number,FastColoredTextBoxNS,HotkeysMapping,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hotkeys.cs,ToString,The following statement contains a magic number: if (sb.Length > 1)  	sb.Remove (sb.Length - 2' 2);  
Magic Number,FastColoredTextBoxNS,HotkeysMapping,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hotkeys.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,FastColoredTextBoxNS,HotkeysMapping,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Hotkeys.cs,ToString,The following statement contains a magic number: sb.Remove (sb.Length - 2' 2);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,Ruler,The following statement contains a magic number: MinimumSize = new Size (0' 24);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,Ruler,The following statement contains a magic number: MaximumSize = new Size (int.MaxValue / 2' 24);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,Ruler,The following statement contains a magic number: MaximumSize = new Size (int.MaxValue / 2' 24);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (new LinearGradientBrush (new Rectangle (0' 0' Width' Height)' BackColor' BackColor2' 270)' new Rectangle (0' 0' Width' Height));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	using (var textBrush = new SolidBrush (ForeColor))  		for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  			if (column % 10 == 0)  				e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  			e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  		}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	using (var textBrush = new SolidBrush (ForeColor))  		for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  			if (column % 10 == 0)  				e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  			e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  		}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	using (var textBrush = new SolidBrush (ForeColor))  		for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  			if (column % 10 == 0)  				e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  			e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  		}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	using (var textBrush = new SolidBrush (ForeColor))  		for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  			if (column % 10 == 0)  				e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  			e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  		}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var textBrush = new SolidBrush (ForeColor))  	for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  		if (column % 10 == 0)  			e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  		e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  	}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var textBrush = new SolidBrush (ForeColor))  	for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  		if (column % 10 == 0)  			e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  		e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  	}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var textBrush = new SolidBrush (ForeColor))  	for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  		if (column % 10 == 0)  			e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  		e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  	}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var textBrush = new SolidBrush (ForeColor))  	for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  		if (column % 10 == 0)  			e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  		e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  	}  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  	if (column % 10 == 0)  		e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  	e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  	if (column % 10 == 0)  		e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  	e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  	if (column % 10 == 0)  		e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  	e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: for (float x = zeroPoint.X; x < Right; x += columnWidth' ++column) {  	if (column % 10 == 0)  		e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  	e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: if (column % 10 == 0)  	e.Graphics.DrawString (column.ToString ()' Font' textBrush' x' 0f' sf);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' (int)x' fontSize.Height + (column % 5 == 0 ? 1 : 3)' (int)x' Height - 4);  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (TickColor))  	e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 3' Height - 3)' new Point (car.X + 3' Height - 3));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: using (var pen = new Pen (CaretTickColor)) {  	e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  	e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  }  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X - 2' fontSize.Height + 3)' new Point (car.X - 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X' fontSize.Height + 1)' new Point (car.X' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,Ruler,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Ruler.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (pen' new Point (car.X + 2' fontSize.Height + 3)' new Point (car.X + 2' Height - 4));  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,CSharpAutoIndentNeeded,The following statement contains a magic number: if (Regex.IsMatch (args.LineText' @"^\s*(case|default)\b.*:\s*($|//)")) {  	args.Shift = -args.TabLength / 2;  	return;  }  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,CSharpAutoIndentNeeded,The following statement contains a magic number: args.Shift = -args.TabLength / 2;  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseColor,The following statement contains a magic number: if (s.StartsWith ("#")) {  	if (s.Length <= 7)  		return Color.FromArgb (255' Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier)));  	else  		return Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier));  }  else  	return Color.FromName (s);  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseColor,The following statement contains a magic number: if (s.StartsWith ("#")) {  	if (s.Length <= 7)  		return Color.FromArgb (255' Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier)));  	else  		return Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier));  }  else  	return Color.FromName (s);  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseColor,The following statement contains a magic number: if (s.Length <= 7)  	return Color.FromArgb (255' Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier)));  else  	return Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier));  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseColor,The following statement contains a magic number: if (s.Length <= 7)  	return Color.FromArgb (255' Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier)));  else  	return Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier));  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,ParseColor,The following statement contains a magic number: return Color.FromArgb (255' Color.FromArgb (Int32.Parse (s.Substring (1)' NumberStyles.AllowHexSpecifier)));  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,RestoreBrackets,The following statement contains a magic number: tb.LeftBracket2 = oldBrackets [2];  
Magic Number,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,RestoreBrackets,The following statement contains a magic number: tb.RightBracket2 = oldBrackets [3];  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: TabLength = 4;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: BracketsStyle = new MarkerStyle (new SolidBrush (Color.FromArgb (80' Color.Lime)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: BracketsStyle2 = new MarkerStyle (new SolidBrush (Color.FromArgb (60' Color.Red)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: DelayedEventsInterval = 100;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: DelayedTextChangedInterval = 100;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: DisabledColor = Color.FromArgb (100' 180' 180' 180);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: DisabledColor = Color.FromArgb (100' 180' 180' 180);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: DisabledColor = Color.FromArgb (100' 180' 180' 180);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: DisabledColor = Color.FromArgb (100' 180' 180' 180);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FastColoredTextBox,The following statement contains a magic number: timer3.Interval = 500;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnToolTip,The following statement contains a magic number: if (Math.Abs (p.X - lastMouseCoord.X) > CharWidth * 2 || Math.Abs (p.Y - lastMouseCoord.Y) > CharHeight * 2)  	return;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnToolTip,The following statement contains a magic number: if (Math.Abs (p.X - lastMouseCoord.X) > CharWidth * 2 || Math.Abs (p.Y - lastMouseCoord.Y) > CharHeight * 2)  	return;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnCharSizeChanged,The following statement contains a magic number: VerticalScroll.LargeChange = 10 * charHeight;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,GetStylesOfChar,The following statement contains a magic number: if (place.iLine < LinesCount && place.iChar < this [place.iLine].Count) {  	#if Styles32  	                var s = (uint) this[place].style;                 for (int i = 0; i < 32; i++)                     if ((s & ((uint) 1) << i) != 0)                         result.Add(Styles[i]); #else  	var s = (ushort)this [place].style;  	for (int i = 0; i < 16; i++)  		if ((s & ((ushort)1) << i) != 0)  			result.Add (Styles [i]);  	#endif  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,GetStylesOfChar,The following statement contains a magic number: for (int i = 0; i < 16; i++)  	if ((s & ((ushort)1) << i) != 0)  		result.Add (Styles [i]);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,SetClipboard,The following statement contains a magic number: try {  	/*                     while (GetOpenClipboardWindow() != IntPtr.Zero)                         Thread.Sleep(0);*/CloseClipboard ();  	Clipboard.SetDataObject (data' true' 5' 100);  }  catch (ExternalException) {  	//occurs if some other process holds open clipboard  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,SetClipboard,The following statement contains a magic number: try {  	/*                     while (GetOpenClipboardWindow() != IntPtr.Zero)                         Thread.Sleep(0);*/CloseClipboard ();  	Clipboard.SetDataObject (data' true' 5' 100);  }  catch (ExternalException) {  	//occurs if some other process holds open clipboard  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,SetClipboard,The following statement contains a magic number: Clipboard.SetDataObject (data' true' 5' 100);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,SetClipboard,The following statement contains a magic number: Clipboard.SetDataObject (data' true' 5' 100);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcMinAutosizeWidth,The following statement contains a magic number: minWidth = LeftIndent + (maxLineLength) * CharWidth + 2 + Paddings.Left + Paddings.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcMinAutosizeWidth,The following statement contains a magic number: if (wordWrap)  	switch (WordWrapMode) {  	case WordWrapMode.WordWrapControlWidth:  	case WordWrapMode.CharWrapControlWidth:  		maxLineLength = Math.Min (maxLineLength' (ClientSize.Width - LeftIndent - Paddings.Left - Paddings.Right) / CharWidth);  		minWidth = 0;  		break;  	case WordWrapMode.WordWrapPreferredWidth:  	case WordWrapMode.CharWrapPreferredWidth:  		maxLineLength = Math.Min (maxLineLength' PreferredLineWidth);  		minWidth = LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  		break;  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcMinAutosizeWidth,The following statement contains a magic number: switch (WordWrapMode) {  case WordWrapMode.WordWrapControlWidth:  case WordWrapMode.CharWrapControlWidth:  	maxLineLength = Math.Min (maxLineLength' (ClientSize.Width - LeftIndent - Paddings.Left - Paddings.Right) / CharWidth);  	minWidth = 0;  	break;  case WordWrapMode.WordWrapPreferredWidth:  case WordWrapMode.CharWrapPreferredWidth:  	maxLineLength = Math.Min (maxLineLength' PreferredLineWidth);  	minWidth = LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  	break;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcMinAutosizeWidth,The following statement contains a magic number: minWidth = LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,GetMaxLineWordWrapedWidth,The following statement contains a magic number: if (wordWrap)  	switch (wordWrapMode) {  	case WordWrapMode.WordWrapControlWidth:  	case WordWrapMode.CharWrapControlWidth:  		return ClientSize.Width;  	case WordWrapMode.WordWrapPreferredWidth:  	case WordWrapMode.CharWrapPreferredWidth:  		return LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,GetMaxLineWordWrapedWidth,The following statement contains a magic number: switch (wordWrapMode) {  case WordWrapMode.WordWrapControlWidth:  case WordWrapMode.CharWrapControlWidth:  	return ClientSize.Width;  case WordWrapMode.WordWrapPreferredWidth:  case WordWrapMode.CharWrapPreferredWidth:  	return LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,GetMaxLineWordWrapedWidth,The following statement contains a magic number: return LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoCaretVisible,The following statement contains a magic number: DoVisibleRectangle (new Rectangle (car' new Size (2 * CharWidth' 2 * CharHeight)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoCaretVisible,The following statement contains a magic number: DoVisibleRectangle (new Rectangle (car' new Size (2 * CharWidth' 2 * CharHeight)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoSelectionVisible,The following statement contains a magic number: DoVisibleRectangle (new Rectangle (PlaceToPoint (new Place (0' Selection.End.iLine))' new Size (2 * CharWidth' 2 * CharHeight)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoSelectionVisible,The following statement contains a magic number: DoVisibleRectangle (new Rectangle (PlaceToPoint (new Place (0' Selection.End.iLine))' new Size (2 * CharWidth' 2 * CharHeight)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoSelectionVisible,The following statement contains a magic number: car.Offset (-CharWidth' -ClientSize.Height / 2);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoRangeVisible,The following statement contains a magic number: if (tryToCentre) {  	p.Offset (0' -ClientSize.Height / 2);  	h = ClientSize.Height;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoRangeVisible,The following statement contains a magic number: p.Offset (0' -ClientSize.Height / 2);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoRangeVisible,The following statement contains a magic number: DoVisibleRectangle (new Rectangle (p' new Size (2 * CharWidth' h)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,The following statement contains a magic number: switch (action) {  case FCTBAction.ZoomIn:  	ChangeFontSize (2);  	break;  case FCTBAction.ZoomOut:  	ChangeFontSize (-2);  	break;  case FCTBAction.ZoomNormal:  	RestoreFontSize ();  	break;  case FCTBAction.ScrollDown:  	DoScrollVertical (1' -1);  	break;  case FCTBAction.ScrollUp:  	DoScrollVertical (1' 1);  	break;  case FCTBAction.GoToDialog:  	ShowGoToDialog ();  	break;  case FCTBAction.FindDialog:  	ShowFindDialog ();  	break;  case FCTBAction.FindChar:  	findCharMode = true;  	break;  case FCTBAction.FindNext:  	if (findForm == null || findForm.tbFind.Text == "")  		ShowFindDialog ();  	else  		findForm.FindNext (findForm.tbFind.Text);  	break;  case FCTBAction.ReplaceDialog:  	ShowReplaceDialog ();  	break;  case FCTBAction.Copy:  	Copy ();  	break;  case FCTBAction.CommentSelected:  	CommentSelected ();  	break;  case FCTBAction.Cut:  	if (!Selection.ReadOnly)  		Cut ();  	break;  case FCTBAction.Paste:  	if (!Selection.ReadOnly)  		Paste ();  	break;  case FCTBAction.SelectAll:  	Selection.SelectAll ();  	break;  case FCTBAction.Undo:  	if (!ReadOnly)  		Undo ();  	break;  case FCTBAction.Redo:  	if (!ReadOnly)  		Redo ();  	break;  case FCTBAction.LowerCase:  	if (!Selection.ReadOnly)  		LowerCase ();  	break;  case FCTBAction.UpperCase:  	if (!Selection.ReadOnly)  		UpperCase ();  	break;  case FCTBAction.IndentDecrease:  	if (!Selection.ReadOnly)  		DecreaseIndent ();  	break;  case FCTBAction.IndentIncrease:  	if (!Selection.ReadOnly)  		IncreaseIndent ();  	break;  case FCTBAction.NavigateBackward:  	NavigateBackward ();  	break;  case FCTBAction.NavigateForward:  	NavigateForward ();  	break;  case FCTBAction.UnbookmarkLine:  	UnbookmarkLine (Selection.Start.iLine);  	break;  case FCTBAction.BookmarkLine:  	BookmarkLine (Selection.Start.iLine);  	break;  case FCTBAction.GoNextBookmark:  	GotoNextBookmark (Selection.Start.iLine);  	break;  case FCTBAction.GoPrevBookmark:  	GotoPrevBookmark (Selection.Start.iLine);  	break;  case FCTBAction.ClearWordLeft:  	if (OnKeyPressing ('\b'))  		//KeyPress event processed key  		break;  	if (!Selection.ReadOnly) {  		if (!Selection.IsEmpty)  			ClearSelected ();  		Selection.GoWordLeft (true);  		if (!Selection.ReadOnly)  			ClearSelected ();  	}  	OnKeyPressed ('\b');  	break;  case FCTBAction.ReplaceMode:  	if (!ReadOnly)  		isReplaceMode = !isReplaceMode;  	break;  case FCTBAction.DeleteCharRight:  	if (!Selection.ReadOnly) {  		if (OnKeyPressing ((char)0xff))  			//KeyPress event processed key  			break;  		if (!Selection.IsEmpty)  			ClearSelected ();  		else {  			//if line contains only spaces then delete line  			if (this [Selection.Start.iLine].StartSpacesCount == this [Selection.Start.iLine].Count)  				RemoveSpacesAfterCaret ();  			if (!Selection.IsReadOnlyRightChar ())  				if (Selection.GoRightThroughFolded ()) {  					int iLine = Selection.Start.iLine;  					InsertChar ('\b');  					//if removed \n then trim spaces  					if (iLine != Selection.Start.iLine && AutoIndent)  						if (Selection.Start.iChar > 0)  							RemoveSpacesAfterCaret ();  				}  		}  		OnKeyPressed ((char)0xff);  	}  	break;  case FCTBAction.ClearWordRight:  	if (OnKeyPressing ((char)0xff))  		//KeyPress event processed key  		break;  	if (!Selection.ReadOnly) {  		if (!Selection.IsEmpty)  			ClearSelected ();  		Selection.GoWordRight (true);  		if (!Selection.ReadOnly)  			ClearSelected ();  	}  	OnKeyPressed ((char)0xff);  	break;  case FCTBAction.GoWordLeft:  	Selection.GoWordLeft (false);  	break;  case FCTBAction.GoWordLeftWithSelection:  	Selection.GoWordLeft (true);  	break;  case FCTBAction.GoLeft:  	Selection.GoLeft (false);  	break;  case FCTBAction.GoLeftWithSelection:  	Selection.GoLeft (true);  	break;  case FCTBAction.GoLeft_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoLeft_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.GoWordRight:  	Selection.GoWordRight (false);  	break;  case FCTBAction.GoWordRightWithSelection:  	Selection.GoWordRight (true);  	break;  case FCTBAction.GoRight:  	Selection.GoRight (false);  	break;  case FCTBAction.GoRightWithSelection:  	Selection.GoRight (true);  	break;  case FCTBAction.GoRight_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoRight_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.GoUp:  	Selection.GoUp (false);  	ScrollLeft ();  	break;  case FCTBAction.GoUpWithSelection:  	Selection.GoUp (true);  	ScrollLeft ();  	break;  case FCTBAction.GoUp_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoUp_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.MoveSelectedLinesUp:  	if (!Selection.ColumnSelectionMode)  		MoveSelectedLinesUp ();  	break;  case FCTBAction.GoDown:  	Selection.GoDown (false);  	ScrollLeft ();  	break;  case FCTBAction.GoDownWithSelection:  	Selection.GoDown (true);  	ScrollLeft ();  	break;  case FCTBAction.GoDown_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoDown_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.MoveSelectedLinesDown:  	if (!Selection.ColumnSelectionMode)  		MoveSelectedLinesDown ();  	break;  case FCTBAction.GoPageUp:  	Selection.GoPageUp (false);  	ScrollLeft ();  	break;  case FCTBAction.GoPageUpWithSelection:  	Selection.GoPageUp (true);  	ScrollLeft ();  	break;  case FCTBAction.GoPageDown:  	Selection.GoPageDown (false);  	ScrollLeft ();  	break;  case FCTBAction.GoPageDownWithSelection:  	Selection.GoPageDown (true);  	ScrollLeft ();  	break;  case FCTBAction.GoFirstLine:  	Selection.GoFirst (false);  	break;  case FCTBAction.GoFirstLineWithSelection:  	Selection.GoFirst (true);  	break;  case FCTBAction.GoHome:  	GoHome (false);  	ScrollLeft ();  	break;  case FCTBAction.GoHomeWithSelection:  	GoHome (true);  	ScrollLeft ();  	break;  case FCTBAction.GoLastLine:  	Selection.GoLast (false);  	break;  case FCTBAction.GoLastLineWithSelection:  	Selection.GoLast (true);  	break;  case FCTBAction.GoEnd:  	Selection.GoEnd (false);  	break;  case FCTBAction.GoEndWithSelection:  	Selection.GoEnd (true);  	break;  case FCTBAction.ClearHints:  	ClearHints ();  	if (MacrosManager != null)  		MacrosManager.IsRecording = false;  	break;  case FCTBAction.MacroRecord:  	if (MacrosManager != null) {  		if (MacrosManager.AllowMacroRecordingByUser)  			MacrosManager.IsRecording = !MacrosManager.IsRecording;  		if (MacrosManager.IsRecording)  			MacrosManager.ClearMacros ();  	}  	break;  case FCTBAction.MacroExecute:  	if (MacrosManager != null) {  		MacrosManager.IsRecording = false;  		MacrosManager.ExecuteMacros ();  	}  	break;  case FCTBAction.CustomAction1:  case FCTBAction.CustomAction2:  case FCTBAction.CustomAction3:  case FCTBAction.CustomAction4:  case FCTBAction.CustomAction5:  case FCTBAction.CustomAction6:  case FCTBAction.CustomAction7:  case FCTBAction.CustomAction8:  case FCTBAction.CustomAction9:  case FCTBAction.CustomAction10:  case FCTBAction.CustomAction11:  case FCTBAction.CustomAction12:  case FCTBAction.CustomAction13:  case FCTBAction.CustomAction14:  case FCTBAction.CustomAction15:  case FCTBAction.CustomAction16:  case FCTBAction.CustomAction17:  case FCTBAction.CustomAction18:  case FCTBAction.CustomAction19:  case FCTBAction.CustomAction20:  	OnCustomAction (new CustomActionEventArgs (action));  	break;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,The following statement contains a magic number: switch (action) {  case FCTBAction.ZoomIn:  	ChangeFontSize (2);  	break;  case FCTBAction.ZoomOut:  	ChangeFontSize (-2);  	break;  case FCTBAction.ZoomNormal:  	RestoreFontSize ();  	break;  case FCTBAction.ScrollDown:  	DoScrollVertical (1' -1);  	break;  case FCTBAction.ScrollUp:  	DoScrollVertical (1' 1);  	break;  case FCTBAction.GoToDialog:  	ShowGoToDialog ();  	break;  case FCTBAction.FindDialog:  	ShowFindDialog ();  	break;  case FCTBAction.FindChar:  	findCharMode = true;  	break;  case FCTBAction.FindNext:  	if (findForm == null || findForm.tbFind.Text == "")  		ShowFindDialog ();  	else  		findForm.FindNext (findForm.tbFind.Text);  	break;  case FCTBAction.ReplaceDialog:  	ShowReplaceDialog ();  	break;  case FCTBAction.Copy:  	Copy ();  	break;  case FCTBAction.CommentSelected:  	CommentSelected ();  	break;  case FCTBAction.Cut:  	if (!Selection.ReadOnly)  		Cut ();  	break;  case FCTBAction.Paste:  	if (!Selection.ReadOnly)  		Paste ();  	break;  case FCTBAction.SelectAll:  	Selection.SelectAll ();  	break;  case FCTBAction.Undo:  	if (!ReadOnly)  		Undo ();  	break;  case FCTBAction.Redo:  	if (!ReadOnly)  		Redo ();  	break;  case FCTBAction.LowerCase:  	if (!Selection.ReadOnly)  		LowerCase ();  	break;  case FCTBAction.UpperCase:  	if (!Selection.ReadOnly)  		UpperCase ();  	break;  case FCTBAction.IndentDecrease:  	if (!Selection.ReadOnly)  		DecreaseIndent ();  	break;  case FCTBAction.IndentIncrease:  	if (!Selection.ReadOnly)  		IncreaseIndent ();  	break;  case FCTBAction.NavigateBackward:  	NavigateBackward ();  	break;  case FCTBAction.NavigateForward:  	NavigateForward ();  	break;  case FCTBAction.UnbookmarkLine:  	UnbookmarkLine (Selection.Start.iLine);  	break;  case FCTBAction.BookmarkLine:  	BookmarkLine (Selection.Start.iLine);  	break;  case FCTBAction.GoNextBookmark:  	GotoNextBookmark (Selection.Start.iLine);  	break;  case FCTBAction.GoPrevBookmark:  	GotoPrevBookmark (Selection.Start.iLine);  	break;  case FCTBAction.ClearWordLeft:  	if (OnKeyPressing ('\b'))  		//KeyPress event processed key  		break;  	if (!Selection.ReadOnly) {  		if (!Selection.IsEmpty)  			ClearSelected ();  		Selection.GoWordLeft (true);  		if (!Selection.ReadOnly)  			ClearSelected ();  	}  	OnKeyPressed ('\b');  	break;  case FCTBAction.ReplaceMode:  	if (!ReadOnly)  		isReplaceMode = !isReplaceMode;  	break;  case FCTBAction.DeleteCharRight:  	if (!Selection.ReadOnly) {  		if (OnKeyPressing ((char)0xff))  			//KeyPress event processed key  			break;  		if (!Selection.IsEmpty)  			ClearSelected ();  		else {  			//if line contains only spaces then delete line  			if (this [Selection.Start.iLine].StartSpacesCount == this [Selection.Start.iLine].Count)  				RemoveSpacesAfterCaret ();  			if (!Selection.IsReadOnlyRightChar ())  				if (Selection.GoRightThroughFolded ()) {  					int iLine = Selection.Start.iLine;  					InsertChar ('\b');  					//if removed \n then trim spaces  					if (iLine != Selection.Start.iLine && AutoIndent)  						if (Selection.Start.iChar > 0)  							RemoveSpacesAfterCaret ();  				}  		}  		OnKeyPressed ((char)0xff);  	}  	break;  case FCTBAction.ClearWordRight:  	if (OnKeyPressing ((char)0xff))  		//KeyPress event processed key  		break;  	if (!Selection.ReadOnly) {  		if (!Selection.IsEmpty)  			ClearSelected ();  		Selection.GoWordRight (true);  		if (!Selection.ReadOnly)  			ClearSelected ();  	}  	OnKeyPressed ((char)0xff);  	break;  case FCTBAction.GoWordLeft:  	Selection.GoWordLeft (false);  	break;  case FCTBAction.GoWordLeftWithSelection:  	Selection.GoWordLeft (true);  	break;  case FCTBAction.GoLeft:  	Selection.GoLeft (false);  	break;  case FCTBAction.GoLeftWithSelection:  	Selection.GoLeft (true);  	break;  case FCTBAction.GoLeft_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoLeft_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.GoWordRight:  	Selection.GoWordRight (false);  	break;  case FCTBAction.GoWordRightWithSelection:  	Selection.GoWordRight (true);  	break;  case FCTBAction.GoRight:  	Selection.GoRight (false);  	break;  case FCTBAction.GoRightWithSelection:  	Selection.GoRight (true);  	break;  case FCTBAction.GoRight_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoRight_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.GoUp:  	Selection.GoUp (false);  	ScrollLeft ();  	break;  case FCTBAction.GoUpWithSelection:  	Selection.GoUp (true);  	ScrollLeft ();  	break;  case FCTBAction.GoUp_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoUp_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.MoveSelectedLinesUp:  	if (!Selection.ColumnSelectionMode)  		MoveSelectedLinesUp ();  	break;  case FCTBAction.GoDown:  	Selection.GoDown (false);  	ScrollLeft ();  	break;  case FCTBAction.GoDownWithSelection:  	Selection.GoDown (true);  	ScrollLeft ();  	break;  case FCTBAction.GoDown_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoDown_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.MoveSelectedLinesDown:  	if (!Selection.ColumnSelectionMode)  		MoveSelectedLinesDown ();  	break;  case FCTBAction.GoPageUp:  	Selection.GoPageUp (false);  	ScrollLeft ();  	break;  case FCTBAction.GoPageUpWithSelection:  	Selection.GoPageUp (true);  	ScrollLeft ();  	break;  case FCTBAction.GoPageDown:  	Selection.GoPageDown (false);  	ScrollLeft ();  	break;  case FCTBAction.GoPageDownWithSelection:  	Selection.GoPageDown (true);  	ScrollLeft ();  	break;  case FCTBAction.GoFirstLine:  	Selection.GoFirst (false);  	break;  case FCTBAction.GoFirstLineWithSelection:  	Selection.GoFirst (true);  	break;  case FCTBAction.GoHome:  	GoHome (false);  	ScrollLeft ();  	break;  case FCTBAction.GoHomeWithSelection:  	GoHome (true);  	ScrollLeft ();  	break;  case FCTBAction.GoLastLine:  	Selection.GoLast (false);  	break;  case FCTBAction.GoLastLineWithSelection:  	Selection.GoLast (true);  	break;  case FCTBAction.GoEnd:  	Selection.GoEnd (false);  	break;  case FCTBAction.GoEndWithSelection:  	Selection.GoEnd (true);  	break;  case FCTBAction.ClearHints:  	ClearHints ();  	if (MacrosManager != null)  		MacrosManager.IsRecording = false;  	break;  case FCTBAction.MacroRecord:  	if (MacrosManager != null) {  		if (MacrosManager.AllowMacroRecordingByUser)  			MacrosManager.IsRecording = !MacrosManager.IsRecording;  		if (MacrosManager.IsRecording)  			MacrosManager.ClearMacros ();  	}  	break;  case FCTBAction.MacroExecute:  	if (MacrosManager != null) {  		MacrosManager.IsRecording = false;  		MacrosManager.ExecuteMacros ();  	}  	break;  case FCTBAction.CustomAction1:  case FCTBAction.CustomAction2:  case FCTBAction.CustomAction3:  case FCTBAction.CustomAction4:  case FCTBAction.CustomAction5:  case FCTBAction.CustomAction6:  case FCTBAction.CustomAction7:  case FCTBAction.CustomAction8:  case FCTBAction.CustomAction9:  case FCTBAction.CustomAction10:  case FCTBAction.CustomAction11:  case FCTBAction.CustomAction12:  case FCTBAction.CustomAction13:  case FCTBAction.CustomAction14:  case FCTBAction.CustomAction15:  case FCTBAction.CustomAction16:  case FCTBAction.CustomAction17:  case FCTBAction.CustomAction18:  case FCTBAction.CustomAction19:  case FCTBAction.CustomAction20:  	OnCustomAction (new CustomActionEventArgs (action));  	break;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,The following statement contains a magic number: ChangeFontSize (2);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,The following statement contains a magic number: ChangeFontSize (-2);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RestoreFontSize,The following statement contains a magic number: Zoom = 100;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: if (AutoCompleteBrackets) {  	if (!Selection.ColumnSelectionMode)  		for (int i = 1; i < autoCompleteBracketsList.Length; i += 2)  			if (c == autoCompleteBracketsList [i] && c == Selection.CharAfterStart) {  				Selection.GoRight ();  				return true;  			}  	for (int i = 0; i < autoCompleteBracketsList.Length; i += 2)  		if (c == autoCompleteBracketsList [i]) {  			InsertBrackets (autoCompleteBracketsList [i]' autoCompleteBracketsList [i + 1]);  			return true;  		}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: if (AutoCompleteBrackets) {  	if (!Selection.ColumnSelectionMode)  		for (int i = 1; i < autoCompleteBracketsList.Length; i += 2)  			if (c == autoCompleteBracketsList [i] && c == Selection.CharAfterStart) {  				Selection.GoRight ();  				return true;  			}  	for (int i = 0; i < autoCompleteBracketsList.Length; i += 2)  		if (c == autoCompleteBracketsList [i]) {  			InsertBrackets (autoCompleteBracketsList [i]' autoCompleteBracketsList [i + 1]);  			return true;  		}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: if (!Selection.ColumnSelectionMode)  	for (int i = 1; i < autoCompleteBracketsList.Length; i += 2)  		if (c == autoCompleteBracketsList [i] && c == Selection.CharAfterStart) {  			Selection.GoRight ();  			return true;  		}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: for (int i = 1; i < autoCompleteBracketsList.Length; i += 2)  	if (c == autoCompleteBracketsList [i] && c == Selection.CharAfterStart) {  		Selection.GoRight ();  		return true;  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: i += 2
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: for (int i = 0; i < autoCompleteBracketsList.Length; i += 2)  	if (c == autoCompleteBracketsList [i]) {  		InsertBrackets (autoCompleteBracketsList [i]' autoCompleteBracketsList [i + 1]);  		return true;  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAutocompleteBrackets,The following statement contains a magic number: i += 2
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (HorizontalScroll.Value <= Paddings.Left)  	e.Graphics.FillRectangle (paddingBrush' LeftIndent - HorizontalScroll.Value - 2' 0' Math.Max (0' Paddings.Left - 1)' ClientSize.Height);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (paddingBrush' LeftIndent - HorizontalScroll.Value - 2' 0' Math.Max (0' Paddings.Left - 1)' ClientSize.Height);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: for (iLine = startLine; iLine < lines.Count; iLine++) {  	Line line = lines [iLine];  	LineInfo lineInfo = LineInfos [iLine];  	//  	if (lineInfo.startY > VerticalScroll.Value + ClientSize.Height)  		break;  	if (lineInfo.startY + lineInfo.WordWrapStringsCount * CharHeight < VerticalScroll.Value)  		continue;  	if (lineInfo.VisibleState == VisibleState.Hidden)  		continue;  	int y = lineInfo.startY - VerticalScroll.Value;  	//  	e.Graphics.SmoothingMode = SmoothingMode.None;  	//draw line background  	if (lineInfo.VisibleState == VisibleState.Visible)  		if (line.BackgroundBrush != null)  			e.Graphics.FillRectangle (line.BackgroundBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight * lineInfo.WordWrapStringsCount));  	//draw current line background  	if (CurrentLineColor != Color.Transparent && iLine == Selection.Start.iLine)  		if (Selection.IsEmpty)  			e.Graphics.FillRectangle (currentLineBrush' new Rectangle (textAreaRect.Left' y' textAreaRect.Width' CharHeight));  	//draw changed line marker  	if (ChangedLineColor != Color.Transparent && line.IsChanged)  		e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  	//  	e.Graphics.SmoothingMode = SmoothingMode.AntiAlias;  	//  	//draw bookmark  	if (bookmarksByLineIndex.ContainsKey (iLine))  		bookmarksByLineIndex [iLine].Paint (e.Graphics' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount));  	//OnPaintLine event  	if (lineInfo.VisibleState == VisibleState.Visible)  		OnPaintLine (new PaintLineEventArgs (iLine' new Rectangle (LeftIndent' y' Width' CharHeight * lineInfo.WordWrapStringsCount)' e.Graphics' e.ClipRectangle));  	//draw line number  	if (ShowLineNumbers)  		using (var lineNumberBrush = new SolidBrush (LineNumberColor))  			e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  	//create markers  	if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  		visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  		visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  	if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  		e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  	//draw wordwrap strings of line  	for (int iWordWrapLine = 0; iWordWrapLine < lineInfo.WordWrapStringsCount; iWordWrapLine++) {  		y = lineInfo.startY + iWordWrapLine * CharHeight - VerticalScroll.Value;  		//indent  		var indent = iWordWrapLine == 0 ? 0 : lineInfo.wordWrapIndent * CharWidth;  		//draw chars  		DrawLineChars (e.Graphics' firstChar' lastChar' iLine' iWordWrapLine' x + indent' y);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (ChangedLineColor != Color.Transparent && line.IsChanged)  	e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (ChangedLineColor != Color.Transparent && line.IsChanged)  	e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (ChangedLineColor != Color.Transparent && line.IsChanged)  	e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (changedLineBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight + 1));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (ShowLineNumbers)  	using (var lineNumberBrush = new SolidBrush (LineNumberColor))  		e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (ShowLineNumbers)  	using (var lineNumberBrush = new SolidBrush (LineNumberColor))  		e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (ShowLineNumbers)  	using (var lineNumberBrush = new SolidBrush (LineNumberColor))  		e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var lineNumberBrush = new SolidBrush (LineNumberColor))  	e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var lineNumberBrush = new SolidBrush (LineNumberColor))  	e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var lineNumberBrush = new SolidBrush (LineNumberColor))  	e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString ((iLine + lineNumberStartValue).ToString ()' Font' lineNumberBrush' new RectangleF (-10' y' LeftIndent - minLeftIndent - 2 + 10' CharHeight)' new StringFormat (StringFormatFlags.DirectionRightToLeft));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  	visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  	visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  	visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  	visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (lineInfo.VisibleState == VisibleState.StartOfHiddenBlock)  	visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new ExpandFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  	visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  	visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  	visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  	visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (line.FoldingStartMarker) && lineInfo.VisibleState == VisibleState.Visible && string.IsNullOrEmpty (line.FoldingEndMarker))  	visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: visibleMarkers.Add (new CollapseFoldingMarker (iLine' new Rectangle (LeftIndentLine - 4' y + CharHeight / 2 - 3' 8' 8)));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (lineInfo.VisibleState == VisibleState.Visible && !string.IsNullOrEmpty (line.FoldingEndMarker) && string.IsNullOrEmpty (line.FoldingStartMarker))  	e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (servicePen' LeftIndentLine' y + CharHeight * lineInfo.WordWrapStringsCount - 1' LeftIndentLine + 4' y + CharHeight * lineInfo.WordWrapStringsCount - 1);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if ((startFoldingLine >= 0 || endFoldingLine >= 0) && Selection.Start == Selection.End)  	if (endFoldingLine < LineInfos.Count) {  		//folding indicator  		int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  		int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  		using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  			e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if ((startFoldingLine >= 0 || endFoldingLine >= 0) && Selection.Start == Selection.End)  	if (endFoldingLine < LineInfos.Count) {  		//folding indicator  		int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  		int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  		using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  			e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if ((startFoldingLine >= 0 || endFoldingLine >= 0) && Selection.Start == Selection.End)  	if (endFoldingLine < LineInfos.Count) {  		//folding indicator  		int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  		int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  		using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  			e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if ((startFoldingLine >= 0 || endFoldingLine >= 0) && Selection.Start == Selection.End)  	if (endFoldingLine < LineInfos.Count) {  		//folding indicator  		int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  		int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  		using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  			e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if ((startFoldingLine >= 0 || endFoldingLine >= 0) && Selection.Start == Selection.End)  	if (endFoldingLine < LineInfos.Count) {  		//folding indicator  		int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  		int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  		using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  			e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (endFoldingLine < LineInfos.Count) {  	//folding indicator  	int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  	int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  	using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  		e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (endFoldingLine < LineInfos.Count) {  	//folding indicator  	int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  	int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  	using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  		e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (endFoldingLine < LineInfos.Count) {  	//folding indicator  	int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  	int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  	using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  		e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (endFoldingLine < LineInfos.Count) {  	//folding indicator  	int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  	int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  	using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  		e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: if (endFoldingLine < LineInfos.Count) {  	//folding indicator  	int startFoldingY = (startFoldingLine >= 0 ? LineInfos [startFoldingLine].startY : 0) - VerticalScroll.Value + CharHeight / 2;  	int endFoldingY = (endFoldingLine >= 0 ? LineInfos [endFoldingLine].startY + (LineInfos [endFoldingLine].WordWrapStringsCount - 1) * CharHeight : TextHeight + CharHeight) - VerticalScroll.Value + CharHeight;  	using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  		e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  	e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  	e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  	e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: using (var indicatorPen = new Pen (Color.FromArgb (100' FoldingIndicatorColor)' 4))  	e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine (indicatorPen' LeftIndent - 5' startFoldingY' LeftIndent - 5' endFoldingY);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: graphics.TranslateTransform (rect.Left + h / 2' rect.Top + h / 2);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: graphics.TranslateTransform (rect.Left + h / 2' rect.Top + h / 2);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: graphics.RotateTransform (180 * (DateTime.Now.Millisecond / 1000f));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: using (var pen = new Pen (Color.Red' 2)) {  	graphics.DrawArc (pen' iconRect' 0' 90);  	graphics.DrawArc (pen' iconRect' 180' 90);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: using (var pen = new Pen (Color.Red' 2)) {  	graphics.DrawArc (pen' iconRect' 0' 90);  	graphics.DrawArc (pen' iconRect' 180' 90);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: using (var pen = new Pen (Color.Red' 2)) {  	graphics.DrawArc (pen' iconRect' 0' 90);  	graphics.DrawArc (pen' iconRect' 180' 90);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: using (var pen = new Pen (Color.Red' 2)) {  	graphics.DrawArc (pen' iconRect' 0' 90);  	graphics.DrawArc (pen' iconRect' 180' 90);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: graphics.DrawArc (pen' iconRect' 0' 90);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: graphics.DrawArc (pen' iconRect' 180' 90);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: graphics.DrawArc (pen' iconRect' 180' 90);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawRecordingHint,The following statement contains a magic number: tm = new System.Threading.Timer (o =>  {  	Invalidate (rect);  	tm.Dispose ();  }' null' 200' System.Threading.Timeout.Infinite);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawTextAreaBorder,The following statement contains a magic number: if (TextAreaBorder == TextAreaBorderType.Shadow) {  	const int shadowSize = 4;  	var rBottom = new Rectangle (rect.Left + shadowSize' rect.Bottom' rect.Width - shadowSize' shadowSize);  	var rCorner = new Rectangle (rect.Right' rect.Bottom' shadowSize' shadowSize);  	var rRight = new Rectangle (rect.Right' rect.Top + shadowSize' shadowSize' rect.Height - shadowSize);  	using (var brush = new SolidBrush (Color.FromArgb (80' TextAreaBorderColor))) {  		graphics.FillRectangle (brush' rBottom);  		graphics.FillRectangle (brush' rRight);  		graphics.FillRectangle (brush' rCorner);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawTextAreaBorder,The following statement contains a magic number: if (TextAreaBorder == TextAreaBorderType.Shadow) {  	const int shadowSize = 4;  	var rBottom = new Rectangle (rect.Left + shadowSize' rect.Bottom' rect.Width - shadowSize' shadowSize);  	var rCorner = new Rectangle (rect.Right' rect.Bottom' shadowSize' shadowSize);  	var rRight = new Rectangle (rect.Right' rect.Top + shadowSize' shadowSize' rect.Height - shadowSize);  	using (var brush = new SolidBrush (Color.FromArgb (80' TextAreaBorderColor))) {  		graphics.FillRectangle (brush' rBottom);  		graphics.FillRectangle (brush' rRight);  		graphics.FillRectangle (brush' rCorner);  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawTextAreaBorder,The following statement contains a magic number: using (var brush = new SolidBrush (Color.FromArgb (80' TextAreaBorderColor))) {  	graphics.FillRectangle (brush' rBottom);  	graphics.FillRectangle (brush' rRight);  	graphics.FillRectangle (brush' rCorner);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: foreach (Hint hint in hints) {  	Range r = hint.Range.Clone ();  	r.Normalize ();  	Point p1 = PlaceToPoint (r.Start);  	Point p2 = PlaceToPoint (r.End);  	if (GetVisibleState (r.Start.iLine) != VisibleState.Visible || GetVisibleState (r.End.iLine) != VisibleState.Visible)  		continue;  	using (var pen = new Pen (hint.BorderColor)) {  		pen.DashStyle = DashStyle.Dash;  		if (r.IsEmpty) {  			p1.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)  			});  		}  		else {  			p1.Offset (-1' -1);  			p2.Offset (1' -1);  			gr.DrawLines (pen' new[] {  				new Point (p1.X + CharWidth / 2' p1.Y)'  				p1'  				new Point (p1.X' p1.Y + charHeight + 2)'  				new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  			});  			gr.DrawLines (pen' new[] {  				new Point (p2.X - CharWidth / 2' p2.Y)'  				p2'  				new Point (p2.X' p2.Y + charHeight + 2)'  				new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  			});  		}  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: using (var pen = new Pen (hint.BorderColor)) {  	pen.DashStyle = DashStyle.Dash;  	if (r.IsEmpty) {  		p1.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)  		});  	}  	else {  		p1.Offset (-1' -1);  		p2.Offset (1' -1);  		gr.DrawLines (pen' new[] {  			new Point (p1.X + CharWidth / 2' p1.Y)'  			p1'  			new Point (p1.X' p1.Y + charHeight + 2)'  			new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  		});  		gr.DrawLines (pen' new[] {  			new Point (p2.X - CharWidth / 2' p2.Y)'  			p2'  			new Point (p2.X' p2.Y + charHeight + 2)'  			new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  		});  	}  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: if (r.IsEmpty) {  	p1.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)  	});  }  else {  	p1.Offset (-1' -1);  	p2.Offset (1' -1);  	gr.DrawLines (pen' new[] {  		new Point (p1.X + CharWidth / 2' p1.Y)'  		p1'  		new Point (p1.X' p1.Y + charHeight + 2)'  		new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  	});  	gr.DrawLines (pen' new[] {  		new Point (p2.X - CharWidth / 2' p2.Y)'  		p2'  		new Point (p2.X' p2.Y + charHeight + 2)'  		new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  	});  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	p1'  	new Point (p1.X' p1.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p1.X + CharWidth / 2' p1.Y)'  	p1'  	new Point (p1.X' p1.Y + charHeight + 2)'  	new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p1.X + CharWidth / 2' p1.Y)'  	p1'  	new Point (p1.X' p1.Y + charHeight + 2)'  	new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p1.X + CharWidth / 2' p1.Y)'  	p1'  	new Point (p1.X' p1.Y + charHeight + 2)'  	new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p1.X + CharWidth / 2' p1.Y)'  	p1'  	new Point (p1.X' p1.Y + charHeight + 2)'  	new Point (p1.X + CharWidth / 2' p1.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p2.X - CharWidth / 2' p2.Y)'  	p2'  	new Point (p2.X' p2.Y + charHeight + 2)'  	new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p2.X - CharWidth / 2' p2.Y)'  	p2'  	new Point (p2.X' p2.Y + charHeight + 2)'  	new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p2.X - CharWidth / 2' p2.Y)'  	p2'  	new Point (p2.X' p2.Y + charHeight + 2)'  	new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,PaintHintBrackets,The following statement contains a magic number: gr.DrawLines (pen' new[] {  	new Point (p2.X - CharWidth / 2' p2.Y)'  	p2'  	new Point (p2.X' p2.Y + charHeight + 2)'  	new Point (p2.X - CharWidth / 2' p2.Y + charHeight + 2)  });  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawFoldingLines,The following statement contains a magic number: using (var pen = new Pen (Color.FromArgb (200' ServiceLinesColor)) {  	DashStyle = DashStyle.Dot  })  	foreach (var iLine in foldingPairs)  		if (iLine.Key < endLine && iLine.Value > startLine) {  			Line line = lines [iLine.Key];  			int y = LineInfos [iLine.Key].startY - VerticalScroll.Value + CharHeight;  			y += y % 2;  			int y2;  			if (iLine.Value >= LinesCount)  				y2 = LineInfos [LinesCount - 1].startY + CharHeight - VerticalScroll.Value;  			else if (LineInfos [iLine.Value].VisibleState == VisibleState.Visible) {  				int d = 0;  				int spaceCount = line.StartSpacesCount;  				if (lines [iLine.Value].Count <= spaceCount || lines [iLine.Value] [spaceCount].c == ' ')  					d = CharHeight;  				y2 = LineInfos [iLine.Value].startY - VerticalScroll.Value + d;  			}  			else  				continue;  			int x = LeftIndent + Paddings.Left + line.StartSpacesCount * CharWidth - HorizontalScroll.Value;  			if (x >= LeftIndent + Paddings.Left)  				e.Graphics.DrawLine (pen' x' y >= 0 ? y : 0' x' y2 < ClientSize.Height ? y2 : ClientSize.Height);  		}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawFoldingLines,The following statement contains a magic number: using (var pen = new Pen (Color.FromArgb (200' ServiceLinesColor)) {  	DashStyle = DashStyle.Dot  })  	foreach (var iLine in foldingPairs)  		if (iLine.Key < endLine && iLine.Value > startLine) {  			Line line = lines [iLine.Key];  			int y = LineInfos [iLine.Key].startY - VerticalScroll.Value + CharHeight;  			y += y % 2;  			int y2;  			if (iLine.Value >= LinesCount)  				y2 = LineInfos [LinesCount - 1].startY + CharHeight - VerticalScroll.Value;  			else if (LineInfos [iLine.Value].VisibleState == VisibleState.Visible) {  				int d = 0;  				int spaceCount = line.StartSpacesCount;  				if (lines [iLine.Value].Count <= spaceCount || lines [iLine.Value] [spaceCount].c == ' ')  					d = CharHeight;  				y2 = LineInfos [iLine.Value].startY - VerticalScroll.Value + d;  			}  			else  				continue;  			int x = LeftIndent + Paddings.Left + line.StartSpacesCount * CharWidth - HorizontalScroll.Value;  			if (x >= LeftIndent + Paddings.Left)  				e.Graphics.DrawLine (pen' x' y >= 0 ? y : 0' x' y2 < ClientSize.Height ? y2 : ClientSize.Height);  		}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawFoldingLines,The following statement contains a magic number: foreach (var iLine in foldingPairs)  	if (iLine.Key < endLine && iLine.Value > startLine) {  		Line line = lines [iLine.Key];  		int y = LineInfos [iLine.Key].startY - VerticalScroll.Value + CharHeight;  		y += y % 2;  		int y2;  		if (iLine.Value >= LinesCount)  			y2 = LineInfos [LinesCount - 1].startY + CharHeight - VerticalScroll.Value;  		else if (LineInfos [iLine.Value].VisibleState == VisibleState.Visible) {  			int d = 0;  			int spaceCount = line.StartSpacesCount;  			if (lines [iLine.Value].Count <= spaceCount || lines [iLine.Value] [spaceCount].c == ' ')  				d = CharHeight;  			y2 = LineInfos [iLine.Value].startY - VerticalScroll.Value + d;  		}  		else  			continue;  		int x = LeftIndent + Paddings.Left + line.StartSpacesCount * CharWidth - HorizontalScroll.Value;  		if (x >= LeftIndent + Paddings.Left)  			e.Graphics.DrawLine (pen' x' y >= 0 ? y : 0' x' y2 < ClientSize.Height ? y2 : ClientSize.Height);  	}  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawFoldingLines,The following statement contains a magic number: if (iLine.Key < endLine && iLine.Value > startLine) {  	Line line = lines [iLine.Key];  	int y = LineInfos [iLine.Key].startY - VerticalScroll.Value + CharHeight;  	y += y % 2;  	int y2;  	if (iLine.Value >= LinesCount)  		y2 = LineInfos [LinesCount - 1].startY + CharHeight - VerticalScroll.Value;  	else if (LineInfos [iLine.Value].VisibleState == VisibleState.Visible) {  		int d = 0;  		int spaceCount = line.StartSpacesCount;  		if (lines [iLine.Value].Count <= spaceCount || lines [iLine.Value] [spaceCount].c == ' ')  			d = CharHeight;  		y2 = LineInfos [iLine.Value].startY - VerticalScroll.Value + d;  	}  	else  		continue;  	int x = LeftIndent + Paddings.Left + line.StartSpacesCount * CharWidth - HorizontalScroll.Value;  	if (x >= LeftIndent + Paddings.Left)  		e.Graphics.DrawLine (pen' x' y >= 0 ? y : 0' x' y2 < ClientSize.Height ? y2 : ClientSize.Height);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawFoldingLines,The following statement contains a magic number: y += y % 2;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseDown,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	VisualMarker marker = FindVisualMarkerForPoint (e.Location);  	//click on marker  	if (marker != null) {  		mouseIsDrag = false;  		mouseIsDragDrop = false;  		draggedRange = null;  		OnMarkerClick (e' marker);  		return;  	}  	mouseIsDrag = true;  	mouseIsDragDrop = false;  	draggedRange = null;  	isLineSelect = (e.Location.X < LeftIndentLine);  	if (!isLineSelect) {  		var p = PointToPlace (e.Location);  		if (e.Clicks == 2) {  			mouseIsDrag = false;  			mouseIsDragDrop = false;  			draggedRange = null;  			SelectWord (p);  			return;  		}  		if (Selection.IsEmpty || !Selection.Contains (p) || this [p.iLine].Count <= p.iChar || ReadOnly)  			OnMouseClickText (e);  		else {  			mouseIsDragDrop = true;  			mouseIsDrag = false;  		}  	}  	else {  		CheckAndChangeSelectionType ();  		Selection.BeginUpdate ();  		//select whole line  		int iLine = PointToPlaceSimple (e.Location).iLine;  		lineSelectFrom = iLine;  		Selection.Start = new Place (0' iLine);  		Selection.End = new Place (GetLineLength (iLine)' iLine);  		Selection.EndUpdate ();  		Invalidate ();  	}  }  else if (e.Button == MouseButtons.Middle) {  	ActivateMiddleClickScrollingMode (e);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseDown,The following statement contains a magic number: if (!isLineSelect) {  	var p = PointToPlace (e.Location);  	if (e.Clicks == 2) {  		mouseIsDrag = false;  		mouseIsDragDrop = false;  		draggedRange = null;  		SelectWord (p);  		return;  	}  	if (Selection.IsEmpty || !Selection.Contains (p) || this [p.iLine].Count <= p.iChar || ReadOnly)  		OnMouseClickText (e);  	else {  		mouseIsDragDrop = true;  		mouseIsDrag = false;  	}  }  else {  	CheckAndChangeSelectionType ();  	Selection.BeginUpdate ();  	//select whole line  	int iLine = PointToPlaceSimple (e.Location).iLine;  	lineSelectFrom = iLine;  	Selection.Start = new Place (0' iLine);  	Selection.End = new Place (GetLineLength (iLine)' iLine);  	Selection.EndUpdate ();  	Invalidate ();  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseDown,The following statement contains a magic number: if (e.Clicks == 2) {  	mouseIsDrag = false;  	mouseIsDragDrop = false;  	draggedRange = null;  	SelectWord (p);  	return;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseWheel,The following statement contains a magic number: if (lastModifiers == Keys.Control) {  	ChangeFontSize (2 * Math.Sign (e.Delta));  	((HandledMouseEventArgs)e).Handled = true;  }  else if (VerticalScroll.Visible || !ShowScrollBars) {  	//base.OnMouseWheel(e);  	// Determine scoll offset  	int mouseWheelScrollLinesSetting = GetControlPanelWheelScrollLinesValue ();  	DoScrollVertical (mouseWheelScrollLinesSetting' e.Delta);  	((HandledMouseEventArgs)e).Handled = true;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnMouseWheel,The following statement contains a magic number: ChangeFontSize (2 * Math.Sign (e.Delta));  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ChangeFontSize,The following statement contains a magic number: using (var gr = Graphics.FromHwnd (Handle)) {  	var dpi = gr.DpiY;  	var newPoints = points + step * 72f / dpi;  	if (newPoints < 1f)  		return;  	var k = newPoints / originalFont.SizeInPoints;  	Zoom = (int)(100 * k);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ChangeFontSize,The following statement contains a magic number: Zoom = (int)(100 * k);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,YtoLineIndex,The following statement contains a magic number: i = i < 0 ? -i - 2 : i;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,Print,The following statement contains a magic number: wb.Location = new Point (-1000' -1000);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,Print,The following statement contains a magic number: wb.Location = new Point (-1000' -1000);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnDragOver,The following statement contains a magic number: if (e.Data.GetDataPresent (DataFormats.Text)) {  	Point p = PointToClient (new Point (e.X' e.Y));  	Selection.Start = PointToPlace (p);  	if (p.Y < 6 && VerticalScroll.Visible && VerticalScroll.Value > 0)  		VerticalScroll.Value = Math.Max (0' VerticalScroll.Value - charHeight);  	DoCaretVisible ();  	Invalidate ();  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,OnDragOver,The following statement contains a magic number: if (p.Y < 6 && VerticalScroll.Visible && VerticalScroll.Value > 0)  	VerticalScroll.Value = Math.Max (0' VerticalScroll.Value - charHeight);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ActivateMiddleClickScrollingMode,The following statement contains a magic number: if (!middleClickScrollingActivated) {  	if ((!HorizontalScroll.Visible) && (!VerticalScroll.Visible))  		if (ShowScrollBars)  			return;  	middleClickScrollingActivated = true;  	middleClickScrollingOriginPoint = e.Location;  	middleClickScrollingOriginScroll = new Point (HorizontalScroll.Value' VerticalScroll.Value);  	middleClickScrollingTimer.Interval = 50;  	middleClickScrollingTimer.Enabled = true;  	Capture = true;  	// Refresh the control   	Refresh ();  	// Disable drawing  	SendMessage (Handle' WM_SETREDRAW' 0' 0);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,ActivateMiddleClickScrollingMode,The following statement contains a magic number: middleClickScrollingTimer.Interval = 50;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (distance > 10) {  	if (angleInDegree >= 325 || angleInDegree <= 35)  		this.middleClickScollDirection = ScrollDirection.Right;  	else if (angleInDegree <= 55)  		this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  	else if (angleInDegree <= 125)  		this.middleClickScollDirection = ScrollDirection.Up;  	else if (angleInDegree <= 145)  		this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  	else if (angleInDegree <= 215)  		this.middleClickScollDirection = ScrollDirection.Left;  	else if (angleInDegree <= 235)  		this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  	else if (angleInDegree <= 305)  		this.middleClickScollDirection = ScrollDirection.Down;  	else  		this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  }  else {  	this.middleClickScollDirection = ScrollDirection.None;  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree >= 325 || angleInDegree <= 35)  	this.middleClickScollDirection = ScrollDirection.Right;  else if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 55)  	this.middleClickScollDirection = ScrollDirection.Right | ScrollDirection.Up;  else if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 125)  	this.middleClickScollDirection = ScrollDirection.Up;  else if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 145)  	this.middleClickScollDirection = ScrollDirection.Up | ScrollDirection.Left;  else if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 215)  	this.middleClickScollDirection = ScrollDirection.Left;  else if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 235)  	this.middleClickScollDirection = ScrollDirection.Left | ScrollDirection.Down;  else if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,middleClickScrollingTimer_Tick,The following statement contains a magic number: if (angleInDegree <= 305)  	this.middleClickScollDirection = ScrollDirection.Down;  else  	this.middleClickScollDirection = ScrollDirection.Down | ScrollDirection.Right;  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: using (SolidBrush inverseColorBrush = new SolidBrush (inverseColor)) {  	var p = middleClickScrollingOriginPoint;  	var state = gr.Save ();  	gr.SmoothingMode = SmoothingMode.HighQuality;  	gr.TranslateTransform (p.X' p.Y);  	gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollVertically)  		DrawTriangle (gr' inverseColorBrush);  	gr.RotateTransform (90);  	if (ableToScrollHorizontally)  		DrawTriangle (gr' inverseColorBrush);  	gr.Restore (state);  }  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.FillEllipse (inverseColorBrush' -2' -2' 4' 4);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.RotateTransform (90);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.RotateTransform (90);  
Magic Number,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DrawMiddleClickScrolling,The following statement contains a magic number: gr.RotateTransform (90);  
Magic Number,FastColoredTextBoxNS,Range,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Range.cs,SetStyle,The following statement contains a magic number: if (Math.Abs (Start.iLine - End.iLine) > 1000)  	options |= SyntaxHighlighter.RegexCompiledOption;  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X' rect.Y' d' d' 180' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X' rect.Y' d' d' 180' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X + rect.Width - d' rect.Y' d' d' 270' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X + rect.Width - d' rect.Y' d' d' 270' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X + rect.Width - d' rect.Y + rect.Height - d' d' d' 0' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X' rect.Y + rect.Height - d' d' d' 90' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddArc (rect.X' rect.Y + rect.Height - d' d' d' 90' 90);  
Magic Number,FastColoredTextBoxNS,Style,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,GetRoundedRectangle,The following statement contains a magic number: gp.AddLine (rect.X' rect.Y + rect.Height - d' rect.X' rect.Y + d / 2);  
Magic Number,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: using (var f = new Font (range.tb.Font' FontStyle)) {  	//Font fHalfSize = new Font(range.tb.Font.FontFamily' f.SizeInPoints/2' FontStyle);  	Line line = range.tb [range.Start.iLine];  	float dx = range.tb.CharWidth;  	float y = position.Y + range.tb.LineInterval / 2;  	float x = position.X - range.tb.CharWidth / 3;  	if (ForeBrush == null)  		ForeBrush = new SolidBrush (range.tb.ForeColor);  	//IME mode  	if (range.tb.ImeAllowed)  		for (int i = range.Start.iChar; i < range.End.iChar; i++) {  			SizeF size = FastColoredTextBox.GetCharSize (f' line [i].c);  			var gs = gr.Save ();  			float k = size.Width > range.tb.CharWidth + 1 ? range.tb.CharWidth / size.Width : 1;  			gr.TranslateTransform (x' y + (1 - k) * range.tb.CharHeight / 2);  			gr.ScaleTransform (k' (float)Math.Sqrt (k));  			gr.DrawString (line [i].c.ToString ()' f' ForeBrush' 0' 0' stringFormat);  			gr.Restore (gs);  			x += dx;  		}  	else  		//classic mode   		for (int i = range.Start.iChar; i < range.End.iChar; i++) {  			//draw char  			gr.DrawString (line [i].c.ToString ()' f' ForeBrush' x' y' stringFormat);  			x += dx;  		}  }  
Magic Number,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: using (var f = new Font (range.tb.Font' FontStyle)) {  	//Font fHalfSize = new Font(range.tb.Font.FontFamily' f.SizeInPoints/2' FontStyle);  	Line line = range.tb [range.Start.iLine];  	float dx = range.tb.CharWidth;  	float y = position.Y + range.tb.LineInterval / 2;  	float x = position.X - range.tb.CharWidth / 3;  	if (ForeBrush == null)  		ForeBrush = new SolidBrush (range.tb.ForeColor);  	//IME mode  	if (range.tb.ImeAllowed)  		for (int i = range.Start.iChar; i < range.End.iChar; i++) {  			SizeF size = FastColoredTextBox.GetCharSize (f' line [i].c);  			var gs = gr.Save ();  			float k = size.Width > range.tb.CharWidth + 1 ? range.tb.CharWidth / size.Width : 1;  			gr.TranslateTransform (x' y + (1 - k) * range.tb.CharHeight / 2);  			gr.ScaleTransform (k' (float)Math.Sqrt (k));  			gr.DrawString (line [i].c.ToString ()' f' ForeBrush' 0' 0' stringFormat);  			gr.Restore (gs);  			x += dx;  		}  	else  		//classic mode   		for (int i = range.Start.iChar; i < range.End.iChar; i++) {  			//draw char  			gr.DrawString (line [i].c.ToString ()' f' ForeBrush' x' y' stringFormat);  			x += dx;  		}  }  
Magic Number,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: using (var f = new Font (range.tb.Font' FontStyle)) {  	//Font fHalfSize = new Font(range.tb.Font.FontFamily' f.SizeInPoints/2' FontStyle);  	Line line = range.tb [range.Start.iLine];  	float dx = range.tb.CharWidth;  	float y = position.Y + range.tb.LineInterval / 2;  	float x = position.X - range.tb.CharWidth / 3;  	if (ForeBrush == null)  		ForeBrush = new SolidBrush (range.tb.ForeColor);  	//IME mode  	if (range.tb.ImeAllowed)  		for (int i = range.Start.iChar; i < range.End.iChar; i++) {  			SizeF size = FastColoredTextBox.GetCharSize (f' line [i].c);  			var gs = gr.Save ();  			float k = size.Width > range.tb.CharWidth + 1 ? range.tb.CharWidth / size.Width : 1;  			gr.TranslateTransform (x' y + (1 - k) * range.tb.CharHeight / 2);  			gr.ScaleTransform (k' (float)Math.Sqrt (k));  			gr.DrawString (line [i].c.ToString ()' f' ForeBrush' 0' 0' stringFormat);  			gr.Restore (gs);  			x += dx;  		}  	else  		//classic mode   		for (int i = range.Start.iChar; i < range.End.iChar; i++) {  			//draw char  			gr.DrawString (line [i].c.ToString ()' f' ForeBrush' x' y' stringFormat);  			x += dx;  		}  }  
Magic Number,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: if (range.tb.ImeAllowed)  	for (int i = range.Start.iChar; i < range.End.iChar; i++) {  		SizeF size = FastColoredTextBox.GetCharSize (f' line [i].c);  		var gs = gr.Save ();  		float k = size.Width > range.tb.CharWidth + 1 ? range.tb.CharWidth / size.Width : 1;  		gr.TranslateTransform (x' y + (1 - k) * range.tb.CharHeight / 2);  		gr.ScaleTransform (k' (float)Math.Sqrt (k));  		gr.DrawString (line [i].c.ToString ()' f' ForeBrush' 0' 0' stringFormat);  		gr.Restore (gs);  		x += dx;  	}  else  	//classic mode   	for (int i = range.Start.iChar; i < range.End.iChar; i++) {  		//draw char  		gr.DrawString (line [i].c.ToString ()' f' ForeBrush' x' y' stringFormat);  		x += dx;  	}  
Magic Number,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: for (int i = range.Start.iChar; i < range.End.iChar; i++) {  	SizeF size = FastColoredTextBox.GetCharSize (f' line [i].c);  	var gs = gr.Save ();  	float k = size.Width > range.tb.CharWidth + 1 ? range.tb.CharWidth / size.Width : 1;  	gr.TranslateTransform (x' y + (1 - k) * range.tb.CharHeight / 2);  	gr.ScaleTransform (k' (float)Math.Sqrt (k));  	gr.DrawString (line [i].c.ToString ()' f' ForeBrush' 0' 0' stringFormat);  	gr.Restore (gs);  	x += dx;  }  
Magic Number,FastColoredTextBoxNS,TextStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: gr.TranslateTransform (x' y + (1 - k) * range.tb.CharHeight / 2);  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: if (range.End.iChar > range.Start.iChar) {  	base.Draw (gr' position' range);  	int firstNonSpaceSymbolX = position.X;  	//find first non space symbol  	for (int i = range.Start.iChar; i < range.End.iChar; i++)  		if (range.tb [range.Start.iLine] [i].c != ' ')  			break;  		else  			firstNonSpaceSymbolX += range.tb.CharWidth;  	//create marker  	range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (firstNonSpaceSymbolX' position.Y' position.X + (range.End.iChar - range.Start.iChar) * range.tb.CharWidth - firstNonSpaceSymbolX' range.tb.CharHeight)));  }  else {  	//draw '...'  	using (Font f = new Font (range.tb.Font' FontStyle))  		gr.DrawString ("..."' f' ForeBrush' range.tb.LeftIndent' position.Y - 2);  	//create marker  	range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (range.tb.LeftIndent + 2' position.Y' 2 * range.tb.CharHeight' range.tb.CharHeight)));  }  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: if (range.End.iChar > range.Start.iChar) {  	base.Draw (gr' position' range);  	int firstNonSpaceSymbolX = position.X;  	//find first non space symbol  	for (int i = range.Start.iChar; i < range.End.iChar; i++)  		if (range.tb [range.Start.iLine] [i].c != ' ')  			break;  		else  			firstNonSpaceSymbolX += range.tb.CharWidth;  	//create marker  	range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (firstNonSpaceSymbolX' position.Y' position.X + (range.End.iChar - range.Start.iChar) * range.tb.CharWidth - firstNonSpaceSymbolX' range.tb.CharHeight)));  }  else {  	//draw '...'  	using (Font f = new Font (range.tb.Font' FontStyle))  		gr.DrawString ("..."' f' ForeBrush' range.tb.LeftIndent' position.Y - 2);  	//create marker  	range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (range.tb.LeftIndent + 2' position.Y' 2 * range.tb.CharHeight' range.tb.CharHeight)));  }  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: if (range.End.iChar > range.Start.iChar) {  	base.Draw (gr' position' range);  	int firstNonSpaceSymbolX = position.X;  	//find first non space symbol  	for (int i = range.Start.iChar; i < range.End.iChar; i++)  		if (range.tb [range.Start.iLine] [i].c != ' ')  			break;  		else  			firstNonSpaceSymbolX += range.tb.CharWidth;  	//create marker  	range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (firstNonSpaceSymbolX' position.Y' position.X + (range.End.iChar - range.Start.iChar) * range.tb.CharWidth - firstNonSpaceSymbolX' range.tb.CharHeight)));  }  else {  	//draw '...'  	using (Font f = new Font (range.tb.Font' FontStyle))  		gr.DrawString ("..."' f' ForeBrush' range.tb.LeftIndent' position.Y - 2);  	//create marker  	range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (range.tb.LeftIndent + 2' position.Y' 2 * range.tb.CharHeight' range.tb.CharHeight)));  }  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: using (Font f = new Font (range.tb.Font' FontStyle))  	gr.DrawString ("..."' f' ForeBrush' range.tb.LeftIndent' position.Y - 2);  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: gr.DrawString ("..."' f' ForeBrush' range.tb.LeftIndent' position.Y - 2);  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (range.tb.LeftIndent + 2' position.Y' 2 * range.tb.CharHeight' range.tb.CharHeight)));  
Magic Number,FastColoredTextBoxNS,FoldedBlockStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,Draw,The following statement contains a magic number: range.tb.AddVisualMarker (new FoldedAreaMarker (range.Start.iLine' new Rectangle (range.tb.LeftIndent + 2' position.Y' 2 * range.tb.CharHeight' range.tb.CharHeight)));  
Magic Number,FastColoredTextBoxNS,WavyLineStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,DrawWavyLine,The following statement contains a magic number: if (end.X - start.X < 2) {  	graphics.DrawLine (Pen' start' end);  	return;  }  
Magic Number,FastColoredTextBoxNS,WavyLineStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,DrawWavyLine,The following statement contains a magic number: for (int i = start.X; i <= end.X; i += 2) {  	points.Add (new Point (i' start.Y + offset));  	offset = -offset;  }  
Magic Number,FastColoredTextBoxNS,WavyLineStyle,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\Style.cs,DrawWavyLine,The following statement contains a magic number: i += 2
Magic Number,FastColoredTextBoxNS,TextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\TextSource.cs,TextSource,The following statement contains a magic number: if (Enum.GetUnderlyingType (typeof(StyleIndex)) == typeof(UInt32))  	Styles = new Style[32];  else  	Styles = new Style[16];  
Magic Number,FastColoredTextBoxNS,TextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\TextSource.cs,TextSource,The following statement contains a magic number: if (Enum.GetUnderlyingType (typeof(StyleIndex)) == typeof(UInt32))  	Styles = new Style[32];  else  	Styles = new Style[16];  
Magic Number,FastColoredTextBoxNS,TextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\TextSource.cs,TextSource,The following statement contains a magic number: Styles = new Style[32];  
Magic Number,FastColoredTextBoxNS,TextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\TextSource.cs,TextSource,The following statement contains a magic number: Styles = new Style[16];  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,FileTextSource,The following statement contains a magic number: timer.Interval = 10000;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,OpenFile,The following statement contains a magic number: while (fs.Position < length) {  	var b = fs.ReadByte ();  	if (b == 10)// char \n  	 {  		sourceFileLinePositions.Add ((int)(fs.Position) + shift);  		base.lines.Add (null);  	}  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,OpenFile,The following statement contains a magic number: if (b == 10)// char \n   {  	sourceFileLinePositions.Add ((int)(fs.Position) + shift);  	base.lines.Add (null);  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineShift,The following statement contains a magic number: if (enc.HeaderName == "utf-32")  	return 3;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineShift,The following statement contains a magic number: return 3;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE && signature [2] == 0x00 && signature [3] == 0x00 && c >= 4) {  	enc = Encoding.UTF32;  	//UTF32 LE  	bytesPerSignature = 4;  }  else if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: bytesPerSignature = 4;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0x00 && signature [1] == 0x00 && signature [2] == 0xFE && signature [3] == 0xFF) {  	enc = new UTF32Encoding (true' true);  	//UTF32 BE  	bytesPerSignature = 4;  }  else if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: bytesPerSignature = 4;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xEF && signature [1] == 0xBB && signature [2] == 0xBF) {  	enc = Encoding.UTF8;  	//UTF8  	bytesPerSignature = 3;  }  else if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: bytesPerSignature = 3;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFE && signature [1] == 0xFF) {  	enc = Encoding.BigEndianUnicode;  	//UTF16 BE  	bytesPerSignature = 2;  }  else if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: bytesPerSignature = 2;  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: if (signature [0] == 0xFF && signature [1] == 0xFE) {  	enc = Encoding.Unicode;  	//UTF16 LE  	bytesPerSignature = 2;  }  
Magic Number,FastColoredTextBoxNS,FileTextSource,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FileTextSource.cs,DefineEncoding,The following statement contains a magic number: bytesPerSignature = 2;  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: using (var brush = new LinearGradientBrush (ClientRectangle' BackColor2' BackColor' 90))  	e.Graphics.FillRectangle (brush' 0' 0' ClientSize.Width - 1' ClientSize.Height - 1);  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (Text)) {  	StringFormat sf = new StringFormat ();  	sf.Alignment = TextAlignment;  	sf.LineAlignment = StringAlignment.Center;  	using (var brush = new SolidBrush (ForeColor))  		e.Graphics.DrawString (Text' Font' brush' new RectangleF (1' 1' ClientSize.Width - 2' ClientSize.Height - 2)' sf);  }  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: if (!string.IsNullOrEmpty (Text)) {  	StringFormat sf = new StringFormat ();  	sf.Alignment = TextAlignment;  	sf.LineAlignment = StringAlignment.Center;  	using (var brush = new SolidBrush (ForeColor))  		e.Graphics.DrawString (Text' Font' brush' new RectangleF (1' 1' ClientSize.Width - 2' ClientSize.Height - 2)' sf);  }  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: using (var brush = new SolidBrush (ForeColor))  	e.Graphics.DrawString (Text' Font' brush' new RectangleF (1' 1' ClientSize.Width - 2' ClientSize.Height - 2)' sf);  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: using (var brush = new SolidBrush (ForeColor))  	e.Graphics.DrawString (Text' Font' brush' new RectangleF (1' 1' ClientSize.Width - 2' ClientSize.Height - 2)' sf);  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString (Text' Font' brush' new RectangleF (1' 1' ClientSize.Width - 2' ClientSize.Height - 2)' sf);  
Magic Number,FastColoredTextBoxNS,UnfocusablePanel,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\UnfocusablePanel.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString (Text' Font' brush' new RectangleF (1' 1' ClientSize.Width - 2' ClientSize.Height - 2)' sf);  
Magic Number,FastColoredTextBoxNS,CollapseFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (pen' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,CollapseFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (pen' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,CollapseFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (pen' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,CollapseFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (pen' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + 2' rectangle.Top + rectangle.Height / 2' rectangle.Right - 2' rectangle.Top + rectangle.Height / 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + rectangle.Width / 2' rectangle.Top + 2' rectangle.Left + rectangle.Width / 2' rectangle.Bottom - 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + rectangle.Width / 2' rectangle.Top + 2' rectangle.Left + rectangle.Width / 2' rectangle.Bottom - 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + rectangle.Width / 2' rectangle.Top + 2' rectangle.Left + rectangle.Width / 2' rectangle.Bottom - 2);  
Magic Number,FastColoredTextBoxNS,ExpandFoldingMarker,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\VisualMarker.cs,Draw,The following statement contains a magic number: gr.DrawLine (Pens.Red' rectangle.Left + rectangle.Width / 2' rectangle.Top + 2' rectangle.Left + rectangle.Width / 2' rectangle.Bottom - 2);  
Missing Default,FastColoredTextBoxNS,AutocompleteListView,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\AutocompleteMenu.cs,ProcessKey,The following switch statement is missing a default case: switch (keyData) {  case Keys.Down:  	SelectNext (+1);  	return true;  case Keys.PageDown:  	SelectNext (+10);  	return true;  case Keys.Up:  	SelectNext (-1);  	return true;  case Keys.PageUp:  	SelectNext (-10);  	return true;  case Keys.Enter:  	OnSelecting ();  	return true;  case Keys.Tab:  	if (!AllowTabKey)  		break;  	OnSelecting ();  	return true;  case Keys.Escape:  	Menu.Close ();  	return true;  }  
Missing Default,FastColoredTextBoxNS,SyntaxHighlighter,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\SyntaxHighlighter.cs,InitStyleSchema,The following switch statement is missing a default case: switch (lang) {  case Language.CSharp:  	StringStyle = BrownStyle;  	CommentStyle = GreenStyle;  	NumberStyle = MagentaStyle;  	AttributeStyle = GreenStyle;  	ClassNameStyle = BoldStyle;  	KeywordStyle = BlueStyle;  	CommentTagStyle = GrayStyle;  	break;  case Language.FSharp:  	StringStyle = GrayStyle;  	CommentStyle = GreenStyle;  	NumberStyle = OrangeStyle;  	AttributeStyle = GreenStyle;  	ClassNameStyle = BoldStyle;  	KeywordStyle = BlueStyle;  	CommentTagStyle = GreenStyle;  	break;  case Language.VB:  	StringStyle = BrownStyle;  	CommentStyle = GreenStyle;  	NumberStyle = MagentaStyle;  	ClassNameStyle = BoldStyle;  	KeywordStyle = BlueStyle;  	break;  case Language.HTML:  	CommentStyle = GreenStyle;  	TagBracketStyle = BlueStyle;  	TagNameStyle = MaroonStyle;  	AttributeStyle = RedStyle;  	AttributeValueStyle = BlueStyle;  	HtmlEntityStyle = RedStyle;  	break;  case Language.JS:  	StringStyle = BrownStyle;  	CommentStyle = GreenStyle;  	NumberStyle = MagentaStyle;  	KeywordStyle = BlueStyle;  	break;  case Language.PHP:  	StringStyle = RedStyle;  	CommentStyle = GreenStyle;  	NumberStyle = RedStyle;  	VariableStyle = MaroonStyle;  	KeywordStyle = MagentaStyle;  	KeywordStyle2 = BlueStyle;  	KeywordStyle3 = GrayStyle;  	break;  case Language.SQL:  	StringStyle = RedStyle;  	CommentStyle = GreenStyle;  	NumberStyle = MagentaStyle;  	KeywordStyle = BlueBoldStyle;  	StatementsStyle = BlueBoldStyle;  	FunctionsStyle = MaroonStyle;  	VariableStyle = MaroonStyle;  	TypesStyle = BrownStyle;  	break;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,CalcMinAutosizeWidth,The following switch statement is missing a default case: switch (WordWrapMode) {  case WordWrapMode.WordWrapControlWidth:  case WordWrapMode.CharWrapControlWidth:  	maxLineLength = Math.Min (maxLineLength' (ClientSize.Width - LeftIndent - Paddings.Left - Paddings.Right) / CharWidth);  	minWidth = 0;  	break;  case WordWrapMode.WordWrapPreferredWidth:  case WordWrapMode.CharWrapPreferredWidth:  	maxLineLength = Math.Min (maxLineLength' PreferredLineWidth);  	minWidth = LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  	break;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,GetMaxLineWordWrapedWidth,The following switch statement is missing a default case: switch (wordWrapMode) {  case WordWrapMode.WordWrapControlWidth:  case WordWrapMode.CharWrapControlWidth:  	return ClientSize.Width;  case WordWrapMode.WordWrapPreferredWidth:  case WordWrapMode.CharWrapPreferredWidth:  	return LeftIndent + PreferredLineWidth * CharWidth + 2 + Paddings.Left + Paddings.Right;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,RecalcWordWrap,The following switch statement is missing a default case: switch (WordWrapMode) {  case WordWrapMode.WordWrapControlWidth:  	maxCharsPerLine = (ClientSize.Width - LeftIndent - Paddings.Left - Paddings.Right) / CharWidth;  	break;  case WordWrapMode.CharWrapControlWidth:  	maxCharsPerLine = (ClientSize.Width - LeftIndent - Paddings.Left - Paddings.Right) / CharWidth;  	charWrap = true;  	break;  case WordWrapMode.WordWrapPreferredWidth:  	maxCharsPerLine = PreferredLineWidth;  	break;  case WordWrapMode.CharWrapPreferredWidth:  	maxCharsPerLine = PreferredLineWidth;  	charWrap = true;  	break;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,DoAction,The following switch statement is missing a default case: switch (action) {  case FCTBAction.ZoomIn:  	ChangeFontSize (2);  	break;  case FCTBAction.ZoomOut:  	ChangeFontSize (-2);  	break;  case FCTBAction.ZoomNormal:  	RestoreFontSize ();  	break;  case FCTBAction.ScrollDown:  	DoScrollVertical (1' -1);  	break;  case FCTBAction.ScrollUp:  	DoScrollVertical (1' 1);  	break;  case FCTBAction.GoToDialog:  	ShowGoToDialog ();  	break;  case FCTBAction.FindDialog:  	ShowFindDialog ();  	break;  case FCTBAction.FindChar:  	findCharMode = true;  	break;  case FCTBAction.FindNext:  	if (findForm == null || findForm.tbFind.Text == "")  		ShowFindDialog ();  	else  		findForm.FindNext (findForm.tbFind.Text);  	break;  case FCTBAction.ReplaceDialog:  	ShowReplaceDialog ();  	break;  case FCTBAction.Copy:  	Copy ();  	break;  case FCTBAction.CommentSelected:  	CommentSelected ();  	break;  case FCTBAction.Cut:  	if (!Selection.ReadOnly)  		Cut ();  	break;  case FCTBAction.Paste:  	if (!Selection.ReadOnly)  		Paste ();  	break;  case FCTBAction.SelectAll:  	Selection.SelectAll ();  	break;  case FCTBAction.Undo:  	if (!ReadOnly)  		Undo ();  	break;  case FCTBAction.Redo:  	if (!ReadOnly)  		Redo ();  	break;  case FCTBAction.LowerCase:  	if (!Selection.ReadOnly)  		LowerCase ();  	break;  case FCTBAction.UpperCase:  	if (!Selection.ReadOnly)  		UpperCase ();  	break;  case FCTBAction.IndentDecrease:  	if (!Selection.ReadOnly)  		DecreaseIndent ();  	break;  case FCTBAction.IndentIncrease:  	if (!Selection.ReadOnly)  		IncreaseIndent ();  	break;  case FCTBAction.NavigateBackward:  	NavigateBackward ();  	break;  case FCTBAction.NavigateForward:  	NavigateForward ();  	break;  case FCTBAction.UnbookmarkLine:  	UnbookmarkLine (Selection.Start.iLine);  	break;  case FCTBAction.BookmarkLine:  	BookmarkLine (Selection.Start.iLine);  	break;  case FCTBAction.GoNextBookmark:  	GotoNextBookmark (Selection.Start.iLine);  	break;  case FCTBAction.GoPrevBookmark:  	GotoPrevBookmark (Selection.Start.iLine);  	break;  case FCTBAction.ClearWordLeft:  	if (OnKeyPressing ('\b'))  		//KeyPress event processed key  		break;  	if (!Selection.ReadOnly) {  		if (!Selection.IsEmpty)  			ClearSelected ();  		Selection.GoWordLeft (true);  		if (!Selection.ReadOnly)  			ClearSelected ();  	}  	OnKeyPressed ('\b');  	break;  case FCTBAction.ReplaceMode:  	if (!ReadOnly)  		isReplaceMode = !isReplaceMode;  	break;  case FCTBAction.DeleteCharRight:  	if (!Selection.ReadOnly) {  		if (OnKeyPressing ((char)0xff))  			//KeyPress event processed key  			break;  		if (!Selection.IsEmpty)  			ClearSelected ();  		else {  			//if line contains only spaces then delete line  			if (this [Selection.Start.iLine].StartSpacesCount == this [Selection.Start.iLine].Count)  				RemoveSpacesAfterCaret ();  			if (!Selection.IsReadOnlyRightChar ())  				if (Selection.GoRightThroughFolded ()) {  					int iLine = Selection.Start.iLine;  					InsertChar ('\b');  					//if removed \n then trim spaces  					if (iLine != Selection.Start.iLine && AutoIndent)  						if (Selection.Start.iChar > 0)  							RemoveSpacesAfterCaret ();  				}  		}  		OnKeyPressed ((char)0xff);  	}  	break;  case FCTBAction.ClearWordRight:  	if (OnKeyPressing ((char)0xff))  		//KeyPress event processed key  		break;  	if (!Selection.ReadOnly) {  		if (!Selection.IsEmpty)  			ClearSelected ();  		Selection.GoWordRight (true);  		if (!Selection.ReadOnly)  			ClearSelected ();  	}  	OnKeyPressed ((char)0xff);  	break;  case FCTBAction.GoWordLeft:  	Selection.GoWordLeft (false);  	break;  case FCTBAction.GoWordLeftWithSelection:  	Selection.GoWordLeft (true);  	break;  case FCTBAction.GoLeft:  	Selection.GoLeft (false);  	break;  case FCTBAction.GoLeftWithSelection:  	Selection.GoLeft (true);  	break;  case FCTBAction.GoLeft_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoLeft_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.GoWordRight:  	Selection.GoWordRight (false);  	break;  case FCTBAction.GoWordRightWithSelection:  	Selection.GoWordRight (true);  	break;  case FCTBAction.GoRight:  	Selection.GoRight (false);  	break;  case FCTBAction.GoRightWithSelection:  	Selection.GoRight (true);  	break;  case FCTBAction.GoRight_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoRight_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.GoUp:  	Selection.GoUp (false);  	ScrollLeft ();  	break;  case FCTBAction.GoUpWithSelection:  	Selection.GoUp (true);  	ScrollLeft ();  	break;  case FCTBAction.GoUp_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoUp_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.MoveSelectedLinesUp:  	if (!Selection.ColumnSelectionMode)  		MoveSelectedLinesUp ();  	break;  case FCTBAction.GoDown:  	Selection.GoDown (false);  	ScrollLeft ();  	break;  case FCTBAction.GoDownWithSelection:  	Selection.GoDown (true);  	ScrollLeft ();  	break;  case FCTBAction.GoDown_ColumnSelectionMode:  	CheckAndChangeSelectionType ();  	if (Selection.ColumnSelectionMode)  		Selection.GoDown_ColumnSelectionMode ();  	Invalidate ();  	break;  case FCTBAction.MoveSelectedLinesDown:  	if (!Selection.ColumnSelectionMode)  		MoveSelectedLinesDown ();  	break;  case FCTBAction.GoPageUp:  	Selection.GoPageUp (false);  	ScrollLeft ();  	break;  case FCTBAction.GoPageUpWithSelection:  	Selection.GoPageUp (true);  	ScrollLeft ();  	break;  case FCTBAction.GoPageDown:  	Selection.GoPageDown (false);  	ScrollLeft ();  	break;  case FCTBAction.GoPageDownWithSelection:  	Selection.GoPageDown (true);  	ScrollLeft ();  	break;  case FCTBAction.GoFirstLine:  	Selection.GoFirst (false);  	break;  case FCTBAction.GoFirstLineWithSelection:  	Selection.GoFirst (true);  	break;  case FCTBAction.GoHome:  	GoHome (false);  	ScrollLeft ();  	break;  case FCTBAction.GoHomeWithSelection:  	GoHome (true);  	ScrollLeft ();  	break;  case FCTBAction.GoLastLine:  	Selection.GoLast (false);  	break;  case FCTBAction.GoLastLineWithSelection:  	Selection.GoLast (true);  	break;  case FCTBAction.GoEnd:  	Selection.GoEnd (false);  	break;  case FCTBAction.GoEndWithSelection:  	Selection.GoEnd (true);  	break;  case FCTBAction.ClearHints:  	ClearHints ();  	if (MacrosManager != null)  		MacrosManager.IsRecording = false;  	break;  case FCTBAction.MacroRecord:  	if (MacrosManager != null) {  		if (MacrosManager.AllowMacroRecordingByUser)  			MacrosManager.IsRecording = !MacrosManager.IsRecording;  		if (MacrosManager.IsRecording)  			MacrosManager.ClearMacros ();  	}  	break;  case FCTBAction.MacroExecute:  	if (MacrosManager != null) {  		MacrosManager.IsRecording = false;  		MacrosManager.ExecuteMacros ();  	}  	break;  case FCTBAction.CustomAction1:  case FCTBAction.CustomAction2:  case FCTBAction.CustomAction3:  case FCTBAction.CustomAction4:  case FCTBAction.CustomAction5:  case FCTBAction.CustomAction6:  case FCTBAction.CustomAction7:  case FCTBAction.CustomAction8:  case FCTBAction.CustomAction9:  case FCTBAction.CustomAction10:  case FCTBAction.CustomAction11:  case FCTBAction.CustomAction12:  case FCTBAction.CustomAction13:  case FCTBAction.CustomAction14:  case FCTBAction.CustomAction15:  case FCTBAction.CustomAction16:  case FCTBAction.CustomAction17:  case FCTBAction.CustomAction18:  case FCTBAction.CustomAction19:  case FCTBAction.CustomAction20:  	OnCustomAction (new CustomActionEventArgs (action));  	break;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,IsInputKey,The following switch statement is missing a default case: switch ((keyData & Keys.KeyCode)) {  case Keys.Prior:  case Keys.Next:  case Keys.End:  case Keys.Home:  case Keys.Left:  case Keys.Right:  case Keys.Up:  case Keys.Down:  	return true;  case Keys.Escape:  	return false;  case Keys.Tab:  	return (keyData & Keys.Control) == Keys.None;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,FindEndOfFoldingBlock,The following switch statement is missing a default case: switch (FindEndOfFoldingBlockStrategy) {  case FindEndOfFoldingBlockStrategy.Strategy1:  	for (i = iStartLine/*+1*/; i < LinesCount; i++) {  		if (lines.LineHasFoldingStartMarker (i))  			stack.Push (lines [i].FoldingStartMarker);  		if (lines.LineHasFoldingEndMarker (i)) {  			string m = lines [i].FoldingEndMarker;  			while (stack.Count > 0 && stack.Pop () != m)  				;  			if (stack.Count == 0)  				return i;  		}  		maxLines--;  		if (maxLines < 0)  			return i;  	}  	break;  case FindEndOfFoldingBlockStrategy.Strategy2:  	for (i = iStartLine/*+1*/; i < LinesCount; i++) {  		if (lines.LineHasFoldingEndMarker (i)) {  			string m = lines [i].FoldingEndMarker;  			while (stack.Count > 0 && stack.Pop () != m)  				;  			if (stack.Count == 0)  				return i;  		}  		if (lines.LineHasFoldingStartMarker (i))  			stack.Push (lines [i].FoldingStartMarker);  		maxLines--;  		if (maxLines < 0)  			return i;  	}  	break;  }  
Missing Default,FastColoredTextBoxNS,FastColoredTextBox,C:\repos\iwedaz_TractionCalcDSL\FastColoredTextBox\FastColoredTextBox.cs,HighlightBrackets,The following switch statement is missing a default case: switch (BracketsHighlightStrategy) {  case BracketsHighlightStrategy.Strategy1:  	HighlightBrackets1 (LeftBracket' RightBracket' ref leftBracketPosition' ref rightBracketPosition);  	break;  case BracketsHighlightStrategy.Strategy2:  	HighlightBrackets2 (LeftBracket' RightBracket' ref leftBracketPosition' ref rightBracketPosition);  	break;  }  
