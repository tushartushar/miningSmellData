Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Tests,NativeMethods,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\NativeMethods.cs,GetVolumeInformation,The method has 8 parameters. Parameters: RootPathName' VolumeNameBuffer' VolumeNameSize' VolumeSerialNumber' MaximumComponentLength' FileSystemFlags' FileSystemNameBuffer' nFileSystemNameSize
Long Identifier,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestChangeExtension,The length of the parameter expectedFilenameWithNewExtension is 32.
Long Identifier,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestChangeExtension,The length of the parameter expectedFilenameWithNewExtension is 32.
Long Identifier,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryClassIsComplete,The length of the parameter systemIoDirectoryMembersOrdered is 31.
Long Identifier,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileInfoClassIsComplete,The length of the parameter systemIoFileInfoMembersOrdered is 30.
Long Identifier,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryInfoClassIsComplete,The length of the parameter systemIoDirectoryInfoMembersOrdered is 35.
Long Identifier,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryInfoClassIsComplete,The length of the parameter systemIoDirectoryInfoMemberNames is 32.
Long Identifier,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the parameter systemIoFileSystemInfoMembersOrdered is 36.
Long Identifier,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the parameter systemIoFileSystemInfoMemberNames is 33.
Long Statement,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(rootTestDir.Length + 1).IndexOf('\\')); " is 167.
Long Statement,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetRecursiveFilesWithSubsetSearch,The length of the statement  "					Assert.IsTrue(files.Any(f => f.Name == Path.GetFileName(newEmptyFile1) && f.DirectoryName == Path.GetDirectoryName(newEmptyFile1))); " is 132.
Long Statement,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetRecursiveFilesWithSubsetSearch,The length of the statement  "					Assert.IsFalse(files.Any(f => f.Name == Path.GetFileName(newEmptyFile2) && f.DirectoryName == Path.GetDirectoryName(newEmptyFile2))); " is 133.
Long Statement,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetRecursiveFilesWithSubsetSearch,The length of the statement  "					Assert.IsFalse(files.Any(f => f.Name == Path.GetFileName(Filename) && f.DirectoryName == Path.GetDirectoryName(Filename))); " is 123.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(rootTestDir.Length + 1).IndexOf('\\')); " is 167.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestExistsOnFile,The length of the statement  "			Assert.IsFalse(Directory.Exists(new StringBuilder(longPathDirectory).Append(@"\").Append("does-not-exist").ToString())); " is 120.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestEnumerateFileSystemEntriesRecursiveWithSearchWithNoResults,The length of the statement  "				var files = Directory.EnumerateFileSystemEntries(longPathDirectory' "gibberish"' SearchOption.AllDirectories).ToArray(); " is 120.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestDeleteDirectory_JunctionPoint,The length of the statement  "					Assert.IsTrue(!File.Exists(Path.Combine(junctionPoint' "AFile"))' "File should not be accessible via the junction point."); " is 123.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestMove,The length of the statement  "			string destinationPath = Path.GetFullPath(Path.Combine(tempLongPathFilename1' Path.GetFileName(tempLongPathFilename2))); " is 120.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestInUseMove,The length of the statement  "			var tempPathFilename1 = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory()' System.IO.Path.GetRandomFileName()); " is 126.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestInUseMove,The length of the statement  "			var tempPathFilename2 = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory()' System.IO.Path.GetRandomFileName()); " is 126.
Long Statement,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(rootTestDir.Length + 1).IndexOf('\\')); " is 167.
Long Statement,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,FileSystemInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileSystemInfoTests.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(rootTestDir.Length + 1).IndexOf('\\')); " is 167.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(rootTestDir.Length + 1).IndexOf('\\')); " is 167.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The length of the statement  "				var tempBackupLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\gibberish\").Append("backup").ToString(); " is 121.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestEncryptNonExistentFile,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append(Path.GetRandomFileName()).ToString(); " is 121.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestDecryptNonExistentFile,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append(Path.GetRandomFileName()).ToString(); " is 121.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenNonExistent,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append(Path.GetRandomFileName()).ToString(); " is 121.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenWithAccessNonExistent,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append(Path.GetRandomFileName()).ToString(); " is 121.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenWithAccess,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append(Path.GetRandomFileName()).ToString(); " is 121.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestAppendAllLines,The length of the statement  "				Assert.AreEqual("beginning of file" + Environment.NewLine + "test1" + Environment.NewLine + "test2" + Environment.NewLine' " is 122.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestAppendAllLinesEncoding,The length of the statement  "				Assert.AreEqual("beginning of file" + Environment.NewLine + "test1" + Environment.NewLine + "test2" + Environment.NewLine' " is 122.
Long Statement,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(rootTestDir.Length + 1).IndexOf('\\')); " is 167.
Long Statement,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestLongPathDirectoryName,The length of the statement  "			var x = Path.GetDirectoryName(@"C:\Vault Data\w\M\Access Midstream\9305 Hopeton Stabilizer Upgrades\08  COMMUNICATION\8.1  Transmittals\9305-005 Access Midstream Hopeton - Electrical Panel Wiring dwgs\TM-9305-005-Access Midstream-Hopeton Stabilizer Upgrades-Electrical Panel Wiring-IFC Revised.msg"); " is 300.
Long Statement,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestCombineArray,The length of the statement  "			Assert.AreEqual(Path.Combine(Path.Combine(Path.Combine(longPathDirectory' "subdir1")' "subdir2")' "filename.ext")' Path.Combine(strings)); " is 138.
Long Statement,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetRecursiveFilesWithSubsetSearch,The length of the statement  "					Assert.IsTrue(files.Any(f => f.Name == Path.GetFileName(newEmptyFile1) && f.DirectoryName == Path.GetDirectoryName(newEmptyFile1))); " is 132.
Long Statement,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetRecursiveFilesWithSubsetSearch,The length of the statement  "					Assert.IsFalse(files.Any(f => f.Name == Path.GetFileName(newEmptyFile2) && f.DirectoryName == Path.GetDirectoryName(newEmptyFile2))); " is 133.
Long Statement,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetRecursiveFilesWithSubsetSearch,The length of the statement  "					Assert.IsFalse(files.Any(f => f.Name == Path.GetFileName(Filename) && f.DirectoryName == Path.GetDirectoryName(Filename))); " is 123.
Long Statement,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The length of the statement  "				Assert.Throws<IOException>(() => File.Replace(tempLongPathFilename' tempLongPathFilename2' tempBackupLongPathFilename' ignoreMetadataErrors)); " is 142.
Long Statement,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestAppendAllLines,The length of the statement  "				Assert.AreEqual("beginning of file" + Environment.NewLine + "test1" + Environment.NewLine + "test2" + Environment.NewLine' " is 122.
Long Statement,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestAppendAllLinesEncoding,The length of the statement  "				Assert.AreEqual("beginning of file" + Environment.NewLine + "test1" + Environment.NewLine + "test2" + Environment.NewLine' " is 122.
Long Statement,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestGetAccessControlSections,The length of the statement  "				var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestGetDirectoryRoot,The length of the statement  "			Assert.IsTrue(@"\\localhost\C$\".Equals(Directory.GetDirectoryRoot(uncDirectory)' StringComparison.InvariantCultureIgnoreCase)); " is 128.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestMove,The length of the statement  "            string destinationPath = Path.GetFullPath(Path.Combine(tempLongPathFilename1' Path.GetFileName(tempLongPathFilename2))); " is 120.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestInUseMove,The length of the statement  "			var tempPathFilename1 = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory()' System.IO.Path.GetRandomFileName()); " is 126.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestInUseMove,The length of the statement  "			var tempPathFilename2 = System.IO.Path.Combine(System.IO.Directory.GetCurrentDirectory()' System.IO.Path.GetRandomFileName()); " is 126.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestGetAccessControlSections,The length of the statement  "                var securityGetAccessRules = security.GetAuditRules(true' true' typeof(System.Security.Principal.NTAccount)).Cast<FileSystemAccessRule>(); " is 138.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestDirectoryCreateNearMaxPathLimit,The length of the statement  "            var uncPathNearMaxPathLimit = Path.Combine(uncDirectory' new string('x'' Pri.LongPath.NativeMethods.MAX_PATH - uncDirectory.Length - 2)); " is 137.
Long Statement,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestDirectoryEnumerateDirectoriesNearMaxPathLimit,The length of the statement  "            var uncPathNearMaxPathLimit = Path.Combine(uncDirectory' new string('x'' Pri.LongPath.NativeMethods.MAX_PATH - uncDirectory.Length - 2)); " is 137.
Long Statement,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestLongPathDirectoryName,The length of the statement  "            var x = Path.GetDirectoryName(@"C:\Vault Data\w\M\Access Midstream\9305 Hopeton Stabilizer Upgrades\08  COMMUNICATION\8.1  Transmittals\9305-005 Access Midstream Hopeton - Electrical Panel Wiring dwgs\TM-9305-005-Access Midstream-Hopeton Stabilizer Upgrades-Electrical Panel Wiring-IFC Revised.msg"); " is 300.
Long Statement,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestCombineArray,The length of the statement  "            Assert.AreEqual(Path.Combine(Path.Combine(Path.Combine(uncDirectory' "subdir1")' "subdir2")' "filename.ext")' Path.Combine(strings)); " is 133.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,SetUp,The length of the statement  "			longPathRoot = longPathDirectory.Substring(0' TestContext.CurrentContext.TestDirectory.Length + 1 + longPathDirectory.Substring(TestContext.CurrentContext.TestDirectory.Length + 1).IndexOf('\\')); " is 196.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,MemberToMethodString,The length of the statement  "			return string.Format("{0} {1}({2})"' method.ReturnType.Name' method.Name' !parameters.Any() ? "" : (parameters.Select(e => e.ParameterType.Name).Aggregate((c' n) => c + "' " + n))); " is 181.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileClassIsComplete,The length of the statement  "			MemberInfo[] systemIoFileMembers = typeof(System.IO.File).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 164.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileClassIsComplete,The length of the statement  "			MemberInfo[] fileMembers = typeof(File).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 146.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileClassIsComplete,The length of the statement  "				IEnumerable<string> systemIoFileMemberNames = systemIoFileMembers.OrderBy(e => e.Name).Select(e => MemberToMethodString(e)); " is 124.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileClassIsComplete,The length of the statement  "				missing = (!missingCollection2.Any() ? "" : ("missing: " + missingCollection2.Aggregate((c' n) => c + "' " + n) + Environment.NewLine)) + " is 137.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryClassIsComplete,The length of the statement  "			MemberInfo[] systemIoDirectoryMembers = typeof(System.IO.Directory).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 174.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryClassIsComplete,The length of the statement  "			MemberInfo[] directoryMembers = typeof(Directory).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 156.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryClassIsComplete,The length of the statement  "				IEnumerable<string> systemIoDirectoryMemberNames = systemIoDirectoryMembersOrdered.Select(e => MemberToMethodString(e)); " is 120.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryClassIsComplete,The length of the statement  "				missing = (!missingCollection2.Any() ? "" : ("missing: " + missingCollection2.Aggregate((c' n) => c + "' " + n) + Environment.NewLine)) + " is 137.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileInfoClassIsComplete,The length of the statement  "			MemberInfo[] systemIoFileInfoMembers = typeof(System.IO.FileInfo).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 172.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileInfoClassIsComplete,The length of the statement  "			MemberInfo[] FileInfoMembers = typeof(FileInfo).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 154.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileInfoClassIsComplete,The length of the statement  "				missing = (!missingCollection2.Any() ? "" : ("missing: " + missingCollection2.Aggregate((c' n) => c + "' " + n) + Environment.NewLine)) + " is 137.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryInfoClassIsComplete,The length of the statement  "			MemberInfo[] systemIoDirectoryInfoMembers = typeof(System.IO.DirectoryInfo).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 182.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryInfoClassIsComplete,The length of the statement  "			MemberInfo[] DirectoryInfoMembers = typeof(DirectoryInfo).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 164.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryInfoClassIsComplete,The length of the statement  "				IEnumerable<string> systemIoDirectoryInfoMemberNames = systemIoDirectoryInfoMembersOrdered.Select(e => MemberToMethodString(e)); " is 128.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,DirectoryInfoClassIsComplete,The length of the statement  "				missing = (!missingCollection2.Any() ? "" : ("missing: " + missingCollection2.Aggregate((c' n) => c + "' " + n) + Environment.NewLine)) + " is 137.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,PathClassIsComplete,The length of the statement  "			MemberInfo[] systemIoPathMembers = typeof(System.IO.Path).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 164.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,PathClassIsComplete,The length of the statement  "			MemberInfo[] PathMembers = typeof(Path).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 146.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,PathClassIsComplete,The length of the statement  "				missing = (!missingCollection2.Any() ? "" : ("missing: " + missingCollection2.Aggregate((c' n) => c + "' " + n) + Environment.NewLine)) + " is 137.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the statement  "			MemberInfo[] systemIoFileSystemInfoMembers = typeof(System.IO.FileSystemInfo).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 184.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the statement  "			MemberInfo[] FileSystemInfoMembers = typeof(FileSystemInfo).GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static); " is 166.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the statement  "				IOrderedEnumerable<MemberInfo> systemIoFileSystemInfoMembersOrdered = systemIoFileSystemInfoMembers.OrderBy(e => e.Name); " is 121.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the statement  "				IEnumerable<string> systemIoFileSystemInfoMemberNames = systemIoFileSystemInfoMembersOrdered.Select(e => MemberToMethodString(e)); " is 130.
Long Statement,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,FileSystemInfoClassIsComplete,The length of the statement  "				missing = (!missingCollection2.Any() ? "" : ("missing: " + missingCollection2.Aggregate((c' n) => c + "' " + n) + Environment.NewLine)) + " is 137.
Long Statement,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The length of the statement  "			if (!NativeMethods.GetVolumeInformation(System.IO.Path.GetPathRoot(path)' volname' volname.Capacity' out sernum' out maxlen' out flags' fsname' " is 143.
Long Statement,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongComponent,The length of the statement  "			NativeMethods.GetVolumeInformation(System.IO.Path.GetPathRoot(path)' volname' volname.Capacity' out sernum' out maxlen' out flags' fsname' " is 138.
Long Statement,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,CreateNewEmptyFile,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(Path.DirectorySeparatorChar).Append(Path.GetRandomFileName()).ToString(); " is 144.
Long Statement,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,CreateNewEmptyFile,The length of the statement  "			var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(Path.DirectorySeparatorChar).Append(filename).ToString(); " is 128.
Magic Number,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestEnumerateFilesRecursiveWithSearch,The following statement contains a magic number: Assert.AreEqual(2' di.EnumerateFiles("*"' SearchOption.AllDirectories).Count());
Magic Number,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestEnumerateFileSystemInfosWithSearch,The following statement contains a magic number: Assert.AreEqual(2' di.EnumerateFileSystemInfos("*").Count());
Magic Number,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestEnumerateFileSystemInfosWithSearchAndOptionMultipleResults,The following statement contains a magic number: Assert.AreEqual(2' di.EnumerateFileSystemInfos("*").Count());
Magic Number,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetRecursiveFilesWithAllSearch,The following statement contains a magic number: Assert.AreEqual(2' files.Length);
Magic Number,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetFileSystemInfosWithSearch,The following statement contains a magic number: Assert.AreEqual(2' di.GetFileSystemInfos("*").Count());
Magic Number,Tests,DirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryInfoTests.cs,TestGetFileSystemInfosWithSearchAndOptionMultipleResults,The following statement contains a magic number: Assert.AreEqual(2' di.GetFileSystemInfos("*"' SearchOption.TopDirectoryOnly).Count());
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestEnumerateRecursiveFilesWithSearch,The following statement contains a magic number: Assert.AreEqual(2' files.Length);
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestEnumerateRecursiveFileSystemEntriesWithSearch,The following statement contains a magic number: Assert.AreEqual(3' entries.Length);
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestGetDirectoriesWithAnySearch,The following statement contains a magic number: Assert.AreEqual(2' Directory.GetDirectories(longPathDirectory' "*").Count());
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestGetDirectoryRoot,The following statement contains a magic number: Assert.AreEqual(longPathDirectory.Substring(0' 3)' Directory.GetDirectoryRoot(longPathDirectory));
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestGetRecursiveFilesWithAnySearch,The following statement contains a magic number: Assert.AreEqual(2' files.Length);
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestGetRecursiveFilesWithSubsetSearch,The following statement contains a magic number: var searchPattern = Path.GetFileName(randomFileName).Substring(0'3) + "*" + Path.GetExtension(randomFileName);
Magic Number,Tests,DirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\DirectoryTests.cs,TestGetRecursiveFileSystemEntriesWithSearch,The following statement contains a magic number: Assert.AreEqual(3' entries.Length);
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestOpenReadWithWrite,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() =>  				{  					using (var fileStream = fi.Open(FileMode.Append' FileAccess.Read))  					{  						fileStream.WriteByte(43);  					}  				});
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestOpenWriteWritesCorrectly,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestOpenWriteWritesCorrectly,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestReplace,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,FileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileInfoTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplace,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithBackup,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithBackup,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithBackup,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The following statement contains a magic number: Assert.Throws<DirectoryNotFoundException>(() =>  			{  				var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append("filename.ext").ToString();  				var tempBackupLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\gibberish\").Append("backup").ToString();  				using (var fileStream = File.Create(tempLongPathFilename))  				{  					fileStream.WriteByte(42);  				}  				var tempLongPathFilename2 = new StringBuilder(longPathDirectory).Append(@"\").Append("filename2.ext").ToString();    				using (var fileStream = File.Create(tempLongPathFilename2))  				{  					fileStream.WriteByte(52);  				}  				try  				{  					const bool ignoreMetadataErrors = true;  					File.Replace(tempLongPathFilename' tempLongPathFilename2' tempBackupLongPathFilename' ignoreMetadataErrors);  					using (var fileStream = File.OpenRead(tempLongPathFilename2))  					{  						Assert.AreEqual(42' fileStream.ReadByte());  					}  					Assert.IsFalse(File.Exists(tempLongPathFilename));  					Assert.IsTrue(File.Exists(tempBackupLongPathFilename));  				}  				finally  				{  					if (File.Exists(tempLongPathFilename))  						File.Delete(tempLongPathFilename);  					File.Delete(tempLongPathFilename2);  					File.Delete(tempBackupLongPathFilename);  				}  			});
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The following statement contains a magic number: Assert.Throws<DirectoryNotFoundException>(() =>  			{  				var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append("filename.ext").ToString();  				var tempBackupLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\gibberish\").Append("backup").ToString();  				using (var fileStream = File.Create(tempLongPathFilename))  				{  					fileStream.WriteByte(42);  				}  				var tempLongPathFilename2 = new StringBuilder(longPathDirectory).Append(@"\").Append("filename2.ext").ToString();    				using (var fileStream = File.Create(tempLongPathFilename2))  				{  					fileStream.WriteByte(52);  				}  				try  				{  					const bool ignoreMetadataErrors = true;  					File.Replace(tempLongPathFilename' tempLongPathFilename2' tempBackupLongPathFilename' ignoreMetadataErrors);  					using (var fileStream = File.OpenRead(tempLongPathFilename2))  					{  						Assert.AreEqual(42' fileStream.ReadByte());  					}  					Assert.IsFalse(File.Exists(tempLongPathFilename));  					Assert.IsTrue(File.Exists(tempBackupLongPathFilename));  				}  				finally  				{  					if (File.Exists(tempLongPathFilename))  						File.Delete(tempLongPathFilename);  					File.Delete(tempLongPathFilename2);  					File.Delete(tempBackupLongPathFilename);  				}  			});
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The following statement contains a magic number: Assert.Throws<DirectoryNotFoundException>(() =>  			{  				var tempLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\").Append("filename.ext").ToString();  				var tempBackupLongPathFilename = new StringBuilder(longPathDirectory).Append(@"\gibberish\").Append("backup").ToString();  				using (var fileStream = File.Create(tempLongPathFilename))  				{  					fileStream.WriteByte(42);  				}  				var tempLongPathFilename2 = new StringBuilder(longPathDirectory).Append(@"\").Append("filename2.ext").ToString();    				using (var fileStream = File.Create(tempLongPathFilename2))  				{  					fileStream.WriteByte(52);  				}  				try  				{  					const bool ignoreMetadataErrors = true;  					File.Replace(tempLongPathFilename' tempLongPathFilename2' tempBackupLongPathFilename' ignoreMetadataErrors);  					using (var fileStream = File.OpenRead(tempLongPathFilename2))  					{  						Assert.AreEqual(42' fileStream.ReadByte());  					}  					Assert.IsFalse(File.Exists(tempLongPathFilename));  					Assert.IsTrue(File.Exists(tempBackupLongPathFilename));  				}  				finally  				{  					if (File.Exists(tempLongPathFilename))  						File.Delete(tempLongPathFilename);  					File.Delete(tempLongPathFilename2);  					File.Delete(tempBackupLongPathFilename);  				}  			});
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithReadonlyBackupPath,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithReadonlyBackupPath,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReplaceIgnoreMergeWithReadonlyBackupPath,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreateWithBuffersize,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreateWithBuffersize,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreate,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreate,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreateWithBuffersizeFileOptions,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreateWithBuffersizeFileOptions,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenExisting,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenWithAccess,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenRead,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenRead,The following statement contains a magic number: Assert.AreEqual(42' stream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenWrite,The following statement contains a magic number: stream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestOpenWrite,The following statement contains a magic number: Assert.AreEqual(42' stream.ReadByte());
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReadAllBytes,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReadAllBytes,The following statement contains a magic number: Assert.IsTrue(new byte[]{42}.SequenceEqual(File.ReadAllBytes(tempLongPathFilename)));
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReadAllBytesOnHugeFile,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestReadAllBytesOnHugeFile,The following statement contains a magic number: Assert.Throws<IOException>(() =>  			{  				try  				{  					Assert.IsTrue(new byte[] { 42 }.SequenceEqual(File.ReadAllBytes(tempLongPathFilename)));  				}  				finally  				{  					File.Delete(tempLongPathFilename);  				}  			});
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreateWithFileSecurity,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,FileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\FileTests.cs,TestCreateWithFileSecurity,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestGetRootLength,The following statement contains a magic number: Assert.AreEqual(3' Path.GetRootLength(longPathFilename));
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestGetRootLengthWithUnc,The following statement contains a magic number: Assert.AreEqual(23' Path.GetRootLength(@"\\servername\sharename\dir\filename.exe"));
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestGetExtension,The following statement contains a magic number: Assert.AreEqual(tempLongPathFilename.Substring(tempLongPathFilename.Length - 4' 4)'  				Path.GetExtension(tempLongPathFilename));
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestGetExtension,The following statement contains a magic number: Assert.AreEqual(tempLongPathFilename.Substring(tempLongPathFilename.Length - 4' 4)'  				Path.GetExtension(tempLongPathFilename));
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestGetPathRoot,The following statement contains a magic number: Assert.AreEqual(3' root.Length);
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestNormalizeLongPathWithHugePath,The following statement contains a magic number: component = component.Substring(3' component.Length - 3);
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestNormalizeLongPathWithHugePath,The following statement contains a magic number: component = component.Substring(3' component.Length - 3);
Magic Number,Tests,PathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\PathTests.cs,TestNormalizeLongPathWithHugePath,The following statement contains a magic number: path.Length < 32000
Magic Number,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestEnumerateFilesRecursiveWithSearch,The following statement contains a magic number: Assert.AreEqual(2' di.EnumerateFiles("*"' SearchOption.AllDirectories).Count());
Magic Number,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestEnumerateFileSystemInfosWithSearch,The following statement contains a magic number: Assert.AreEqual(2' di.EnumerateFileSystemInfos("*").Count());
Magic Number,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestEnumerateFileSystemInfosWithSearchAndOptionMultipleResults,The following statement contains a magic number: Assert.AreEqual(2' di.EnumerateFileSystemInfos("*").Count());
Magic Number,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetRecursiveFilesWithAllSearch,The following statement contains a magic number: Assert.AreEqual(2' files.Length);
Magic Number,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetFileSystemInfosWithSearch,The following statement contains a magic number: Assert.AreEqual(2' di.GetFileSystemInfos("*").Count());
Magic Number,Tests,UncDirectoryInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryInfoTests.cs,TestGetFileSystemInfosWithSearchAndOptionMultipleResults,The following statement contains a magic number: Assert.AreEqual(2' di.GetFileSystemInfos("*"' SearchOption.TopDirectoryOnly).Count());
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestOpenReadWithWrite,The following statement contains a magic number: Assert.Throws<NotSupportedException>(() =>  				{  					using (var fileStream = fi.Open(FileMode.Append' FileAccess.Read))  					{  						fileStream.WriteByte(43);  					}  				});
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestOpenWriteWritesCorrectly,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestOpenWriteWritesCorrectly,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestReplace,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileInfoTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileInfoTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplace,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplace,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMerge,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithBackup,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithBackup,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithBackup,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithInvalidBackupPath,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithReadonlyBackupPath,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithReadonlyBackupPath,The following statement contains a magic number: fileStream.WriteByte(52);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReplaceIgnoreMergeWithReadonlyBackupPath,The following statement contains a magic number: Assert.AreEqual(42' fileStream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreateWithBuffersize,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreateWithBuffersize,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreate,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreate,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreateWithBuffersizeFileOptions,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreateWithBuffersizeFileOptions,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestOpenExisting,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestOpenWithAccess,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestOpenRead,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestOpenRead,The following statement contains a magic number: Assert.AreEqual(42' stream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestOpenWrite,The following statement contains a magic number: stream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestOpenWrite,The following statement contains a magic number: Assert.AreEqual(42' stream.ReadByte());
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReadAllBytes,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReadAllBytes,The following statement contains a magic number: Assert.IsTrue(new byte[] { 42 }.SequenceEqual(File.ReadAllBytes(tempLongPathFilename)));
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestReadAllBytesOnHugeFile,The following statement contains a magic number: fileStream.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestWriteAllBytes,The following statement contains a magic number: var expected = new byte[] { 3' 4' 1' 5' 9' 2' 6' 5 };
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreateWithFileSecurity,The following statement contains a magic number: s.WriteByte(42);
Magic Number,Tests,UncFileTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncFileTests.cs,TestCreateWithFileSecurity,The following statement contains a magic number: Assert.AreEqual(42' s.ReadByte());
Magic Number,Tests,UncHelper,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncHelper.cs,GetUncFromPath,The following statement contains a magic number: return string.Format(@"\\localhost\{0}$\{1}"' fullPath[0]' fullPath.Substring(3));
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestEnumerateRecursiveFilesWithSearch,The following statement contains a magic number: Assert.AreEqual(2' files.Length);
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestEnumerateRecursiveFileSystemEntriesWithSearch,The following statement contains a magic number: Assert.AreEqual(3' entries.Length);
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestGetDirectoriesWithAnySearch,The following statement contains a magic number: Assert.AreEqual(2' Directory.GetDirectories(uncDirectory' "*").Count());
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestGetRecursiveFilesWithAnySearch,The following statement contains a magic number: Assert.AreEqual(2' files.Length);
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestGetRecursiveFilesWithSubsetSearch,The following statement contains a magic number: var searchPattern = Path.GetFileName(randomFileName).Substring(0' 3) + "*" + Path.GetExtension(randomFileName);
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestGetRecursiveFileSystemEntriesWithSearch,The following statement contains a magic number: Assert.AreEqual(3' entries.Length);
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestDirectoryCreateNearMaxPathLimit,The following statement contains a magic number: var uncPathNearMaxPathLimit = Path.Combine(uncDirectory' new string('x'' Pri.LongPath.NativeMethods.MAX_PATH - uncDirectory.Length - 2));
Magic Number,Tests,UncDirectoryTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncDirectoryTests.cs,TestDirectoryEnumerateDirectoriesNearMaxPathLimit,The following statement contains a magic number: var uncPathNearMaxPathLimit = Path.Combine(uncDirectory' new string('x'' Pri.LongPath.NativeMethods.MAX_PATH - uncDirectory.Length - 2));
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestGetRootLength,The following statement contains a magic number: Assert.AreEqual(15' Path.GetRootLength(uncFilePath));
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestGetRootLengthWithUnc,The following statement contains a magic number: Assert.AreEqual(23' Path.GetRootLength(@"\\servername\sharename\dir\filename.exe"));
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestGetExtension,The following statement contains a magic number: Assert.AreEqual(tempLongPathFilename.Substring(tempLongPathFilename.Length - 4' 4)'                  Path.GetExtension(tempLongPathFilename));
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestGetExtension,The following statement contains a magic number: Assert.AreEqual(tempLongPathFilename.Substring(tempLongPathFilename.Length - 4' 4)'                  Path.GetExtension(tempLongPathFilename));
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestGetPathRoot,The following statement contains a magic number: Assert.AreEqual(15' root.Length);
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestNormalizeLongPathWithHugePath,The following statement contains a magic number: component = component.Substring(3' component.Length - 3);
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestNormalizeLongPathWithHugePath,The following statement contains a magic number: component = component.Substring(3' component.Length - 3);
Magic Number,Tests,UncPathTests,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UncPathTests.cs,TestNormalizeLongPathWithHugePath,The following statement contains a magic number: path.Length < 32000
Magic Number,Tests,UnitTest1,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\UnitTest1.cs,TestProblemWithSystemIoExists,The following statement contains a magic number: Assert.Throws<PathTooLongException>(() =>  			{  				var filename = new StringBuilder(longPathDirectory).Append(@"\").Append("file4.ext").ToString();  				using (var writer = File.CreateText(filename))  				{  					writer.WriteLine("test");  				}  				Assert.IsTrue(File.Exists(filename));    				try  				{  					using (var fileStream = new System.IO.FileStream(filename' FileMode.Append' FileAccess.Write' FileShare.None))  					using (var bw = new BinaryWriter(fileStream))  					{  						bw.Write(10u);  					}    				}  				finally  				{  					File.Delete(filename);  				}  			});
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The following statement contains a magic number: var volname = new StringBuilder(261);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The following statement contains a magic number: var fsname = new StringBuilder(261);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The following statement contains a magic number: maxlen = 255;
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The following statement contains a magic number: var componentText = Enumerable.Repeat("0123456789"' (int) ((maxlen + 10)/10))  				.Aggregate((c' n) => c + n)  				.Substring(0' (int) maxlen);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The following statement contains a magic number: var componentText = Enumerable.Repeat("0123456789"' (int) ((maxlen + 10)/10))  				.Aggregate((c' n) => c + n)  				.Substring(0' (int) maxlen);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongPath,The following statement contains a magic number: Debug.Assert(resultPath.Length > 260);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongComponent,The following statement contains a magic number: var volname = new StringBuilder(261);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongComponent,The following statement contains a magic number: var fsname = new StringBuilder(261);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongComponent,The following statement contains a magic number: var componentText = Enumerable.Repeat("0123456789"' (int)((maxlen + 10) / 10))  				.Aggregate((c' n) => c + n)  				.Substring(0' (int)maxlen);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongComponent,The following statement contains a magic number: var componentText = Enumerable.Repeat("0123456789"' (int)((maxlen + 10) / 10))  				.Aggregate((c' n) => c + n)  				.Substring(0' (int)maxlen);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,MakeLongComponent,The following statement contains a magic number: Debug.Assert(resultPath.Length > 260);
Magic Number,Tests,Util,C:\research\architectureSmells\repos\peteraritchie_LongPath\Tests\Util.cs,CreateNewFileUnicode,The following statement contains a magic number: var fileStream = File.Open(tempLongPathFilename' FileMode.Create' FileAccess.Write' FileShare.Read' 4096'  				FileOptions.SequentialScan);
