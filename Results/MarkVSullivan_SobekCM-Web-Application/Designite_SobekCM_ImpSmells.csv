Implementation smell,Namespace,Class,File,Method,Description
Long Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,SobekCM_Page_Globals,The method has 272 lines of code.
Long Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The method has 188 lines of code.
Long Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The method has 335 lines of code.
Long Method,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The method has 194 lines of code.
Long Method,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The method has 101 lines of code.
Complex Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,SobekCM_Page_Globals,Cyclomatic complexity of the method is 28
Complex Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,Cyclomatic complexity of the method is 16
Complex Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,Cyclomatic complexity of the method is 23
Complex Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Set_Main_Writer,Cyclomatic complexity of the method is 13
Complex Method,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,send_error_email,Cyclomatic complexity of the method is 9
Complex Method,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,Cyclomatic complexity of the method is 21
Complex Method,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,Cyclomatic complexity of the method is 8
Complex Method,SobekCM,UploadiFiveFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\UploadiFiveFileHandler.ashx.cs,ProcessRequest,Cyclomatic complexity of the method is 13
Long Parameter List,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Get_Search_From_Mode,The method has 5 parameters. Parameters: currentMode' SessionIP' Search_Type' Aggregation' Search_Terms
Long Identifier,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the parameter possible_user_by_shibboleth_id is 30.
Long Statement,SobekCM,HtmlEditFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\HtmlEditFileHandler.ashx.cs,ProcessRequest,The length of the statement  "                    context.Response.Write("<script>window.parent.CKEDITOR.tools.callFunction(" + CKEditorFuncNum + "' \"" + url + "\");</script>"); " is 128.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "			if ((CurrentModeCheck.Writer_Type != Writer_Type_Enum.HTML) && (CurrentModeCheck.Writer_Type != Writer_Type_Enum.HTML_Echo) && (CurrentModeCheck.Writer_Type != Writer_Type_Enum.OAI)) " is 182.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "			if ((CurrentModeCheck.Mode == Display_Mode_Enum.Internal) || (CurrentModeCheck.Mode == Display_Mode_Enum.My_Sobek) || (CurrentModeCheck.Mode == Display_Mode_Enum.Administrative) || (CurrentModeCheck.Mode == Display_Mode_Enum.Reset) || (CurrentModeCheck.Mode == Display_Mode_Enum.Item_Cache_Reload) || (CurrentModeCheck.Mode == Display_Mode_Enum.Results) || (CurrentModeCheck.Mode == Display_Mode_Enum.Public_Folder) || ((CurrentModeCheck.Mode == Display_Mode_Enum.Aggregation) && (CurrentModeCheck.Aggregation_Type == Aggregation_Type_Enum.Browse_By)) || (CurrentModeCheck.Mode == Display_Mode_Enum.Item_Print)) " is 611.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "            if ((CurrentModeCheck.Mode == Display_Mode_Enum.Aggregation) && (CurrentModeCheck.Aggregation_Type == Aggregation_Type_Enum.Browse_Info) && (!String.IsNullOrEmpty(CurrentModeCheck.Info_Browse_Mode)) && (CurrentModeCheck.Info_Browse_Mode == "new")) " is 247.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "			// Going to the search page is okay' except for ADVANCED searches ( results aren't okay' but going to the search page is okay ) " is 127.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "			if ((QueryString["b"] != null) || (QueryString["m"] != null) || (QueryString["g"] != null) || (QueryString["c"] != null) || (QueryString["s"] != null) || (QueryString["a"] != null)) " is 181.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "				if ((CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Growth_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Standard_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Text) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Definitions) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Overall)) " is 407.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The length of the statement  "			if ((CurrentModeCheck.Mode == Display_Mode_Enum.Aggregation) && ((currentMode.Aggregation_Type == Aggregation_Type_Enum.Home) || (currentMode.Aggregation_Type == Aggregation_Type_Enum.Home_Edit))) " is 196.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			    if ((UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth != null ) && (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Enabled)) " is 164.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			        string shibboleth_id = HttpContext.Current.Request.ServerVariables[UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute]; " is 158.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable NOT found"); " is 175.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                        tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]); " is 142.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable found"); " is 171.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable = '" + shibboleth_id + "'"); " is 191.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]); " is 142.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                            User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var); " is 142.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) would have been mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping)); " is 194.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                        foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants) " is 139.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Constant value ( " + constantMapping.Value + " ) would have been set to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping)); " is 210.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                    if ((HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"] != null) && (HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"].IndexOf("F") >= 0)) " is 181.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                        User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var); " is 142.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping)); " is 178.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "			                    foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants) " is 139.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "                                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting constant value ( " + constantMapping.Value + " ) to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping)); " is 198.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "						if ((currentMode.Mode != Display_Mode_Enum.Item_Display) || (currentMode.BibID.Length > 0) || (currentMode.ItemID_DEPRECATED <= 0)) " is 131.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "					if ((currentMode.Writer_Type == Writer_Type_Enum.HTML_LoggedIn) && (currentMode.My_Sobek_Type != My_Sobek_Type_Enum.Logon) && (currentMode.My_Sobek_Type != My_Sobek_Type_Enum.Preferences)) " is 188.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "				if ((!currentUser.Is_System_Admin) && (!currentUser.Is_Portal_Admin) && (currentMode.Mode == Display_Mode_Enum.Administrative) && (currentMode.Admin_Type != Admin_Type_Enum.Aggregation_Single)) " is 193.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The length of the statement  "				if ((currentMode.Mode == Display_Mode_Enum.Aggregation) && (currentMode.Aggregation_Type == Aggregation_Type_Enum.Home) && (currentMode.Home_Type == Home_Type_Enum.Personalized)) " is 178.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Set_Main_Writer,The length of the statement  "		    RequestCache RequestSpecificValues = new RequestCache(currentMode' searchResultStatistics' pagedSearchResults' currentUser' publicFolder' topLevelCollection' tracer); " is 166.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Public_Folder,The length of the statement  "            bool result = assistant.Get_Public_User_Folder(currentFolderId' currentPageIndex' tracer' out publicFolder' out searchResultStatistics' out pagedSearchResults); " is 160.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Simple_Web_Content_Text_Block,The length of the statement  "            if (!assistant.Get_Simple_Web_Content_Text(currentMode' UI_ApplicationCache_Gateway.Settings.Servers.Base_Directory' tracer' " is 124.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Simple_Web_Content_Text_Block,The length of the statement  "		    if ((currentMode.Mode == Display_Mode_Enum.Simple_HTML_CMS) && (currentMode.WebContent_Type == WebContent_Type_Enum.Display) && (staticWebContent != null) && (!String.IsNullOrEmpty(staticWebContent.Redirect))) " is 209.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Search_Block,The length of the statement  "            Item_Aggregation hierarchyObject = SobekEngineClient.Aggregations.Get_Aggregation(currentMode.Aggregation' currentMode.Language' UI_ApplicationCache_Gateway.Settings.System.Default_UI_Language' tracer); " is 202.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Search_Block,The length of the statement  "                assistant.Get_Search_Results(currentMode' UI_ApplicationCache_Gateway.Items' hierarchyObject' UI_ApplicationCache_Gateway.Search_Stop_Words' tracer' out searchResultStatistics' out pagedSearchResults); " is 201.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Search_Block,The length of the statement  "                    UI_ApplicationCache_Gateway.Search_History.Add_New_Search(Get_Search_From_Mode(currentMode' HttpContext.Current.Request.UserHostAddress' currentMode.Search_Type' hierarchyObject.Name' currentMode.Search_String )); " is 213.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Get_Search_From_Mode,The length of the statement  "	        returnValue.Time = DateTime.Now.ToShortDateString().Replace("/"' "-") + " " + DateTime.Now.ToShortTimeString().Replace(" "' ""); " is 128.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Get_Search_From_Mode,The length of the statement  "	        returnValue.Aggregation = "<a href=\"" + UrlWriterHelper.Redirect_URL(currentMode) + "\">" + Aggregation.Replace("&"' "&amp;").Replace("\""' "&quot;") + "</a>"; " is 160.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Get_Search_From_Mode,The length of the statement  "	        returnValue.Search_Terms = "<a href=\"" + UrlWriterHelper.Redirect_URL(currentMode) + "\">" + Search_Terms.Replace("&"' "&amp;").Replace("\""' "&quot;") + "</a>"; " is 162.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,MySobekCM_Block,The length of the statement  "			if ((currentMode.My_Sobek_Type == My_Sobek_Type_Enum.Folder_Management) && (HttpContext.Current.Session["user"] != null) && (!String.IsNullOrEmpty(currentMode.My_Sobek_SubMode))) " is 178.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,MySobekCM_Block,The length of the statement  "				if (!assistant.Get_User_Folder(currentMode.My_Sobek_SubMode' userObj.UserID' results_per_page' current_page' tracer' out searchResultStatistics' out pagedSearchResults)) " is 169.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Email_Information,The length of the statement  "                Email_Helper.SendEmail(UI_ApplicationCache_Gateway.Settings.Email.System_Error_Email' EmailTitle' err' true' String.Empty); " is 123.
Long Statement,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,send_error_email,The length of the statement  "                    Email_Helper.SendEmail(UI_ApplicationCache_Gateway.Settings.Email.System_Error_Email' "SobekCM Exception Caught  [Invalid Item Requested]"' builder.ToString()' false' String.Empty); " is 181.
Long Statement,SobekCM,Dashboard,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Dashboard.aspx.cs,Add_Html,The length of the statement  "						Response.Output.WriteLine("<blockquote>" + tracedException.InnerException.StackTrace.Replace("\n"' "<br />") + "</blockquote>"); " is 128.
Long Statement,SobekCM,Dashboard,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Dashboard.aspx.cs,Add_Html,The length of the statement  "					Response.Output.WriteLine("table.Traceroute { border-width: 2px; border-style: solid; border-color: gray; border-collapse: collapse; background-color: white; font-size: small; }"); " is 180.
Long Statement,SobekCM,Dashboard,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Dashboard.aspx.cs,Add_Html,The length of the statement  "					Response.Output.WriteLine("table.Traceroute th { border-width: 2px; padding: 3px; border-style: solid; border-color: gray; background-color: gray; color: white; }"); " is 165.
Long Statement,SobekCM,Dashboard,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Dashboard.aspx.cs,Add_Html,The length of the statement  "					Response.Output.WriteLine("table.Traceroute td { border-width: 2px; padding: 3px; border-style: solid; border-color: gray;	background-color: white; }"); " is 152.
Long Statement,SobekCM,Dashboard,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Dashboard.aspx.cs,Add_Html,The length of the statement  "				Response.Output.WriteLine("This dashboard is currently only used to display exceptions when the application is run locally.<br /><br />"); " is 138.
Long Statement,SobekCM,Dashboard,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Dashboard.aspx.cs,Add_Html,The length of the statement  "				Response.Output.WriteLine("In upcoming versions this screen will be used to assess the overall health of the SobekCM system and spot possible problems."); " is 154.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "					if ((HttpContext.Current.Request.UserHostAddress == "127.0.0.1") || (HttpContext.Current.Request.UserHostAddress == HttpContext.Current.Request.ServerVariables["LOCAL_ADDR"]) || (HttpContext.Current.Request.Url.ToString().IndexOf("localhost") >= 0)) " is 249.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "                        if ((UI_ApplicationCache_Gateway.Settings.Database_Connection == null ) || (String.IsNullOrEmpty(UI_ApplicationCache_Gateway.Settings.Database_Connection.Connection_String))) " is 174.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "									errorMessage = "Missing config/sobekcm.xml configuration file on the web server.<br />Ensure the configuration file 'sobekcm.xml' exists in a 'config' subfolder directly under the web application.<br />Example configuration is:" + " is 230.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "									               "<div style=\"background-color: #bbbbbb; margin-left: 30px; margin-top:10px; padding: 3px;\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;  ?&gt;<br /> &lt;configuration&gt;<br /> &nbsp; &nbsp &lt;connection_string type=&quot;MSSQL&quot;&gt;data source=localhost\\instance;initial catalog=SobekCM;integrated security=Yes;&lt;/connection_string&gt;<br /> &nbsp; &nbsp &lt;error_emails&gt;marsull@uflib.ufl.edu&lt;/error_emails&gt;<br /> &nbsp; &nbsp &lt;error_page&gt;http://ufdc.ufl.edu/error.html&lt;/error_page&gt;<br />&lt;/configuration&gt;</div>"; " is 593.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "								errorMessage = "No database connection string found.<br />Likely an error reading the configuration file due to permissions on the web server.<br />Ensure the configuration file 'sobekcm.xml' exists in a 'config' subfolder directly under the web application.<br />Example configuration is:" + " is 292.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "								               "<div style=\"background-color: #bbbbbb; margin-left: 30px; margin-top:10px; padding: 3px;\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;  ?&gt;<br /> &lt;configuration&gt;<br /> &nbsp; &nbsp &lt;connection_string type=&quot;MSSQL&quot;&gt;data source=localhost\\instance;initial catalog=SobekCM;integrated security=Yes;&lt;/connection_string&gt;<br /> &nbsp; &nbsp &lt;error_emails&gt;marsull@uflib.ufl.edu&lt;/error_emails&gt;<br /> &nbsp; &nbsp &lt;error_page&gt;http://ufdc.ufl.edu/error.html&lt;/error_page&gt;<br />&lt;/configuration&gt;</div>"; " is 593.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "								errorMessage = "Permissions error while connecting to the database and pulling necessary data.<br /><br />Confirm the following:<ul><li>IIS is configured correctly to use anonymous authentication</li><li>Anonymous user (or service account) is part of the sobek_users role in the database.</li></ul>"; " is 300.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "                                errorMessage = "Error connecting to the database and pulling necessary data.<br /><br />Confirm the following:<ul><li>Database connection string is correct ( " + UI_ApplicationCache_Gateway.Settings.Database_Connection.Connection_String + ")</li><li>IIS is configured correctly to use anonymous authentication</li><li>Anonymous user (or service account) is part of the sobek_users role in the database.</li></ul>"; " is 414.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList(); " is 131.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper()))) " is 154.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "                        StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250); " is 305.
Long Statement,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The length of the statement  "                                        StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250); " is 292.
Long Statement,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The length of the statement  "				if ((objErr.Message.IndexOf("potentially dangerous") >= 0) || (objErr.Message.IndexOf("a control with id ") >= 0) || (objErr.Message.IndexOf("Padding is invalid and cannot be removed") >= 0) || (objErr.Message.IndexOf("This is an invalid webresource request") >= 0) || " is 268.
Long Statement,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The length of the statement  "					if ((HttpContext.Current.Request.UserHostAddress == "127.0.0.1") || (HttpContext.Current.Request.UserHostAddress == HttpContext.Current.Request.ServerVariables["LOCAL_ADDR"]) || (HttpContext.Current.Request.Url.ToString().IndexOf("localhost") >= 0)) " is 249.
Long Statement,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The length of the statement  "						Response.Redirect("error_echo.html?text=" + error_message.Replace(" "' "_").Replace("&"' "and").Replace("?"' "")' false); " is 121.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "					if ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Preferences) && (pageGlobals.currentMode.Mode != Display_Mode_Enum.Contact)) " is 131.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "					if ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Preferences) && (pageGlobals.currentMode.Mode != Display_Mode_Enum.Contact)) " is 131.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "				if ((UI_ApplicationCache_Gateway.Settings.Servers.Web_Output_Caching_Minutes > 0) && (String.IsNullOrEmpty(Request.QueryString["refresh"]))) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "                        ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Simple_HTML_CMS) || ((pageGlobals.currentMode.WebContent_Type != WebContent_Type_Enum.Edit) && (pageGlobals.currentMode.WebContent_Type != WebContent_Type_Enum.Milestones))) && " is 228.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Home_Edit)) && " is 149.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "                        ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Work_History)) && " is 152.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "                        ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.User_Permissions)) && " is 156.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Child_Page_Edit)) && " is 155.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Home) || (pageGlobals.currentMode.Home_Type != Home_Type_Enum.Personalized)) && " is 214.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The length of the statement  "						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Item_Display) || (( !String.IsNullOrEmpty(pageGlobals.currentMode.ViewerCode)) && (pageGlobals.currentMode.ViewerCode.ToUpper().IndexOf("citation") < 0) && (pageGlobals.currentMode.ViewerCode.ToUpper().IndexOf("allvolumes3") < 0)))) " is 284.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_Lang_Code,The length of the statement  "	            Response.Output.Write(Web_Language_Enum_Converter.Enum_To_Code(UI_ApplicationCache_Gateway.Settings.System.Default_UI_Language)); " is 129.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_Page_Title,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML) || (pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_LoggedIn)) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_Within_HTML_Head,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML) || (pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_LoggedIn)) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_Body_Attributes,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML) || (pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_LoggedIn)) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_Body_Attributes,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_Echo) && (pageGlobals.currentMode.Mode == Display_Mode_Enum.Item_Display)) " is 139.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_ItemNavForm_Opening,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML) || (pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_LoggedIn)) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_ItemNavForm_Closing,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML) || (pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_LoggedIn)) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Write_Final_HTML,The length of the statement  "			if ((pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML) || (pageGlobals.mainWriter.Writer_Type == Writer_Type_Enum.HTML_LoggedIn)) " is 140.
Long Statement,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,OnInit,The length of the statement  "            SobekFileSystem.Initialize(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network' UI_ApplicationCache_Gateway.Settings.Servers.Image_URL); " is 150.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,SobekCM_Page_Globals,The conditional expression  "(page_name == "SOBEKCM_DATA") && (currentMode.Writer_Type != Writer_Type_Enum.XML) && (currentMode.Writer_Type != Writer_Type_Enum.JSON) && (currentMode.Writer_Type != Writer_Type_Enum.DataSet) && (currentMode.Writer_Type != Writer_Type_Enum.Data_Provider)"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The conditional expression  "(CurrentModeCheck.Mode == Display_Mode_Enum.Internal) || (CurrentModeCheck.Mode == Display_Mode_Enum.My_Sobek) || (CurrentModeCheck.Mode == Display_Mode_Enum.Administrative) || (CurrentModeCheck.Mode == Display_Mode_Enum.Reset) || (CurrentModeCheck.Mode == Display_Mode_Enum.Item_Cache_Reload) || (CurrentModeCheck.Mode == Display_Mode_Enum.Results) || (CurrentModeCheck.Mode == Display_Mode_Enum.Public_Folder) || ((CurrentModeCheck.Mode == Display_Mode_Enum.Aggregation) && (CurrentModeCheck.Aggregation_Type == Aggregation_Type_Enum.Browse_By)) || (CurrentModeCheck.Mode == Display_Mode_Enum.Item_Print)"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The conditional expression  "(CurrentModeCheck.Mode == Display_Mode_Enum.Aggregation) && (CurrentModeCheck.Aggregation_Type == Aggregation_Type_Enum.Browse_Info) && (!String.IsNullOrEmpty(CurrentModeCheck.Info_Browse_Mode)) && (CurrentModeCheck.Info_Browse_Mode == "new")"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The conditional expression  "(QueryString["b"] != null) || (QueryString["m"] != null) || (QueryString["g"] != null) || (QueryString["c"] != null) || (QueryString["s"] != null) || (QueryString["a"] != null)"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The conditional expression  "(CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Growth_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Standard_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Text) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Definitions) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Overall)"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The conditional expression  "((currentMode.Return_URL.IndexOf("admin") >= 0) && (currentMode.Return_URL.IndexOf("admin") <= 1)) ||  			            ((currentMode.Return_URL.IndexOf("mysobek") >= 0) && (currentMode.Return_URL.IndexOf("mysobek") <= 1))"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The conditional expression  "(!currentUser.Is_System_Admin) && (!currentUser.Is_Portal_Admin) && (currentMode.Mode == Display_Mode_Enum.Administrative) && (currentMode.Admin_Type != Admin_Type_Enum.Aggregation_Single)"  is complex.
Complex Conditional,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Simple_Web_Content_Text_Block,The conditional expression  "(currentMode.Mode == Display_Mode_Enum.Simple_HTML_CMS) && (currentMode.WebContent_Type == WebContent_Type_Enum.Display) && (staticWebContent != null) && (!String.IsNullOrEmpty(staticWebContent.Redirect))"  is complex.
Complex Conditional,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The conditional expression  "(objErr.Message.IndexOf("potentially dangerous") >= 0) || (objErr.Message.IndexOf("a control with id ") >= 0) || (objErr.Message.IndexOf("Padding is invalid and cannot be removed") >= 0) || (objErr.Message.IndexOf("This is an invalid webresource request") >= 0) ||  					((objErr.Message.IndexOf("File") >= 0) && (objErr.Message.IndexOf("does not exist") >= 0))"  is complex.
Complex Conditional,SobekCM,SobekCM,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM.aspx.cs,Page_Load,The conditional expression  "(pageGlobals.currentMode.Mode != Display_Mode_Enum.Error) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.My_Sobek) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Administrative) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Contact) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Contact_Sent) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Item_Print) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Item_Cache_Reload) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Reset) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Internal) &&  						(pageGlobals.currentMode.Mode != Display_Mode_Enum.Public_Folder) &&                          ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Simple_HTML_CMS) || ((pageGlobals.currentMode.WebContent_Type != WebContent_Type_Enum.Edit) && (pageGlobals.currentMode.WebContent_Type != WebContent_Type_Enum.Milestones))) &&  						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Home_Edit)) &&                          ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Work_History)) &&                          ((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.User_Permissions)) &&  						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Child_Page_Edit)) &&  						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Aggregation) || (pageGlobals.currentMode.Aggregation_Type != Aggregation_Type_Enum.Home) || (pageGlobals.currentMode.Home_Type != Home_Type_Enum.Personalized)) &&  						(pageGlobals.currentMode.Result_Display_Type != Result_Display_Type_Enum.Export) &&  						((pageGlobals.currentMode.Mode != Display_Mode_Enum.Item_Display) || (( !String.IsNullOrEmpty(pageGlobals.currentMode.ViewerCode)) && (pageGlobals.currentMode.ViewerCode.ToUpper().IndexOf("citation") < 0) && (pageGlobals.currentMode.ViewerCode.ToUpper().IndexOf("allvolumes3") < 0)))"  is complex.
Empty Catch Block,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,SobekCM_Page_Globals,The method has an empty catch block.
Empty Catch Block,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,SobekCM_Page_Globals,The method has an empty catch block.
Empty Catch Block,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Email_Information,The method has an empty catch block.
Empty Catch Block,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Email_Information,The method has an empty catch block.
Empty Catch Block,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,send_error_email,The method has an empty catch block.
Empty Catch Block,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,send_error_email,The method has an empty catch block.
Empty Catch Block,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The method has an empty catch block.
Empty Catch Block,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The method has an empty catch block.
Empty Catch Block,SobekCM,Global,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Global.asax.cs,Application_Error,The method has an empty catch block.
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following statement contains a magic number: if (CurrentModeCheck.Mode == Display_Mode_Enum.Statistics)  			{  				// Some submodes are off limites  				if ((CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Growth_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Standard_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Text) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Definitions) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Overall))  				{  					CurrentModeCheck.Statistics_Type = Statistics_Type_Enum.Usage_Overall;  					HttpContext.Current.Response.Status = "301 Moved Permanently";  					HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  					HttpContext.Current.ApplicationInstance.CompleteRequest();  					currentMode.Request_Completed = true;  					return;  				}    				// Ensure the URL behaved correctly  				switch (CurrentModeCheck.Statistics_Type)  				{  					case Statistics_Type_Enum.Item_Count_Text:  					case Statistics_Type_Enum.Item_Count_Growth_View:  					case Statistics_Type_Enum.Usage_Definitions:  						if (url_relative_depth > 3)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Usage_Overall:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Item_Count_Standard_View:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						else if (url_relative_depth == 2)  						{  							if (( url_relative_info != null ) && (url_relative_info.Length > 1 ) && ( url_relative_info[1] != "itemcount"))  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  						}  						break;  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following statement contains a magic number: if (CurrentModeCheck.Mode == Display_Mode_Enum.Statistics)  			{  				// Some submodes are off limites  				if ((CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Growth_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Standard_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Text) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Definitions) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Overall))  				{  					CurrentModeCheck.Statistics_Type = Statistics_Type_Enum.Usage_Overall;  					HttpContext.Current.Response.Status = "301 Moved Permanently";  					HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  					HttpContext.Current.ApplicationInstance.CompleteRequest();  					currentMode.Request_Completed = true;  					return;  				}    				// Ensure the URL behaved correctly  				switch (CurrentModeCheck.Statistics_Type)  				{  					case Statistics_Type_Enum.Item_Count_Text:  					case Statistics_Type_Enum.Item_Count_Growth_View:  					case Statistics_Type_Enum.Usage_Definitions:  						if (url_relative_depth > 3)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Usage_Overall:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Item_Count_Standard_View:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						else if (url_relative_depth == 2)  						{  							if (( url_relative_info != null ) && (url_relative_info.Length > 1 ) && ( url_relative_info[1] != "itemcount"))  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  						}  						break;  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following statement contains a magic number: if (CurrentModeCheck.Mode == Display_Mode_Enum.Statistics)  			{  				// Some submodes are off limites  				if ((CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Growth_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Standard_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Text) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Definitions) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Overall))  				{  					CurrentModeCheck.Statistics_Type = Statistics_Type_Enum.Usage_Overall;  					HttpContext.Current.Response.Status = "301 Moved Permanently";  					HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  					HttpContext.Current.ApplicationInstance.CompleteRequest();  					currentMode.Request_Completed = true;  					return;  				}    				// Ensure the URL behaved correctly  				switch (CurrentModeCheck.Statistics_Type)  				{  					case Statistics_Type_Enum.Item_Count_Text:  					case Statistics_Type_Enum.Item_Count_Growth_View:  					case Statistics_Type_Enum.Usage_Definitions:  						if (url_relative_depth > 3)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Usage_Overall:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Item_Count_Standard_View:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						else if (url_relative_depth == 2)  						{  							if (( url_relative_info != null ) && (url_relative_info.Length > 1 ) && ( url_relative_info[1] != "itemcount"))  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  						}  						break;  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following statement contains a magic number: if (CurrentModeCheck.Mode == Display_Mode_Enum.Statistics)  			{  				// Some submodes are off limites  				if ((CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Growth_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Standard_View) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Item_Count_Text) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Definitions) && (CurrentModeCheck.Statistics_Type != Statistics_Type_Enum.Usage_Overall))  				{  					CurrentModeCheck.Statistics_Type = Statistics_Type_Enum.Usage_Overall;  					HttpContext.Current.Response.Status = "301 Moved Permanently";  					HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  					HttpContext.Current.ApplicationInstance.CompleteRequest();  					currentMode.Request_Completed = true;  					return;  				}    				// Ensure the URL behaved correctly  				switch (CurrentModeCheck.Statistics_Type)  				{  					case Statistics_Type_Enum.Item_Count_Text:  					case Statistics_Type_Enum.Item_Count_Growth_View:  					case Statistics_Type_Enum.Usage_Definitions:  						if (url_relative_depth > 3)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Usage_Overall:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Item_Count_Standard_View:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						else if (url_relative_depth == 2)  						{  							if (( url_relative_info != null ) && (url_relative_info.Length > 1 ) && ( url_relative_info[1] != "itemcount"))  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  						}  						break;  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following statement contains a magic number: if ((CurrentModeCheck.Mode == Display_Mode_Enum.Aggregation) && ((currentMode.Aggregation_Type == Aggregation_Type_Enum.Home) || (currentMode.Aggregation_Type == Aggregation_Type_Enum.Home_Edit)))  			{  				// Different code depending on if this is an aggregation or not  				if (( String.IsNullOrEmpty(CurrentModeCheck.Aggregation)) || (CurrentModeCheck.Aggregation == "all"))  				{  					switch (CurrentModeCheck.Home_Type)  					{  						case Home_Type_Enum.List:  							if (url_relative_depth > 0)  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  							break;    						case Home_Type_Enum.Descriptions:  						case Home_Type_Enum.Tree:  						case Home_Type_Enum.Partners_List:  							if (url_relative_depth > 1)  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  							break;    						case Home_Type_Enum.Partners_Thumbnails:  							if (url_relative_depth > 2)  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  							break;    						case Home_Type_Enum.Personalized:  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  					}  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following statement contains a magic number: if (CurrentModeCheck.Mode == Display_Mode_Enum.Item_Display)  			{  				if (( !String.IsNullOrEmpty(CurrentModeCheck.ViewerCode)) || (url_relative_depth > 2))    				{  					CurrentModeCheck.ViewerCode = String.Empty;    					HttpContext.Current.Response.Status = "301 Moved Permanently";  					HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  					HttpContext.Current.ApplicationInstance.CompleteRequest();  					currentMode.Request_Completed = true;  					return;  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The following statement contains a magic number: if (HttpContext.Current.Session["user"] == null)  			{  				// If this is a responce from Shibboleth' get the user information and register them if necessary  			    if ((UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth != null ) && (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Enabled))  			    {  			        string shibboleth_id = HttpContext.Current.Request.ServerVariables[UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute];  			        if (shibboleth_id == null)  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable NOT found");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route  			                if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))  			                {  			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);  			                    }  			                }  			            }  			        }  			        else  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable found");                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable = '" + shibboleth_id + "'");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route                              if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))                              {                                  foreach (string var in HttpContext.Current.Request.ServerVariables)                                  {                                      tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);                                  }                              }  			            }    			            if (shibboleth_id.Length > 0)  			            {  			                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Pulling from database by shibboleth id");    			                User_Object possible_user_by_shibboleth_id = Engine_Database.Get_User(shibboleth_id' tracer);    			                // Check to see if we got a valid user back  			                if (possible_user_by_shibboleth_id != null)  			                {  			                    if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                    {  			                        // Set the user information from the server variables here   			                        foreach (string var in HttpContext.Current.Request.ServerVariables)  			                        {  			                            User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                            if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                string value = HttpContext.Current.Request.ServerVariables[var];    			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) would have been mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                                }  			                            }  			                            else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                            }  			                        }    			                        // Set any constants as well  			                        foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                        {  			                            if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Constant value ( " + constantMapping.Value + " ) would have been set to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                                }  			                            }  			                        }  			                    }    			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting session user from shibboleth id");  			                    possible_user_by_shibboleth_id.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shibboleth_id;  			                }  			                else  			                {  			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "User from shibboleth id was null.. adding user");    			                    // Now build the user object  			                    User_Object newUser = new User_Object();  			                    if ((HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"] != null) && (HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"].IndexOf("F") >= 0))  			                        newUser.Can_Submit = true;  			                    else  			                        newUser.Can_Submit = false;  			                    newUser.Send_Email_On_Submission = true;  			                    newUser.Email = String.Empty;  			                    newUser.Family_Name = String.Empty;  			                    newUser.Given_Name = String.Empty;  			                    newUser.Organization = String.Empty;  			                    newUser.ShibbID = shibboleth_id;  			                    newUser.UserID = -1;    			                    // Set the user information from the server variables here   			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                        if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {  			                            string value = HttpContext.Current.Request.ServerVariables[var];  			                            newUser.Set_Value_By_Mapping(mapping' value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                            }  			                        }  			                        else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                        {  			                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                        }  			                    }    			                    // Set any constants as well  			                    foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                    {  			                        if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {                                          newUser.Set_Value_By_Mapping(constantMapping.Mapping' constantMapping.Value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {                                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting constant value ( " + constantMapping.Value + " ) to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                            }  			                        }  			                    }    			                    // Set the username  			                    if (String.IsNullOrEmpty(newUser.UserName))  			                    {  			                        if (newUser.Email.Length > 0)  			                            newUser.UserName = newUser.Email;  			                        else  			                            newUser.UserName = newUser.Family_Name + shibboleth_id;  			                    }    			                    // Set a random password  			                    StringBuilder passwordBuilder = new StringBuilder();  			                    Random randomGenerator = new Random(DateTime.Now.Millisecond);  			                    for (int i = 0; i < 5; i++)  			                    {  			                        int randomNumber = randomGenerator.Next(97' 122);  			                        passwordBuilder.Append((char) randomNumber);    			                        int randomNumber2 = randomGenerator.Next(65' 90);  			                        passwordBuilder.Append((char) randomNumber2);  			                    }  			                    string password = passwordBuilder.ToString();    			                    // Now' save this user  			                    SobekCM_Database.Save_User(newUser' password' newUser.Authentication_Type' tracer);    			                    // Now' pull back out of the database  			                    User_Object possible_user_by_shib2 = Engine_Database.Get_User(shibboleth_id' tracer);  			                    possible_user_by_shib2.Is_Just_Registered = true;  			                    possible_user_by_shib2.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shib2;  			                }    			                if (HttpContext.Current.Session["user"] != null)  			                {  			                    currentMode.Mode = Display_Mode_Enum.My_Sobek;  			                    currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Home;  			                }  			                else  			                {  			                    currentMode.Mode = Display_Mode_Enum.Aggregation;  			                    currentMode.Aggregation_Type = Aggregation_Type_Enum.Home;  			                    currentMode.Aggregation = String.Empty;  			                }    			                if (!UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                {  			                    UrlWriterHelper.Redirect(currentMode);  			                }  			            }  			        }  			    }    			    // If the user information is still missing ' but the SobekUser cookie exists' then pull   				// the user information from the SobekUser cookie in the current requests  				if ((HttpContext.Current.Session["user"] == null) && (HttpContext.Current.Request.Cookies["SobekUser"] != null))  				{  					string userid_string = HttpContext.Current.Request.Cookies["SobekUser"]["userid"];  					int userid = -1;    					bool valid_perhaps = userid_string.All(Char.IsNumber);  					if (valid_perhaps)  						Int32.TryParse(userid_string' out userid);    					if (userid > 0)  					{  						User_Object possible_user = Engine_Database.Get_User(userid' tracer);  						if (possible_user != null)  						{  							string cookie_security_hash = HttpContext.Current.Request.Cookies["SobekUser"]["security_hash"];  							if (cookie_security_hash == possible_user.Security_Hash(HttpContext.Current.Request.UserHostAddress))  							{  								HttpContext.Current.Session["user"] = possible_user;  							}  							else  							{  								// Security hash did not match' so clear the cookie  								HttpCookie userCookie = new HttpCookie("SobekUser");  								userCookie.Values["userid"] = String.Empty;  								userCookie.Values["security_hash"] = String.Empty;  								userCookie.Expires = DateTime.Now.AddDays(-1);  								HttpContext.Current.Response.Cookies.Add(userCookie);  							}  						}  					}  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The following statement contains a magic number: if (HttpContext.Current.Session["user"] == null)  			{  				// If this is a responce from Shibboleth' get the user information and register them if necessary  			    if ((UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth != null ) && (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Enabled))  			    {  			        string shibboleth_id = HttpContext.Current.Request.ServerVariables[UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute];  			        if (shibboleth_id == null)  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable NOT found");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route  			                if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))  			                {  			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);  			                    }  			                }  			            }  			        }  			        else  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable found");                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable = '" + shibboleth_id + "'");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route                              if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))                              {                                  foreach (string var in HttpContext.Current.Request.ServerVariables)                                  {                                      tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);                                  }                              }  			            }    			            if (shibboleth_id.Length > 0)  			            {  			                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Pulling from database by shibboleth id");    			                User_Object possible_user_by_shibboleth_id = Engine_Database.Get_User(shibboleth_id' tracer);    			                // Check to see if we got a valid user back  			                if (possible_user_by_shibboleth_id != null)  			                {  			                    if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                    {  			                        // Set the user information from the server variables here   			                        foreach (string var in HttpContext.Current.Request.ServerVariables)  			                        {  			                            User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                            if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                string value = HttpContext.Current.Request.ServerVariables[var];    			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) would have been mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                                }  			                            }  			                            else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                            }  			                        }    			                        // Set any constants as well  			                        foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                        {  			                            if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Constant value ( " + constantMapping.Value + " ) would have been set to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                                }  			                            }  			                        }  			                    }    			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting session user from shibboleth id");  			                    possible_user_by_shibboleth_id.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shibboleth_id;  			                }  			                else  			                {  			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "User from shibboleth id was null.. adding user");    			                    // Now build the user object  			                    User_Object newUser = new User_Object();  			                    if ((HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"] != null) && (HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"].IndexOf("F") >= 0))  			                        newUser.Can_Submit = true;  			                    else  			                        newUser.Can_Submit = false;  			                    newUser.Send_Email_On_Submission = true;  			                    newUser.Email = String.Empty;  			                    newUser.Family_Name = String.Empty;  			                    newUser.Given_Name = String.Empty;  			                    newUser.Organization = String.Empty;  			                    newUser.ShibbID = shibboleth_id;  			                    newUser.UserID = -1;    			                    // Set the user information from the server variables here   			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                        if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {  			                            string value = HttpContext.Current.Request.ServerVariables[var];  			                            newUser.Set_Value_By_Mapping(mapping' value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                            }  			                        }  			                        else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                        {  			                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                        }  			                    }    			                    // Set any constants as well  			                    foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                    {  			                        if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {                                          newUser.Set_Value_By_Mapping(constantMapping.Mapping' constantMapping.Value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {                                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting constant value ( " + constantMapping.Value + " ) to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                            }  			                        }  			                    }    			                    // Set the username  			                    if (String.IsNullOrEmpty(newUser.UserName))  			                    {  			                        if (newUser.Email.Length > 0)  			                            newUser.UserName = newUser.Email;  			                        else  			                            newUser.UserName = newUser.Family_Name + shibboleth_id;  			                    }    			                    // Set a random password  			                    StringBuilder passwordBuilder = new StringBuilder();  			                    Random randomGenerator = new Random(DateTime.Now.Millisecond);  			                    for (int i = 0; i < 5; i++)  			                    {  			                        int randomNumber = randomGenerator.Next(97' 122);  			                        passwordBuilder.Append((char) randomNumber);    			                        int randomNumber2 = randomGenerator.Next(65' 90);  			                        passwordBuilder.Append((char) randomNumber2);  			                    }  			                    string password = passwordBuilder.ToString();    			                    // Now' save this user  			                    SobekCM_Database.Save_User(newUser' password' newUser.Authentication_Type' tracer);    			                    // Now' pull back out of the database  			                    User_Object possible_user_by_shib2 = Engine_Database.Get_User(shibboleth_id' tracer);  			                    possible_user_by_shib2.Is_Just_Registered = true;  			                    possible_user_by_shib2.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shib2;  			                }    			                if (HttpContext.Current.Session["user"] != null)  			                {  			                    currentMode.Mode = Display_Mode_Enum.My_Sobek;  			                    currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Home;  			                }  			                else  			                {  			                    currentMode.Mode = Display_Mode_Enum.Aggregation;  			                    currentMode.Aggregation_Type = Aggregation_Type_Enum.Home;  			                    currentMode.Aggregation = String.Empty;  			                }    			                if (!UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                {  			                    UrlWriterHelper.Redirect(currentMode);  			                }  			            }  			        }  			    }    			    // If the user information is still missing ' but the SobekUser cookie exists' then pull   				// the user information from the SobekUser cookie in the current requests  				if ((HttpContext.Current.Session["user"] == null) && (HttpContext.Current.Request.Cookies["SobekUser"] != null))  				{  					string userid_string = HttpContext.Current.Request.Cookies["SobekUser"]["userid"];  					int userid = -1;    					bool valid_perhaps = userid_string.All(Char.IsNumber);  					if (valid_perhaps)  						Int32.TryParse(userid_string' out userid);    					if (userid > 0)  					{  						User_Object possible_user = Engine_Database.Get_User(userid' tracer);  						if (possible_user != null)  						{  							string cookie_security_hash = HttpContext.Current.Request.Cookies["SobekUser"]["security_hash"];  							if (cookie_security_hash == possible_user.Security_Hash(HttpContext.Current.Request.UserHostAddress))  							{  								HttpContext.Current.Session["user"] = possible_user;  							}  							else  							{  								// Security hash did not match' so clear the cookie  								HttpCookie userCookie = new HttpCookie("SobekUser");  								userCookie.Values["userid"] = String.Empty;  								userCookie.Values["security_hash"] = String.Empty;  								userCookie.Expires = DateTime.Now.AddDays(-1);  								HttpContext.Current.Response.Cookies.Add(userCookie);  							}  						}  					}  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The following statement contains a magic number: if (HttpContext.Current.Session["user"] == null)  			{  				// If this is a responce from Shibboleth' get the user information and register them if necessary  			    if ((UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth != null ) && (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Enabled))  			    {  			        string shibboleth_id = HttpContext.Current.Request.ServerVariables[UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute];  			        if (shibboleth_id == null)  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable NOT found");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route  			                if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))  			                {  			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);  			                    }  			                }  			            }  			        }  			        else  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable found");                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable = '" + shibboleth_id + "'");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route                              if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))                              {                                  foreach (string var in HttpContext.Current.Request.ServerVariables)                                  {                                      tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);                                  }                              }  			            }    			            if (shibboleth_id.Length > 0)  			            {  			                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Pulling from database by shibboleth id");    			                User_Object possible_user_by_shibboleth_id = Engine_Database.Get_User(shibboleth_id' tracer);    			                // Check to see if we got a valid user back  			                if (possible_user_by_shibboleth_id != null)  			                {  			                    if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                    {  			                        // Set the user information from the server variables here   			                        foreach (string var in HttpContext.Current.Request.ServerVariables)  			                        {  			                            User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                            if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                string value = HttpContext.Current.Request.ServerVariables[var];    			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) would have been mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                                }  			                            }  			                            else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                            }  			                        }    			                        // Set any constants as well  			                        foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                        {  			                            if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Constant value ( " + constantMapping.Value + " ) would have been set to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                                }  			                            }  			                        }  			                    }    			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting session user from shibboleth id");  			                    possible_user_by_shibboleth_id.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shibboleth_id;  			                }  			                else  			                {  			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "User from shibboleth id was null.. adding user");    			                    // Now build the user object  			                    User_Object newUser = new User_Object();  			                    if ((HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"] != null) && (HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"].IndexOf("F") >= 0))  			                        newUser.Can_Submit = true;  			                    else  			                        newUser.Can_Submit = false;  			                    newUser.Send_Email_On_Submission = true;  			                    newUser.Email = String.Empty;  			                    newUser.Family_Name = String.Empty;  			                    newUser.Given_Name = String.Empty;  			                    newUser.Organization = String.Empty;  			                    newUser.ShibbID = shibboleth_id;  			                    newUser.UserID = -1;    			                    // Set the user information from the server variables here   			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                        if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {  			                            string value = HttpContext.Current.Request.ServerVariables[var];  			                            newUser.Set_Value_By_Mapping(mapping' value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                            }  			                        }  			                        else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                        {  			                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                        }  			                    }    			                    // Set any constants as well  			                    foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                    {  			                        if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {                                          newUser.Set_Value_By_Mapping(constantMapping.Mapping' constantMapping.Value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {                                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting constant value ( " + constantMapping.Value + " ) to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                            }  			                        }  			                    }    			                    // Set the username  			                    if (String.IsNullOrEmpty(newUser.UserName))  			                    {  			                        if (newUser.Email.Length > 0)  			                            newUser.UserName = newUser.Email;  			                        else  			                            newUser.UserName = newUser.Family_Name + shibboleth_id;  			                    }    			                    // Set a random password  			                    StringBuilder passwordBuilder = new StringBuilder();  			                    Random randomGenerator = new Random(DateTime.Now.Millisecond);  			                    for (int i = 0; i < 5; i++)  			                    {  			                        int randomNumber = randomGenerator.Next(97' 122);  			                        passwordBuilder.Append((char) randomNumber);    			                        int randomNumber2 = randomGenerator.Next(65' 90);  			                        passwordBuilder.Append((char) randomNumber2);  			                    }  			                    string password = passwordBuilder.ToString();    			                    // Now' save this user  			                    SobekCM_Database.Save_User(newUser' password' newUser.Authentication_Type' tracer);    			                    // Now' pull back out of the database  			                    User_Object possible_user_by_shib2 = Engine_Database.Get_User(shibboleth_id' tracer);  			                    possible_user_by_shib2.Is_Just_Registered = true;  			                    possible_user_by_shib2.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shib2;  			                }    			                if (HttpContext.Current.Session["user"] != null)  			                {  			                    currentMode.Mode = Display_Mode_Enum.My_Sobek;  			                    currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Home;  			                }  			                else  			                {  			                    currentMode.Mode = Display_Mode_Enum.Aggregation;  			                    currentMode.Aggregation_Type = Aggregation_Type_Enum.Home;  			                    currentMode.Aggregation = String.Empty;  			                }    			                if (!UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                {  			                    UrlWriterHelper.Redirect(currentMode);  			                }  			            }  			        }  			    }    			    // If the user information is still missing ' but the SobekUser cookie exists' then pull   				// the user information from the SobekUser cookie in the current requests  				if ((HttpContext.Current.Session["user"] == null) && (HttpContext.Current.Request.Cookies["SobekUser"] != null))  				{  					string userid_string = HttpContext.Current.Request.Cookies["SobekUser"]["userid"];  					int userid = -1;    					bool valid_perhaps = userid_string.All(Char.IsNumber);  					if (valid_perhaps)  						Int32.TryParse(userid_string' out userid);    					if (userid > 0)  					{  						User_Object possible_user = Engine_Database.Get_User(userid' tracer);  						if (possible_user != null)  						{  							string cookie_security_hash = HttpContext.Current.Request.Cookies["SobekUser"]["security_hash"];  							if (cookie_security_hash == possible_user.Security_Hash(HttpContext.Current.Request.UserHostAddress))  							{  								HttpContext.Current.Session["user"] = possible_user;  							}  							else  							{  								// Security hash did not match' so clear the cookie  								HttpCookie userCookie = new HttpCookie("SobekUser");  								userCookie.Values["userid"] = String.Empty;  								userCookie.Values["security_hash"] = String.Empty;  								userCookie.Expires = DateTime.Now.AddDays(-1);  								HttpContext.Current.Response.Cookies.Add(userCookie);  							}  						}  					}  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The following statement contains a magic number: if (HttpContext.Current.Session["user"] == null)  			{  				// If this is a responce from Shibboleth' get the user information and register them if necessary  			    if ((UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth != null ) && (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Enabled))  			    {  			        string shibboleth_id = HttpContext.Current.Request.ServerVariables[UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute];  			        if (shibboleth_id == null)  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable NOT found");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route  			                if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))  			                {  			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);  			                    }  			                }  			            }  			        }  			        else  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable found");                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable = '" + shibboleth_id + "'");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route                              if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))                              {                                  foreach (string var in HttpContext.Current.Request.ServerVariables)                                  {                                      tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);                                  }                              }  			            }    			            if (shibboleth_id.Length > 0)  			            {  			                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Pulling from database by shibboleth id");    			                User_Object possible_user_by_shibboleth_id = Engine_Database.Get_User(shibboleth_id' tracer);    			                // Check to see if we got a valid user back  			                if (possible_user_by_shibboleth_id != null)  			                {  			                    if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                    {  			                        // Set the user information from the server variables here   			                        foreach (string var in HttpContext.Current.Request.ServerVariables)  			                        {  			                            User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                            if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                string value = HttpContext.Current.Request.ServerVariables[var];    			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) would have been mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                                }  			                            }  			                            else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                            }  			                        }    			                        // Set any constants as well  			                        foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                        {  			                            if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Constant value ( " + constantMapping.Value + " ) would have been set to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                                }  			                            }  			                        }  			                    }    			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting session user from shibboleth id");  			                    possible_user_by_shibboleth_id.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shibboleth_id;  			                }  			                else  			                {  			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "User from shibboleth id was null.. adding user");    			                    // Now build the user object  			                    User_Object newUser = new User_Object();  			                    if ((HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"] != null) && (HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"].IndexOf("F") >= 0))  			                        newUser.Can_Submit = true;  			                    else  			                        newUser.Can_Submit = false;  			                    newUser.Send_Email_On_Submission = true;  			                    newUser.Email = String.Empty;  			                    newUser.Family_Name = String.Empty;  			                    newUser.Given_Name = String.Empty;  			                    newUser.Organization = String.Empty;  			                    newUser.ShibbID = shibboleth_id;  			                    newUser.UserID = -1;    			                    // Set the user information from the server variables here   			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                        if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {  			                            string value = HttpContext.Current.Request.ServerVariables[var];  			                            newUser.Set_Value_By_Mapping(mapping' value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                            }  			                        }  			                        else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                        {  			                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                        }  			                    }    			                    // Set any constants as well  			                    foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                    {  			                        if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {                                          newUser.Set_Value_By_Mapping(constantMapping.Mapping' constantMapping.Value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {                                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting constant value ( " + constantMapping.Value + " ) to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                            }  			                        }  			                    }    			                    // Set the username  			                    if (String.IsNullOrEmpty(newUser.UserName))  			                    {  			                        if (newUser.Email.Length > 0)  			                            newUser.UserName = newUser.Email;  			                        else  			                            newUser.UserName = newUser.Family_Name + shibboleth_id;  			                    }    			                    // Set a random password  			                    StringBuilder passwordBuilder = new StringBuilder();  			                    Random randomGenerator = new Random(DateTime.Now.Millisecond);  			                    for (int i = 0; i < 5; i++)  			                    {  			                        int randomNumber = randomGenerator.Next(97' 122);  			                        passwordBuilder.Append((char) randomNumber);    			                        int randomNumber2 = randomGenerator.Next(65' 90);  			                        passwordBuilder.Append((char) randomNumber2);  			                    }  			                    string password = passwordBuilder.ToString();    			                    // Now' save this user  			                    SobekCM_Database.Save_User(newUser' password' newUser.Authentication_Type' tracer);    			                    // Now' pull back out of the database  			                    User_Object possible_user_by_shib2 = Engine_Database.Get_User(shibboleth_id' tracer);  			                    possible_user_by_shib2.Is_Just_Registered = true;  			                    possible_user_by_shib2.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shib2;  			                }    			                if (HttpContext.Current.Session["user"] != null)  			                {  			                    currentMode.Mode = Display_Mode_Enum.My_Sobek;  			                    currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Home;  			                }  			                else  			                {  			                    currentMode.Mode = Display_Mode_Enum.Aggregation;  			                    currentMode.Aggregation_Type = Aggregation_Type_Enum.Home;  			                    currentMode.Aggregation = String.Empty;  			                }    			                if (!UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                {  			                    UrlWriterHelper.Redirect(currentMode);  			                }  			            }  			        }  			    }    			    // If the user information is still missing ' but the SobekUser cookie exists' then pull   				// the user information from the SobekUser cookie in the current requests  				if ((HttpContext.Current.Session["user"] == null) && (HttpContext.Current.Request.Cookies["SobekUser"] != null))  				{  					string userid_string = HttpContext.Current.Request.Cookies["SobekUser"]["userid"];  					int userid = -1;    					bool valid_perhaps = userid_string.All(Char.IsNumber);  					if (valid_perhaps)  						Int32.TryParse(userid_string' out userid);    					if (userid > 0)  					{  						User_Object possible_user = Engine_Database.Get_User(userid' tracer);  						if (possible_user != null)  						{  							string cookie_security_hash = HttpContext.Current.Request.Cookies["SobekUser"]["security_hash"];  							if (cookie_security_hash == possible_user.Security_Hash(HttpContext.Current.Request.UserHostAddress))  							{  								HttpContext.Current.Session["user"] = possible_user;  							}  							else  							{  								// Security hash did not match' so clear the cookie  								HttpCookie userCookie = new HttpCookie("SobekUser");  								userCookie.Values["userid"] = String.Empty;  								userCookie.Values["security_hash"] = String.Empty;  								userCookie.Expires = DateTime.Now.AddDays(-1);  								HttpContext.Current.Response.Cookies.Add(userCookie);  							}  						}  					}  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,perform_user_checks,The following statement contains a magic number: if (HttpContext.Current.Session["user"] == null)  			{  				// If this is a responce from Shibboleth' get the user information and register them if necessary  			    if ((UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth != null ) && (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Enabled))  			    {  			        string shibboleth_id = HttpContext.Current.Request.ServerVariables[UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute];  			        if (shibboleth_id == null)  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable NOT found");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route  			                if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))  			                {  			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);  			                    }  			                }  			            }  			        }  			        else  			        {  			            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			            {                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable found");                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.UserIdentityAttribute + " server variable = '" + shibboleth_id + "'");    			                // For debugging purposes' if this SHOULD have included SHibboleth information' show in the trace route                              if (HttpContext.Current.Request.Url.AbsoluteUri.Contains("shibboleth"))                              {                                  foreach (string var in HttpContext.Current.Request.ServerVariables)                                  {                                      tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variables: " + var + " --> " + HttpContext.Current.Request.ServerVariables[var]);                                  }                              }  			            }    			            if (shibboleth_id.Length > 0)  			            {  			                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Pulling from database by shibboleth id");    			                User_Object possible_user_by_shibboleth_id = Engine_Database.Get_User(shibboleth_id' tracer);    			                // Check to see if we got a valid user back  			                if (possible_user_by_shibboleth_id != null)  			                {  			                    if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                    {  			                        // Set the user information from the server variables here   			                        foreach (string var in HttpContext.Current.Request.ServerVariables)  			                        {  			                            User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                            if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                string value = HttpContext.Current.Request.ServerVariables[var];    			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) would have been mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                                }  			                            }  			                            else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                            }  			                        }    			                        // Set any constants as well  			                        foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                        {  			                            if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                            {  			                                if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                                {  			                                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Constant value ( " + constantMapping.Value + " ) would have been set to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                                }  			                            }  			                        }  			                    }    			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting session user from shibboleth id");  			                    possible_user_by_shibboleth_id.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shibboleth_id;  			                }  			                else  			                {  			                    tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "User from shibboleth id was null.. adding user");    			                    // Now build the user object  			                    User_Object newUser = new User_Object();  			                    if ((HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"] != null) && (HttpContext.Current.Request.ServerVariables["HTTP_PRIMARY-AFFILIATION"].IndexOf("F") >= 0))  			                        newUser.Can_Submit = true;  			                    else  			                        newUser.Can_Submit = false;  			                    newUser.Send_Email_On_Submission = true;  			                    newUser.Email = String.Empty;  			                    newUser.Family_Name = String.Empty;  			                    newUser.Given_Name = String.Empty;  			                    newUser.Organization = String.Empty;  			                    newUser.ShibbID = shibboleth_id;  			                    newUser.UserID = -1;    			                    // Set the user information from the server variables here   			                    foreach (string var in HttpContext.Current.Request.ServerVariables)  			                    {  			                        User_Object_Attribute_Mapping_Enum mapping = UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Get_User_Object_Mapping(var);  			                        if (mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {  			                            string value = HttpContext.Current.Request.ServerVariables[var];  			                            newUser.Set_Value_By_Mapping(mapping' value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {  			                                tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " ( " + value + " ) mapped to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(mapping));  			                            }  			                        }  			                        else if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                        {  			                            tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Server Variable " + var + " is not mapped to a user attribute");  			                        }  			                    }    			                    // Set any constants as well  			                    foreach (Shibboleth_Configuration_Mapping constantMapping in UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Constants)  			                    {  			                        if (constantMapping.Mapping != User_Object_Attribute_Mapping_Enum.NONE)  			                        {                                          newUser.Set_Value_By_Mapping(constantMapping.Mapping' constantMapping.Value);    			                            if (UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                            {                                              tracer.Add_Trace("SobekCM_Page_Globals.Constructor"' "Setting constant value ( " + constantMapping.Value + " ) to " + User_Object_Attribute_Mapping_Enum_Converter.ToString(constantMapping.Mapping));  			                            }  			                        }  			                    }    			                    // Set the username  			                    if (String.IsNullOrEmpty(newUser.UserName))  			                    {  			                        if (newUser.Email.Length > 0)  			                            newUser.UserName = newUser.Email;  			                        else  			                            newUser.UserName = newUser.Family_Name + shibboleth_id;  			                    }    			                    // Set a random password  			                    StringBuilder passwordBuilder = new StringBuilder();  			                    Random randomGenerator = new Random(DateTime.Now.Millisecond);  			                    for (int i = 0; i < 5; i++)  			                    {  			                        int randomNumber = randomGenerator.Next(97' 122);  			                        passwordBuilder.Append((char) randomNumber);    			                        int randomNumber2 = randomGenerator.Next(65' 90);  			                        passwordBuilder.Append((char) randomNumber2);  			                    }  			                    string password = passwordBuilder.ToString();    			                    // Now' save this user  			                    SobekCM_Database.Save_User(newUser' password' newUser.Authentication_Type' tracer);    			                    // Now' pull back out of the database  			                    User_Object possible_user_by_shib2 = Engine_Database.Get_User(shibboleth_id' tracer);  			                    possible_user_by_shib2.Is_Just_Registered = true;  			                    possible_user_by_shib2.Authentication_Type = User_Authentication_Type_Enum.Shibboleth;  			                    HttpContext.Current.Session["user"] = possible_user_by_shib2;  			                }    			                if (HttpContext.Current.Session["user"] != null)  			                {  			                    currentMode.Mode = Display_Mode_Enum.My_Sobek;  			                    currentMode.My_Sobek_Type = My_Sobek_Type_Enum.Home;  			                }  			                else  			                {  			                    currentMode.Mode = Display_Mode_Enum.Aggregation;  			                    currentMode.Aggregation_Type = Aggregation_Type_Enum.Home;  			                    currentMode.Aggregation = String.Empty;  			                }    			                if (!UI_ApplicationCache_Gateway.Configuration.Authentication.Shibboleth.Debug)  			                {  			                    UrlWriterHelper.Redirect(currentMode);  			                }  			            }  			        }  			    }    			    // If the user information is still missing ' but the SobekUser cookie exists' then pull   				// the user information from the SobekUser cookie in the current requests  				if ((HttpContext.Current.Session["user"] == null) && (HttpContext.Current.Request.Cookies["SobekUser"] != null))  				{  					string userid_string = HttpContext.Current.Request.Cookies["SobekUser"]["userid"];  					int userid = -1;    					bool valid_perhaps = userid_string.All(Char.IsNumber);  					if (valid_perhaps)  						Int32.TryParse(userid_string' out userid);    					if (userid > 0)  					{  						User_Object possible_user = Engine_Database.Get_User(userid' tracer);  						if (possible_user != null)  						{  							string cookie_security_hash = HttpContext.Current.Request.Cookies["SobekUser"]["security_hash"];  							if (cookie_security_hash == possible_user.Security_Hash(HttpContext.Current.Request.UserHostAddress))  							{  								HttpContext.Current.Session["user"] = possible_user;  							}  							else  							{  								// Security hash did not match' so clear the cookie  								HttpCookie userCookie = new HttpCookie("SobekUser");  								userCookie.Values["userid"] = String.Empty;  								userCookie.Values["security_hash"] = String.Empty;  								userCookie.Expires = DateTime.Now.AddDays(-1);  								HttpContext.Current.Response.Cookies.Add(userCookie);  							}  						}  					}  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,MySobekCM_Block,The following statement contains a magic number: if ((currentMode.My_Sobek_Type == My_Sobek_Type_Enum.Folder_Management) && (HttpContext.Current.Session["user"] != null) && (!String.IsNullOrEmpty(currentMode.My_Sobek_SubMode)))  			{  				tracer.Add_Trace("SobekCM_Page_Globals.MySobekCM_Block"' "Retrieiving Browse/Info Object");    				User_Object userObj = (User_Object) HttpContext.Current.Session["user"];    				// For EXPORT option' include ALL the items  				int results_per_page = 20;  				int current_page = currentMode.Page.HasValue ? currentMode.Page.Value : 1;  				if (currentMode.Result_Display_Type == Result_Display_Type_Enum.Export)  				{  					results_per_page = 10000;  					current_page = 1;  				}    				// Get the folder  				SobekCM_Assistant assistant = new SobekCM_Assistant();  				if (!assistant.Get_User_Folder(currentMode.My_Sobek_SubMode' userObj.UserID' results_per_page' current_page' tracer' out searchResultStatistics' out pagedSearchResults))  				{  					currentMode.Mode = Display_Mode_Enum.Error;  				}  			}
Magic Number,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,MySobekCM_Block,The following statement contains a magic number: if ((currentMode.My_Sobek_Type == My_Sobek_Type_Enum.Folder_Management) && (HttpContext.Current.Session["user"] != null) && (!String.IsNullOrEmpty(currentMode.My_Sobek_SubMode)))  			{  				tracer.Add_Trace("SobekCM_Page_Globals.MySobekCM_Block"' "Retrieiving Browse/Info Object");    				User_Object userObj = (User_Object) HttpContext.Current.Session["user"];    				// For EXPORT option' include ALL the items  				int results_per_page = 20;  				int current_page = currentMode.Page.HasValue ? currentMode.Page.Value : 1;  				if (currentMode.Result_Display_Type == Result_Display_Type_Enum.Export)  				{  					results_per_page = 10000;  					current_page = 1;  				}    				// Get the folder  				SobekCM_Assistant assistant = new SobekCM_Assistant();  				if (!assistant.Get_User_Folder(currentMode.My_Sobek_SubMode' userObj.UserID' results_per_page' current_page' tracer' out searchResultStatistics' out pagedSearchResults))  				{  					currentMode.Mode = Display_Mode_Enum.Error;  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,Files,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\Files.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.QueryString["urlrelative"] != null)  			{  				string urlrewrite = Request.QueryString["urlrelative"].ToLower();  				if (urlrewrite.Length > 4)  				{  					// Split the url relative list  					string[] url_relative_info = urlrewrite.Split("/".ToCharArray());  					List<string> url_relative_list = (from thisPart in url_relative_info where thisPart.Length > 0 select thisPart.ToLower()).ToList();    					// Now' look for BIBID and VID  					//if ((SobekCM_Database.Verify_Item_Lookup_Object(true' ref Global.Item_List' null)) && (Global.Item_List.Contains_BibID(url_relative_list[2].ToUpper())))  					if ((url_relative_list.Count > 2) && (url_relative_list[2].Length == 10))  					{  						// This is a BibID for an existing title with at least one public item  						bibID = url_relative_list[2].ToUpper();    						// Is the next part a VID?  						if (url_relative_list.Count > 3)  						{  							string possible_vid = url_relative_list[3].Trim().PadLeft(5' '0');  							int vid_as_int;  							if (Int32.TryParse(possible_vid' out vid_as_int))  								vid = possible_vid;  						}  					}    					// Only continue if there is a BibID / VID  					if ((!String.IsNullOrEmpty(bibID)) && (!String.IsNullOrEmpty(vid)))  					{  						// Determine the new URL                          StringBuilder urlBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8) + "\\" + vid + "\\" + url_relative_list[4]' 250);  						for (int i = 5; i < url_relative_list.Count; i++)  						{  							urlBuilder.Append("\\" + url_relative_list[i]);  						}    						file_url = urlBuilder.ToString();      						// Get the extension  						string extension = Path.GetExtension(file_url);  						if (extension != null)  						{  							// Lookup the MIME type by extension  							Mime_Type_Info mimeType = null;  							if (UI_ApplicationCache_Gateway.Mime_Types.ContainsKey(extension.ToLower()))  								mimeType = UI_ApplicationCache_Gateway.Mime_Types[extension.ToLower()];    							if ((mimeType != null) && (!mimeType.isBlocked))  							{  								// Since everything is valid' check the database  								bool isDark;  								short restrictions;  								SobekCM_Database.Get_Item_Restrictions(bibID' vid' null' out isDark' out restrictions);    								// If not DARK' and is restricted' check for access here						  								if ((!isDark) && (restrictions > 0))  								{  									// Does this user already have IP restriction mask determined?  									// Determine which IP Ranges this IP address belongs to' if not already determined.    									if (HttpContext.Current.Session["IP_Range_Membership"] == null)  									{  										int ip_mask = UI_ApplicationCache_Gateway.IP_Restrictions.Restrictive_Range_Membership(request.UserHostAddress);  										HttpContext.Current.Session["IP_Range_Membership"] = ip_mask;  									}    									int current_user_mask = Convert.ToInt32(HttpContext.Current.Session["IP_Range_Membership"]);    									// Perform bitwise comparison  									int comparison = restrictions & current_user_mask;  									if (comparison == 0)  									{  										// If the user is Shibboleth authenticated' that is okay  										User_Object possible_user = HttpContext.Current.Session["user"] as User_Object;  										if (( possible_user == null ) || ( possible_user.Authentication_Type != User_Authentication_Type_Enum.Shibboleth ))                                              isDark = true;  									}  								}    								if (!isDark)  								{  									// Should this be forwarded for this mimetype?  									if (mimeType.shouldForward)  									{                                          StringBuilder forwardBuilder = new StringBuilder(UI_ApplicationCache_Gateway.Settings.Servers.Image_URL + bibID.Substring(0' 2) + "/" + bibID.Substring(2' 2) + "/" + bibID.Substring(4' 2) + "/" + bibID.Substring(6' 2) + "/" + bibID.Substring(8) + "/" + vid + "/" + url_relative_list[4]' 250);  										for (int i = 5; i < url_relative_list.Count; i++)  										{  											forwardBuilder.Append("/" + url_relative_list[i]);  										}  										Response.Redirect(forwardBuilder.ToString());  									}  									else  									{  										Response.Clear();  										Response.ContentType = mimeType.MIME_Type;    										string filename = file_url;    										if (File.Exists(filename))  										{  											using (FileStream sourceStream = File.OpenRead(filename))  											{  												sourceStream.CopyTo(Response.OutputStream' 32768);  											}  										}    										Response.End();  									}  								}  								else  								{  									Response.Clear();  									Response.Output.WriteLine("RESTRICTED ITEM");  								}  							}  						}  					}  				}  			}
Magic Number,SobekCM,UploadiFiveFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\UploadiFiveFileHandler.ashx.cs,ProcessRequest,The following statement contains a magic number: if (tokenKey == null)  			{  				Context.Response.Write("No token provided with this request");  				Context.Response.StatusCode = 401;  				return;  			}
Magic Number,SobekCM,UploadiFiveFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\UploadiFiveFileHandler.ashx.cs,ProcessRequest,The following statement contains a magic number: if (tokenObj == null)  			{  				Context.Response.Write("No matching server-side token found for this request");  				Context.Response.StatusCode = 401;  				return;  			}
Magic Number,SobekCM,UploadiFiveFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\UploadiFiveFileHandler.ashx.cs,ProcessRequest,The following statement contains a magic number: try  			{  				// Get the posted file from the appropriate file key  				HttpPostedFile postedFile = Context.Request.Files[ tokenObj.FileObjName ];  				if (postedFile != null)  				{  					// Get the path from the token and ensure it exists  					string path = tokenObj.UploadPath;  					if (!Directory.Exists(path))  						Directory.CreateDirectory(path);    					// Get the filename for the uploaded file  					string filename = Path.GetFileName(postedFile.FileName);                        // Ensure there is not an additional period in the name being uploaded  				    string extensionCheck = Path.GetExtension(postedFile.FileName);  				    string filenameSansExtension = filename.Replace(extensionCheck' "");  				    if (filenameSansExtension.IndexOf(".") > 0)  				    {  				        filenameSansExtension = filenameSansExtension.Replace("."' "_");  				        filename = filenameSansExtension + extensionCheck;  				    }    				    // Should this be overriden?  				    if (!String.IsNullOrEmpty(tokenObj.ServerSideFileName))  				    {  				        if (tokenObj.ServerSideFileName.IndexOf(".") > 0)  				            filename = tokenObj.ServerSideFileName;  				        else  				            filename = tokenObj.ServerSideFileName + extensionCheck;  				    }    				    // Are there file extension restrictions?  					if ( !String.IsNullOrEmpty(tokenObj.AllowedFileExtensions))  					{  						string extension = Path.GetExtension(postedFile.FileName).ToLower();  						List<string> allowed = tokenObj.AllowedFileExtensions.Split("|'".ToCharArray()).ToList();  						if (!allowed.Contains(extension))  						{  							Context.Response.Write("Invalid extension");  							Context.Response.StatusCode = 401;  							return;  						}  					}    					// Ensure file does not already exist  					string newFileName = Path.Combine(path' filename);  					if ( File.Exists(newFileName))  						File.Delete(newFileName);    					// Save this file locally  					postedFile.SaveAs(newFileName);                        // If there was a return token' put this filename in that list  				    if (!String.IsNullOrEmpty(tokenObj.ReturnToken))  				    {                          if (HttpContext.Current.Session[tokenObj.ReturnToken] != null)  				        {                              HttpContext.Current.Session[tokenObj.ReturnToken] = HttpContext.Current.Session[tokenObj.ReturnToken] + "|" + filename;  				        }  				        else  				        {                              HttpContext.Current.Session[tokenObj.ReturnToken] = filename;  				        }  				    }    					// Post a successful status  					Context.Response.Write(filename);  					Context.Response.StatusCode = 200;  				}  			}  			catch (Exception ex)  			{  				Context.Response.Write("Error: " + ex.Message);  				Context.Response.StatusCode = 500;  			}
Magic Number,SobekCM,UploadiFiveFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\UploadiFiveFileHandler.ashx.cs,ProcessRequest,The following statement contains a magic number: try  			{  				// Get the posted file from the appropriate file key  				HttpPostedFile postedFile = Context.Request.Files[ tokenObj.FileObjName ];  				if (postedFile != null)  				{  					// Get the path from the token and ensure it exists  					string path = tokenObj.UploadPath;  					if (!Directory.Exists(path))  						Directory.CreateDirectory(path);    					// Get the filename for the uploaded file  					string filename = Path.GetFileName(postedFile.FileName);                        // Ensure there is not an additional period in the name being uploaded  				    string extensionCheck = Path.GetExtension(postedFile.FileName);  				    string filenameSansExtension = filename.Replace(extensionCheck' "");  				    if (filenameSansExtension.IndexOf(".") > 0)  				    {  				        filenameSansExtension = filenameSansExtension.Replace("."' "_");  				        filename = filenameSansExtension + extensionCheck;  				    }    				    // Should this be overriden?  				    if (!String.IsNullOrEmpty(tokenObj.ServerSideFileName))  				    {  				        if (tokenObj.ServerSideFileName.IndexOf(".") > 0)  				            filename = tokenObj.ServerSideFileName;  				        else  				            filename = tokenObj.ServerSideFileName + extensionCheck;  				    }    				    // Are there file extension restrictions?  					if ( !String.IsNullOrEmpty(tokenObj.AllowedFileExtensions))  					{  						string extension = Path.GetExtension(postedFile.FileName).ToLower();  						List<string> allowed = tokenObj.AllowedFileExtensions.Split("|'".ToCharArray()).ToList();  						if (!allowed.Contains(extension))  						{  							Context.Response.Write("Invalid extension");  							Context.Response.StatusCode = 401;  							return;  						}  					}    					// Ensure file does not already exist  					string newFileName = Path.Combine(path' filename);  					if ( File.Exists(newFileName))  						File.Delete(newFileName);    					// Save this file locally  					postedFile.SaveAs(newFileName);                        // If there was a return token' put this filename in that list  				    if (!String.IsNullOrEmpty(tokenObj.ReturnToken))  				    {                          if (HttpContext.Current.Session[tokenObj.ReturnToken] != null)  				        {                              HttpContext.Current.Session[tokenObj.ReturnToken] = HttpContext.Current.Session[tokenObj.ReturnToken] + "|" + filename;  				        }  				        else  				        {                              HttpContext.Current.Session[tokenObj.ReturnToken] = filename;  				        }  				    }    					// Post a successful status  					Context.Response.Write(filename);  					Context.Response.StatusCode = 200;  				}  			}  			catch (Exception ex)  			{  				Context.Response.Write("Error: " + ex.Message);  				Context.Response.StatusCode = 500;  			}
Magic Number,SobekCM,UploadiFiveFileHandler,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\UploadiFiveFileHandler.ashx.cs,ProcessRequest,The following statement contains a magic number: try  			{  				// Get the posted file from the appropriate file key  				HttpPostedFile postedFile = Context.Request.Files[ tokenObj.FileObjName ];  				if (postedFile != null)  				{  					// Get the path from the token and ensure it exists  					string path = tokenObj.UploadPath;  					if (!Directory.Exists(path))  						Directory.CreateDirectory(path);    					// Get the filename for the uploaded file  					string filename = Path.GetFileName(postedFile.FileName);                        // Ensure there is not an additional period in the name being uploaded  				    string extensionCheck = Path.GetExtension(postedFile.FileName);  				    string filenameSansExtension = filename.Replace(extensionCheck' "");  				    if (filenameSansExtension.IndexOf(".") > 0)  				    {  				        filenameSansExtension = filenameSansExtension.Replace("."' "_");  				        filename = filenameSansExtension + extensionCheck;  				    }    				    // Should this be overriden?  				    if (!String.IsNullOrEmpty(tokenObj.ServerSideFileName))  				    {  				        if (tokenObj.ServerSideFileName.IndexOf(".") > 0)  				            filename = tokenObj.ServerSideFileName;  				        else  				            filename = tokenObj.ServerSideFileName + extensionCheck;  				    }    				    // Are there file extension restrictions?  					if ( !String.IsNullOrEmpty(tokenObj.AllowedFileExtensions))  					{  						string extension = Path.GetExtension(postedFile.FileName).ToLower();  						List<string> allowed = tokenObj.AllowedFileExtensions.Split("|'".ToCharArray()).ToList();  						if (!allowed.Contains(extension))  						{  							Context.Response.Write("Invalid extension");  							Context.Response.StatusCode = 401;  							return;  						}  					}    					// Ensure file does not already exist  					string newFileName = Path.Combine(path' filename);  					if ( File.Exists(newFileName))  						File.Delete(newFileName);    					// Save this file locally  					postedFile.SaveAs(newFileName);                        // If there was a return token' put this filename in that list  				    if (!String.IsNullOrEmpty(tokenObj.ReturnToken))  				    {                          if (HttpContext.Current.Session[tokenObj.ReturnToken] != null)  				        {                              HttpContext.Current.Session[tokenObj.ReturnToken] = HttpContext.Current.Session[tokenObj.ReturnToken] + "|" + filename;  				        }  				        else  				        {                              HttpContext.Current.Session[tokenObj.ReturnToken] = filename;  				        }  				    }    					// Post a successful status  					Context.Response.Write(filename);  					Context.Response.StatusCode = 200;  				}  			}  			catch (Exception ex)  			{  				Context.Response.Write("Error: " + ex.Message);  				Context.Response.StatusCode = 500;  			}
Missing Default,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following switch statement is missing a default case: switch (CurrentModeCheck.Statistics_Type)  				{  					case Statistics_Type_Enum.Item_Count_Text:  					case Statistics_Type_Enum.Item_Count_Growth_View:  					case Statistics_Type_Enum.Usage_Definitions:  						if (url_relative_depth > 3)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Usage_Overall:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						break;    					case Statistics_Type_Enum.Item_Count_Standard_View:  						if (url_relative_depth > 2)  						{  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  						}  						else if (url_relative_depth == 2)  						{  							if (( url_relative_info != null ) && (url_relative_info.Length > 1 ) && ( url_relative_info[1] != "itemcount"))  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  						}  						break;  				}
Missing Default,SobekCM,SobekCM_Page_Globals,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM\SobekCM_Page_Globals.cs,Perform_Search_Engine_Robot_Checks,The following switch statement is missing a default case: switch (CurrentModeCheck.Home_Type)  					{  						case Home_Type_Enum.List:  							if (url_relative_depth > 0)  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  							break;    						case Home_Type_Enum.Descriptions:  						case Home_Type_Enum.Tree:  						case Home_Type_Enum.Partners_List:  							if (url_relative_depth > 1)  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  							break;    						case Home_Type_Enum.Partners_Thumbnails:  							if (url_relative_depth > 2)  							{  								HttpContext.Current.Response.Status = "301 Moved Permanently";  								HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  								HttpContext.Current.ApplicationInstance.CompleteRequest();  								currentMode.Request_Completed = true;  								return;  							}  							break;    						case Home_Type_Enum.Personalized:  							HttpContext.Current.Response.Status = "301 Moved Permanently";  							HttpContext.Current.Response.AddHeader("Location"' UrlWriterHelper.Redirect_URL(CurrentModeCheck));  							HttpContext.Current.ApplicationInstance.CompleteRequest();  							currentMode.Request_Completed = true;  							return;  					}
