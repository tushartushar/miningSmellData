Implementation smell,Namespace,Class,File,Method,Description
Long Method,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The method has 228 lines of code.
Long Method,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The method has 105 lines of code.
Complex Method,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,Cyclomatic complexity of the method is 26
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	        if (appRelative.Equals("~/") && HttpContext.Current.Request.RawUrl.StartsWith("/?") && (HttpContext.Current.Request.Url.ToString().Contains("usf.edu") || HttpContext.Current.Request.Url.ToString().Contains("usf.sobek.ufl.edu"))) " is 228.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	        if ((appRelative.IndexOf(".jpg") > 0) || (appRelative.IndexOf(".gif") > 0) || (appRelative.IndexOf(".css") > 0) || (appRelative.IndexOf(".js") > 0) || (appRelative.IndexOf(".png") > 0) || (appRelative.IndexOf(".html") > 0) || (appRelative.IndexOf(".htm") > 0) || (appRelative.IndexOf(".ashx") > 0) || (appRelative.IndexOf(".svc") > 0)) " is 335.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	        if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0)) " is 120.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0)) " is 167.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true); " is 145.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true); " is 139.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress))) " is 207.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8); " is 193.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true); " is 140.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The length of the statement  "	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true); " is 140.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The length of the statement  "					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3); " is 121.
Long Statement,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The length of the statement  "					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3); " is 121.
Complex Conditional,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The conditional expression  "appRelative.Equals("~/") && HttpContext.Current.Request.RawUrl.StartsWith("/?") && (HttpContext.Current.Request.Url.ToString().Contains("usf.edu") || HttpContext.Current.Request.Url.ToString().Contains("usf.sobek.ufl.edu"))"  is complex.
Complex Conditional,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The conditional expression  "(appRelative.IndexOf(".jpg") > 0) || (appRelative.IndexOf(".gif") > 0) || (appRelative.IndexOf(".css") > 0) || (appRelative.IndexOf(".js") > 0) || (appRelative.IndexOf(".png") > 0) || (appRelative.IndexOf(".html") > 0) || (appRelative.IndexOf(".htm") > 0) || (appRelative.IndexOf(".ashx") > 0) || (appRelative.IndexOf(".svc") > 0)"  is complex.
Complex Conditional,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The conditional expression  "(appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0)"  is complex.
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf("~/files/") == 0) && (appRelative.Length > 8))  	        {  	            HttpContext.Current.RewritePath("~/files.aspx?urlrelative=" + appRelative);  	            return;  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,RewriteModule_BeginRequest,The following statement contains a magic number: if ((appRelative.IndexOf(".") < 0) || (appRelative.IndexOf("~/rss") == 0) || (appRelative.IndexOf("sobekcm.aspx") >= 0))  	        {  	            // Remove sobekcm.aspx  	            if (appRelative.IndexOf("sobekcm.aspx") > 0)  	            {  	                appRelative = appRelative.Replace("sobekcm.aspx"' "");  	            }    	            // there is nothing to process              	            if (appRelative.Replace("/"' "").Replace("~"' "").Length == 0)  	            {  	                // Special code to handle this if this is going to a virtual directory' and does not have a final '/'  	                string url_requested = HttpContext.Current.Request.Url.ToString();  	                if ((url_requested.IndexOf("?") < 0) && (url_requested[url_requested.Length - 1] != '/'))  	                {  	                    HttpContext.Current.Response.RedirectPermanent(url_requested + "/");  	                }    	                string current_querystring2 = HttpContext.Current.Request.QueryString.ToString();  	                if (current_querystring2.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?" + current_querystring2 + "&portal=" + url_authority);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("sobekcm.aspx?portal=" + url_authority);  	                }  	                return;  	            }    	            // Remove any double slashes  	            appRelative = appRelative.Replace("//"' "/");    	            // Get rid of first part   	            if (appRelative.IndexOf("~/") == 0)  	                appRelative = appRelative.Substring(2);    	            // Applies to older web setups  	            if (appRelative.IndexOf("ufdc/") == 0)  	                appRelative = appRelative.Substring(5);    	            // Get rid of leading '/'  	            if ((appRelative.Length > 0) && (appRelative[0] == '/'))  	            {  	                appRelative = appRelative.Length > 1 ? appRelative.Substring(1) : String.Empty;  	            }    	            // Save the original URL  	            HttpContext.Current.Items.Add("Original_URL"' HttpContext.Current.Request.Url.ToString());    	            // Move any relative url information into a query string variable  	            //HttpContext.Current.Request.QueryString.Add("urlrelative"' appRelative);  	            string current_querystring = HttpContext.Current.Request.QueryString.ToString();  	            if (appRelative.Length > 0)  	            {  	                if ((appRelative.IndexOf("dataset/") == 0) || (appRelative.IndexOf("xml/") == 0) || (appRelative.IndexOf("json/") == 0) || (appRelative.IndexOf("dataprovider/") == 0))  	                {  	                    if (current_querystring.Length > 0)  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                    }  	                    else  	                    {  	                        HttpContext.Current.RewritePath("~/SobekCM_data.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                    }  	                }  	                else  	                {  	                    // Some special rewrites here  	                    if (appRelative.IndexOf("rss") == 0)  	                    {  	                        if (appRelative == "rss")  	                        {  	                            HttpContext.Current.RewritePath("~/data/rss/index.htm"' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/data/" + appRelative' true);  	                        }  	                    }  	                    else if (appRelative.IndexOf("engine") == 0)  	                    {  	                        if (appRelative.Length > 6)  	                        {  	                            appRelative = appRelative.Substring(6);    	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                            }  	                        }  	                        else  	                        {  	                            // Standard rewrite to the sobek engine service  	                            if (current_querystring.Length > 0)  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?" + current_querystring + "&portal=" + url_authority' true);  	                            }  	                            else  	                            {  	                                HttpContext.Current.RewritePath("~/sobekcm.svc?portal=" + url_authority' true);  	                            }  	                        }  	                    }  	                    else  	                    {  	                        // Special code to redirect to static pages  	                        if ((appRelative.Length == 16) && (appRelative[10] == '/'))  	                        {  	                            string bib_possibly = appRelative.Substring(0' 10);  	                            string vid_possibly = appRelative.Substring(11' 5);    	                            // Use regular expressions to check format  	                            string bibid_regex = @"[A-Z]{2}[A-Z|0-9]{4}[0-9]{4}";  	                            string vid_regex = @"^[0-9]{5}$";  	                            if ((Regex.Match(bib_possibly.ToUpper()' bibid_regex).Success) && (Regex.Match(vid_possibly' vid_regex).Success))  	                            {  	                                // This is for an item' so check for ROBOT here  	                                if ((!String.IsNullOrEmpty(HttpContext.Current.Request.QueryString["robot"])) || (Navigation_Object.Is_UserAgent_IP_Robot(HttpContext.Current.Request.UserAgent' HttpContext.Current.Request.UserHostAddress)))  	                                {  	                                    string directory = bib_possibly.Substring(0' 2) + "/" + bib_possibly.Substring(2' 2) + "/" + bib_possibly.Substring(4' 2) + "/" + bib_possibly.Substring(6' 2) + "/" + bib_possibly.Substring(8);  	                                    string redirect_dir = "~/data/" + directory + "/" + bib_possibly + "_" + vid_possibly + ".html";  	                                    HttpContext.Current.RewritePath(redirect_dir' true);  	                                    return;  	                                }  	                            }  	                        }    	                        // Standard rewrite to the sobek application  	                        if (current_querystring.Length > 0)  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                        }  	                        else  	                        {  	                            HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                        }  	                    }  	                }  	            }  	            else  	            {  	                if (current_querystring.Length > 0)  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&" + current_querystring + "&portal=" + url_authority' true);  	                }  	                else  	                {  	                    HttpContext.Current.RewritePath("~/sobekcm.aspx?urlrelative=" + appRelative + "&portal=" + url_authority' true);  	                }  	            }  	        }
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: try  			{  				purl_handle = HttpContext.Current.Request.RawUrl.Substring(2);  			}  			catch  			{  				purl_handle = "";  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
Magic Number,SobekCM.URL_Rewriter,Rewriter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_URL_Rewriter\Rewriter.cs,USFLDC_Redirection_Service,The following statement contains a magic number: if (purl_handle == "m1" || purl_handle.StartsWith("m1."))  			{  				// Courtesy permanently moved redirect for former partner MCPL for the MCPLHPC (CID=M01)    				HttpContext.Current.Response.StatusCode = 301;  				HttpContext.Current.Response.Redirect("http://cdm16681.contentdm.oclc.org");  			}  			else if (purl_handle.Contains(".") && !purl_handle.Contains("browse") && !purl_handle.Contains("search"))  			{  				// item purl  				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  					return;  				}    	     				if (purl_handle.Contains("-ead"))  				{  					// It is an EAD item purl    					int pos1 = purl_handle.IndexOf("-");  					int len = pos1 - 4;  					String doi = "U29-" + int.Parse(purl_handle.Substring(4' len)).ToString("D5") + "-" + purl_handle.Substring(pos1 + 1' 3);  					String url = "http://www.lib.usf.edu/aeon/eads/index.html?eadrequest=true&ead_id=" + doi;  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(url' true);  				}    				String packageid = SobekCM_Database.Get_BibID_VID_From_Identifier(purl_handle);    				if (packageid != null)  				{  					packageid = packageid.ToUpper();  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(packageid' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Contains(".browse") || purl_handle.Contains(".search"))  			{  				// browse or search purl    				String purl_handle_original = purl_handle;  				int pos1 = purl_handle.IndexOf(".");  			    purl_handle=purl_handle.Substring(0'pos1);    				if (purl_handle.Length==2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}    				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  				    string action = purl_handle_original.Contains(".browse") ? "/all" : "/advanced";    					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower() + action' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else if (purl_handle.Length == 2 || purl_handle.Length == 3)  			{  				// collection purl    				if (purl_handle.Length == 2)  				{  					purl_handle = purl_handle.Substring(0' 1) + "0" + purl_handle.Substring(1);  				}  				  				aggregationCode = SobekCM_Database.Get_AggregationCode_From_CID(purl_handle.ToUpper());    				if (aggregationCode != null)  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(aggregationCode.ToLower()' true);  				}  				else  				{  					HttpContext.Current.Response.StatusCode = 307;  					HttpContext.Current.Response.Redirect(URL_ERROR);  				}  			}  			else  			{  				HttpContext.Current.Response.StatusCode = 307;  				HttpContext.Current.Response.Redirect(URL_ERROR);  			}
