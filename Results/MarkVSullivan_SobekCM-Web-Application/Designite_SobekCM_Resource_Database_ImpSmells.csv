Implementation smell,Namespace,Class,File,Method,Description
Long Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Get_Bibliographic_Data,The method has 203 lines of code.
Long Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_MARC_Info,The method has 116 lines of code.
Long Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_Project_Info,The method has 141 lines of code.
Long Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_All_Files,The method has 271 lines of code.
Long Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The method has 543 lines of code.
Long Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Streets_and_Features_To_Item,The method has 104 lines of code.
Long Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The method has 164 lines of code.
Long Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Information,The method has 120 lines of code.
Long Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The method has 160 lines of code.
Long Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The method has 212 lines of code.
Complex Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Get_Bibliographic_Data,Cyclomatic complexity of the method is 21
Complex Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_MARC_Info,Cyclomatic complexity of the method is 20
Complex Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_Project_Info,Cyclomatic complexity of the method is 31
Complex Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_All_Files,Cyclomatic complexity of the method is 29
Complex Method,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,get_files_from_current_directory,Cyclomatic complexity of the method is 9
Complex Method,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,CompareStrings,Cyclomatic complexity of the method is 8
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,Cyclomatic complexity of the method is 54
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Information,Cyclomatic complexity of the method is 23
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,Cyclomatic complexity of the method is 29
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,Cyclomatic complexity of the method is 13
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,Cyclomatic complexity of the method is 9
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,Cyclomatic complexity of the method is 17
Complex Method,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,Cyclomatic complexity of the method is 11
Long Parameter List,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Get_Bibliographic_Data,The method has 10 parameters. Parameters: BIBID' Volumeid' DestinationDirectory' METSDirectory' MARCDirectory' ProjectDirectory' XMLDirectory' AppName' UserName' DatabaseLoadMethod
Long Parameter List,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,get_files_from_current_directory,The method has 5 parameters. Parameters: FileList' FileFilters' SourceDirectory' RelativeDirectory' RecursivelyIncludeSubfolders
Long Parameter List,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,recursively_add_all_METS_files,The method has 6 parameters. Parameters: RootNode' METSFiles' METSFileCollection' FileToPage' PageToDiv' FileFilters
Long Parameter List,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The method has 5 parameters. Parameters: G' BorderPen' X' Y' Scale
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The method has 6 parameters. Parameters: ThisPackage' TextFlag' OnlineSubmit' Username' Usernotes' Userid
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The method has 19 parameters. Parameters: ItemID' GeoAuthCode' Name' Type' P_Code' P_Name' P_Type' P2_Code' P2_Name' P2_Type' P3_Code' P3_Name' P3_Type' P4_Code' P4_Name' P4_Type' P5_Code' P5_Name' P5_Type
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The method has 16 parameters. Parameters: FeatAuthCode' FeatureName' LocationDesc' CorpAuthCode' AA_Indicated' Albers_X' Albers_Y' Latitude' Longitude' FeatureType' FeatureTypeYear' PageID1' PageID2' PageID3' PageID4' PageID5
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The method has 8 parameters. Parameters: StreetAuthCode' StreetName' StartAddress' EndAddress' StreetDirection' StreetSide' SegmentDesc' PageID
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The method has 15 parameters. Parameters: BibID' GroupTitle' SortTitle' Type' File_Root' Group_Thumbnail' Update_Existing' CreateDate' OCLC_Number' ALEPH_Number' Large_Format' Track_By_Month' Never_Overlay_Record' Primary_Identifier_Type' Primary_Identifier
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The method has 26 parameters. Parameters: GroupID' VID' PageCount' FileCount' Title' SortTitle' Link' CreateDate' PubDate' SortDate' Holding_Code' Source_Code' Author' Spatial_KML' Spatial_KML_Distance' DiskSizeMb' Donor' Publisher' Spatial_Display' Institution_Display' Edition' Material_Display' Measurement_Display' StylePeriod_Display' Technique_Display' Subjects_Display
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The method has 21 parameters. Parameters: ItemID' Metadata_Type1' Metadata_Value1' Metadata_Type2' Metadata_Value2' Metadata_Type3' Metadata_Value3' Metadata_Type4' Metadata_Value4' Metadata_Type5' Metadata_Value5' Metadata_Type6' Metadata_Value6' Metadata_Type7' Metadata_Value7' Metadata_Type8' Metadata_Value8' Metadata_Type9' Metadata_Value9' Metadata_Type10' Metadata_Value10
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The method has 30 parameters. Parameters: ItemID' TextSearchable' MainThumbnail' MainJPEG' IP_Restriction_Mask' CheckoutRequired' Dark_Flag' Born_Digital' DispositionAdvice' DispositionAdviceNotes' Material_Received_Date' Material_Recd_Date_Estimated' Tracking_Box' AggregationCode1' AggregationCode2' AggregationCode3' AggregationCode4' AggregationCode5' AggregationCode6' AggregationCode7' AggregationCode8' HoldingCode' SourceCode' Icon1_Name' Icon2_Name' Icon3_Name' Icon4_Name' Icon5_Name' Left_To_Right' CitationSet
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The method has 19 parameters. Parameters: ItemID' Viewer1_Type' Viewer1_Label' Viewer1_Attributes' Viewer2_Type' Viewer2_Label' Viewer2_Attributes' Viewer3_Type' Viewer3_Label' Viewer3_Attributes' Viewer4_Type' Viewer4_Label' Viewer4_Attributes' Viewer5_Type' Viewer5_Label' Viewer5_Attributes' Viewer6_Type' Viewer6_Label' Viewer6_Attributes
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The method has 7 parameters. Parameters: ItemID' Viewer1_Type' Viewer2_Type' Viewer3_Type' Viewer4_Type' Viewer5_Type' Viewer6_Type
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The method has 6 parameters. Parameters: ItemID' Tickler1' Tickler2' Tickler3' Tickler4' Tickler5
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The method has 11 parameters. Parameters: BibID' VID' Viewer1_Type' Viewer1_Label' Viewer1_Attributes' Viewer2_Type' Viewer2_Label' Viewer2_Attributes' Viewer3_Type' Viewer3_Label' Viewer3_Attributes
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The method has 42 parameters. Parameters: GroupID' Set_IP_Restriction_Mask' IP_Restriction_Mask' Set_CheckoutRequired' CheckoutRequired' Set_Dark_Flag' Dark_Flag' Set_Born_Digital' Born_Digital' AggregationCode1' AggregationCode2' AggregationCode3' AggregationCode4' AggregationCode5' AggregationCode6' AggregationCode7' AggregationCode8' HoldingCode' SourceCode' Icon1_Name' Icon2_Name' Icon3_Name' Icon4_Name' Icon5_Name' Viewer1_Type' Viewer1_Label' Viewer1_Attributes' Viewer2_Type' Viewer2_Label' Viewer2_Attributes' Viewer3_Type' Viewer3_Label' Viewer3_Attributes' Viewer4_Type' Viewer4_Label' Viewer4_Attributes' Viewer5_Type' Viewer5_Label' Viewer5_Attributes' Viewer6_Type' Viewer6_Label' Viewer6_Attributes
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The method has 13 parameters. Parameters: GroupID' ItemID' Level1_Text' Level1_Index' Level2_Text' Level2_Index' Level3_Text' Level3_Index' Level4_Text' Level4_Index' Level5_Text' Level5_Index' SerialHierarchy
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The method has 9 parameters. Parameters: BibID' VID' User' MainThumbnailFileName' MainJpgFileName' PageCount' FileCount' DisksizeMb' Notes
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The method has 5 parameters. Parameters: ItemID' NewRestrictionMask' DarkFlag' EmbargoDate' UserName
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The method has 6 parameters. Parameters: BibID' GroupTitle' SortTitle' Group_Thumbnail' Primary_Identifier_Type' Primary_Identifier
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Disposition,The method has 5 parameters. Parameters: ItemID' DispositionTypeID' Notes' DispositionDate' UserName
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The method has 6 parameters. Parameters: ItemID' Workflow_Type' Notes' Date' UserName' StorageLocation
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Workflow,The method has 5 parameters. Parameters: ItemID' Workflow_Type' Notes' UserName' StorageLocation
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Material_Received,The method has 5 parameters. Parameters: ItemID' Date' Estimated' UserName' Notes
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Online_Statistics,The method has 5 parameters. Parameters: BibID' VID' PageCount' FileCount' DiskSizeMb
Long Parameter List,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The method has 5 parameters. Parameters: ItemID' Filename' ErrorCode' Description' isVolumeError
Long Identifier,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_All_Files,The length of the parameter PageImagesInSeperateFoldersCanBeSamePage is 40.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Load_SobekCM_Item_List,The length of the statement  "                if ((fileCreation.Year == DateTime.Now.Year) && (fileCreation.Month == DateTime.Now.Month) && (fileCreation.Day == DateTime.Now.Day)) " is 133.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Get_Bibliographic_Data,The length of the statement  "            if ((!valid_mets_loaded) && ((File.Exists(DestinationDirectory + "/" + BIBID + "_VID" + Volumeid.Replace("VID"' "") + ".mets")) || " is 130.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,read_marc_file,The length of the statement  "                    Error = "Error while reading '" + folder + ThisRecord + ".xml'. This is probably because the XML file indicated is not valid XML. To correct' go to the file and edit it to make it valid."; " is 188.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_Project_Info,The length of the statement  "                        if ((projectMETS.Bib_Info.Source.Code.Length > 0) && ((BIBPackage.Bib_Info.Source.Code.Length == 0)) || (BIBPackage.Bib_Info.Source.Code.ToUpper() == projectMETS.Bib_Info.Source.Code.ToUpper())) " is 194.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_Project_Info,The length of the statement  "                                BIBPackage.Bib_Info.Add_Temporal_Subject(Convert.ToInt32(myTemporal.Start_Year)' Convert.ToInt32(myTemporal.End_Year)' myTemporal.TimePeriod); " is 142.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_All_Files,The length of the statement  "            get_files_from_current_directory(fileCollection' file_filters' BIBPackage.Source_Directory' String.Empty' RecursivelyIncludeSubfolders); " is 136.
Long Statement,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_All_Files,The length of the statement  "                if ((thisFile.METS_LocType == SobekCM_File_Info_Type_Enum.SYSTEM) && (!File.Exists(BIBPackage.Source_Directory + "//" + thisFile.System_Name))) " is 143.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2)); " is 136.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2)); " is 136.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2)); " is 138.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2)); " is 138.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2)); " is 138.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2)); " is 142.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2)); " is 138.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2)); " is 136.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2)); " is 136.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2)); " is 140.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2)); " is 137.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The length of the statement  "                        G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2)); " is 138.
Long Statement,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,CompareStrings,The length of the statement  "                if (Builder_General_Convert_Mill.Convert_Roman_To_Numbers(str1) < Builder_General_Convert_Mill.Convert_Roman_To_Numbers(str2)) " is 126.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The length of the statement  "                DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters); " is 166.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The length of the statement  "                        html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />"; " is 139.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The length of the statement  "                            html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>"; " is 168.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The length of the statement  "                            html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>"; " is 186.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "            if ((!ThisPackage.Divisions.Physical_Tree.Has_Files) && (!ThisPackage.Divisions.Download_Tree.Has_Files) && (ThisPackage.Bib_Info.Location.Other_URL.Length > 0)) " is 161.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "                param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title); " is 128.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "                param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false)); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "                    param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated); " is 120.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list); " is 126.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "            if ((ThisPackage.Tracking.Material_Received_Date.HasValue) && (ThisPackage.Tracking.Material_Received_Notes.Length > 0)) " is 120.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The length of the statement  "                Update_Material_Received(ThisPackage.Web.ItemID' ThisPackage.Tracking.Material_Received_Date.Value' false' Username' ThisPackage.Tracking.Material_Received_Notes); " is 163.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Digital_Resource,The length of the statement  "                //GeoSpatial_Information geoInfo = pages[i].Get_Metadata_Module(GlobalVar.GEOSPATIAL_METADATA_MODULE_KEY) as GeoSpatial_Information; " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Streets_and_Features_To_Item,The length of the statement  "            //    Save_Feature( "FEAT" + thisFeature.FeatureID' thisFeature.Name' thisFeature.Description' corp_code' false' String.Empty' String.Empty' String.Empty' String.Empty' thisFeature.Type' -1' feature_pages[0]' feature_pages[1]' feature_pages[2]' feature_pages[3]' feature_pages[4]); " is 281.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Streets_and_Features_To_Item,The length of the statement  "            //    Save_Street("STRE" + thisStreet.StreetID' thisStreet.Name' thisStreet.Start' thisStreet.End' thisStreet.Direction' thisStreet.Side' thisStreet.Description' pageid); " is 170.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The length of the statement  "            //foreach (SobekCM.Resource_Object.Bib_Info.Hierarchical_Spatial_Info spatial in thisPackage.Bib_Info.Hierarchical_Spatials) " is 124.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The length of the statement  "            //        select_rows = geo_core.Select("RegionName = '" + name[level_index] + "' and RegionTypeName = '" + type[level_index] + "'"); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The length of the statement  "            //        select_rows = geo_core.Select("RegionName = '" + name[level_index] + "' and RegionTypeName = '" + type[level_index] + "'"); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The length of the statement  "            //        select_rows = geo_core.Select("RegionName = '" + name[level_index] + "' and RegionTypeName = '" + type[level_index] + "'"); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The length of the statement  "            //        select_rows = geo_core.Select("RegionName = '" + name[level_index] + "' and RegionTypeName = '" + type[level_index] + "'"); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The length of the statement  "            //        select_rows = geo_core.Select("RegionName = '" + name[level_index] + "' and RegionTypeName = '" + type[level_index] + "'"); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_All_Corporations,The length of the statement  "                DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Get_All_Corporations"); " is 138.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_All_Regions,The length of the statement  "                DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Get_All_Regions"); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Corporation,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Corporation"' param_list); " is 129.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Clear_Features_Streets_By_Item,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Clear_Features_Streets_By_Item"' param_list); " is 143.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Clear_Region_Link_By_Item,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Clear_Region_Link_By_Item"' param_list); " is 138.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Lock_Digital_Resource,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Lock_Item"' param_list); " is 122.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list); " is 134.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list); " is 125.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list); " is 134.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Information,The length of the statement  "            if ((ThisPackage.Bib_Info.Identifiers_Count > 0) && (primary_alternate_id.Length == 0) || (primary_alternate_type.Length == 0)) " is 127.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Information,The length of the statement  "            Save_Item_Group_Args saveArgs = Save_Item_Group(ThisPackage.BibID' groupTitle' ThisPackage.Bib_Info.SortSafeTitle(groupTitle' true)' ThisPackage.Bib_Info.SobekCM_Type_String' ThisPackage.Web.File_Root' String.Empty' false' CreateDate' oclcNumber' alephNumber' ThisPackage.Tracking.Large_Format' ThisPackage.Tracking.Track_By_Month' ThisPackage.Tracking.Never_Overlay_Record' primary_alternate_type' primary_alternate_id); " is 421.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_External_Record_Number,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_External_Record_Number"' param_list); " is 139.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The length of the statement  "            if ((!ThisPackage.Divisions.Physical_Tree.Has_Files) && (!ThisPackage.Divisions.Download_Tree.Has_Files) && (ThisPackage.Bib_Info.Location.Other_URL.Length > 0)) " is 161.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The length of the statement  "            Save_Item_Args returnVal = Save_Item(GroupID' ThisPackage.VID' ThisPackage.Divisions.Page_Count' ThisPackage.Divisions.Files.Count' " is 131.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The length of the statement  "                ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false)' " is 162.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The length of the statement  "                source_code' author_builder.ToString()' spatial_kml' SPATIAL_DISTANCE' ThisPackage.DiskSize_KB' donor' publisher_builder.ToString()' " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The length of the statement  "                spatialDisplayBuilder.ToString()' institutionDisplayBuilder.ToString()' ThisPackage.Bib_Info.Origin_Info.Edition' materialDisplayBuilder.ToString()' " is 148.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The length of the statement  "                measurements' stylePeriodDisplayBuilder.ToString()' techniqueDisplayBuilder.ToString()' subjectsDisplayBuilder.ToString()); " is 123.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The length of the statement  "                    aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]' " is 146.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The length of the statement  "                        ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes' " is 173.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The length of the statement  "                        ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]' " is 276.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The length of the statement  "                        aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet); " is 180.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The length of the statement  "            Save_Serial_Hierarchy(GroupID' ItemID' level1_text' level1_index' level2_text' level2_index' level3_text' level3_index' level4_text' level4_index' level5_text' level5_index' builder.ToString()); " is 194.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The length of the statement  "                metadataTerms.Add(new KeyValuePair<string' string>("Aggregation"' ThisPackage.Behaviors.Aggregation_Code_List[aggNum])); " is 120.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list); " is 128.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_OAI,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_OAI_PMH_Data"' param_list); " is 129.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list); " is 138.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list); " is 122.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Clear_Item_Metadata,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Clear2"' param_list); " is 128.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list); " is 126.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Create_Full_Citation_Value,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Create_Full_Citation_Value"' param_list); " is 139.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Clear_Old_Item_Info,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Clear_Old_Item_Info"' param_list); " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_Current_Item_Viewers,The length of the statement  "            EalDbReaderWrapper readerWrapper = EalDbAccess.ExecuteDataReader(DatabaseType' Connection_String' CommandType.StoredProcedure' "SobekCM_Get_Item_Viewers"' parameters); " is 167.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list); " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors_Minimal,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors_Minimal"' param_list); " is 140.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Setting_Value,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Setting_Value"' param_list); " is 135.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewer,The length of the statement  "            return Save_Item_Add_Viewers(ItemID' Viewer_Type' Viewer_Label' Viewer_Attributes' String.Empty' String.Empty' String.Empty' " is 124.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list); " is 129.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list); " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Ticklers"' param_list); " is 131.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list); " is 128.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list); " is 139.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list); " is 134.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list); " is 141.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Visibility"' param_list); " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_IP_Restriction_Mask,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_IP_Restriction_Mask"' param_list); " is 136.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Internal_Comments,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Comments"' param_list); " is 130.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Group"' param_list); " is 130.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Tracking_Box,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Tracking_Box"' param_list); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Edit_Disposition_Advice,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition_Advice"' param_list); " is 139.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Disposition,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition"' param_list); " is 132.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Past_Workflow_By_ItemID"' param_list); " is 141.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Workflow,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Workflow_By_ItemID"' param_list); " is 136.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Digitization_Milestone,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Digitization_Milestones"' param_list); " is 144.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Material_Received,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Material_Received"' param_list); " is 138.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Born_Digital_Flag,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Born_Digital"' param_list); " is 133.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Online_Statistics,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Online_Statistics"' param_list); " is 142.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_ItemID,The length of the statement  "                DataSet resultSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Get_ItemID"' param_list); " is 142.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Check_For_Record_Existence,The length of the statement  "                DataSet resultSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Check_For_Record_Existence"' param_list); " is 158.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Simple_Item_List,The length of the statement  "                SqlCommand executeCommand = new SqlCommand("SobekCM_Simple_Item_List"' connect) { CommandType = CommandType.StoredProcedure }; " is 126.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Tivoli_Get_Archived_Files,The length of the statement  "                DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "Tivoli_Get_File_By_Bib_VID"' param_list); " is 148.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_QC_Errors_For_Item,The length of the statement  "                DataSet returnSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Get_Errors"' parameters); " is 145.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters); " is 126.
Long Statement,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Delete_QC_Error,The length of the statement  "                EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Delete_Error"' parameters); " is 128.
Complex Conditional,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Get_Bibliographic_Data,The conditional expression  "(File.Exists(bib_mets_folder + BIBID + "_" + Volumeid.Replace("VID"' "") + ".mets")) ||                      (File.Exists(bib_mets_folder + BIBID + "_" + Volumeid.Replace("VID"' "") + ".METS_Header.xml")) ||                      (File.Exists(METSDirectory + "\\" + BIBID + "_" + Volumeid.Replace("VID"' "") + ".mets")) ||                      (File.Exists(METSDirectory + "\\" + BIBID + "_" + Volumeid.Replace("VID"' "") + ".METS_Header.xml"))"  is complex.
Empty Catch Block,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Load_SobekCM_Item_List,The method has an empty catch block.
Empty Catch Block,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Get_Bibliographic_Data,The method has an empty catch block.
Empty Catch Block,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_Project_Info,The method has an empty catch block.
Empty Catch Block,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_All_Files,The method has an empty catch block.
Empty Catch Block,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,recursively_add_all_METS_files,The method has an empty catch block.
Magic Number,SobekCM_Resource_Database.Builder,Bib_Package_Builder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Bib_Package_Builder.cs,Add_MARC_Info,The following statement contains a magic number: if ((MARCDirectory.Length > 0) && (Directory.Exists(MARCDirectory)))              {                  // See if there was a record listed for this                  List<string> alephRecords = new List<string>();                  string aleph = BIBPackage.Bib_Info.ALEPH_Record;                  if (aleph.Length > 0)                  {                      alephRecords.Add(aleph);                  }                  string[] notis = BIBPackage.Bib_Info.NOTIS_Records;                  List<string> notisRecords = new List<string>();                  if (notis.Length > 0)                  {                      foreach (string thisNotis in notis)                          notisRecords.Add(thisNotis);                  }                    // Try to find MARC XML for any aleph records                  string aleph_record_number = String.Empty;                  DateTime aleph_record_date = new DateTime(1000' 1' 1);                  string oclc_record_number = String.Empty;                  string marc_folder;                  foreach (string thisRecord in alephRecords)                  {                      // Compute the folder name                      marc_folder = MARCDirectory;                      foreach (char thisChar in thisRecord)                      {                          marc_folder = marc_folder + thisChar + "\\";                      }                        // Does this folder exist?                      if ((Directory.Exists(marc_folder)) && (File.Exists(marc_folder + thisRecord + ".xml")))                      {                          DateTime thisDate = ((new FileInfo(marc_folder + thisRecord + ".xml")).LastWriteTime);                          if ((aleph_record_number.Length == 0) || (thisDate.CompareTo(aleph_record_date) < 0))                          {                              aleph_record_number = thisRecord;                              aleph_record_date = thisDate;                          }                      }                  }                    // Check for OCLC MARC xml file as well                  string oclc = BIBPackage.Bib_Info.OCLC_Record;                  if (oclc.Length > 0)                  {                      marc_folder = MARCDirectory + "OCLC\\";                      foreach (char thisChar in oclc)                      {                          marc_folder = marc_folder + thisChar + "\\";                      }                        // Does this folder exist?                      if ((Directory.Exists(marc_folder)) && (File.Exists(marc_folder + oclc + ".xml")))                      {                          DateTime thisDate = ((new FileInfo(marc_folder + oclc + ".xml")).LastWriteTime);                          if ((aleph_record_number.Length == 0) || (thisDate.CompareTo(aleph_record_date) < 0))                          {                              oclc_record_number = oclc;                          }                      }                  }                    // OCLC is newer                  if (oclc_record_number.Length > 0)                  {                      // Try to pull OCLC first                      if (oclc.Length > 0)                      {                          if (read_marc_file(BIBPackage' oclc' MARCDirectory + "OCLC\\"))                          {                              BIBPackage.Bib_Info.Record.Record_Origin = "Imported from (OCLC)" + oclc;                              return true;                          }                      }                        // Try to pull ALEPH next                      if (aleph_record_number.Length > 0)                      {                          if (read_marc_file(BIBPackage' aleph_record_number' MARCDirectory))                          {                              BIBPackage.Bib_Info.Record.Record_Origin = "Imported from (ALEPH)" + aleph_record_number;                              return true;                          }                      }                  }                  else // ALEPH is newer                  {                      if (aleph_record_number.Length > 0)                      {                          // Try to pull ALEPH first                          if (read_marc_file(BIBPackage' aleph_record_number' MARCDirectory))                          {                              BIBPackage.Bib_Info.Record.Record_Origin = "Imported from (ALEPH)" + aleph_record_number;                              return true;                          }                      }                        // Try to pull OCLC next                      if (oclc.Length > 0)                      {                          if (read_marc_file(BIBPackage' oclc' MARCDirectory + "OCLC\\"))                          {                              BIBPackage.Bib_Info.Record.Record_Origin = "Imported from (OCLC)" + oclc;                              return true;                          }                      }                  }                    // Try to find MARC XML for any notis records                  foreach (string thisRecord in notisRecords)                  {                      if (read_marc_file(BIBPackage' thisRecord' MARCDirectory))                      {                          BIBPackage.Bib_Info.Record.Record_Origin = "Imported from (NOTIS)" + thisRecord;                          return true;                      }                  }              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_General_Convert_Mill,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_General_Convert_Mill.cs,Convert_Roman_To_Numbers,The following statement contains a magic number: switch (ThisChar.ToString().ToUpper())              {                  case "I":                      return 1;                  case "V":                      return 5;                  case "X":                      return 10;                  case "L":                      return 50;                  case "C":                      return 100;                  case "D":                      return 500;                  case "M":                      return 1000;                  default:                      return 0;              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_General_Convert_Mill,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_General_Convert_Mill.cs,Convert_Roman_To_Numbers,The following statement contains a magic number: switch (ThisChar.ToString().ToUpper())              {                  case "I":                      return 1;                  case "V":                      return 5;                  case "X":                      return 10;                  case "L":                      return 50;                  case "C":                      return 100;                  case "D":                      return 500;                  case "M":                      return 1000;                  default:                      return 0;              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_General_Convert_Mill,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_General_Convert_Mill.cs,Convert_Roman_To_Numbers,The following statement contains a magic number: switch (ThisChar.ToString().ToUpper())              {                  case "I":                      return 1;                  case "V":                      return 5;                  case "X":                      return 10;                  case "L":                      return 50;                  case "C":                      return 100;                  case "D":                      return 500;                  case "M":                      return 1000;                  default:                      return 0;              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_General_Convert_Mill,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_General_Convert_Mill.cs,Convert_Roman_To_Numbers,The following statement contains a magic number: switch (ThisChar.ToString().ToUpper())              {                  case "I":                      return 1;                  case "V":                      return 5;                  case "X":                      return 10;                  case "L":                      return 50;                  case "C":                      return 100;                  case "D":                      return 500;                  case "M":                      return 1000;                  default:                      return 0;              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_General_Convert_Mill,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_General_Convert_Mill.cs,Convert_Roman_To_Numbers,The following statement contains a magic number: switch (ThisChar.ToString().ToUpper())              {                  case "I":                      return 1;                  case "V":                      return 5;                  case "X":                      return 10;                  case "L":                      return 50;                  case "C":                      return 100;                  case "D":                      return 500;                  case "M":                      return 1000;                  default:                      return 0;              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_General_Convert_Mill,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_General_Convert_Mill.cs,Convert_Roman_To_Numbers,The following statement contains a magic number: switch (ThisChar.ToString().ToUpper())              {                  case "I":                      return 1;                  case "V":                      return 5;                  case "X":                      return 10;                  case "L":                      return 50;                  case "C":                      return 100;                  case "D":                      return 500;                  case "M":                      return 1000;                  default:                      return 0;              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following statement contains a magic number: if (fileerrortype >= 0)              {                  // Create the necessary objects to draw this error                  Brush errorBrush = new SolidBrush(Color.Tomato);                  int fontsize = (int) (45*Scale);                  Font errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                    if ((fileerrortype == 4) || (fileerrortype == 6))                  {                      fontsize = (int) (30*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    if (fileerrortype == 3)                  {                      fontsize = (int) (40*Scale);                      errorFont = new Font("Tahoma"' fontsize' FontStyle.Bold);                  }                    // Draw the text of the errors                  switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }                    // Dispose of the created objects                  errorBrush.Dispose();                  errorFont.Dispose();              }
Magic Number,SobekCM_Resource_Database.Builder,Builder_Page_File_Collection,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File_Collection.cs,Recursive_Sort_Insert,The following statement contains a magic number: int midIndex = (int) Math.Ceiling((double) (endIndex - startIndex)/2) + startIndex;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Minimum_Builder_Information,The following statement contains a magic number: try              {                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@bibid"' Resource.BibID);                  parameters[1] = new EalDbParameter("@vid"' Resource.VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Builder_Get_Minimum_Item_Information"' parameters);                    // If there was no data for this collection and entry point' return null (an ERROR occurred)                  if ((tempSet.Tables.Count == 0) || (tempSet.Tables[0] == null) || (tempSet.Tables[0].Rows.Count == 0))                  {                      return false;                  }                    // Get the item id and the thumbnail from the first table                  Resource.Web.ItemID = Convert.ToInt32(tempSet.Tables[0].Rows[0][0]);                  Resource.Behaviors.Main_Thumbnail = tempSet.Tables[0].Rows[0][1].ToString();                  Resource.Behaviors.IP_Restriction_Membership = Convert.ToInt16(tempSet.Tables[0].Rows[0][2]);                  Resource.Tracking.Born_Digital = Convert.ToBoolean(tempSet.Tables[0].Rows[0][3]);                  Resource.Web.Siblings = Convert.ToInt32(tempSet.Tables[0].Rows[0][4]) - 1;                  Resource.Behaviors.Dark_Flag = Convert.ToBoolean(tempSet.Tables[0].Rows[0]["Dark"]);                    // Add the aggregation codes                  Resource.Behaviors.Clear_Aggregations();                  foreach (DataRow thisRow in tempSet.Tables[1].Rows)                  {                      string code = thisRow[0].ToString();                      string name = thisRow[1].ToString();                      string type = thisRow[2].ToString();                        Resource.Behaviors.Add_Aggregation(code' name' type);                  }                    // Add the icons                  Resource.Behaviors.Clear_Wordmarks();                  foreach (DataRow iconRow in tempSet.Tables[2].Rows)                  {                      string image = iconRow[0].ToString();                      string link = iconRow[1].ToString().Replace("&"' "&amp;").Replace("\""' "&quot;");                      string code = iconRow[2].ToString();                      string name = iconRow[3].ToString();                      if (name.Length == 0)                          name = code.Replace("&"' "&amp;").Replace("\""' "&quot;");                        string html;                      if (link.Length == 0)                      {                          html = "<img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" />";                      }                      else                      {                          if (link[0] == '?')                          {                              html = "<a href=\"" + link + "\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                          else                          {                              html = "<a href=\"" + link + "\" target=\"_blank\"><img class=\"SobekItemWordmark\" src=\"<%BASEURL%>design/wordmarks/" + image + "\" title=\"" + name + "\" alt=\"" + name + "\" /></a>";                          }                      }                        Wordmark_Info newIcon = new Wordmark_Info {HTML = html' Link = link' Title = name' Code = code};                      Resource.Behaviors.Add_Wordmark(newIcon);                  }                    // Add the web skins                  Resource.Behaviors.Clear_Web_Skins();                  foreach (DataRow skinRow in tempSet.Tables[3].Rows)                  {                      Resource.Behaviors.Add_Web_Skin(skinRow[0].ToString().ToUpper());                  }                    // Return the first table from the returned dataset                  return true;              }              catch              {                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (pubdate.Length > 0)              {                  // Try to get the year                  if (pubdate.Length == 4)                  {                      Int32.TryParse(pubdate' out year);                  }                    if (year == -1)                  {                      DateTime date;                      if (DateTime.TryParse(pubdate' out date))                      {                          year = date.Year;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if ((source_code.Length > 2) && (source_code.ToUpper().IndexOf("II") == 0))                  source_code = source_code.Substring(1);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if ((holding_code.Length > 2) && (holding_code.ToUpper().IndexOf("II") == 0))                  holding_code = holding_code.Substring(1);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 2)                  icon3_name = ThisPackage.Behaviors.Wordmarks[2].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 2)                  icon3_name = ThisPackage.Behaviors.Wordmarks[2].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 3)                  icon4_name = ThisPackage.Behaviors.Wordmarks[3].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 3)                  icon4_name = ThisPackage.Behaviors.Wordmarks[3].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 4)                  icon5_name = ThisPackage.Behaviors.Wordmarks[4].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 4)                  icon5_name = ThisPackage.Behaviors.Wordmarks[4].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: while (aggregationCodes.Count < 8)                  aggregationCodes.Add(String.Empty);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The following statement contains a magic number: try              {                  int i = 0;                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[71];                  param_list[i++] = new EalDbParameter("@GroupID"' ThisPackage.Web.GroupID);                  param_list[i++] = new EalDbParameter("@VID"' ThisPackage.VID);                  param_list[i++] = new EalDbParameter("@PageCount"' ThisPackage.Divisions.Page_Count);                  param_list[i++] = new EalDbParameter("@FileCount"' ThisPackage.Divisions.Files.Count);                  param_list[i++] = new EalDbParameter("@Title"' ThisPackage.Bib_Info.Main_Title.NonSort + ThisPackage.Bib_Info.Main_Title.Title);                  param_list[i++] = new EalDbParameter("@SortTitle"' ThisPackage.Bib_Info.SortSafeTitle(ThisPackage.Bib_Info.Main_Title.Title' false));                  param_list[i++] = new EalDbParameter("@AccessMethod"' 1);                  param_list[i++] = new EalDbParameter("@Link"' link);                  param_list[i++] = new EalDbParameter("@CreateDate"' DateTime.Now);                  param_list[i++] = new EalDbParameter("@PubDate"' pubdate);                  param_list[i++] = new EalDbParameter("@SortDate"' ThisPackage.Bib_Info.SortSafeDate(pubdate));                  param_list[i++] = new EalDbParameter("@Author"' author_builder.ToString());                  param_list[i++] = new EalDbParameter("@Spatial_KML"' spatial_kml);                  param_list[i++] = new EalDbParameter("@Spatial_KML_Distance"' SPATIAL_DISTANCE);                  param_list[i++] = new EalDbParameter("@DiskSize_KB"' ThisPackage.DiskSize_KB);                  param_list[i++] = new EalDbParameter("@Spatial_Display"' spatialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Institution_Display"' institutionDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Edition_Display"' ThisPackage.Bib_Info.Origin_Info.Edition);                  param_list[i++] = new EalDbParameter("@Material_Display"' materialDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Measurement_Display"' measurements);                  param_list[i++] = new EalDbParameter("@StylePeriod_Display"' stylePeriodDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Technique_Display"' techniqueDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Subjects_Display"' subjectsDisplayBuilder.ToString());                  param_list[i++] = new EalDbParameter("@Donor"' donor);                  param_list[i++] = new EalDbParameter("@Publisher"' publisher_builder.ToString());                  param_list[i++] = new EalDbParameter("@TextSearchable"' TextFlag);                  param_list[i++] = new EalDbParameter("@MainThumbnail"' ThisPackage.Behaviors.Main_Thumbnail);                  param_list[i++] = new EalDbParameter("@MainJPEG"' ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' ""));                  param_list[i++] = new EalDbParameter("@IP_Restriction_Mask"' ThisPackage.Behaviors.IP_Restriction_Membership);                  param_list[i++] = new EalDbParameter("@CheckoutRequired"' ThisPackage.Behaviors.CheckOut_Required);                  param_list[i++] = new EalDbParameter("@AggregationCode1"' aggregationCodes[0]);                  param_list[i++] = new EalDbParameter("@AggregationCode2"' aggregationCodes[1]);                  param_list[i++] = new EalDbParameter("@AggregationCode3"' aggregationCodes[2]);                  param_list[i++] = new EalDbParameter("@AggregationCode4"' aggregationCodes[3]);                  param_list[i++] = new EalDbParameter("@AggregationCode5"' aggregationCodes[4]);                  param_list[i++] = new EalDbParameter("@AggregationCode6"' aggregationCodes[5]);                  param_list[i++] = new EalDbParameter("@AggregationCode7"' aggregationCodes[6]);                  param_list[i++] = new EalDbParameter("@AggregationCode8"' aggregationCodes[7]);                  param_list[i++] = new EalDbParameter("@HoldingCode"' holding_code);                  param_list[i++] = new EalDbParameter("@SourceCode"' source_code);                  param_list[i++] = new EalDbParameter("@Icon1_Name"' icon1_name);                  param_list[i++] = new EalDbParameter("@Icon2_Name"' icon2_name);                  param_list[i++] = new EalDbParameter("@Icon3_Name"' icon3_name);                  param_list[i++] = new EalDbParameter("@Icon4_Name"' icon4_name);                  param_list[i++] = new EalDbParameter("@Icon5_Name"' icon5_name);                    if (level1_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' level1_text);                      param_list[i++] = new EalDbParameter("@Level1_Index"' level1_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (level2_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' level2_text);                      param_list[i++] = new EalDbParameter("@Level2_Index"' level2_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (level3_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' level3_text);                      param_list[i++] = new EalDbParameter("@Level3_Index"' level3_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (level4_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' level4_text);                      param_list[i++] = new EalDbParameter("@Level4_Index"' level4_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (level5_index >= 0)                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' level5_text);                      param_list[i++] = new EalDbParameter("@Level5_Index"' level5_index);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[i++] = new EalDbParameter("@VIDSource"' ThisPackage.Tracking.VID_Source);                  param_list[i++] = new EalDbParameter("@CopyrightIndicator"' 0);                  param_list[i++] = new EalDbParameter("@Born_Digital"' ThisPackage.Tracking.Born_Digital);                  param_list[i++] = new EalDbParameter("@Dark"' ThisPackage.Behaviors.Dark_Flag);                  if (ThisPackage.Tracking.Material_Received_Date.HasValue)                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' ThisPackage.Tracking.Material_Received_Date.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' ThisPackage.Tracking.Material_Rec_Date_Estimated);                  }                  else                  {                      param_list[i++] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                      param_list[i++] = new EalDbParameter("@Material_Recd_Date_Estimated"' false);                  }                    if (ThisPackage.Tracking.Disposition_Advice <= 0)                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[i++] = new EalDbParameter("@Disposition_Advice"' ThisPackage.Tracking.Disposition_Advice);                    param_list[i++] = new EalDbParameter("@Disposition_Advice_Notes"' ThisPackage.Tracking.Disposition_Advice_Notes);                  param_list[i++] = new EalDbParameter("@Internal_Comments"' ThisPackage.Tracking.Internal_Comments);                  param_list[i++] = new EalDbParameter("@Tracking_Box"' ThisPackage.Tracking.Tracking_Box);                  param_list[i++] = new EalDbParameter("@Online_Submit"' OnlineSubmit);                  param_list[i++] = new EalDbParameter("@User"' Username);                  param_list[i++] = new EalDbParameter("@UserNotes"' Usernotes);                  param_list[i++] = new EalDbParameter("@UserID_To_Link"' Userid);                    param_list[i] = new EalDbParameter("@ItemID"' -1);                  param_list[i++].Direction = ParameterDirection.InputOutput;                  param_list[i] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_New_Item"' param_list);                    // Save the item id and VID into the package                  ThisPackage.Web.ItemID = (int) param_list[69].Value;                  ThisPackage.VID = param_list[70].Value.ToString();              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Corporation,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[1] = new EalDbParameter("@CorporateName"' CorporateName);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Corporation"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Corporation"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Region_Item_Link,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@GeoAuthCode"' GeoAuthCode);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  param_list[2] = new EalDbParameter("@RegionName"' Name);                  param_list[3] = new EalDbParameter("@RegionType"' Type);                  param_list[4] = new EalDbParameter("@P_RegionAuthCode"' P_Code);                  param_list[5] = new EalDbParameter("@P_RegionName"' P_Name);                  param_list[6] = new EalDbParameter("@P_RegionType"' P_Type);                  param_list[7] = new EalDbParameter("@P2_RegionAuthCode"' P2_Code);                  param_list[8] = new EalDbParameter("@P2_RegionName"' P2_Name);                  param_list[9] = new EalDbParameter("@P2_RegionType"' P2_Type);                  param_list[10] = new EalDbParameter("@P3_RegionAuthCode"' P3_Code);                  param_list[11] = new EalDbParameter("@P3_RegionName"' P3_Name);                  param_list[12] = new EalDbParameter("@P3_RegionType"' P3_Type);                  param_list[13] = new EalDbParameter("@P4_RegionAuthCode"' P4_Code);                  param_list[14] = new EalDbParameter("@P4_RegionName"' P4_Name);                  param_list[15] = new EalDbParameter("@P4_RegionType"' P4_Type);                  param_list[16] = new EalDbParameter("@P5_RegionAuthCode"' P5_Code);                  param_list[17] = new EalDbParameter("@P5_RegionName"' P5_Name);                  param_list[18] = new EalDbParameter("@P5_RegionType"' P5_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Region_Item_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Region_Item_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Feature,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[16];                  param_list[0] = new EalDbParameter("@FeatAuthCode"' FeatAuthCode);                  param_list[1] = new EalDbParameter("@FeatureName"' FeatureName);                  param_list[2] = new EalDbParameter("@LocationDesc"' LocationDesc);                  param_list[3] = new EalDbParameter("@CorpAuthCode"' CorpAuthCode);                  param_list[4] = new EalDbParameter("@AA_Indicated"' AA_Indicated);                  param_list[5] = new EalDbParameter("@Albers_X"' Albers_X);                  param_list[6] = new EalDbParameter("@Albers_Y"' Albers_Y);                  param_list[7] = new EalDbParameter("@Latitude"' Latitude);                  param_list[8] = new EalDbParameter("@Longitude"' Longitude);                  param_list[9] = new EalDbParameter("@FeatureType"' FeatureType);                  param_list[10] = new EalDbParameter("@FeatureTypeYear"' FeatureTypeYear);                  param_list[11] = new EalDbParameter("@PageID1"' PageID1);                  param_list[12] = new EalDbParameter("@PageID2"' PageID2);                  param_list[13] = new EalDbParameter("@PageID3"' PageID3);                  param_list[14] = new EalDbParameter("@PageID4"' PageID4);                  param_list[15] = new EalDbParameter("@PageID5"' PageID5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Feature"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Feature"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Street,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@StreetAuthCode"' StreetAuthCode);                  param_list[1] = new EalDbParameter("@StreetName"' StreetName);                  param_list[2] = new EalDbParameter("@StartAddress"' StartAddress);                  param_list[3] = new EalDbParameter("@EndAddress"' EndAddress);                  param_list[4] = new EalDbParameter("@StreetDirection"' StreetDirection);                  param_list[5] = new EalDbParameter("@StreetSide"' StreetSide);                  param_list[6] = new EalDbParameter("@SegmentDesc"' SegmentDesc);                  param_list[7] = new EalDbParameter("@PageID"' PageID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Street_Page_Link"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Street_Page_Link"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_External_Record_Number,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@groupID"' GroupID);                  param_list[1] = new EalDbParameter("@extRecordValue"' Identifier);                  param_list[2] = new EalDbParameter("@extRecordType"' Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_External_Record_Number"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_External_Record_Number"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_External_Record_Number,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@groupID"' GroupID);                  param_list[1] = new EalDbParameter("@extRecordValue"' Identifier);                  param_list[2] = new EalDbParameter("@extRecordType"' Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_External_Record_Number"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_External_Record_Number"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The following statement contains a magic number: if (pubdate.Length > 0)              {                  // Try to get the year                  if (pubdate.Length == 4)                  {                      Int32.TryParse(pubdate' out year);                  }                    if (year == -1)                  {                      DateTime date;                      if (DateTime.TryParse(pubdate' out date))                      {                          year = date.Year;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The following statement contains a magic number: if ((source_code.Length > 2) && (source_code.ToUpper().IndexOf("II") == 0))                  source_code = source_code.Substring(1);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Information,The following statement contains a magic number: if ((holding_code.Length > 2) && (holding_code.ToUpper().IndexOf("II") == 0))                  holding_code = holding_code.Substring(1);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 2)                  icon3_name = ThisPackage.Behaviors.Wordmarks[2].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 2)                  icon3_name = ThisPackage.Behaviors.Wordmarks[2].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 3)                  icon4_name = ThisPackage.Behaviors.Wordmarks[3].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 3)                  icon4_name = ThisPackage.Behaviors.Wordmarks[3].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 4)                  icon5_name = ThisPackage.Behaviors.Wordmarks[4].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (ThisPackage.Behaviors.Wordmarks.Count > 4)                  icon5_name = ThisPackage.Behaviors.Wordmarks[4].Code;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: while (aggregationCodes.Count < 8)                  aggregationCodes.Add(String.Empty);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Behaviors,The following statement contains a magic number: if (Mass_Update_Mode)              {                  // Siunce this is a mass update' no viewer analysis is really needed here.. Just collect them all to add                  // Collect the behavior information                  List<string> view_types = new List<string>();                  List<string> view_labels = new List<string>();                  List<string> view_attributes = new List<string>();                    foreach (View_Object thisView in ThisPackage.Behaviors.Views)                  {                      if (!view_types.Contains(thisView.View_Type))                      {                          view_types.Add(thisView.View_Type);                          view_labels.Add(thisView.Label);                          view_attributes.Add(thisView.Attributes);                      }                  }                    // Fill up the views to the required six                  while (view_types.Count < 6)                  {                      view_types.Add(String.Empty);                      view_labels.Add(String.Empty);                      view_attributes.Add(String.Empty);                  }                    // Update the behaviors of all items within the single group ( by groupid )                  Mass_Update_Item_Behaviors(ThisPackage.Web.GroupID' ipRestrictNull' ip_restrict'                      ThisPackage.Behaviors.CheckOut_Required_Is_Null' ThisPackage.Behaviors.CheckOut_Required'                      darkFlag_Null' darkFlag'                      ThisPackage.Tracking.Born_Digital_Is_Null' ThisPackage.Tracking.Born_Digital'                      aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                      aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name'                      view_types[0]' view_labels[0]' view_attributes[0]'                      view_types[1]' view_labels[1]' view_attributes[1]'                      view_types[2]' view_labels[2]' view_attributes[2]'                      view_types[3]' view_labels[3]' view_attributes[3]'                      view_types[4]' view_labels[4]' view_attributes[4]'                      view_types[5]' view_labels[5]' view_attributes[5]);              }              else              {                  // Minimal mode just adds the text flag now                  if (Minimal_Mode)                  {                      Save_Item_Behaviors_Minimal(ThisPackage.Web.ItemID' TextFlag);                  }                  else                  {                      // Save all the main behaviors                      Save_Item_Behaviors(ThisPackage.Web.ItemID' TextFlag' ThisPackage.Behaviors.Main_Thumbnail'                          ThisPackage.Behaviors.Main_Thumbnail.Replace("thm"' "")' ip_restrict'                          ThisPackage.Behaviors.CheckOut_Required' darkFlag' ThisPackage.Tracking.Born_Digital' ThisPackage.Tracking.Disposition_Advice' ThisPackage.Tracking.Disposition_Advice_Notes'                          ThisPackage.Tracking.Material_Received_Date' ThisPackage.Tracking.Material_Rec_Date_Estimated' ThisPackage.Tracking.Tracking_Box' aggregationCodes[0]' aggregationCodes[1]' aggregationCodes[2]' aggregationCodes[3]' aggregationCodes[4]' aggregationCodes[5]' aggregationCodes[6]'                          aggregationCodes[7]' holding_code' source_code' icon1_name' icon2_name' icon3_name' icon4_name' icon5_name' ThisPackage.Behaviors.Left_To_Right' ThisPackage.Behaviors.CitationSet);                        // Also' save the ticklers                      string tickler1 = String.Empty;                      string tickler2 = String.Empty;                      string tickler3 = String.Empty;                      string tickler4 = String.Empty;                      string tickler5 = String.Empty;                        if (ThisPackage.Behaviors.Ticklers_Count > 0)                          tickler1 = ThisPackage.Behaviors.Ticklers[0];                      if (ThisPackage.Behaviors.Ticklers_Count > 1)                          tickler2 = ThisPackage.Behaviors.Ticklers[1];                      if (ThisPackage.Behaviors.Ticklers_Count > 2)                          tickler3 = ThisPackage.Behaviors.Ticklers[2];                      if (ThisPackage.Behaviors.Ticklers_Count > 3)                          tickler4 = ThisPackage.Behaviors.Ticklers[3];                      if (ThisPackage.Behaviors.Ticklers_Count > 4)                          tickler5 = ThisPackage.Behaviors.Ticklers[4];                        Save_Item_Ticklers(ThisPackage.Web.ItemID' tickler1' tickler2' tickler3' tickler4' tickler5);                  }                    // If the views object is NULL then don't do anything here                  if ((ThisPackage.Behaviors.Views != null) && (ThisPackage.Behaviors.Views.Count > 0))                  {                        // Determine which viewers to add or remove from this single item                      List<View_Object> currentViews = Get_Current_Item_Viewers(ThisPackage.BibID' ThisPackage.VID);                      List<View_Object> removeViews = new List<View_Object>();                      List<View_Object> addViews = new List<View_Object>();                        // Use a found flag to determine which current viewers are NOT present in the new list                      // booleans start with a default value of 'false'' so need to initialize                      bool[] foundFlag = new bool[currentViews.Count];                        // Use a dictionary for quick lookup in current views                      Dictionary<string' int> currentViewTypeToIndex = new Dictionary<string' int>(StringComparer.OrdinalIgnoreCase);                      for (int i = 0; i < currentViews.Count; i++)                      {                          currentViewTypeToIndex[currentViews[i].View_Type] = i;                      }                        // Now' step through all the views in the object to save                      foreach (View_Object thisView in ThisPackage.Behaviors.Views)                      {                          // If this view is present only as an exclusion' skip it.                            // If it is removing an existing view' that will be handled in the next FOR anyway                          if (thisView.Exclude) continue;                            // Does this view already exists?                          if (currentViewTypeToIndex.ContainsKey(thisView.View_Type))                          {                              // Get the index                              int viewIndex = currentViewTypeToIndex[thisView.View_Type];                              View_Object currentView = currentViews[viewIndex];                                // Compare the label and attribute.. is there a change there?                              if ((String.Compare(thisView.Attributes' currentView.Attributes' StringComparison.Ordinal) != 0) ||                                  (String.Compare(thisView.Label' currentView.Label' StringComparison.Ordinal) != 0) ||                                  (currentView.Exclude))                              {                                  // Even though this existed' since the label or attribute are different' this                                   // view will be sent to the 'add view' method                                  addViews.Add(thisView);                              }                                // This existing view was handled already                              foundFlag[viewIndex] = true;                          }                          else                          {                              // This is a new view type' so it will be added' assuming it is not an exclusion                              addViews.Add(thisView);                          }                      }                        // Look for views to remove from the database                      for (int i = 0; i < foundFlag.Length; i++)                      {                          // If this view was not found in the object to save' it should be excluded                          // or removed from the database                          if (!foundFlag[i])                          {                              // If this view is just an exclusion view' then no need to 'remove it'                              if (!currentViews[i].Exclude)                                  removeViews.Add(currentViews[i]);                          }                      }                        // With the two lists in hand' now add any new views                      int add_start_index = 0;                      while (addViews.Count > add_start_index)                      {                          // Add the next six views                          Save_Item_Add_Viewers(ThisPackage.Web.ItemID'                              (addViews.Count > add_start_index ? addViews[add_start_index].View_Type : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Label : String.Empty)'                              (addViews.Count > add_start_index ? addViews[add_start_index].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Label : String.Empty)'                              (addViews.Count > add_start_index + 1 ? addViews[add_start_index + 1].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Label : String.Empty)'                              (addViews.Count > add_start_index + 2 ? addViews[add_start_index + 2].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Label : String.Empty)'                              (addViews.Count > add_start_index + 3 ? addViews[add_start_index + 3].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Label : String.Empty)'                              (addViews.Count > add_start_index + 4 ? addViews[add_start_index + 4].Attributes : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].View_Type : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Label : String.Empty)'                              (addViews.Count > add_start_index + 5 ? addViews[add_start_index + 5].Attributes : String.Empty));                            // Handled these six adds                          add_start_index += 6;                      }                        // Also handle any removes                      int remove_start_index = 0;                      while (removeViews.Count > remove_start_index)                      {                          // Remove the next six views                          Save_Item_Remove_Viewers(ThisPackage.Web.ItemID'                              (removeViews.Count > remove_start_index ? removeViews[remove_start_index].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 1 ? removeViews[remove_start_index + 1].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 2 ? removeViews[remove_start_index + 2].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 3 ? removeViews[remove_start_index + 3].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 4 ? removeViews[remove_start_index + 4].View_Type : String.Empty)'                              (removeViews.Count > remove_start_index + 5 ? removeViews[remove_start_index + 5].View_Type : String.Empty));                            // Handled these six removes                          remove_start_index += 6;                      }                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }                      for (int i = 0; i < ThisPackage.Behaviors.Serial_Info.Count; i++)                  {                      builder.Append(ThisPackage.Behaviors.Serial_Info[i].Display + "|" + ThisPackage.Behaviors.Serial_Info[i].Order);                      if ((i + 1) < ThisPackage.Behaviors.Serial_Info.Count)                          builder.Append(";");                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }                      for (int i = 0; i < ThisPackage.Behaviors.Serial_Info.Count; i++)                  {                      builder.Append(ThisPackage.Behaviors.Serial_Info[i].Display + "|" + ThisPackage.Behaviors.Serial_Info[i].Order);                      if ((i + 1) < ThisPackage.Behaviors.Serial_Info.Count)                          builder.Append(";");                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }                      for (int i = 0; i < ThisPackage.Behaviors.Serial_Info.Count; i++)                  {                      builder.Append(ThisPackage.Behaviors.Serial_Info[i].Display + "|" + ThisPackage.Behaviors.Serial_Info[i].Order);                      if ((i + 1) < ThisPackage.Behaviors.Serial_Info.Count)                          builder.Append(";");                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }                      for (int i = 0; i < ThisPackage.Behaviors.Serial_Info.Count; i++)                  {                      builder.Append(ThisPackage.Behaviors.Serial_Info[i].Display + "|" + ThisPackage.Behaviors.Serial_Info[i].Order);                      if ((i + 1) < ThisPackage.Behaviors.Serial_Info.Count)                          builder.Append(";");                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }                      for (int i = 0; i < ThisPackage.Behaviors.Serial_Info.Count; i++)                  {                      builder.Append(ThisPackage.Behaviors.Serial_Info[i].Display + "|" + ThisPackage.Behaviors.Serial_Info[i].Order);                      if ((i + 1) < ThisPackage.Behaviors.Serial_Info.Count)                          builder.Append(";");                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      Serial_Info.Single_Serial_Hierarchy level1 = ThisPackage.Behaviors.Serial_Info[0];                      level1_index = level1.Order;                      level1_text = level1.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      Serial_Info.Single_Serial_Hierarchy level2 = ThisPackage.Behaviors.Serial_Info[1];                      level2_index = level2.Order;                      level2_text = level2.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      Serial_Info.Single_Serial_Hierarchy level3 = ThisPackage.Behaviors.Serial_Info[2];                      level3_index = level3.Order;                      level3_text = level3.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      Serial_Info.Single_Serial_Hierarchy level4 = ThisPackage.Behaviors.Serial_Info[3];                      level4_index = level4.Order;                      level4_text = level4.Display;                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      Serial_Info.Single_Serial_Hierarchy level5 = ThisPackage.Behaviors.Serial_Info[4];                      level5_index = level5.Order;                      level5_text = level5.Display;                  }                      for (int i = 0; i < ThisPackage.Behaviors.Serial_Info.Count; i++)                  {                      builder.Append(ThisPackage.Behaviors.Serial_Info[i].Display + "|" + ThisPackage.Behaviors.Serial_Info[i].Order);                      if ((i + 1) < ThisPackage.Behaviors.Serial_Info.Count)                          builder.Append(";");                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[0].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[1].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[2].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[3].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[4].Display));                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[0].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[1].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[2].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[3].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[4].Display));                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[0].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[1].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[2].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[3].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[4].Display));                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[0].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[1].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[2].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[3].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[4].Display));                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[0].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[1].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[2].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[3].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[4].Display));                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if (ThisPackage.Behaviors.hasSerialInformation)              {                  if (ThisPackage.Behaviors.Serial_Info.Count > 0)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[0].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 1)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[1].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 2)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[2].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 3)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[3].Display));                  }                    if (ThisPackage.Behaviors.Serial_Info.Count > 4)                  {                      metadataTerms.Add(new KeyValuePair<string' string>("Other Citation"' ThisPackage.Behaviors.Serial_Info[4].Display));                  }              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: if ((source_code.Length > 2) && (source_code.ToUpper().IndexOf("II") == 0))                  source_code = source_code.Substring(1);
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((metadataTerms.Count%10) != 0)              {                  metadataTerms.Add(new KeyValuePair<string' string>(String.Empty' String.Empty));              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata_Information,The following statement contains a magic number: while ((current_index + 10) <= metadataTerms.Count)              {                  // Save the next ten values                  Save_Item_Metadata(ThisPackage.Web.ItemID'                      metadataTerms[current_index].Key' metadataTerms[current_index].Value'                      metadataTerms[current_index + 1].Key' metadataTerms[current_index + 1].Value'                      metadataTerms[current_index + 2].Key' metadataTerms[current_index + 2].Value'                      metadataTerms[current_index + 3].Key' metadataTerms[current_index + 3].Value'                      metadataTerms[current_index + 4].Key' metadataTerms[current_index + 4].Value'                      metadataTerms[current_index + 5].Key' metadataTerms[current_index + 5].Value'                      metadataTerms[current_index + 6].Key' metadataTerms[current_index + 6].Value'                      metadataTerms[current_index + 7].Key' metadataTerms[current_index + 7].Value'                      metadataTerms[current_index + 8].Key' metadataTerms[current_index + 8].Value'                      metadataTerms[current_index + 9].Key' metadataTerms[current_index + 9].Value);                    // Increment curent index                  current_index += 10;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[17];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@GroupTitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[3] = new EalDbParameter("@Type"' Type);                  param_list[4] = new EalDbParameter("@File_Location"' File_Root);                  if (OCLC_Number < 0)                      param_list[5] = new EalDbParameter("@OCLC_Number"' 1);                  else                      param_list[5] = new EalDbParameter("@OCLC_Number"' OCLC_Number);                  if (ALEPH_Number < 0)                      param_list[6] = new EalDbParameter("@ALEPH_Number"' 1);                  else                      param_list[6] = new EalDbParameter("@ALEPH_Number"' ALEPH_Number);                  param_list[7] = new EalDbParameter("@Group_Thumbnail"' Group_Thumbnail);                  param_list[8] = new EalDbParameter("@Large_Format"' Large_Format);                  param_list[9] = new EalDbParameter("@Track_By_Month"' Track_By_Month);                  param_list[10] = new EalDbParameter("@Never_Overlay_Record"' Never_Overlay_Record);                  param_list[11] = new EalDbParameter("@Update_Existing"' Update_Existing);                  param_list[12] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[13] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                  param_list[14] = new EalDbParameter("@GroupID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[15] = new EalDbParameter("@New_BibID"' "0000000000") {Direction = ParameterDirection.InputOutput};                  param_list[16] = new EalDbParameter("@New_Group"' false) {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group"' param_list);                    // Get the values to return                  int groupid = (int) param_list[14].Value;                  string bibid = param_list[15].Value.ToString();                  bool is_new = Convert.ToBoolean(param_list[16].Value);                    // Return the value                  return new Save_Item_Group_Args(groupid' bibid' is_new);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group"' ee);                  return new Save_Item_Group_Args(-1' String.Empty' false);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_OAI,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@data_code"' Data_Code);                  param_list[2] = new EalDbParameter("@oai_data"' OAI_Data);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_OAI_PMH_Data"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_OAI_PMH_Data"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_OAI,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@data_code"' Data_Code);                  param_list[2] = new EalDbParameter("@oai_data"' OAI_Data);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_OAI_PMH_Data"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_OAI_PMH_Data"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: if (ThisPackage.Behaviors.Web_Skins.Count > 0)              {                  primaryInterface = ThisPackage.Behaviors.Web_Skins[0];                  if (ThisPackage.Behaviors.Web_Skins.Count > 1)                      altInterface1 = ThisPackage.Behaviors.Web_Skins[1];                  if (ThisPackage.Behaviors.Web_Skins.Count > 2)                      altInterface2 = ThisPackage.Behaviors.Web_Skins[2];                  if (ThisPackage.Behaviors.Web_Skins.Count > 3)                      altInterface3 = ThisPackage.Behaviors.Web_Skins[3];                  if (ThisPackage.Behaviors.Web_Skins.Count > 4)                      altInterface4 = ThisPackage.Behaviors.Web_Skins[4];                  if (ThisPackage.Behaviors.Web_Skins.Count > 5)                      altInterface5 = ThisPackage.Behaviors.Web_Skins[5];                  if (ThisPackage.Behaviors.Web_Skins.Count > 6)                      altInterface6 = ThisPackage.Behaviors.Web_Skins[6];                  if (ThisPackage.Behaviors.Web_Skins.Count > 7)                      altInterface7 = ThisPackage.Behaviors.Web_Skins[7];                  if (ThisPackage.Behaviors.Web_Skins.Count > 8)                      altInterface8 = ThisPackage.Behaviors.Web_Skins[8];                  if (ThisPackage.Behaviors.Web_Skins.Count > 9)                      altInterface9 = ThisPackage.Behaviors.Web_Skins[9];                  }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Group_Web_Skins,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@Primary_WebSkin"' primaryInterface);                  param_list[2] = new EalDbParameter("@Alt_WebSkin1"' altInterface1);                  param_list[3] = new EalDbParameter("@Alt_WebSkin2"' altInterface2);                  param_list[4] = new EalDbParameter("@Alt_WebSkin3"' altInterface3);                  param_list[5] = new EalDbParameter("@Alt_WebSkin4"' altInterface4);                  param_list[6] = new EalDbParameter("@Alt_WebSkin5"' altInterface5);                  param_list[7] = new EalDbParameter("@Alt_WebSkin6"' altInterface6);                  param_list[8] = new EalDbParameter("@Alt_WebSkin7"' altInterface7);                  param_list[9] = new EalDbParameter("@Alt_WebSkin8"' altInterface8);                  param_list[10] = new EalDbParameter("@Alt_WebSkin9"' altInterface9);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Group_Web_Skins"' param_list);                    // Return the value                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Web_Skins"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@PageCount"' PageCount);                  param_list[3] = new EalDbParameter("@FileCount"' FileCount);                  param_list[4] = new EalDbParameter("@Title"' Title);                  param_list[5] = new EalDbParameter("@SortTitle"' SortTitle);                  param_list[6] = new EalDbParameter("@AccessMethod"' 1);                  param_list[7] = new EalDbParameter("@Link"' Link);                  param_list[8] = new EalDbParameter("@CreateDate"' CreateDate);                  param_list[9] = new EalDbParameter("@PubDate"' PubDate);                  param_list[10] = new EalDbParameter("@SortDate"' SortDate);                  param_list[11] = new EalDbParameter("@HoldingCode"' Holding_Code);                  param_list[12] = new EalDbParameter("@SourceCode"' Source_Code);                  param_list[13] = new EalDbParameter("@Author"' Author);                  param_list[14] = new EalDbParameter("@Spatial_KML"' Spatial_KML);                  param_list[15] = new EalDbParameter("@Spatial_KML_Distance"' Spatial_KML_Distance);                  param_list[16] = new EalDbParameter("@DiskSize_KB"' DiskSizeMb);                  param_list[17] = new EalDbParameter("@Spatial_Display"' Spatial_Display);                  param_list[18] = new EalDbParameter("@Institution_Display"' Institution_Display);                  param_list[19] = new EalDbParameter("@Edition_Display"' Edition);                  param_list[20] = new EalDbParameter("@Material_Display"' Material_Display);                  param_list[21] = new EalDbParameter("@Measurement_Display"' Measurement_Display);                  param_list[22] = new EalDbParameter("@StylePeriod_Display"' StylePeriod_Display);                  param_list[23] = new EalDbParameter("@Technique_Display"' Technique_Display);                  param_list[24] = new EalDbParameter("@Subjects_Display"' Subjects_Display);                  param_list[25] = new EalDbParameter("@Donor"' Donor);                  param_list[26] = new EalDbParameter("@Publisher"' Publisher);                  param_list[27] = new EalDbParameter("@ItemID"' -1) {Direction = ParameterDirection.InputOutput};                  param_list[28] = new EalDbParameter("@Existing"' false) {Direction = ParameterDirection.InputOutput};                  param_list[29] = new EalDbParameter("@New_VID"' "00000") {Direction = ParameterDirection.InputOutput};                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item"' param_list);                    // Return the value                  int itemID = (int) param_list[27].Value;                  bool existing = (bool) param_list[28].Value;                  string new_vid = param_list[29].Value.ToString();                  return new Save_Item_Args(itemID' existing' new_vid);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item"' ee);                  return new Save_Item_Args(-1' false' String.Empty);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Clear_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@clear_non_mets_values"' Clear_Non_Metadata_Values);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Clear2"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Clear2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Metadata,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[21];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@metadata_type1"' Metadata_Type1);                  param_list[2] = new EalDbParameter("@metadata_value1"' Metadata_Value1.Trim());                  param_list[3] = new EalDbParameter("@metadata_type2"' Metadata_Type2);                  param_list[4] = new EalDbParameter("@metadata_value2"' Metadata_Value2.Trim());                  param_list[5] = new EalDbParameter("@metadata_type3"' Metadata_Type3);                  param_list[6] = new EalDbParameter("@metadata_value3"' Metadata_Value3.Trim());                  param_list[7] = new EalDbParameter("@metadata_type4"' Metadata_Type4);                  param_list[8] = new EalDbParameter("@metadata_value4"' Metadata_Value4.Trim());                  param_list[9] = new EalDbParameter("@metadata_type5"' Metadata_Type5);                  param_list[10] = new EalDbParameter("@metadata_value5"' Metadata_Value5.Trim());                  param_list[11] = new EalDbParameter("@metadata_type6"' Metadata_Type6);                  param_list[12] = new EalDbParameter("@metadata_value6"' Metadata_Value6.Trim());                  param_list[13] = new EalDbParameter("@metadata_type7"' Metadata_Type7);                  param_list[14] = new EalDbParameter("@metadata_value7"' Metadata_Value7.Trim());                  param_list[15] = new EalDbParameter("@metadata_type8"' Metadata_Type8);                  param_list[16] = new EalDbParameter("@metadata_value8"' Metadata_Value8.Trim());                  param_list[17] = new EalDbParameter("@metadata_type9"' Metadata_Type9);                  param_list[18] = new EalDbParameter("@metadata_value9"' Metadata_Value9.Trim());                  param_list[19] = new EalDbParameter("@metadata_type10"' Metadata_Type10);                  param_list[20] = new EalDbParameter("@metadata_value10"' Metadata_Value10.Trim());                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Metadata_Save"' param_list);                  return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Metadata_Save"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_Current_Item_Viewers,The following statement contains a magic number: while (reader.Read())              {                  string viewType = reader.GetString(0);                  string attributes = reader.GetString(1);                  string label = reader.GetString(2);                  double menuOrder = reader.GetDouble(3);                  bool exclude = reader.GetBoolean(4);                    // Create new database title object for this                  View_Object result = new View_Object                  {                      View_Type = viewType'                      Attributes = attributes'                      Label = label'                      MenuOrder = (float) menuOrder'                      Exclude = exclude                  };                    returnValue.Add(result);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_Current_Item_Viewers,The following statement contains a magic number: while (reader.Read())              {                  string viewType = reader.GetString(0);                  string attributes = reader.GetString(1);                  string label = reader.GetString(2);                  double menuOrder = reader.GetDouble(3);                  bool exclude = reader.GetBoolean(4);                    // Create new database title object for this                  View_Object result = new View_Object                  {                      View_Type = viewType'                      Attributes = attributes'                      Label = label'                      MenuOrder = (float) menuOrder'                      Exclude = exclude                  };                    returnValue.Add(result);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_Current_Item_Viewers,The following statement contains a magic number: while (reader.Read())              {                  string viewType = reader.GetString(0);                  string attributes = reader.GetString(1);                  string label = reader.GetString(2);                  double menuOrder = reader.GetDouble(3);                  bool exclude = reader.GetBoolean(4);                    // Create new database title object for this                  View_Object result = new View_Object                  {                      View_Type = viewType'                      Attributes = attributes'                      Label = label'                      MenuOrder = (float) menuOrder'                      Exclude = exclude                  };                    returnValue.Add(result);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[30];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                  param_list[2] = new EalDbParameter("@MainThumbnail"' MainThumbnail);                  param_list[3] = new EalDbParameter("@MainJPEG"' MainJPEG);                  param_list[4] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  param_list[5] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  param_list[6] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  param_list[7] = new EalDbParameter("@Born_Digital"' Born_Digital);                  if (DispositionAdvice <= 0)                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DBNull.Value);                  else                      param_list[8] = new EalDbParameter("@Disposition_Advice"' DispositionAdvice);                  param_list[9] = new EalDbParameter("@Disposition_Advice_Notes"' DispositionAdviceNotes);                    if (Material_Received_Date.HasValue)                      param_list[10] = new EalDbParameter("@Material_Received_Date"' Material_Received_Date.Value);                  else                      param_list[10] = new EalDbParameter("@Material_Received_Date"' DBNull.Value);                  param_list[11] = new EalDbParameter("@Material_Recd_Date_Estimated"' Material_Recd_Date_Estimated);                  param_list[12] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[13] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[14] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[15] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[16] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[17] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[18] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[19] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[20] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[21] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[22] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[23] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[24] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[25] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[26] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[27] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[28] = new EalDbParameter("@Left_To_Right"' Left_To_Right);                  param_list[29] = new EalDbParameter("@CitationSet"' CitationSet);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Behaviors_Minimal,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[20];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@TextSearchable"' TextSearchable);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Behaviors_Minimal"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors_Minimal"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Setting_Value,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Setting_Key"' Setting_Key);                  param_list[2] = new EalDbParameter("@Setting_Value"' Setting_Value);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Setting_Value"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors_Minimal"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Setting_Value,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Setting_Key"' Setting_Key);                  param_list[2] = new EalDbParameter("@Setting_Value"' Setting_Value);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Setting_Value"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Behaviors_Minimal"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Add_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[19];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[3] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[4] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[5] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[6] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[7] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[8] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[9] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[10] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[11] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[12] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[13] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[14] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[15] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[16] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[17] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[18] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Add_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Add_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[7];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[3] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[4] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[5] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[6] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Remove_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[7];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[3] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[4] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[5] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[6] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Remove_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[7];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[3] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[4] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[5] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[6] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Remove_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[7];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[3] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[4] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[5] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[6] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Remove_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[7];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[3] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[4] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[5] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[6] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Remove_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Remove_Viewers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[7];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[2] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[3] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[4] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[5] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[6] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Remove_Item_Viewers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Remove_Item_Viewers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Tickler1"' Tickler1);                  param_list[2] = new EalDbParameter("@Tickler2"' Tickler2);                  param_list[3] = new EalDbParameter("@Tickler3"' Tickler3);                  param_list[4] = new EalDbParameter("@Tickler4"' Tickler4);                  param_list[5] = new EalDbParameter("@Tickler5"' Tickler5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Ticklers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Ticklers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Tickler1"' Tickler1);                  param_list[2] = new EalDbParameter("@Tickler2"' Tickler2);                  param_list[3] = new EalDbParameter("@Tickler3"' Tickler3);                  param_list[4] = new EalDbParameter("@Tickler4"' Tickler4);                  param_list[5] = new EalDbParameter("@Tickler5"' Tickler5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Ticklers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Ticklers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Tickler1"' Tickler1);                  param_list[2] = new EalDbParameter("@Tickler2"' Tickler2);                  param_list[3] = new EalDbParameter("@Tickler3"' Tickler3);                  param_list[4] = new EalDbParameter("@Tickler4"' Tickler4);                  param_list[5] = new EalDbParameter("@Tickler5"' Tickler5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Ticklers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Ticklers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Tickler1"' Tickler1);                  param_list[2] = new EalDbParameter("@Tickler2"' Tickler2);                  param_list[3] = new EalDbParameter("@Tickler3"' Tickler3);                  param_list[4] = new EalDbParameter("@Tickler4"' Tickler4);                  param_list[5] = new EalDbParameter("@Tickler5"' Tickler5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Ticklers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Ticklers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Ticklers,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Tickler1"' Tickler1);                  param_list[2] = new EalDbParameter("@Tickler2"' Tickler2);                  param_list[3] = new EalDbParameter("@Tickler3"' Tickler3);                  param_list[4] = new EalDbParameter("@Tickler4"' Tickler4);                  param_list[5] = new EalDbParameter("@Tickler5"' Tickler5);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Ticklers"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Ticklers"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Views,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[11];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                  param_list[2] = new EalDbParameter("@Viewer1_TypeID"' Viewer1_Type);                  param_list[3] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[4] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[5] = new EalDbParameter("@Viewer2_TypeID"' Viewer2_Type);                  param_list[6] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[7] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[8] = new EalDbParameter("@Viewer3_TypeID"' Viewer3_Type);                  param_list[9] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[10] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Item_Views"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Views"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Mass_Update_Item_Behaviors,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[38];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                    if (Set_IP_Restriction_Mask)                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' IP_Restriction_Mask);                  else                      param_list[1] = new EalDbParameter("@IP_Restriction_Mask"' DBNull.Value);                    if (Set_CheckoutRequired)                      param_list[2] = new EalDbParameter("@CheckoutRequired"' CheckoutRequired);                  else                      param_list[2] = new EalDbParameter("@CheckoutRequired"' DBNull.Value);                    if (Set_Dark_Flag)                      param_list[3] = new EalDbParameter("@Dark_Flag"' Dark_Flag);                  else                      param_list[3] = new EalDbParameter("@Dark_Flag"' DBNull.Value);                    if (Set_Born_Digital)                      param_list[4] = new EalDbParameter("@Born_Digital"' Born_Digital);                  else                      param_list[4] = new EalDbParameter("@Born_Digital"' DBNull.Value);                    param_list[5] = new EalDbParameter("@AggregationCode1"' AggregationCode1);                  param_list[6] = new EalDbParameter("@AggregationCode2"' AggregationCode2);                  param_list[7] = new EalDbParameter("@AggregationCode3"' AggregationCode3);                  param_list[8] = new EalDbParameter("@AggregationCode4"' AggregationCode4);                  param_list[9] = new EalDbParameter("@AggregationCode5"' AggregationCode5);                  param_list[10] = new EalDbParameter("@AggregationCode6"' AggregationCode6);                  param_list[11] = new EalDbParameter("@AggregationCode7"' AggregationCode7);                  param_list[12] = new EalDbParameter("@AggregationCode8"' AggregationCode8);                  param_list[13] = new EalDbParameter("@HoldingCode"' HoldingCode);                  param_list[14] = new EalDbParameter("@SourceCode"' SourceCode);                  param_list[15] = new EalDbParameter("@Icon1_Name"' Icon1_Name);                  param_list[16] = new EalDbParameter("@Icon2_Name"' Icon2_Name);                  param_list[17] = new EalDbParameter("@Icon3_Name"' Icon3_Name);                  param_list[18] = new EalDbParameter("@Icon4_Name"' Icon4_Name);                  param_list[19] = new EalDbParameter("@Icon5_Name"' Icon5_Name);                  param_list[20] = new EalDbParameter("@Viewer1_Type"' Viewer1_Type);                  param_list[21] = new EalDbParameter("@Viewer1_Label"' Viewer1_Label);                  param_list[22] = new EalDbParameter("@Viewer1_Attribute"' Viewer1_Attributes);                  param_list[23] = new EalDbParameter("@Viewer2_Type"' Viewer2_Type);                  param_list[24] = new EalDbParameter("@Viewer2_Label"' Viewer2_Label);                  param_list[25] = new EalDbParameter("@Viewer2_Attribute"' Viewer2_Attributes);                  param_list[26] = new EalDbParameter("@Viewer3_Type"' Viewer3_Type);                  param_list[27] = new EalDbParameter("@Viewer3_Label"' Viewer3_Label);                  param_list[28] = new EalDbParameter("@Viewer3_Attribute"' Viewer3_Attributes);                  param_list[29] = new EalDbParameter("@Viewer4_Type"' Viewer4_Type);                  param_list[30] = new EalDbParameter("@Viewer4_Label"' Viewer4_Label);                  param_list[31] = new EalDbParameter("@Viewer4_Attribute"' Viewer4_Attributes);                  param_list[32] = new EalDbParameter("@Viewer5_Type"' Viewer5_Type);                  param_list[33] = new EalDbParameter("@Viewer5_Label"' Viewer5_Label);                  param_list[34] = new EalDbParameter("@Viewer5_Attribute"' Viewer5_Attributes);                  param_list[35] = new EalDbParameter("@Viewer6_Type"' Viewer6_Type);                  param_list[36] = new EalDbParameter("@Viewer6_Label"' Viewer6_Label);                  param_list[37] = new EalDbParameter("@Viewer6_Attribute"' Viewer6_Attributes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Mass_Update_Item_Behaviors"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Mass_Update_Item_Behaviors2"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Serial_Hierarchy,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[13];                  param_list[0] = new EalDbParameter("@GroupID"' GroupID);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                  if (Level1_Index >= 0)                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' Level1_Text);                      param_list[3] = new EalDbParameter("@Level1_Index"' Level1_Index);                  }                  else                  {                      param_list[2] = new EalDbParameter("@Level1_Text"' DBNull.Value);                      param_list[3] = new EalDbParameter("@Level1_Index"' DBNull.Value);                  }                    if (Level2_Index >= 0)                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' Level2_Text);                      param_list[5] = new EalDbParameter("@Level2_Index"' Level2_Index);                  }                  else                  {                      param_list[4] = new EalDbParameter("@Level2_Text"' DBNull.Value);                      param_list[5] = new EalDbParameter("@Level2_Index"' DBNull.Value);                  }                    if (Level3_Index >= 0)                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' Level3_Text);                      param_list[7] = new EalDbParameter("@Level3_Index"' Level3_Index);                  }                  else                  {                      param_list[6] = new EalDbParameter("@Level3_Text"' DBNull.Value);                      param_list[7] = new EalDbParameter("@Level3_Index"' DBNull.Value);                  }                    if (Level4_Index >= 0)                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' Level4_Text);                      param_list[9] = new EalDbParameter("@Level4_Index"' Level4_Index);                  }                  else                  {                      param_list[8] = new EalDbParameter("@Level4_Text"' DBNull.Value);                      param_list[9] = new EalDbParameter("@Level4_Index"' DBNull.Value);                  }                    if (Level5_Index >= 0)                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' Level5_Text);                      param_list[11] = new EalDbParameter("@Level5_Index"' Level5_Index);                  }                  else                  {                      param_list[10] = new EalDbParameter("@Level5_Text"' DBNull.Value);                      param_list[11] = new EalDbParameter("@Level5_Index"' DBNull.Value);                  }                    param_list[12] = new EalDbParameter("@SerialHierarchy"' SerialHierarchy);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Save_Serial_Hierarchy"' param_list);              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Serial_Hierarchy"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,QC_Update_Item_Info,The following statement contains a magic number: try              {                  int itemID = Get_ItemID(BibID' VID);                  //Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[8];                  param_list[0] = new EalDbParameter("@itemid"' itemID);                  param_list[1] = new EalDbParameter("@notes"' Notes);                  param_list[2] = new EalDbParameter("@onlineuser"' User);                  param_list[3] = new EalDbParameter("@mainthumbnail"' MainThumbnailFileName);                  param_list[4] = new EalDbParameter("@mainjpeg"' MainJpgFileName);                  param_list[5] = new EalDbParameter("@pagecount"' PageCount);                  param_list[6] = new EalDbParameter("@filecount"' FileCount);                  param_list[7] = new EalDbParameter("@disksize_kb"' DisksizeMb);                      //Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Submit_Online_Page_Division"' param_list);                    return true;                }              catch (Exception e)              {                  //Pass this exception onto the method to handle it                  exception_caught("Tracking_Submit_Online_Page_Division"' e);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@IpRestrictionMask"' NewRestrictionMask);                  param_list[2] = new EalDbParameter("@DarkFlag"' DarkFlag);                    if (EmbargoDate.HasValue)                      param_list[3] = new EalDbParameter("@EmbargoDate"' EmbargoDate.Value);                  else                      param_list[3] = new EalDbParameter("@EmbargoDate"' DBNull.Value);                    param_list[4] = new EalDbParameter("@User"' UserName);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Visibility"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@IpRestrictionMask"' NewRestrictionMask);                  param_list[2] = new EalDbParameter("@DarkFlag"' DarkFlag);                    if (EmbargoDate.HasValue)                      param_list[3] = new EalDbParameter("@EmbargoDate"' EmbargoDate.Value);                  else                      param_list[3] = new EalDbParameter("@EmbargoDate"' DBNull.Value);                    param_list[4] = new EalDbParameter("@User"' UserName);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Visibility"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@IpRestrictionMask"' NewRestrictionMask);                  param_list[2] = new EalDbParameter("@DarkFlag"' DarkFlag);                    if (EmbargoDate.HasValue)                      param_list[3] = new EalDbParameter("@EmbargoDate"' EmbargoDate.Value);                  else                      param_list[3] = new EalDbParameter("@EmbargoDate"' DBNull.Value);                    param_list[4] = new EalDbParameter("@User"' UserName);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Visibility"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@IpRestrictionMask"' NewRestrictionMask);                  param_list[2] = new EalDbParameter("@DarkFlag"' DarkFlag);                    if (EmbargoDate.HasValue)                      param_list[3] = new EalDbParameter("@EmbargoDate"' EmbargoDate.Value);                  else                      param_list[3] = new EalDbParameter("@EmbargoDate"' DBNull.Value);                    param_list[4] = new EalDbParameter("@User"' UserName);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Visibility"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_Item_Visibility,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@IpRestrictionMask"' NewRestrictionMask);                  param_list[2] = new EalDbParameter("@DarkFlag"' DarkFlag);                    if (EmbargoDate.HasValue)                      param_list[3] = new EalDbParameter("@EmbargoDate"' EmbargoDate.Value);                  else                      param_list[3] = new EalDbParameter("@EmbargoDate"' DBNull.Value);                    param_list[4] = new EalDbParameter("@User"' UserName);                      // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Visibility"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_IP_Restriction_Mask,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[4];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@newipmask"' New_Restriction_Mask);                  param_list[2] = new EalDbParameter("@user"' UserName);                  param_list[3] = new EalDbParameter("@progressnote"' ProgressNote);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_IP_Restriction_Mask"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_IP_Restriction_Mask,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[4];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@newipmask"' New_Restriction_Mask);                  param_list[2] = new EalDbParameter("@user"' UserName);                  param_list[3] = new EalDbParameter("@progressnote"' ProgressNote);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_IP_Restriction_Mask"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Set_IP_Restriction_Mask,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[4];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@newipmask"' New_Restriction_Mask);                  param_list[2] = new EalDbParameter("@user"' UserName);                  param_list[3] = new EalDbParameter("@progressnote"' ProgressNote);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_IP_Restriction_Mask"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_IP_Restriction_Mask"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_Item_Internal_Comments,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@newcomments"' Internal_Comments);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Set_Item_Comments"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Set_Item_Comments"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@grouptitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@sorttitle"' SortTitle);                  param_list[3] = new EalDbParameter("@groupthumbnail"' Group_Thumbnail);                  param_list[4] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[5] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                      // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Group"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Title"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@grouptitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@sorttitle"' SortTitle);                  param_list[3] = new EalDbParameter("@groupthumbnail"' Group_Thumbnail);                  param_list[4] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[5] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                      // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Group"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Title"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@grouptitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@sorttitle"' SortTitle);                  param_list[3] = new EalDbParameter("@groupthumbnail"' Group_Thumbnail);                  param_list[4] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[5] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                      // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Group"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Title"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@grouptitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@sorttitle"' SortTitle);                  param_list[3] = new EalDbParameter("@groupthumbnail"' Group_Thumbnail);                  param_list[4] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[5] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                      // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Group"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Title"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Group,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@grouptitle"' GroupTitle);                  param_list[2] = new EalDbParameter("@sorttitle"' SortTitle);                  param_list[3] = new EalDbParameter("@groupthumbnail"' Group_Thumbnail);                  param_list[4] = new EalDbParameter("@PrimaryIdentifierType"' Primary_Identifier_Type);                  param_list[5] = new EalDbParameter("@PrimaryIdentifier"' Primary_Identifier);                      // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Group"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Save_Item_Group_Title"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Tracking_Box,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@Tracking_Box"' Tracking_Box);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Tracking_Box"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Tracking_Box"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Edit_Disposition_Advice,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@Disposition_Advice"' DispositionTypeID);                  param_list[1] = new EalDbParameter("@Disposition_Advice_Notes"' Notes);                  param_list[2] = new EalDbParameter("@ItemID"' ItemID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition_Advice"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Disposition_Advice"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Edit_Disposition_Advice,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@Disposition_Advice"' DispositionTypeID);                  param_list[1] = new EalDbParameter("@Disposition_Advice_Notes"' Notes);                  param_list[2] = new EalDbParameter("@ItemID"' ItemID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition_Advice"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Disposition_Advice"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Disposition,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Disposition_Date"' DispositionDate);                  param_list[1] = new EalDbParameter("@Disposition_Type"' DispositionTypeID);                  param_list[2] = new EalDbParameter("@Disposition_Notes"' Notes);                  param_list[3] = new EalDbParameter("@ItemID"' ItemID);                  param_list[4] = new EalDbParameter("@UserName"' UserName);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Disposition"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Disposition,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Disposition_Date"' DispositionDate);                  param_list[1] = new EalDbParameter("@Disposition_Type"' DispositionTypeID);                  param_list[2] = new EalDbParameter("@Disposition_Notes"' Notes);                  param_list[3] = new EalDbParameter("@ItemID"' ItemID);                  param_list[4] = new EalDbParameter("@UserName"' UserName);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Disposition"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Disposition,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Disposition_Date"' DispositionDate);                  param_list[1] = new EalDbParameter("@Disposition_Type"' DispositionTypeID);                  param_list[2] = new EalDbParameter("@Disposition_Notes"' Notes);                  param_list[3] = new EalDbParameter("@ItemID"' ItemID);                  param_list[4] = new EalDbParameter("@UserName"' UserName);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Disposition"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Disposition,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Disposition_Date"' DispositionDate);                  param_list[1] = new EalDbParameter("@Disposition_Type"' DispositionTypeID);                  param_list[2] = new EalDbParameter("@Disposition_Notes"' Notes);                  param_list[3] = new EalDbParameter("@ItemID"' ItemID);                  param_list[4] = new EalDbParameter("@UserName"' UserName);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Disposition"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Disposition"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                  param_list[5] = new EalDbParameter("@date"' Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Past_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                  param_list[5] = new EalDbParameter("@date"' Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Past_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                  param_list[5] = new EalDbParameter("@date"' Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Past_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                  param_list[5] = new EalDbParameter("@date"' Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Past_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Past_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[6];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                  param_list[5] = new EalDbParameter("@date"' Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Past_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Add_Workflow,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@itemid"' ItemID);                  param_list[1] = new EalDbParameter("@user"' UserName);                  param_list[2] = new EalDbParameter("@progressnote"' Notes);                  param_list[3] = new EalDbParameter("@workflow"' Workflow_Type);                  param_list[4] = new EalDbParameter("@storagelocation"' StorageLocation);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Add_Workflow_By_ItemID"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Add_Past_Workflow_By_ItemID"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Digitization_Milestone,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Last_Milestone"' Last_Milestone);                  param_list[2] = new EalDbParameter("@Milestone_Date"' Milestone_Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Digitization_Milestones"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Digitization_Milestones"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Digitization_Milestone,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[3];                  param_list[0] = new EalDbParameter("@ItemID"' ItemID);                  param_list[1] = new EalDbParameter("@Last_Milestone"' Last_Milestone);                  param_list[2] = new EalDbParameter("@Milestone_Date"' Milestone_Date);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Digitization_Milestones"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Digitization_Milestones"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Material_Received,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Material_Received_Date"' Date);                  param_list[1] = new EalDbParameter("@Material_Recd_Date_Estimated"' Estimated);                  param_list[2] = new EalDbParameter("@ItemID"' ItemID);                  param_list[3] = new EalDbParameter("@User"' UserName);                  param_list[4] = new EalDbParameter("@ProgressNote"' Notes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Material_Received"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Material_Received"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Material_Received,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Material_Received_Date"' Date);                  param_list[1] = new EalDbParameter("@Material_Recd_Date_Estimated"' Estimated);                  param_list[2] = new EalDbParameter("@ItemID"' ItemID);                  param_list[3] = new EalDbParameter("@User"' UserName);                  param_list[4] = new EalDbParameter("@ProgressNote"' Notes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Material_Received"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Material_Received"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Material_Received,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Material_Received_Date"' Date);                  param_list[1] = new EalDbParameter("@Material_Recd_Date_Estimated"' Estimated);                  param_list[2] = new EalDbParameter("@ItemID"' ItemID);                  param_list[3] = new EalDbParameter("@User"' UserName);                  param_list[4] = new EalDbParameter("@ProgressNote"' Notes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Material_Received"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Material_Received"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Material_Received,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@Material_Received_Date"' Date);                  param_list[1] = new EalDbParameter("@Material_Recd_Date_Estimated"' Estimated);                  param_list[2] = new EalDbParameter("@ItemID"' ItemID);                  param_list[3] = new EalDbParameter("@User"' UserName);                  param_list[4] = new EalDbParameter("@ProgressNote"' Notes);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Material_Received"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Material_Received"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Born_Digital_Flag,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@Born_Digital"' Born_Digital_Flag);                  param_list[1] = new EalDbParameter("@ItemID"' ItemID);                    // Execute this non-query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "Tracking_Update_Born_Digital"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("Tracking_Update_Born_Digital"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Online_Statistics,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@pagecount"' PageCount);                  param_list[3] = new EalDbParameter("@filecount"' FileCount);                  param_list[4] = new EalDbParameter("@disksize_kb"' DiskSizeMb);                    // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Online_Statistics"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Update_Item_Online_Statistics"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Online_Statistics,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@pagecount"' PageCount);                  param_list[3] = new EalDbParameter("@filecount"' FileCount);                  param_list[4] = new EalDbParameter("@disksize_kb"' DiskSizeMb);                    // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Online_Statistics"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Update_Item_Online_Statistics"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Online_Statistics,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@pagecount"' PageCount);                  param_list[3] = new EalDbParameter("@filecount"' FileCount);                  param_list[4] = new EalDbParameter("@disksize_kb"' DiskSizeMb);                    // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Online_Statistics"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Update_Item_Online_Statistics"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Update_Item_Online_Statistics,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[5];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@pagecount"' PageCount);                  param_list[3] = new EalDbParameter("@filecount"' FileCount);                  param_list[4] = new EalDbParameter("@disksize_kb"' DiskSizeMb);                    // Execute this query stored procedure                  EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Update_Item_Online_Statistics"' param_list);                    return true;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Update_Item_Online_Statistics"' ee);                  return false;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Get_ItemID,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                    // Execute this query stored procedure                  DataSet resultSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Get_ItemID"' param_list);                    if ((resultSet != null) && (resultSet.Tables[0].Rows.Count > 0))                      return Convert.ToInt32(resultSet.Tables[0].Rows[0][0]);                    return -1;              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Get_ItemID"' ee);                  return -1;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Check_For_Record_Existence,The following statement contains a magic number: long oclc = -999;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Check_For_Record_Existence,The following statement contains a magic number: int aleph = -999;
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Check_For_Record_Existence,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[4];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@OCLC_Number"' oclc);                  param_list[3] = new EalDbParameter("@Local_Cat_Number"' aleph);                    // Execute this query stored procedure                  DataSet resultSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Check_For_Record_Existence"' param_list);                    if (resultSet != null)                      return resultSet.Tables[0];              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Check_For_Record_Existence"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Check_For_Record_Existence,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[4];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@OCLC_Number"' oclc);                  param_list[3] = new EalDbParameter("@Local_Cat_Number"' aleph);                    // Execute this query stored procedure                  DataSet resultSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Check_For_Record_Existence"' param_list);                    if (resultSet != null)                      return resultSet.Tables[0];              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Check_For_Record_Existence"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Check_For_Record_Existence,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[4];                  param_list[0] = new EalDbParameter("@bibid"' BibID);                  param_list[1] = new EalDbParameter("@vid"' VID);                  param_list[2] = new EalDbParameter("@OCLC_Number"' oclc);                  param_list[3] = new EalDbParameter("@Local_Cat_Number"' aleph);                    // Execute this query stored procedure                  DataSet resultSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_Check_For_Record_Existence"' param_list);                    if (resultSet != null)                      return resultSet.Tables[0];              }              catch (Exception ee)              {                  // Pass this exception onto the method to handle it                  exception_caught("SobekCM_Check_For_Record_Existence"' ee);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Current_SobekCM_Items,The following statement contains a magic number: try              {                  // Create the return value data set                  SobekCM_All_Items returnVal = new SobekCM_All_Items();                    // Create the stream to get the information from the web                  WebResponse objResponse;                  WebRequest objRequest = HttpWebRequest.Create(SobekCM_Base_URL);                  objRequest.Timeout = 15000;                  objResponse = objRequest.GetResponse();                    // Load the data into the DataSet                  returnVal.ReadXml(objResponse.GetResponseStream());                    // Return this value                  return returnVal;              }              catch              {                  return null;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Download_METS,The following statement contains a magic number: try              {                  string download_url = PackageResourceURL + "/" + BIBID + "_" + VID + ".METS_Header.xml";                  string mets_file = GetHtmlPage(download_url' 15);                  return mets_file;              }              catch              {                  return String.Empty;              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,GetHtmlPage,The following statement contains a magic number: try              {                  // the html retrieved from the page                  String strResult;                  WebResponse objResponse;                  WebRequest objRequest = HttpWebRequest.Create(StrURL);                  objRequest.Timeout = SecondsToTimeOut * 1000;                  objResponse = objRequest.GetResponse();                  // the using keyword will automatically dispose the object                   // once complete                  using (StreamReader sr =                             new StreamReader(objResponse.GetResponseStream()))                  {                      strResult = sr.ReadToEnd();                      // Close and clean up the StreamReader                      sr.Close();                  }                  return strResult;              }              catch              {                  return String.Empty;                }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Tivoli_Get_Archived_Files,The following statement contains a magic number: try              {                  // Build the parameter list                  EalDbParameter[] param_list = new EalDbParameter[2];                  param_list[0] = new EalDbParameter("@BibID"' BibID);                  param_list[1] = new EalDbParameter("@VID"' VID);                    // Define a temporary dataset                  DataSet tempSet = EalDbAccess.ExecuteDataset(DatabaseType' connectionString' CommandType.StoredProcedure' "Tivoli_Get_File_By_Bib_VID"' param_list);                  if ((tempSet == null) || (tempSet.Tables.Count == 0) || (tempSet.Tables[0].Rows.Count == 0))                      return null;                  return tempSet.Tables[0];              }              catch              {                  // Pass this exception onto the method to handle it                  return null;                }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[6];                  parameters[0] = new EalDbParameter("@itemID"' ItemID);                  parameters[1] = new EalDbParameter("@filename"' Filename);                  parameters[2] = new EalDbParameter("@errorCode"' ErrorCode);                  parameters[3] = new EalDbParameter("@description"' Description);                  parameters[4] = new EalDbParameter("@isVolumeError"' isVolumeError);                  parameters[5] = new EalDbParameter("@errorID"' DbType.Int64) { Direction = ParameterDirection.Output };                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters);                    int errorID;                  Int32.TryParse(parameters[5].Value.ToString()' out errorID);                  return errorID;                }              catch (Exception ee)              {                  throw new ApplicationException("Error saving QC page error to the database" + ee.Message);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[6];                  parameters[0] = new EalDbParameter("@itemID"' ItemID);                  parameters[1] = new EalDbParameter("@filename"' Filename);                  parameters[2] = new EalDbParameter("@errorCode"' ErrorCode);                  parameters[3] = new EalDbParameter("@description"' Description);                  parameters[4] = new EalDbParameter("@isVolumeError"' isVolumeError);                  parameters[5] = new EalDbParameter("@errorID"' DbType.Int64) { Direction = ParameterDirection.Output };                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters);                    int errorID;                  Int32.TryParse(parameters[5].Value.ToString()' out errorID);                  return errorID;                }              catch (Exception ee)              {                  throw new ApplicationException("Error saving QC page error to the database" + ee.Message);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[6];                  parameters[0] = new EalDbParameter("@itemID"' ItemID);                  parameters[1] = new EalDbParameter("@filename"' Filename);                  parameters[2] = new EalDbParameter("@errorCode"' ErrorCode);                  parameters[3] = new EalDbParameter("@description"' Description);                  parameters[4] = new EalDbParameter("@isVolumeError"' isVolumeError);                  parameters[5] = new EalDbParameter("@errorID"' DbType.Int64) { Direction = ParameterDirection.Output };                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters);                    int errorID;                  Int32.TryParse(parameters[5].Value.ToString()' out errorID);                  return errorID;                }              catch (Exception ee)              {                  throw new ApplicationException("Error saving QC page error to the database" + ee.Message);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[6];                  parameters[0] = new EalDbParameter("@itemID"' ItemID);                  parameters[1] = new EalDbParameter("@filename"' Filename);                  parameters[2] = new EalDbParameter("@errorCode"' ErrorCode);                  parameters[3] = new EalDbParameter("@description"' Description);                  parameters[4] = new EalDbParameter("@isVolumeError"' isVolumeError);                  parameters[5] = new EalDbParameter("@errorID"' DbType.Int64) { Direction = ParameterDirection.Output };                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters);                    int errorID;                  Int32.TryParse(parameters[5].Value.ToString()' out errorID);                  return errorID;                }              catch (Exception ee)              {                  throw new ApplicationException("Error saving QC page error to the database" + ee.Message);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[6];                  parameters[0] = new EalDbParameter("@itemID"' ItemID);                  parameters[1] = new EalDbParameter("@filename"' Filename);                  parameters[2] = new EalDbParameter("@errorCode"' ErrorCode);                  parameters[3] = new EalDbParameter("@description"' Description);                  parameters[4] = new EalDbParameter("@isVolumeError"' isVolumeError);                  parameters[5] = new EalDbParameter("@errorID"' DbType.Int64) { Direction = ParameterDirection.Output };                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters);                    int errorID;                  Int32.TryParse(parameters[5].Value.ToString()' out errorID);                  return errorID;                }              catch (Exception ee)              {                  throw new ApplicationException("Error saving QC page error to the database" + ee.Message);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[6];                  parameters[0] = new EalDbParameter("@itemID"' ItemID);                  parameters[1] = new EalDbParameter("@filename"' Filename);                  parameters[2] = new EalDbParameter("@errorCode"' ErrorCode);                  parameters[3] = new EalDbParameter("@description"' Description);                  parameters[4] = new EalDbParameter("@isVolumeError"' isVolumeError);                  parameters[5] = new EalDbParameter("@errorID"' DbType.Int64) { Direction = ParameterDirection.Output };                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Save_Error"' parameters);                    int errorID;                  Int32.TryParse(parameters[5].Value.ToString()' out errorID);                  return errorID;                }              catch (Exception ee)              {                  throw new ApplicationException("Error saving QC page error to the database" + ee.Message);              }
Magic Number,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Delete_QC_Error,The following statement contains a magic number: try              {                  //Add the parameters to this command                  EalDbParameter[] parameters = new EalDbParameter[2];                  parameters[0] = new EalDbParameter("@itemID"' itemID);                  parameters[1] = new EalDbParameter("@filename"' filename);                    EalDbAccess.ExecuteNonQuery(DatabaseType' connectionString' CommandType.StoredProcedure' "SobekCM_QC_Delete_Error"' parameters);              }                catch (Exception ee)              {                  throw new ApplicationException("Error deleting QC error from the database." + ee.Message);              }
Duplicate Code,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_New_Digital_Resource,The method contains a code clone-set at the following line numbers (starting from the method definition): ((196' 222)' (289' 315))
Duplicate Code,SobekCM_Resource_Database,SobekCM_Item_Database,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\SobekCM_Item_Database.cs,Save_GeoRegion_Links,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 97)' (103' 124)' (130' 151)' (157' 178))
Missing Default,SobekCM_Resource_Database.Builder,Builder_Page_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Resource_Database\Builder\Builder_Page_File.cs,Draw,The following switch statement is missing a default case: switch (fileerrortype)                  {                      case 2:                          G.DrawString(" CROP"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 3:                          G.DrawString("  IMAGE"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("QUALITY"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                        case 4:                          G.DrawString("ORIENTATION"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 5:                          G.DrawString(" SKEW"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*1.5))' currWidth' fontsize*2));                          G.DrawString("ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*0.5))' currWidth' fontsize*2));                          break;                        case 6:                          G.DrawString("TECHNICAL"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*2.5))' currWidth' fontsize*2));                          G.DrawString("  SPEC"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) - (fontsize*0.5))' currWidth' fontsize*2));                          G.DrawString("  ERROR"' errorFont' errorBrush' new Rectangle(X + 10' (int) (Y + (currHeight/2) + (fontsize*1.5))' currWidth' fontsize*2));                          break;                  }
