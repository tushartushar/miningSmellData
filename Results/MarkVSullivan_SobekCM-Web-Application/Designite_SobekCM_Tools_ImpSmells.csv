Implementation smell,Namespace,Class,File,Method,Description
Long Method,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The method has 177 lines of code.
Long Method,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,read_file_info,The method has 109 lines of code.
Complex Method,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Contains,Cyclomatic complexity of the method is 10
Complex Method,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,Cyclomatic complexity of the method is 22
Complex Method,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,read_file_info,Cyclomatic complexity of the method is 19
Long Parameter List,SobekCM.Tools,SecurityInfo,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\SecurityInfo.cs,ReadFromEncryptedFile,The method has 5 parameters. Parameters: Filename' Key' Iv' Position' Length
Long Parameter List,SobekCM.Tools,SecurityInfo,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\SecurityInfo.cs,WriteToEncryptedFile,The method has 5 parameters. Parameters: TextToWrite' Filename' Key' Iv' Position
Long Parameter List,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,LogFileXhtml,The method has 5 parameters. Parameters: NewFileName' Title' AppName' RowHeader' SuppressExceptions
Long Parameter List,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,SetupLogFile,The method has 5 parameters. Parameters: Log_FileName' Title' AppName' RowHeader' SuppressExceptionsFlag
Long Parameter List,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,AddNewStyle,The method has 5 parameters. Parameters: StyleName' FontColor' FontSize' Bold' Italics
Long Parameter List,SobekCM.Tools.Logs,LogFileXhtmlStyle,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML_Style.cs,LogFileXhtmlStyle,The method has 5 parameters. Parameters: Bold' FontColor' FontSize' Italics' Name
Long Parameter List,SobekCM.Tools.FDA,FDA_File,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_File.cs,FDA_File,The method has 6 parameters. Parameters: ID' Name' Size' MD5_Checksum' SHA1_Checksum' Preservation
Long Statement,SobekCM.Tools,Custom_Tracer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Custom_Tracer.cs,Add_Trace,The length of the statement  "                    traceBuilder.Append("<tr><td>" + Milliseconds + "</td><td>" + Method.ToLower() + "</td><td>" + Message.Replace("<"' "&lt;").Replace(">"'"&gt;") + "</td></tr>\n"); " is 162.
Long Statement,SobekCM.Tools,Custom_Tracer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Custom_Tracer.cs,Add_Trace,The length of the statement  "                    traceBuilder.Append("<tr><td>" + Milliseconds + "</td><td>" + Method.ToLower() + "</td><td><font color=\"red\">" + Message.Replace("<"' "&lt;").Replace(">"' "&gt;") + "</font></td></tr>\n"); " is 190.
Long Statement,SobekCM.Tools,SecurityInfo,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\SecurityInfo.cs,ReadFromEncryptedFile,The length of the statement  "			    CryptoStream cryptoStreamDecrypt = new CryptoStream(projectDataFile' desProvider.CreateDecryptor()' CryptoStreamMode.Read ); " is 124.
Long Statement,SobekCM.Tools,SecurityInfo,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\SecurityInfo.cs,WriteToEncryptedFile,The length of the statement  "			    CryptoStream cryptoStreamEncrypt = new CryptoStream(projectDataFile' desProvider.CreateEncryptor()' CryptoStreamMode.Write ); " is 125.
Long Statement,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ToUlong,The length of the statement  "            ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2]) * 256) + (Convert.ToUInt64(bytes[1]) * 65536) + (Convert.ToUInt64(bytes[0]) * 16777216); " is 146.
Long Statement,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Ready,The length of the statement  "            Dictionary<byte' SortedList<ulong' SingleIpRangeV4>> tempDictionary = new Dictionary<byte' SortedList<ulong' SingleIpRangeV4>>(); " is 129.
Long Statement,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Ready,The length of the statement  "                                individualPrefixDictionary[ipRange.StartIpAddress].EndIpAddress = Math.Max(currentRange.EndIpAddress.Value' ipRange.EndIpAddress.Value); " is 136.
Long Statement,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Ready,The length of the statement  "                    SortedList<ulong' SingleIpRangeV4> newSorted = new SortedList<ulong' SingleIpRangeV4> {{ipRange.StartIpAddress' ipRange}}; " is 122.
Long Statement,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,SetupLogFile,The length of the statement  "                    throw new LogFile_Exception("Unable to create the directory [" + new FileInfo(Log_FileName).DirectoryName + "] in a LogFileXHTML object."); " is 139.
Long Statement,SobekCM.Tools.Settings,IsolatedStorage_Settings,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Settings\IsolatedStorage_Settings.cs,Read_XML_File,The length of the statement  "				StreamReader stmReader = new StreamReader( new IsolatedStorageFileStream( fileName + ".xml"' FileMode.Open' userSettingFile ) ); " is 128.
Long Statement,SobekCM.Tools.Settings,IsolatedStorage_Settings,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Settings\IsolatedStorage_Settings.cs,Write_XML_File,The length of the statement  "					StreamWriter stmWriter = new StreamWriter( new IsolatedStorageFileStream( fileName + ".xml"' FileMode.Create' userSettingFile ) ); " is 130.
Long Statement,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,Write,The length of the statement  "                writer.WriteLine("<REPORT xmlns=\"http://www.fcla.edu/dls/md/daitss/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.fcla.edu/dls/md/daitss/ http://www.fcla.edu/dls/md/daitss/daitssReport.xsd\">"); " is 239.
Long Statement,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,Write,The length of the statement  "                writer.WriteLine("<" + ReportData.Report_Type_String.ToUpper() + " IEID=\"" + ReportData.IEID + "\" INGEST_TIME=\"" + format_date(ReportData.Date) + "\" PACKAGE=\"" + ReportData.Package + "\">"); " is 195.
Long Statement,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,format_date,The length of the statement  "                date.Hour.ToString().PadLeft(2' '0') + ":" + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0') + "Z"; " is 137.
Magic Number,SobekCM.Tools,DateTime_Helper,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\DateTime_Helper.cs,ToRfc822,The following statement contains a magic number: string timeZone = "+" + offset.ToString().PadLeft(2' '0');
Magic Number,SobekCM.Tools,DateTime_Helper,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\DateTime_Helper.cs,ToRfc822,The following statement contains a magic number: if (offset < 0)              {                  int i = offset*-1;                  timeZone = "-" + i.ToString().PadLeft(2' '0');              }
Magic Number,SobekCM.Tools,DateTime_Helper,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\DateTime_Helper.cs,ToRfc822,The following statement contains a magic number: return Date.ToString("ddd' dd MMM yyyy HH:mm:ss " + timeZone.PadRight(5' '0'));
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ComparableIpAddress,The following statement contains a magic number: Prefix = Convert.ToByte(Value /16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ComparableIpAddress,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2])*256) + (Convert.ToUInt64(bytes[1])*65536) + (Convert.ToUInt64(bytes[0])*16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ComparableIpAddress,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2])*256) + (Convert.ToUInt64(bytes[1])*65536) + (Convert.ToUInt64(bytes[0])*16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ComparableIpAddress,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2])*256) + (Convert.ToUInt64(bytes[1])*65536) + (Convert.ToUInt64(bytes[0])*16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ComparableIpAddress,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2])*256) + (Convert.ToUInt64(bytes[1])*65536) + (Convert.ToUInt64(bytes[0])*16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ComparableIpAddress,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2])*256) + (Convert.ToUInt64(bytes[1])*65536) + (Convert.ToUInt64(bytes[0])*16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ToUlong,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2]) * 256) + (Convert.ToUInt64(bytes[1]) * 65536) + (Convert.ToUInt64(bytes[0]) * 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ToUlong,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2]) * 256) + (Convert.ToUInt64(bytes[1]) * 65536) + (Convert.ToUInt64(bytes[0]) * 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ToUlong,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2]) * 256) + (Convert.ToUInt64(bytes[1]) * 65536) + (Convert.ToUInt64(bytes[0]) * 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ToUlong,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2]) * 256) + (Convert.ToUInt64(bytes[1]) * 65536) + (Convert.ToUInt64(bytes[0]) * 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,ComparableIpAddress,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\ComparableIpAddress.cs,ToUlong,The following statement contains a magic number: ulong ipAddrLong = bytes[3] + (Convert.ToUInt64(bytes[2]) * 256) + (Convert.ToUInt64(bytes[1]) * 65536) + (Convert.ToUInt64(bytes[0]) * 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Contains,The following statement contains a magic number: if (values.Count <= 3)              {                  return values.Any(range => range.CompareTo(Address) == 0);              }
Magic Number,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Contains,The following statement contains a magic number: while (end_index - start_index >= 2)              {                  // Find the new middle point                  int middle_point = (start_index + end_index)/2;                    // Perform the comparison to the middle range                  int comparison = values[middle_point].CompareTo(Address);                    // If the comparison shows the range holds the address' we found the fact it is contained!                  if (comparison == 0)                      return true;                    // If the comparison is negative' than the range is less than the address                  if (comparison < 0)                  {                      start_index = middle_point;                  }                  else  // The range is greater than the address                  {                      end_index = middle_point;                  }              }
Magic Number,SobekCM.Tools.IpRangeUtilities,IpRangeSetV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\IpRangeSetV4.cs,Contains,The following statement contains a magic number: while (end_index - start_index >= 2)              {                  // Find the new middle point                  int middle_point = (start_index + end_index)/2;                    // Perform the comparison to the middle range                  int comparison = values[middle_point].CompareTo(Address);                    // If the comparison shows the range holds the address' we found the fact it is contained!                  if (comparison == 0)                      return true;                    // If the comparison is negative' than the range is less than the address                  if (comparison < 0)                  {                      start_index = middle_point;                  }                  else  // The range is greater than the address                  {                      end_index = middle_point;                  }              }
Magic Number,SobekCM.Tools.IpRangeUtilities,SingleIpRangeV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\SingleIpRangeV4.cs,SingleIpRangeV4,The following statement contains a magic number: Prefix = Convert.ToByte(this.StartIpAddress / 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,SingleIpRangeV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\SingleIpRangeV4.cs,SingleIpRangeV4,The following statement contains a magic number: if (SingleIpAddress.Contains("/"))              {                  string[] parse = SingleIpAddress.Split("/".ToCharArray());                  StartIpAddress = ComparableIpAddress.ToUlong(parse[0]);                    int cidr = Int32.Parse(parse[1]);                  int add_number = (int) Math.Pow(2' (32 - cidr)) - 1;                  EndIpAddress = StartIpAddress + (ulong) add_number;              }              else              {                  StartIpAddress = ComparableIpAddress.ToUlong(SingleIpAddress);              }
Magic Number,SobekCM.Tools.IpRangeUtilities,SingleIpRangeV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\SingleIpRangeV4.cs,SingleIpRangeV4,The following statement contains a magic number: if (SingleIpAddress.Contains("/"))              {                  string[] parse = SingleIpAddress.Split("/".ToCharArray());                  StartIpAddress = ComparableIpAddress.ToUlong(parse[0]);                    int cidr = Int32.Parse(parse[1]);                  int add_number = (int) Math.Pow(2' (32 - cidr)) - 1;                  EndIpAddress = StartIpAddress + (ulong) add_number;              }              else              {                  StartIpAddress = ComparableIpAddress.ToUlong(SingleIpAddress);              }
Magic Number,SobekCM.Tools.IpRangeUtilities,SingleIpRangeV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\SingleIpRangeV4.cs,SingleIpRangeV4,The following statement contains a magic number: Prefix = Convert.ToByte(StartIpAddress / 16777216);
Magic Number,SobekCM.Tools.IpRangeUtilities,SingleIpRangeV4,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\IpRangeUtilities\SingleIpRangeV4.cs,SingleIpRangeV4,The following statement contains a magic number: Prefix = Convert.ToByte(this.StartIpAddress / 16777216);
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,SetupLogFile,The following statement contains a magic number: if ( AppName.Length > 30 )                  AppName = AppName.Substring(0' 30);
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,SetupLogFile,The following statement contains a magic number: if ( AppName.Length > 30 )                  AppName = AppName.Substring(0' 30);
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,CreateHeader,The following statement contains a magic number: try              {                  // Create the header with references' style sheet' etc...                  // Also' create the beginning of the body with the title to display                  WriteToLog(COMPLETE_NEW_HEADER + NEW_START_BODY1 + title +  NEW_START_BODY2 );                    // Insert the title into the header                  if ( title.Length > 25 )                      WriteAtPos( TITLE_POSITION' title.Substring(0'25) + " </title>");			                  else                      WriteAtPos( TITLE_POSITION' title + " </title>");                    // Insert the other META data into the header                  WriteAtPos( CREATE_DATE_POSITION' DateCreated.ToString() );                  WriteAtPos( ROW_HEADER_POSITION' eachRowHeader + "\">" );                  WriteAtPos( DATE_STAMP_POSITION' DateStampingEnabled.ToString() + "\">" );                  WriteAtPos( APPLICATION_POSITION' appName + "\">" );                    // Write the current position into the header                  SaveCurrentPosition( );                    return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to create the XHTML header for the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,CreateHeader,The following statement contains a magic number: try              {                  // Create the header with references' style sheet' etc...                  // Also' create the beginning of the body with the title to display                  WriteToLog(COMPLETE_NEW_HEADER + NEW_START_BODY1 + title +  NEW_START_BODY2 );                    // Insert the title into the header                  if ( title.Length > 25 )                      WriteAtPos( TITLE_POSITION' title.Substring(0'25) + " </title>");			                  else                      WriteAtPos( TITLE_POSITION' title + " </title>");                    // Insert the other META data into the header                  WriteAtPos( CREATE_DATE_POSITION' DateCreated.ToString() );                  WriteAtPos( ROW_HEADER_POSITION' eachRowHeader + "\">" );                  WriteAtPos( DATE_STAMP_POSITION' DateStampingEnabled.ToString() + "\">" );                  WriteAtPos( APPLICATION_POSITION' appName + "\">" );                    // Write the current position into the header                  SaveCurrentPosition( );                    return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to create the XHTML header for the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.Logs,LogFileXhtml,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\Logs\LogFileXHTML.cs,ReadHeader,The following statement contains a magic number: try              {                  StringBuilder tempRead = new StringBuilder("          ");                    // Input all of the information in the header                  while (! tempRead.ToString().Substring(tempRead.Length-8' 7).Equals("</head>"))                      tempRead.Append(Convert.ToChar(logFileStream.ReadByte()));                    // Remove spacer used at beginning of tempRead initially                  tempRead.Remove(0' 10);                    // Populate the variables with the provided information                  string tempReadString = tempRead.ToString();                  currentPosition = Convert.ToInt32(tempReadString.Substring(POSITION_POSITION' 11).Split('\"')[0]);                  string dateString = tempReadString.Substring(CREATE_DATE_POSITION' 23);                  dateString = dateString.Split('\"')[0].Replace("-"'"").Trim();                  DateCreated = Convert.ToDateTime(dateString);                  eachRowHeader = tempReadString.Substring(ROW_HEADER_POSITION' 23).Split('\"')[0];                  DateStampingEnabled = Convert.ToBoolean(tempReadString.Substring(DATE_STAMP_POSITION' 6).Split('\"')[0]);                  ErrorCount = Convert.ToInt32(tempReadString.Substring(ERROR_POSITION' 8).Split('\"')[0]);                  return true;              }              catch              {                  if ( !SuppressExceptions )                      throw new LogFile_Exception("Unable to read the XHTML header of the log file " + FileName + "." );                  return false;              }
Magic Number,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following statement contains a magic number: try              {                  // Find the REPORT node                  foreach (XmlNode reportNode in report_xml.ChildNodes)                  {                      if (reportNode.Name == "REPORT")                      {                          // Find the relevant node                          foreach (XmlNode ingestNode in reportNode.ChildNodes)                          {                              // Is this the INGEST or DISSEMINATION information?                              if ((ingestNode.Name == "INGEST") || ( ingestNode.Name == "DISSEMINATION" ))                              {                                  // Set the report type                                  report_data.Report_Type = ingestNode.Name == "INGEST" ? FDA_Report_Type.INGEST : FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "INGEST_TIME":                                                  string date_string_value =                                                      thisAttribute.Value.Replace("-0400 "' "").Replace("-0500 "' "");                                                  string[] split = date_string_value.Split(" ".ToCharArray());                                                  if (split.Length == 5)                                                  {                                                      string new_date_string = split[1] + " " + split[2] + " " + split[4] +" " + split[3];                                                      DateTime report_date;                                                      if (DateTime.TryParse(new_date_string' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  else                                                  {                                                      // Just try to convert it as it is                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  break;                                                case "PACKAGE":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // Find the AGREEMENT and FILES information                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      switch (childNode.Name)                                      {                                          case "AGREEMENT_INFO":                                              if (childNode.Attributes != null)                                              {                                                  foreach (XmlAttribute thisAttribute in childNode.Attributes)                                                  {                                                      switch (thisAttribute.Name)                                                      {                                                          case "ACCOUNT":                                                              report_data.Account = thisAttribute.Value;                                                              break;                                                            case "PROJECT":                                                              report_data.Project = thisAttribute.Value;                                                              break;                                                      }                                                  }                                              }                                              break;                                            case "FILES":                                              read_file_info(childNode' report_data);                                              break;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End INGEST or DISSEMINATION node                                // Is this WITHDRAWAL information?                              if (ingestNode.Name == "WITHDRAWAL")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "WITHDRAWAL_TIME":                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  break;                                                case "PACKAGE_NAME":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                                case "NOTE":                                                  report_data.Message_Note = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End WITHDRAWAL node                                // Is this ERROR information?                              if (ingestNode.Name == "ERROR")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.ERROR;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "REJECT_TIME":                                                  DateTime report_date;                                                  if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                      report_data.Date = report_date;                                                  break;                                          }                                      }                                  }                                    // Step through the children nodes                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      // Is this the MESSAGE?                                      if (childNode.Name == "MESSAGE")                                      {                                          // Remove alot of empty space' if it exists                                          string message = childNode.InnerText.Replace("\n"' ". ").Replace("\r"' "");                                          while (message.IndexOf("  ") >= 0)                                          {                                              message = message.Replace("  "' " ");                                          }                                            // Save the cleaned up message                                          report_data.Message_Note = message;                                                                              }                                        // Is this the PACKAGE name?                                      if (childNode.Name == "PACKAGE")                                      {                                          report_data.Package = childNode.InnerText;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End ERROR node                            } // End stepping through subchildren under REPORT                        } // End REPORT node                    } // End stepping through all the nodes in the XML document              }              catch (Exception ee)              {                  lastError = ee.ToString();                  return null;              }
Magic Number,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following statement contains a magic number: try              {                  // Find the REPORT node                  foreach (XmlNode reportNode in report_xml.ChildNodes)                  {                      if (reportNode.Name == "REPORT")                      {                          // Find the relevant node                          foreach (XmlNode ingestNode in reportNode.ChildNodes)                          {                              // Is this the INGEST or DISSEMINATION information?                              if ((ingestNode.Name == "INGEST") || ( ingestNode.Name == "DISSEMINATION" ))                              {                                  // Set the report type                                  report_data.Report_Type = ingestNode.Name == "INGEST" ? FDA_Report_Type.INGEST : FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "INGEST_TIME":                                                  string date_string_value =                                                      thisAttribute.Value.Replace("-0400 "' "").Replace("-0500 "' "");                                                  string[] split = date_string_value.Split(" ".ToCharArray());                                                  if (split.Length == 5)                                                  {                                                      string new_date_string = split[1] + " " + split[2] + " " + split[4] +" " + split[3];                                                      DateTime report_date;                                                      if (DateTime.TryParse(new_date_string' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  else                                                  {                                                      // Just try to convert it as it is                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  break;                                                case "PACKAGE":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // Find the AGREEMENT and FILES information                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      switch (childNode.Name)                                      {                                          case "AGREEMENT_INFO":                                              if (childNode.Attributes != null)                                              {                                                  foreach (XmlAttribute thisAttribute in childNode.Attributes)                                                  {                                                      switch (thisAttribute.Name)                                                      {                                                          case "ACCOUNT":                                                              report_data.Account = thisAttribute.Value;                                                              break;                                                            case "PROJECT":                                                              report_data.Project = thisAttribute.Value;                                                              break;                                                      }                                                  }                                              }                                              break;                                            case "FILES":                                              read_file_info(childNode' report_data);                                              break;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End INGEST or DISSEMINATION node                                // Is this WITHDRAWAL information?                              if (ingestNode.Name == "WITHDRAWAL")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "WITHDRAWAL_TIME":                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  break;                                                case "PACKAGE_NAME":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                                case "NOTE":                                                  report_data.Message_Note = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End WITHDRAWAL node                                // Is this ERROR information?                              if (ingestNode.Name == "ERROR")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.ERROR;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "REJECT_TIME":                                                  DateTime report_date;                                                  if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                      report_data.Date = report_date;                                                  break;                                          }                                      }                                  }                                    // Step through the children nodes                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      // Is this the MESSAGE?                                      if (childNode.Name == "MESSAGE")                                      {                                          // Remove alot of empty space' if it exists                                          string message = childNode.InnerText.Replace("\n"' ". ").Replace("\r"' "");                                          while (message.IndexOf("  ") >= 0)                                          {                                              message = message.Replace("  "' " ");                                          }                                            // Save the cleaned up message                                          report_data.Message_Note = message;                                                                              }                                        // Is this the PACKAGE name?                                      if (childNode.Name == "PACKAGE")                                      {                                          report_data.Package = childNode.InnerText;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End ERROR node                            } // End stepping through subchildren under REPORT                        } // End REPORT node                    } // End stepping through all the nodes in the XML document              }              catch (Exception ee)              {                  lastError = ee.ToString();                  return null;              }
Magic Number,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following statement contains a magic number: try              {                  // Find the REPORT node                  foreach (XmlNode reportNode in report_xml.ChildNodes)                  {                      if (reportNode.Name == "REPORT")                      {                          // Find the relevant node                          foreach (XmlNode ingestNode in reportNode.ChildNodes)                          {                              // Is this the INGEST or DISSEMINATION information?                              if ((ingestNode.Name == "INGEST") || ( ingestNode.Name == "DISSEMINATION" ))                              {                                  // Set the report type                                  report_data.Report_Type = ingestNode.Name == "INGEST" ? FDA_Report_Type.INGEST : FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "INGEST_TIME":                                                  string date_string_value =                                                      thisAttribute.Value.Replace("-0400 "' "").Replace("-0500 "' "");                                                  string[] split = date_string_value.Split(" ".ToCharArray());                                                  if (split.Length == 5)                                                  {                                                      string new_date_string = split[1] + " " + split[2] + " " + split[4] +" " + split[3];                                                      DateTime report_date;                                                      if (DateTime.TryParse(new_date_string' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  else                                                  {                                                      // Just try to convert it as it is                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  break;                                                case "PACKAGE":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // Find the AGREEMENT and FILES information                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      switch (childNode.Name)                                      {                                          case "AGREEMENT_INFO":                                              if (childNode.Attributes != null)                                              {                                                  foreach (XmlAttribute thisAttribute in childNode.Attributes)                                                  {                                                      switch (thisAttribute.Name)                                                      {                                                          case "ACCOUNT":                                                              report_data.Account = thisAttribute.Value;                                                              break;                                                            case "PROJECT":                                                              report_data.Project = thisAttribute.Value;                                                              break;                                                      }                                                  }                                              }                                              break;                                            case "FILES":                                              read_file_info(childNode' report_data);                                              break;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End INGEST or DISSEMINATION node                                // Is this WITHDRAWAL information?                              if (ingestNode.Name == "WITHDRAWAL")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "WITHDRAWAL_TIME":                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  break;                                                case "PACKAGE_NAME":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                                case "NOTE":                                                  report_data.Message_Note = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End WITHDRAWAL node                                // Is this ERROR information?                              if (ingestNode.Name == "ERROR")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.ERROR;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "REJECT_TIME":                                                  DateTime report_date;                                                  if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                      report_data.Date = report_date;                                                  break;                                          }                                      }                                  }                                    // Step through the children nodes                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      // Is this the MESSAGE?                                      if (childNode.Name == "MESSAGE")                                      {                                          // Remove alot of empty space' if it exists                                          string message = childNode.InnerText.Replace("\n"' ". ").Replace("\r"' "");                                          while (message.IndexOf("  ") >= 0)                                          {                                              message = message.Replace("  "' " ");                                          }                                            // Save the cleaned up message                                          report_data.Message_Note = message;                                                                              }                                        // Is this the PACKAGE name?                                      if (childNode.Name == "PACKAGE")                                      {                                          report_data.Package = childNode.InnerText;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End ERROR node                            } // End stepping through subchildren under REPORT                        } // End REPORT node                    } // End stepping through all the nodes in the XML document              }              catch (Exception ee)              {                  lastError = ee.ToString();                  return null;              }
Magic Number,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following statement contains a magic number: try              {                  // Find the REPORT node                  foreach (XmlNode reportNode in report_xml.ChildNodes)                  {                      if (reportNode.Name == "REPORT")                      {                          // Find the relevant node                          foreach (XmlNode ingestNode in reportNode.ChildNodes)                          {                              // Is this the INGEST or DISSEMINATION information?                              if ((ingestNode.Name == "INGEST") || ( ingestNode.Name == "DISSEMINATION" ))                              {                                  // Set the report type                                  report_data.Report_Type = ingestNode.Name == "INGEST" ? FDA_Report_Type.INGEST : FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "INGEST_TIME":                                                  string date_string_value =                                                      thisAttribute.Value.Replace("-0400 "' "").Replace("-0500 "' "");                                                  string[] split = date_string_value.Split(" ".ToCharArray());                                                  if (split.Length == 5)                                                  {                                                      string new_date_string = split[1] + " " + split[2] + " " + split[4] +" " + split[3];                                                      DateTime report_date;                                                      if (DateTime.TryParse(new_date_string' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  else                                                  {                                                      // Just try to convert it as it is                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  break;                                                case "PACKAGE":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // Find the AGREEMENT and FILES information                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      switch (childNode.Name)                                      {                                          case "AGREEMENT_INFO":                                              if (childNode.Attributes != null)                                              {                                                  foreach (XmlAttribute thisAttribute in childNode.Attributes)                                                  {                                                      switch (thisAttribute.Name)                                                      {                                                          case "ACCOUNT":                                                              report_data.Account = thisAttribute.Value;                                                              break;                                                            case "PROJECT":                                                              report_data.Project = thisAttribute.Value;                                                              break;                                                      }                                                  }                                              }                                              break;                                            case "FILES":                                              read_file_info(childNode' report_data);                                              break;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End INGEST or DISSEMINATION node                                // Is this WITHDRAWAL information?                              if (ingestNode.Name == "WITHDRAWAL")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.WITHDRAWAL;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "WITHDRAWAL_TIME":                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  break;                                                case "PACKAGE_NAME":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                                case "NOTE":                                                  report_data.Message_Note = thisAttribute.Value;                                                  break;                                          }                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End WITHDRAWAL node                                // Is this ERROR information?                              if (ingestNode.Name == "ERROR")                              {                                  // Set the report type                                  report_data.Report_Type = FDA_Report_Type.ERROR;                                    // Read the attribute information                                  if (ingestNode.Attributes != null)                                  {                                      foreach (XmlAttribute thisAttribute in ingestNode.Attributes)                                      {                                          switch (thisAttribute.Name)                                          {                                              case "REJECT_TIME":                                                  DateTime report_date;                                                  if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                      report_data.Date = report_date;                                                  break;                                          }                                      }                                  }                                    // Step through the children nodes                                  foreach (XmlNode childNode in ingestNode.ChildNodes)                                  {                                      // Is this the MESSAGE?                                      if (childNode.Name == "MESSAGE")                                      {                                          // Remove alot of empty space' if it exists                                          string message = childNode.InnerText.Replace("\n"' ". ").Replace("\r"' "");                                          while (message.IndexOf("  ") >= 0)                                          {                                              message = message.Replace("  "' " ");                                          }                                            // Save the cleaned up message                                          report_data.Message_Note = message;                                                                              }                                        // Is this the PACKAGE name?                                      if (childNode.Name == "PACKAGE")                                      {                                          report_data.Package = childNode.InnerText;                                      }                                  }                                    // No need to continue through this report anymore                                  break;                                } // End ERROR node                            } // End stepping through subchildren under REPORT                        } // End REPORT node                    } // End stepping through all the nodes in the XML document              }              catch (Exception ee)              {                  lastError = ee.ToString();                  return null;              }
Magic Number,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,format_date,The following statement contains a magic number: return date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-" + date.Day.ToString().PadLeft(2' '0') + "T" +                  date.Hour.ToString().PadLeft(2' '0') + ":" + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0') + "Z";
Magic Number,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,format_date,The following statement contains a magic number: return date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-" + date.Day.ToString().PadLeft(2' '0') + "T" +                  date.Hour.ToString().PadLeft(2' '0') + ":" + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0') + "Z";
Magic Number,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,format_date,The following statement contains a magic number: return date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-" + date.Day.ToString().PadLeft(2' '0') + "T" +                  date.Hour.ToString().PadLeft(2' '0') + ":" + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0') + "Z";
Magic Number,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,format_date,The following statement contains a magic number: return date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-" + date.Day.ToString().PadLeft(2' '0') + "T" +                  date.Hour.ToString().PadLeft(2' '0') + ":" + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0') + "Z";
Magic Number,SobekCM.Tools.FDA,FDA_Report_Writer,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Writer.cs,format_date,The following statement contains a magic number: return date.Year + "-" + date.Month.ToString().PadLeft(2' '0') + "-" + date.Day.ToString().PadLeft(2' '0') + "T" +                  date.Hour.ToString().PadLeft(2' '0') + ":" + date.Minute.ToString().PadLeft(2' '0') + ":" + date.Second.ToString().PadLeft(2' '0') + "Z";
Missing Default,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following switch statement is missing a default case: switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "INGEST_TIME":                                                  string date_string_value =                                                      thisAttribute.Value.Replace("-0400 "' "").Replace("-0500 "' "");                                                  string[] split = date_string_value.Split(" ".ToCharArray());                                                  if (split.Length == 5)                                                  {                                                      string new_date_string = split[1] + " " + split[2] + " " + split[4] +" " + split[3];                                                      DateTime report_date;                                                      if (DateTime.TryParse(new_date_string' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  else                                                  {                                                      // Just try to convert it as it is                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  }                                                  break;                                                case "PACKAGE":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                          }
Missing Default,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following switch statement is missing a default case: switch (childNode.Name)                                      {                                          case "AGREEMENT_INFO":                                              if (childNode.Attributes != null)                                              {                                                  foreach (XmlAttribute thisAttribute in childNode.Attributes)                                                  {                                                      switch (thisAttribute.Name)                                                      {                                                          case "ACCOUNT":                                                              report_data.Account = thisAttribute.Value;                                                              break;                                                            case "PROJECT":                                                              report_data.Project = thisAttribute.Value;                                                              break;                                                      }                                                  }                                              }                                              break;                                            case "FILES":                                              read_file_info(childNode' report_data);                                              break;                                      }
Missing Default,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following switch statement is missing a default case: switch (thisAttribute.Name)                                                      {                                                          case "ACCOUNT":                                                              report_data.Account = thisAttribute.Value;                                                              break;                                                            case "PROJECT":                                                              report_data.Project = thisAttribute.Value;                                                              break;                                                      }
Missing Default,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following switch statement is missing a default case: switch (thisAttribute.Name)                                          {                                              case "IEID":                                                  report_data.IEID = thisAttribute.Value;                                                  break;                                                case "WITHDRAWAL_TIME":                                                      DateTime report_date;                                                      if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                          report_data.Date = report_date;                                                  break;                                                case "PACKAGE_NAME":                                                  report_data.Package = thisAttribute.Value;                                                  break;                                                case "NOTE":                                                  report_data.Message_Note = thisAttribute.Value;                                                  break;                                          }
Missing Default,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,Read,The following switch statement is missing a default case: switch (thisAttribute.Name)                                          {                                              case "REJECT_TIME":                                                  DateTime report_date;                                                  if (DateTime.TryParse(thisAttribute.Value' out report_date))                                                      report_data.Date = report_date;                                                  break;                                          }
Missing Default,SobekCM.Tools.FDA,FDA_Report_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Tools\FDA\FDA_Report_Reader.cs,read_file_info,The following switch statement is missing a default case: switch (fileAttribute.Name)                          {                              case "DFID":                                  dfid = fileAttribute.Value;                                  break;                                case "GLOBAL":                                  global = fileAttribute.Value;                                  break;                                case "ORIGIN":                                  origin = fileAttribute.Value;                                  break;                                case "PATH":                                  path = fileAttribute.Value;                                  break;                                case "PRESERVATION":                                  preservation = fileAttribute.Value;                                  break;                                case "SIZE":                                  size = fileAttribute.Value;                                  break;                          }
