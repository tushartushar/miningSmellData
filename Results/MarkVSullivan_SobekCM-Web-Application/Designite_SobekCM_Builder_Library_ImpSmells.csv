Implementation smell,Namespace,Class,File,Method,Description
Long Method,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Perform_BulkLoader,The method has 189 lines of code.
Long Method,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The method has 204 lines of code.
Long Method,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Worker_Controller,The method has 115 lines of code.
Long Method,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The method has 294 lines of code.
Long Method,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The method has 165 lines of code.
Long Method,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The method has 143 lines of code.
Long Method,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The method has 201 lines of code.
Long Method,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The method has 194 lines of code.
Long Method,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The method has 209 lines of code.
Long Method,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Submission_Module,The method has 129 lines of code.
Long Method,SobekCM.Builder_Library.Tools,HTML_XML_Text_Extractor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\HTML_XML_Text_Extractor.cs,Extract_Text,The method has 140 lines of code.
Long Method,SobekCM.Builder_Library.Tools,MarcXML_Load_Creator,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\MarcXML_Load_Creator.cs,Create_MarcXML_Data_File,The method has 138 lines of code.
Long Method,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The method has 228 lines of code.
Long Method,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The method has 188 lines of code.
Long Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,SobekCM_Stats_DataSet,The method has 105 lines of code.
Long Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_Item_Hit,The method has 100 lines of code.
Long Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The method has 134 lines of code.
Long Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The method has 195 lines of code.
Long Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The method has 124 lines of code.
Complex Method,SobekCM.Builder_Library,Actionable_Builder_Source_Folder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Actionable_Builder_Source_Folder.cs,Move_From_Inbound_To_Processing,Cyclomatic complexity of the method is 10
Complex Method,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Perform_BulkLoader,Cyclomatic complexity of the method is 24
Complex Method,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,Cyclomatic complexity of the method is 23
Complex Method,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,Cyclomatic complexity of the method is 8
Complex Method,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Worker_Controller,Cyclomatic complexity of the method is 13
Complex Method,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,Cyclomatic complexity of the method is 20
Complex Method,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,Cyclomatic complexity of the method is 9
Complex Method,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,Cyclomatic complexity of the method is 18
Complex Method,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,Cyclomatic complexity of the method is 19
Complex Method,SobekCM.Builder_Library.Modules.Folders,UpdateNonBibFolders,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\UpdateNonBibFolders.cs,DoWork,Cyclomatic complexity of the method is 8
Complex Method,SobekCM.Builder_Library.Modules.Items,AttachImagesAllModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AttachImagesAllModule.cs,DoWork,Cyclomatic complexity of the method is 10
Complex Method,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesLegacyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesLegacyModule.cs,DoWork,Cyclomatic complexity of the method is 12
Complex Method,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,Cyclomatic complexity of the method is 9
Complex Method,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,Cyclomatic complexity of the method is 8
Complex Method,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,DoWork,Cyclomatic complexity of the method is 8
Complex Method,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,Cyclomatic complexity of the method is 21
Complex Method,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,Cyclomatic complexity of the method is 9
Complex Method,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,Cyclomatic complexity of the method is 22
Complex Method,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,Cyclomatic complexity of the method is 23
Complex Method,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Submission_Module,Cyclomatic complexity of the method is 10
Complex Method,SobekCM.Builder_Library.Tools,HTML_XML_Text_Extractor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\HTML_XML_Text_Extractor.cs,Extract_Text,Cyclomatic complexity of the method is 8
Complex Method,SobekCM.Builder_Library.Tools,MarcXML_Load_Creator,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\MarcXML_Load_Creator.cs,Create_MarcXML_Data_File,Cyclomatic complexity of the method is 13
Complex Method,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,Cyclomatic complexity of the method is 22
Complex Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_Item_Hit,Cyclomatic complexity of the method is 14
Complex Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,Cyclomatic complexity of the method is 13
Complex Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,Cyclomatic complexity of the method is 22
Complex Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,Cyclomatic complexity of the method is 20
Complex Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,Cyclomatic complexity of the method is 18
Complex Method,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,Cyclomatic complexity of the method is 14
Long Parameter List,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Worker_BulkLoader,The method has 5 parameters. Parameters: Logger' InstanceInfo' Verbose' LogFileDirectory' PluginRootDirectory
Long Parameter List,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,module_Process,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_NonError_To_Log,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_NonError_To_Log,The method has 5 parameters. Parameters: LogStatement' IsVerbose' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_Error_To_Log,The method has 5 parameters. Parameters: LogStatement' BibID_VID' MetsType' RelatedLogID' Ee
Long Parameter List,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_Complete_To_Log,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library.Modules.Folders,abstractFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\abstractFolderModule.cs,OnProcess,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Create_Error_Log,The method has 5 parameters. Parameters: Resource_Folder' Folder_Name' ErrorMessage' MetsType' BaseErrorMessage
Long Parameter List,SobekCM.Builder_Library.Modules.Items,abstractSubmissionPackageModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\abstractSubmissionPackageModule.cs,OnProcess,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The method has 6 parameters. Parameters: year' month' SystemUrl' SystemName' FromAddress' FromName
Long Parameter List,SobekCM.Builder_Library.Modules.Schedulable,abstractSchedulableModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\abstractSchedulableModule.cs,OnProcess,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,FDA_Report_Processor,The method has 6 parameters. Parameters: Save_To_Database' Delete' Include_Briefs' Recurse' Write_Brief_Always' Write_Brief_On_Warning
Long Parameter List,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Create_Thumbnail,The method has 5 parameters. Parameters: Working_Directory' PDF_In_Name' JPEG_Out_Name' Ghostscript_Exectuable' ImageMagick_Executable
Long Parameter List,SobekCM.Builder_Library.Modules.PostProcess,abstractPostProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\abstractPostProcessModule.cs,OnProcess,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library.Modules.PreProcess,abstractPreProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PreProcess\abstractPreProcessModule.cs,OnProcess,The method has 5 parameters. Parameters: LogStatement' DbLogType' BibID_VID' MetsType' RelatedLogID
Long Parameter List,SobekCM.Builder_Library.Statistics,SobekCM_Hit,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Hit.cs,SobekCM_Hit,The method has 5 parameters. Parameters: Time' IP' Query_String' SobekCM_URL' UserAgent
Long Parameter List,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_Item_Hit,The method has 6 parameters. Parameters: Item_ID' BibID' VID' ViewerCode' Text_Search' SessionID
Long Parameter List,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The method has 5 parameters. Parameters: year' month' aggregationHash' bibHash' portalHash
Long Statement,SobekCM.Builder_Library,Actionable_Builder_Source_Folder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Actionable_Builder_Source_Folder.cs,Collect_Terminal_Dirs,The length of the statement  "            if ((Directory.GetDirectories(CurrentDir).Length == 0) || (Directory.GetFiles(CurrentDir' "*.mets").Length > 0) || (Directory.GetFiles(CurrentDir' "*.mets.xml").Length > 0)) " is 173.
Long Statement,SobekCM.Builder_Library,Actionable_Builder_Source_Folder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Actionable_Builder_Source_Folder.cs,Move_From_Inbound_To_Processing,The length of the statement  "            List<Incoming_Digital_Resource> inboundResources = terminalDirectories.Select(ThisDirectory => new Incoming_Digital_Resource(ThisDirectory' this)).ToList(); " is 156.
Long Statement,SobekCM.Builder_Library,Actionable_Builder_Source_Folder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Actionable_Builder_Source_Folder.cs,Move_From_Inbound_To_Processing,The length of the statement  "                if ((resource_age > Engine_ApplicationCache_Gateway.Settings.Builder.Complete_Package_Required_Aging) || ((resource_age > Engine_ApplicationCache_Gateway.Settings.Builder.METS_Only_Package_Required_Aging) && (resource.METS_Only_Package))) " is 238.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_Static_HTML,The length of the statement  "                if (!Directory.Exists(Resource_Folder + "\\" + Engine_ApplicationCache_Gateway.Settings.Resources.Backup_Files_Folder_Name)) " is 124.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_Static_HTML,The length of the statement  "                    Directory.CreateDirectory(Resource_Folder + "\\" + Engine_ApplicationCache_Gateway.Settings.Resources.Backup_Files_Folder_Name); " is 128.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_Static_HTML,The length of the statement  "                string filename = Resource_Folder + "\\" + Engine_ApplicationCache_Gateway.Settings.Resources.Backup_Files_Folder_Name + "\\" + Metadata.BibID + "_" + Metadata.VID + ".html"; " is 174.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                Metadata.Web.Image_Root = Engine_ApplicationCache_Gateway.Settings.Servers.Image_URL + Metadata.Web.File_Root.Replace("\\"' "/"); " is 129.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                    collectionnames.AddRange(from aggregation in Metadata.Behaviors.Aggregations select aggregation.Code into altCollection select CollectionCodes.Select("collectioncode = '" + altCollection + "'") into altCode where altCode.Length > 0 select altCode[0]["ShortName"].ToString()); " is 275.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Cataloging Source Code"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Cataloging_Source_Code; " is 146.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Location Code"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Location_Code; " is 128.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Reproduction Agency"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Reproduction_Agency; " is 140.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Reproduction Place"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Reproduction_Place; " is 138.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC XSLT File"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.XSLT_File; " is 120.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_MARC_XML,The length of the statement  "                options["MarcXML_File_ReaderWriter:System Abbreviation"] = Engine_ApplicationCache_Gateway.Settings.System.System_Abbreviation; " is 127.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Cataloging Source Code"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Cataloging_Source_Code; " is 146.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Location Code"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Location_Code; " is 128.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Reproduction Agency"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Reproduction_Agency; " is 140.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Reproduction Place"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Reproduction_Place; " is 138.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC XSLT File"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.XSLT_File; " is 120.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                options["MarcXML_File_ReaderWriter:System Abbreviation"] = Engine_ApplicationCache_Gateway.Settings.System.System_Abbreviation; " is 127.
Long Statement,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Save_to_Database,The length of the statement  "                //    SobekCM.Library.Database.SobekCM_Database.Set_Endeca_Flag(bibPackage.BibID' bibPackage.Behaviors.Suppress_Endeca); " is 120.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Perform_BulkLoader,The length of the statement  "            Add_NonError_To_Log("Begin completing any recent loads requiring additional work"' verbose' String.Empty' String.Empty' -1); " is 124.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Perform_BulkLoader,The length of the statement  "            Add_NonError_To_Log("Finished completing any recent loads requiring additional work"' verbose' String.Empty' String.Empty' -1); " is 127.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,ReportLastRun,The length of the statement  "            Library.Database.SobekCM_Database.Set_Setting("Builder Version"' Engine_ApplicationCache_Gateway.Settings.Static.Current_Builder_Version); " is 138.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The length of the statement  "                string baseUrl = String.IsNullOrWhiteSpace(settings.Servers.Base_URL) ? settings.Servers.Application_Server_URL : settings.Servers.Base_URL; " is 140.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The length of the statement  "                        thisEndpoint.URL = thisEndpoint.URL.Replace("[BASEURL]"' baseUrl).Replace("//"' "/").Replace("http:/"' "http://").Replace("https:/"' "https://"); " is 145.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The length of the statement  "                        thisEndpoint.URL = ( baseUrl + thisEndpoint.URL).Replace("//"' "/").Replace("http:/"' "http://").Replace("https:/"' "https://"); " is 128.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The length of the statement  "                Engine_ApplicationCache_Gateway.Configuration.Extensions = SobekEngineClient.Admin.Get_Extensions_Configuration(tracer); " is 120.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The length of the statement  "		        if ((Engine_ApplicationCache_Gateway.Configuration.Extensions.Extensions != null) && (Engine_ApplicationCache_Gateway.Configuration.Extensions.Extensions.Count > 0)) " is 165.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Refresh_Settings_And_Item_List,The length of the statement  "		                            string from_plugins = assembly.FilePath.Substring(assembly.FilePath.IndexOf("plugins"' StringComparison.OrdinalIgnoreCase)); " is 124.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The length of the statement  "	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1); " is 124.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The length of the statement  "                    string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2); " is 165.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The length of the statement  "							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)}; " is 186.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The length of the statement  "	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1); " is 130.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Single_Recent_Load_Requiring_Additional_Work,The length of the statement  "            AdditionalWorkResource.BuilderLogId = Add_NonError_To_Log("Reprocessing '" + AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID + "'"' "Standard"'  AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID' AdditionalWorkResource.METS_Type_String' -1); " is 271.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Single_Recent_Load_Requiring_Additional_Work,The length of the statement  "                    Add_Error_To_Log("Error reading METS file from " + AdditionalWorkResource.Folder_Name.Replace("_"' ":")' AdditionalWorkResource.Folder_Name.Replace("_"' ":")' "Reprocess"' AdditionalWorkResource.BuilderLogId); " is 209.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Single_Recent_Load_Requiring_Additional_Work,The length of the statement  "                        Add_NonError_To_Log("Running module " + thisModule.GetType()' true' AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID' String.Empty' AdditionalWorkResource.BuilderLogId); " is 184.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Single_Recent_Load_Requiring_Additional_Work,The length of the statement  "                        Add_Error_To_Log("Unable to complete additional work for " + AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID' AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID' String.Empty' AdditionalWorkResource.BuilderLogId); " is 242.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Single_Recent_Load_Requiring_Additional_Work,The length of the statement  "                Add_Process_Info_To_PostProcess_Lists(AdditionalWorkResource.BibID' AdditionalWorkResource.VID' AdditionalWorkResource.Metadata.Behaviors.Aggregation_Code_List); " is 161.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Single_Recent_Load_Requiring_Additional_Work,The length of the statement  "                Add_Error_To_Log("Unable to complete additional work for " + AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID' AdditionalWorkResource.BibID + ":" + AdditionalWorkResource.VID' AdditionalWorkResource.METS_Type_String' AdditionalWorkResource.BuilderLogId' ee); " is 273.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Incoming_Packages,The length of the statement  "                            Add_NonError_To_Log("....Still pending packages' but moving to next instances and will return for these"' "Standard"' String.Empty' String.Empty' -1); " is 150.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "            ResourcePackage.BuilderLogId = Add_NonError_To_Log("........Processing '" + ResourcePackage.Folder_Name + "'"' "Standard"' ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.METS_Type_String' -1); " is 212.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "			Library.Database.SobekCM_Database.Builder_Clear_Item_Error_Log(ResourcePackage.BibID' ResourcePackage.VID' "SobekCM Builder"); " is 126.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "            ResourcePackage.NewPackage = (Engine_Database.Get_Item_Information(ResourcePackage.BibID' ResourcePackage.VID' null ) == null ); " is 128.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "                    //    Add_NonError_To_Log("Running module " + thisModule.GetType().ToString()' true' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId); " is 180.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "                        Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId); " is 207.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "                        string final_failures_folder = Path.Combine(ResourcePackage.Source_Folder.Failures_Folder' ResourcePackage.BibID + "_" + ResourcePackage.VID); " is 142.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "                            final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0'); " is 341.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "                Add_Process_Info_To_PostProcess_Lists(ResourcePackage.BibID' ResourcePackage.VID' ResourcePackage.Metadata.Behaviors.Aggregation_Code_List); " is 140.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The length of the statement  "                Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId' ee); " is 211.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The length of the statement  "                Add_Delete_Info_To_PostProcess_Lists(deleteResource.BibID' deleteResource.VID' deleteResource.Metadata.Behaviors.Aggregation_Code_List); " is 136.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The length of the statement  "                            Add_Error_To_Log("Unable to complete delete for " + deleteResource.BibID + ":" + deleteResource.VID' deleteResource.BibID + ":" + deleteResource.VID' String.Empty' deleteResource.BuilderLogId); " is 193.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The length of the statement  "                            string final_failures_folder = Path.Combine(deleteResource.Source_Folder.Failures_Folder' deleteResource.BibID + "_" + deleteResource.VID); " is 139.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The length of the statement  "                                final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0'); " is 341.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The length of the statement  "                    Add_Error_To_Log("Delete ( " + deleteResource.BibID + ":" + deleteResource.VID + " ) invalid... no pre-existing resource"' deleteResource.BibID + ":" + deleteResource.VID' deleteResource.METS_Type_String' deleteResource.BuilderLogId); " is 234.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_NonError_To_Log,The length of the statement  "			return Library.Database.SobekCM_Database.Builder_Add_Log_Entry(RelatedLogID' BibID_VID' DbLogType' LogStatement.Replace("\t"' "")' MetsType); " is 141.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_NonError_To_Log,The length of the statement  "	            return Library.Database.SobekCM_Database.Builder_Add_Log_Entry(RelatedLogID' BibID_VID' "Verbose"' LogStatement.Replace("\t"' "")' MetsType); " is 141.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_Error_To_Log,The length of the statement  "			return Library.Database.SobekCM_Database.Builder_Add_Log_Entry(RelatedLogID' BibID_VID' "Error"' LogStatement.Replace("\t"' "")' MetsType); " is 139.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_Error_To_Log,The length of the statement  "            long mainErrorId = Library.Database.SobekCM_Database.Builder_Add_Log_Entry(RelatedLogID' BibID_VID' "Error"' LogStatement.Replace("\t"' "")' MetsType); " is 151.
Long Statement,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Add_Complete_To_Log,The length of the statement  "	        Library.Database.SobekCM_Database.Builder_Add_Log_Entry(RelatedLogID' BibID_VID' DbLogType' LogStatement.Replace("\t"' "")' MetsType); " is 134.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "	        int time_between_polls = Engine_ApplicationCache_Gateway.Settings.Builder.Override_Seconds_Between_Polls.HasValue ? Engine_ApplicationCache_Gateway.Settings.Builder.Override_Seconds_Between_Polls.Value : 60; " is 207.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "            string log_name = "incoming_" + controllerStarted.Year + "_" + controllerStarted.Month.ToString().PadLeft(2' '0') + "_" + controllerStarted.Day.ToString().PadLeft(2' '0') + ".html"; " is 181.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "            LogFileXhtml preloader_logger = new LogFileXhtml(local_log_name' "SobekCM Incoming Packages Log"' "UFDC_Builder.exe"' true); " is 124.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "            if ((String.IsNullOrEmpty(MultiInstance_Builder_Settings.ImageMagick_Executable)) || (!File.Exists(MultiInstance_Builder_Settings.ImageMagick_Executable))) " is 155.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                preloader_logger.AddNonError("WARNING: Could not find ImageMagick installed.  Some image processing will be unavailable."); " is 123.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "            if ((String.IsNullOrEmpty(MultiInstance_Builder_Settings.Ghostscript_Executable)) || (!File.Exists(MultiInstance_Builder_Settings.Ghostscript_Executable))) " is 155.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                preloader_logger.AddNonError("WARNING: Could not find GhostScript installed.  Some PDF processing will be unavailable."); " is 121.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                        Library.Database.SobekCM_Database.Set_Setting("Builder Version"' Engine_ApplicationCache_Gateway.Settings.Static.Current_Builder_Version); " is 138.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                if ((String.IsNullOrEmpty(MultiInstance_Builder_Settings.ImageMagick_Executable)) || (!File.Exists(MultiInstance_Builder_Settings.ImageMagick_Executable))) " is 155.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                    Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "WARNING: Could not find ImageMagick installed.  Some image processing will be unavailable."' String.Empty); " is 194.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                if ((String.IsNullOrEmpty(MultiInstance_Builder_Settings.Ghostscript_Executable)) || (!File.Exists(MultiInstance_Builder_Settings.Ghostscript_Executable))) " is 155.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                    Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "WARNING: Could not find GhostScript installed.  Some PDF processing will be unavailable."' String.Empty); " is 192.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Preparing to begin polling"' String.Empty); " is 130.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                Worker_BulkLoader newLoader = new Worker_BulkLoader(preloader_logger' dbConfig' verbose' logFileDirectory' pluginRootDirectory); " is 128.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "								Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Expiring old log entries"' String.Empty); " is 128.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "								Library.Database.SobekCM_Database.Builder_Expire_Log_Entries(Engine_ApplicationCache_Gateway.Settings.Builder.Log_Expiration_Days); " is 131.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "								long staticRebuildLogId = Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Rebuilding all static pages"' String.Empty); " is 157.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                                Static_Pages_Builder builder = new Static_Pages_Builder(Engine_ApplicationCache_Gateway.Settings.Servers.Application_Server_URL' Engine_ApplicationCache_Gateway.Settings.Servers.Static_Pages_Location' Engine_ApplicationCache_Gateway.URL_Portals.Default_Portal.Default_Web_Skin); " is 278.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "							Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Building temporarily PAUSED"' String.Empty); " is 131.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "						Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Building ABORTED per request from database key"' String.Empty); " is 150.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The length of the statement  "                        Library.Database.SobekCM_Database.Set_Setting("Builder Version"' Engine_ApplicationCache_Gateway.Settings.Static.Current_Builder_Version); " is 138.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,publish_log_file,The length of the statement  "                //if ((Engine_ApplicationCache_Gateway.Settings.Builder_Logs_Publish_Directory.Length > 0) && (Directory.Exists(Engine_ApplicationCache_Gateway.Settings.Builder_Logs_Publish_Directory))) " is 186.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,publish_log_file,The length of the statement  "                //        File.Copy(LocalLogName' Engine_ApplicationCache_Gateway.Settings.Builder_Logs_Publish_Directory + "\\" + Path.GetFileName(LocalLogName)' true ); " is 154.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Create_Complete_MarcXML_Feed,The length of the statement  "                    File.Copy(Path.Combine(logFileDirectory' file_name)' Engine_ApplicationCache_Gateway.Settings.MarcGeneration.MarcXML_Feed_Location + file_name' true); " is 150.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Create_Complete_MarcXML_Feed,The length of the statement  "                        StreamWriter writer = new StreamWriter(Engine_ApplicationCache_Gateway.Settings.MarcGeneration.MarcXML_Feed_Location + error_file_name' false); " is 143.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Create_Complete_MarcXML_Feed,The length of the statement  "                        Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' feed_name.ToUpper()' "Error"' "Resulting file failed validation"' ""); " is 130.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Create_Complete_MarcXML_Feed,The length of the statement  "                        File.Copy(Path.Combine(logFileDirectory' file_name)' Engine_ApplicationCache_Gateway.Settings.MarcGeneration.MarcXML_Feed_Location + file_name.Replace(".xml"' "_error.xml")' true); " is 180.
Long Statement,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Create_Complete_MarcXML_Feed,The length of the statement  "				Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' feed_name.ToUpper()' "Error"' "Unknown exception caught"' ""); " is 122.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ApplyBibIdRestrictionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ApplyBibIdRestrictionModule.cs,DoWork,The length of the statement  "                if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0)) " is 130.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ApplyBibIdRestrictionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ApplyBibIdRestrictionModule.cs,DoWork,The length of the statement  "                            OnError("Package " + resource.Folder_Name + " has invalid BibID for " + BuilderFolder.Folder_Name + " incoming folder ( " + BuilderFolder.Folder_Name + " )"' resource.BibID + ":" + resource.VID' "INCOMING"' -1); " is 211.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ApplyBibIdRestrictionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ApplyBibIdRestrictionModule.cs,DoWork,The length of the statement  "                                OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.BibID + ":" + resource.VID' resource.METS_Type_String' -1); " is 190.
Long Statement,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,The length of the statement  "                    OnProcess("Worker_BulkLoader.Move_Appropriate_Inbound_Packages_To_Processing: Checking incoming folder " + BuilderFolder.Inbound_Folder' String.Empty' String.Empty' String.Empty' -1); " is 183.
Long Statement,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,The length of the statement  "                        OnProcess("Worker_BulkLoader.Move_Appropriate_Inbound_Packages_To_Processing: Found either files or subdirectories in " + BuilderFolder.Inbound_Folder' String.Empty' String.Empty' String.Empty' -1); " is 198.
Long Statement,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,The length of the statement  "                        OnProcess("Checking inbound packages for aging and possibly moving to processing"' String.Empty' String.Empty' String.Empty' -1); " is 129.
Long Statement,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,The length of the statement  "                    OnProcess("Worker_BulkLoader.Move_Appropriate_Inbound_Packages_To_Processing: No subdirectories or files found in incoming folder " + BuilderFolder.Inbound_Folder' String.Empty' String.Empty' String.Empty' -1); " is 210.
Long Statement,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,The length of the statement  "                OnError("Error in harvesting packages from inbound folders to processing\n" + ee.Message' String.Empty' String.Empty' -1); " is 122.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                OnProcess("ValidateAndClassifyModule.Perform_BulkLoader: Begin validating and classifying packages in incoming/process folders"' "Verbose"' String.Empty' String.Empty' -1); " is 172.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "            // If the maximum number of (incoming' non-delete) packages have already been set aside to process' no need to continue on this folder " is 134.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "            if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit)) " is 149.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1); " is 189.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0)) " is 130.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                OnProcess("........Checking '" + resource.Folder_Name + "'"' "Verbose"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1); " is 130.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                                OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1); " is 174.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                            OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1); " is 174.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                long validateId = OnProcess("....Validating METS file for " + resource.Folder_Name' "Folder Process"' resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1); " is 157.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                        OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1); " is 174.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                                OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1); " is 137.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                                    OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1); " is 132.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                                    OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1); " is 132.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                            if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit)) " is 149.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                                OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1); " is 189.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The length of the statement  "                OnError("Error in harvesting packages from processing : " + ee.Message + "\n" + ee.StackTrace ' String.Empty' String.Empty' -1); " is 128.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Start ( " + Resource.Folder_Name + " )"' "Verbose"' String.Empty' String.Empty' -1); " is 145.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Check for METS existence"' "Verbose"' bib_vid' String.Empty' -1); " is 126.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Validate against " + metsFileInfo.Name + " against the schema"' "Verbose"' bib_vid' String.Empty' -1); " is 163.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' MetsSchemeValidator.Errors' "UNKNOWN"' "METS Scheme Validation Error"); " is 136.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                    OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Read validated METS file"' "Verbose"' Resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1); " is 154.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' "Error encountered while reading the METS file '" + mets_file' "UNKNOWN"); " is 139.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                            Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' "METS file does not have a VID and belongs to a multi-volume title"' Resource.METS_Type_String); " is 161.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                    OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Perform basic check"' "Verbose"' Resource.Resource_Folder.Replace("_"' ":")' Resource.METS_Type_String' -1); " is 169.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                    Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' ThisMetsValidator.ValidationError' Resource.METS_Type_String); " is 127.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                        OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Check resource files (existence and checksum)"' "Verbose"' Resource.Resource_Folder.Replace("_"' ":")' Resource.METS_Type_String' -1); " is 195.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                        Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' ThisMetsValidator.ValidationError' Resource.METS_Type_String); " is 127.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "                    OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Complete - validated"' "Verbose"' Resource.Resource_Folder.Replace("_"' ":")' Resource.METS_Type_String' -1); " is 170.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The length of the statement  "            Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' "Error encountered while reading the METS file '" + mets_file' "UNKNOWN"); " is 139.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Create_Error_Log,The length of the statement  "            Create_Error_Log(Resource_Folder' Folder_Name' ErrorMessage' MetsType' "Error encountered while processing " + Folder_Name); " is 124.
Long Statement,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Create_Error_Log,The length of the statement  "                LogFileXhtml errorLog = new LogFileXhtml(Resource_Folder + "\\" + Folder_Name + ".log.html"' "Package Processing Log"' "SobekCM Builder Errors"); " is 145.
Long Statement,SobekCM.Builder_Library.Modules.Folders,UpdateNonBibFolders,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\UpdateNonBibFolders.cs,DoWork,The length of the statement  "                    SobekCM_Item_Database.Save_New_Digital_Resource(newItem' false' false' "Builder"' "Created BibID folder from '" + thisSubDirName + "'"' -1); " is 140.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesLegacyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesLegacyModule.cs,DoWork,The length of the statement  "                    Image_Derivative_Creation_Processor imageProcessor = new Image_Derivative_Creation_Processor(imagemagick_executable' kakadu_path' true' true' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' false' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' null); " is 291.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesLegacyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesLegacyModule.cs,DoWork,The length of the statement  "                                    imageProcessor.ImageMagick_Create_JPEG(jpegFile' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 239.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesLegacyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesLegacyModule.cs,imageProcessor_Error_Encountered,The length of the statement  "                    Email_Helper.SendEmail(email_address' "Image Derivation Error : " + BibID_VID' "An error was encountered while creating images for the web from the provided files in the SobekCM Builder service.  Processing of this item will be incomplete.\n\n" + NewMessage + "\n\nPlease review this item and correct the issue' most likely by checking the TIFFs and reloading them."' false' Settings.System.System_Name); " is 404.
Long Statement,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,The length of the statement  "                OnProcess("Tesseract OCR software not found"' "Tesseract OCR Module"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 157.
Long Statement,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,The length of the statement  "                    OnProcess("Tesseract OCR executable configured' but not present"' "Tesseract OCR Module"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 177.
Long Statement,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,The length of the statement  "                OnProcess("Exception thrown file checking for Tesseract OCR executable existance"' "Tesseract OCR Module"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 194.
Long Statement,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,The length of the statement  "            if ((Resource.Metadata.Bib_Info.Languages_Count > 0) && (!String.IsNullOrEmpty(Resource.Metadata.Bib_Info.Languages[0].Language_ISO_Code))) " is 139.
Long Statement,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,The length of the statement  "                        OnProcess("Tesseract OCR exception on " + Path.GetFileName(thisTiffFile) + ": " + exception_type' "Tesseract OCR Module"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 209.
Long Statement,SobekCM.Builder_Library.Modules.Items,TesseractOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,DoWork,The length of the statement  "                        OnProcess("Tesseract OCR successfy on " + Path.GetFileName(thisTiffFile)' "Tesseract OCR Module"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 185.
Long Statement,SobekCM.Builder_Library.Modules.Items,AddTrackingWorkflowModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AddTrackingWorkflowModule.cs,DoWork,The length of the statement  "            SobekCM_Item_Database.Add_Workflow(Resource.Metadata.Web.ItemID' "Bulk Loaded"' String.Empty' "SobekCM Bulk Loader"' String.Empty); " is 131.
Long Statement,SobekCM.Builder_Library.Modules.Items,AddTrackingWorkflowModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AddTrackingWorkflowModule.cs,DoWork,The length of the statement  "            if ((!Resource.Metadata.Tracking.Born_Digital_Is_Null) && (Resource.Metadata.Tracking.Born_Digital) && (Resource.Metadata.Behaviors.IP_Restriction_Membership >= 0) && (Resource.Metadata.Divisions.Download_Tree.Has_Files)) " is 221.
Long Statement,SobekCM.Builder_Library.Modules.Items,AttachAllNonImageFilesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AttachAllNonImageFilesModule.cs,DoWork,The length of the statement  "                if ((!Regex.Match(thisFileInfo.Name' Settings.Resources.Files_To_Exclude_From_Downloads' RegexOptions.IgnoreCase).Success) && (String.Compare(thisFileInfo.Name' Resource.BibID + "_" + Resource.VID + ".html"' StringComparison.OrdinalIgnoreCase) != 0)) " is 250.
Long Statement,SobekCM.Builder_Library.Modules.Items,AttachAllNonImageFilesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AttachAllNonImageFilesModule.cs,DoWork,The length of the statement  "                    if ((thisFileInfo.Name.IndexOf("marc.xml"' StringComparison.OrdinalIgnoreCase) != 0) && (thisFileInfo.Name.IndexOf("doc.xml"' StringComparison.OrdinalIgnoreCase) != 0) && (thisFileInfo.Name.IndexOf(".mets"' StringComparison.OrdinalIgnoreCase) < 0) && (thisFileInfo.Name.IndexOf("citation_mets.xml"' StringComparison.OrdinalIgnoreCase) < 0) && " is 342.
Long Statement,SobekCM.Builder_Library.Modules.Items,AttachAllNonImageFilesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AttachAllNonImageFilesModule.cs,DoWork,The length of the statement  "                        (thisFileInfo.Name.IndexOf("ufdc_mets.xml"' StringComparison.OrdinalIgnoreCase) < 0) && (thisFileInfo.Name.IndexOf("agreement.txt"' StringComparison.OrdinalIgnoreCase) < 0) && " is 175.
Long Statement,SobekCM.Builder_Library.Modules.Items,AttachAllNonImageFilesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AttachAllNonImageFilesModule.cs,DoWork,The length of the statement  "                        ((thisFileInfo.Name.IndexOf(".xml"' StringComparison.OrdinalIgnoreCase) < 0) || (thisFileInfo.Name.IndexOf(Resource.BibID' StringComparison.OrdinalIgnoreCase) < 0))) " is 165.
Long Statement,SobekCM.Builder_Library.Modules.Items,CheckForSsnModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CheckForSsnModule.cs,DoWork,The length of the statement  "                    Email_Helper.SendEmail(Settings.Email.Privacy_Email' "Possible Social Security Number Located"' "A string which appeared to be a possible social security number was found while bulk loading or post-processing an item.\n\nThe SSN was found in package " + bibID + ":" + vid + " in file '" + ssn_text_file_name + "'.\n\nThe text which may be a SSN is '" + ssn_match + "'.\n\nPlease review this item and remove any private information which should not be on the web server."' false' Settings.System.System_Name); " is 508.
Long Statement,SobekCM.Builder_Library.Modules.Items,CheckForSsnModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CheckForSsnModule.cs,DoWork,The length of the statement  "                OnProcess("Possible SSN Located (" + ssn_text_file_name + ")"' "Privacy Checking"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 170.
Long Statement,SobekCM.Builder_Library.Modules.Items,CleanWebResourceFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CleanWebResourceFolderModule.cs,DoWork,The length of the statement  "                OnProcess("WARNING: Unable to perform final cleanup on web folder"' "Warning"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 166.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 149.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 152.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 145.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 151.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 154.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 157.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 150.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                                    OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 156.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                    StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true); " is 144.
Long Statement,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The length of the statement  "                    OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 143.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "            if (( !String.IsNullOrEmpty(Settings.Archive.Archive_DropBox)) && ((ResourcePackage.Source_Folder.Archive_All_Files) || (ResourcePackage.Source_Folder.Archive_TIFFs))) " is 167.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "               // OnProcess("\t\tCopying files to the archive"' "Copy To Archive"' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' -1); " is 137.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "                if ((ResourcePackage.Source_Folder.Archive_All_Files) || ((tiff_files.Length > 0) && (ResourcePackage.Source_Folder.Archive_TIFFs))) " is 132.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "                                  //  OnProcess("\t\tCopying file ( " + thisFile + " -->" + newFile + ")"' "Copy To Archive"' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' -1); " is 161.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "                              //  OnProcess("\t\tCopying file ( " + thisFile + " -->" + newFile + ")"' "Copy To Archive"' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' -1); " is 161.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "                        OnError("Copy to archive failed for " + ResourcePackage.BibID + ":" + ResourcePackage.VID + "\n" + ee.Message' ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.METS_Type_String' ResourcePackage.BuilderLogId); " is 226.
Long Statement,SobekCM.Builder_Library.Modules.Items,CopyToArchiveFolderModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CopyToArchiveFolderModule.cs,Archive_Any_Files,The length of the statement  "                        OnError(ee.StackTrace' ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.METS_Type_String' ResourcePackage.BuilderLogId); " is 138.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "            string executing_directory = System.IO.Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Replace("file:\\"'""); " is 153.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                    //Dictionary<string' SobekCM_File_Info> names_to_mets_file = new Dictionary<string' SobekCM_File_Info>(StringComparer.OrdinalIgnoreCase); " is 137.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                    Dictionary<string' List<string>> imageRootFiles = new Dictionary<string' List<string>>( StringComparer.OrdinalIgnoreCase ); " is 123.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                        if ((thisImageFile.IndexOf("thm.jpg"' StringComparison.OrdinalIgnoreCase) > 0) && ( Path.GetFileNameWithoutExtension(thisImageFile).Length > 3 )) " is 145.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                    Image_Derivative_Creation_Processor imageProcessor = new Image_Derivative_Creation_Processor(imagemagick_executable' kakadu_directory' true' true' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' false' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' null); " is 296.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                    if (String.Compare(Path.GetFileNameWithoutExtension(theseImageFiles[image_index])' thisImageRoot + "thm"' StringComparison.OrdinalIgnoreCase) == 0) " is 147.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) || " is 122.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 249.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 236.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                imageProcessor.Create_JPEG2000(newest_source_file' name_sans_extension + ".jp2"' resourceFolder' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 157.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                //if (( jpeg_file_lastModTime.HasValue ) && ( jpeg_file_lastModTime.Value.Month == 9 ) && ( jpeg_file_lastModTime.Value.Day == 6 )) " is 131.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                    ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0))) " is 122.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                    //imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' temp_file' -1' -1' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 135.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                    imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 244.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The length of the statement  "                                    imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID); " is 231.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,imageProcessor_Error_Encountered,The length of the statement  "                    Email_Helper.SendEmail(email_address' "Image Derivation Error : " + BibID_VID' "An error was encountered while creating images for the web from the provided files in the SobekCM Builder service.  Processing of this item will be incomplete.\n\n" + NewMessage + "\n\nPlease review this item and correct the issue' most likely by checking the TIFFs and reloading them."' false' Settings.System.System_Name); " is 404.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreatePdfThumbnailModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreatePdfThumbnailModule.cs,DoWork,The length of the statement  "                        PDF_Tools.Create_Thumbnail(resourceFolder' thisPdf' resourceFolder + "\\" + fileName + "thm.jpg"' ghostscript_executable' imagemagick_executable); " is 146.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateStaticVersionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateStaticVersionModule.cs,DoWork,The length of the statement  "            //    staticBuilder = new Static_Pages_Builder(Settings.Application_Server_URL' Settings.Static_Pages_Location' Settings.Application_Server_Network); " is 149.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateStaticVersionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateStaticVersionModule.cs,DoWork,The length of the statement  "            //    string static_file = Resource.Resource_Folder + "\\" + Settings.Backup_Files_Folder_Name + "\\" + Resource.Metadata.BibID + "_" + Resource.Metadata.VID + ".html"; " is 168.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateStaticVersionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateStaticVersionModule.cs,DoWork,The length of the statement  "            //        OnError("Error creating static page for this resource"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 153.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateStaticVersionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateStaticVersionModule.cs,DoWork,The length of the statement  "            //        string web_server_file_version = Settings.Static_Pages_Location + Resource.File_Root + "\\" + Resource.BibID + "_" + Resource.VID + ".html"; " is 150.
Long Statement,SobekCM.Builder_Library.Modules.Items,CreateStaticVersionModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateStaticVersionModule.cs,DoWork,The length of the statement  "            //    OnError("Error creating static page for this resource"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 149.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "            Resource.BuilderLogId = OnProcess("........Processing '" + Resource.Folder_Name + "'"' "Standard"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' -1); " is 167.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "            Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8); " is 209.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "                    string final_folder = Settings.Servers.Image_Server_Network + "\\RECYCLE BIN\\" + Resource.File_Root + "\\" + Resource.VID; " is 123.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "                OnError("Unable to move resource ( " + Resource.BibID + ":" + Resource.VID + " ) to deletes"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 181.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "            string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html"; " is 328.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "            string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html"; " is 306.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "                    Solr_Controller.Delete_Resource_From_Index(Settings.Servers.Document_Solr_Index_URL' Settings.Servers.Page_Solr_Index_URL' Resource.BibID' Resource.VID); " is 153.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "                    OnError("Error deleting item from the Solr/Lucene index.  The index may not reflect this delete."' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 186.
Long Statement,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The length of the statement  "                    OnError("Solr Error: " + ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 124.
Long Statement,SobekCM.Builder_Library.Modules.Items,EnsureMainThumbnailModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\EnsureMainThumbnailModule.cs,DoWork,The length of the statement  "                ((Resource.Metadata.Behaviors.Main_Thumbnail.IndexOf("http:") < 0) && (!File.Exists(Path.Combine(Resource.Resource_Folder' Resource.Metadata.Behaviors.Main_Thumbnail))))) " is 170.
Long Statement,SobekCM.Builder_Library.Modules.Items,EnsureMainThumbnailModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\EnsureMainThumbnailModule.cs,DoWork,The length of the statement  "                                        File.Copy(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "images\\multimedia.jpg")' Path.Combine(Resource.Resource_Folder' "multimediathm.jpg")' true); " is 178.
Long Statement,SobekCM.Builder_Library.Modules.Items,ExtractTextFromXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ExtractTextFromXmlModule.cs,DoWork,The length of the statement  "                if ((xml_upper.IndexOf(".METS") < 0) && (xml_upper != "DOC.XML") && (xml_upper != "CITATION_METS.XML") && (xml_upper != "MARC.XML")) " is 132.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The length of the statement  "            Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2); " is 212.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The length of the statement  "                OnError("Error moving some files to the image server for " + Resource.BibID + ":" + Resource.VID' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 185.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The length of the statement  "            string recd_filename = "recd_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + ".mets.bak"; " is 171.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The length of the statement  "                File.Move(ResourcePackage.Resource_Folder + "\\" + ResourcePackage.BibID + "_" + ResourcePackage.VID + ".mets"' ResourcePackage.Resource_Folder + "\\" + recd_filename); " is 168.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The length of the statement  "            if (File.Exists(ResourcePackage.Resource_Folder + "\\" + ResourcePackage.BibID + "_" + ResourcePackage.VID + ".mets.xml")) " is 122.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The length of the statement  "                File.Move(ResourcePackage.Resource_Folder + "\\" + ResourcePackage.BibID + "_" + ResourcePackage.VID + ".mets.xml"' ResourcePackage.Resource_Folder + "\\" + recd_filename); " is 172.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The length of the statement  "                File.Move(ResourcePackage.Resource_Folder + "\\" + ResourcePackage.BibID + ".mets"' ResourcePackage.Resource_Folder + "\\" + recd_filename); " is 140.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The length of the statement  "                File.Move(ResourcePackage.Resource_Folder + "\\" + ResourcePackage.BibID + ".mets.xml"' ResourcePackage.Resource_Folder + "\\" + recd_filename); " is 144.
Long Statement,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Move_All_Files_To_Image_Server,The length of the statement  "                        File.Copy(ServerPackageFolder + "\\" + ResourcePackage.BibID + "_" + ResourcePackage.VID + ".mets.xml"' ServerPackageFolder + "\\" + ResourcePackage.BibID + "_" + ResourcePackage.VID + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_" + DateTime.Now.Day + ".mets.bak"' true); " is 282.
Long Statement,SobekCM.Builder_Library.Modules.Items,OcrTiffsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\OcrTiffsModule.cs,DoWork,The length of the statement  "                            OnError("Error launching OCR on (" + thisTiffFileInfo.Name + ")"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 153.
Long Statement,SobekCM.Builder_Library.Modules.Items,ReloadMetsAndBasicDbInfoModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ReloadMetsAndBasicDbInfoModule.cs,DoWork,The length of the statement  "                OnError("Error reading most recent METS file from " + Resource.BibID + ":" + Resource.VID' Resource.BibID + ":" + Resource.VID' String.Empty' Resource.BuilderLogId); " is 165.
Long Statement,SobekCM.Builder_Library.Modules.Items,ReloadMetsAndBasicDbInfoModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ReloadMetsAndBasicDbInfoModule.cs,DoWork,The length of the statement  "                RightsMD_Info rightsInfo = Resource.Metadata.Get_Metadata_Module(GlobalVar.PALMM_RIGHTSMD_METADATA_MODULE_KEY) as RightsMD_Info; " is 128.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Cataloging Source Code"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Cataloging_Source_Code; " is 146.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Location Code"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Location_Code; " is 128.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Reproduction Agency"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Reproduction_Agency; " is 140.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC Reproduction Place"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.Reproduction_Place; " is 138.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                    options["MarcXML_File_ReaderWriter:MARC XSLT File"] = Engine_ApplicationCache_Gateway.Settings.MarcGeneration.XSLT_File; " is 120.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                options["MarcXML_File_ReaderWriter:System Abbreviation"] = Engine_ApplicationCache_Gateway.Settings.System.System_Abbreviation; " is 127.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                if (!marcWriter.Write_Metadata(Resource.Metadata.Source_Directory + "\\marc.xml"' Resource.Metadata' options' out errorMessage)) " is 128.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                    OnError("Error while saving the MarcXML : " + errorMessage' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 147.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveMarcXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveMarcXmlModule.cs,DoWork,The length of the statement  "                OnError("Exception caught while saving the MarcXML : " + ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 156.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveServiceMetsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveServiceMetsModule.cs,DoWork,The length of the statement  "                OnError("Exception caught while saving the SobekCM service METS : " + ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 169.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveToDatabaseModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToDatabaseModule.cs,DoWork,The length of the statement  "                OnError("Error saving data to SobekCM database.  The database may not reflect the most recent data in the METS."' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 201.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveToSolrLuceneModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToSolrLuceneModule.cs,DoWork,The length of the statement  "                if (((!Resource.Metadata.Behaviors.IP_Restriction_Membership_Is_Null) && (Resource.Metadata.Behaviors.IP_Restriction_Membership < 0)) || " is 136.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveToSolrLuceneModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToSolrLuceneModule.cs,DoWork,The length of the statement  "                    Solr_Controller.Delete_Resource_From_Index(Settings.Servers.Document_Solr_Index_URL' Settings.Servers.Page_Solr_Index_URL' Resource.BibID' Resource.VID); " is 153.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveToSolrLuceneModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToSolrLuceneModule.cs,DoWork,The length of the statement  "                    Solr_Controller.Update_Index(Settings.Servers.Document_Solr_Index_URL' Settings.Servers.Page_Solr_Index_URL' Resource.Metadata' true); " is 134.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveToSolrLuceneModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToSolrLuceneModule.cs,DoWork,The length of the statement  "                    OnError("Error saving data to the Solr/Lucene index.  The index may not reflect the most recent data in the METS."' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 203.
Long Statement,SobekCM.Builder_Library.Modules.Items,SaveToSolrLuceneModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToSolrLuceneModule.cs,DoWork,The length of the statement  "                    OnError("Solr Error: " + ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 124.
Long Statement,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The length of the statement  "                JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte()); " is 139.
Long Statement,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The length of the statement  "                JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte()); " is 138.
Long Statement,SobekCM.Builder_Library.Modules.Items,UpdateWebConfigModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateWebConfigModule.cs,DoWork,The length of the statement  "                        writer.WriteLine("                 <add ipAddress=\"" + Settings.Servers.SobekCM_Web_Server_IP.Trim() + "\" allowed=\"true\" />"); " is 130.
Long Statement,SobekCM.Builder_Library.Modules.Items,UpdateWebConfigModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateWebConfigModule.cs,DoWork,The length of the statement  "                    if ((Resource.Metadata.Behaviors.Main_Thumbnail.Length > 0) && (Resource.Metadata.Behaviors.Main_Thumbnail.IndexOf("http:") < 0)) " is 129.
Long Statement,SobekCM.Builder_Library.Modules.Items,UpdateWebConfigModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateWebConfigModule.cs,DoWork,The length of the statement  "                OnError("Unable to update the resource web.config file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId); " is 144.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                    OnError("CalculateUsageStatisticsModule : IIS web log directory ( " + log_directory + " ) does not exists or is inaccessible"' null' null' -1); " is 143.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                OnError("CalculateUsageStatisticsModule : IIS web log directory ( " + log_directory + " ) does not exists or is inaccessible : " + ee.Message' null' null' -1); " is 159.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "            string temporary_workspace = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' "Temporary"' "CalculateUsageStatisticsModule"); " is 159.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                OnError("CalculateUsageStatisticsModule : Unable to create the temporary workspace ( " + temporary_workspace + " ) : " + ee.Message' null' null' -1); " is 149.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                OnError("CalculateUsageStatisticsModule : Error caught clearing existing files from the temporary workspace ( " + temporary_workspace + " ) : " + ee.Message' null' null' -1); " is 174.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                    OnError("CalculateUsageStatisticsModule : Web application server network directory ( " + sobekcm_directory + " ) does not exists or is inaccessible"' null' null' -1); " is 166.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                OnError("CalculateUsageStatisticsModule : Web application server network  ( " + sobekcm_directory + " ) does not exists or is inaccessible : " + ee.Message' null' null' -1); " is 173.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                OnError("CalculateUsageStatisticsModule : No IIS web logs found in directory  ( " + log_directory + " )"' null' null' -1); " is 122.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1); " is 154.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                    if (( curr_year > statsDates.Latest_Year ) || (( curr_year == statsDates.Latest_Year ) && ( curr_month > statsDates.Latest_Month ))) " is 132.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "            SobekCM_Stats_Reader_Processor processor = new SobekCM_Stats_Reader_Processor(log_directory' temporary_workspace' sobekcm_directory' year_month); " is 145.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The length of the statement  "                    Send_Usage_Emails(year' month' Settings.Servers.System_Base_URL' Settings.System.System_Name' Settings.Email.Setup.DefaultFromAddress' Settings.Email.Setup.DefaultFromDisplay ); " is 177.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The length of the statement  "                if (Usage_Stats_Email_Helper.Send_Individual_Usage_Email(userid' name' email' year' month' 10' SystemUrl' SystemName' fromAddr)) " is 128.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,ExpireOldLogEntriesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\ExpireOldLogEntriesModule.cs,DoWork,The length of the statement  "            //Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Expiring old log entries"' String.Empty); " is 130.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,ExpireOldLogEntriesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\ExpireOldLogEntriesModule.cs,DoWork,The length of the statement  "            //Library.Database.SobekCM_Database.Builder_Expire_Log_Entries(InstanceWide_Settings_Singleton.Settings.Builder_Log_Expiration_Days); " is 133.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,RebuildAllAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\RebuildAllAggregationBrowsesModule.cs,DoWork,The length of the statement  "            //long staticRebuildLogId = Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Rebuilding all static pages"' String.Empty); " is 159.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,RebuildAllAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\RebuildAllAggregationBrowsesModule.cs,DoWork,The length of the statement  "            //Static_Pages_Builder builder = new Static_Pages_Builder(InstanceWide_Settings_Singleton.Settings.Application_Server_URL' InstanceWide_Settings_Singleton.Settings.Static_Pages_Location' InstanceWide_Settings_Singleton.Settings.Application_Server_Network); " is 256.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,RebuildAllAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\RebuildAllAggregationBrowsesModule.cs,DoWork,The length of the statement  "            //builder.Rebuild_All_Static_Pages(preloader_logger' false' InstanceWide_Settings_Singleton.Settings.Local_Log_Directory' dbInstance.Name' staticRebuildLogId); " is 159.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,SendNewItemEmailsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\SendNewItemEmailsModule.cs,DoWork,The length of the statement  "            //        DataRow[] selected = institutions.Select("InstitutionCode = '" + thisInstitution + "' and Load_Email_Notification=1"); " is 128.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,SendNewItemEmailsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\SendNewItemEmailsModule.cs,DoWork,The length of the statement  "            //        bodyBuilder.AppendLine("Los siguientes artículos' que usted mandó' están disponibles en línea a través de " + software + ".<br />"); " is 142.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,SendNewItemEmailsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\SendNewItemEmailsModule.cs,DoWork,The length of the statement  "            //        bodyBuilder.AppendLine("This is an automatic email.  Please do not respond to this email.  For any issues please contact " + help_email + ".<br />"); " is 159.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,SendNewItemEmailsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\SendNewItemEmailsModule.cs,DoWork,The length of the statement  "            //        bodyBuilder.AppendLine("Este correo se mandó automáticamente. Por favor no conteste este correo. Si usted tiene alguna pregunta o problema por favor mande un correo a " + help_email + ".<br />"); " is 205.
Long Statement,SobekCM.Builder_Library.Modules.Schedulable,SendNewItemEmailsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\SendNewItemEmailsModule.cs,DoWork,The length of the statement  "            //        bodyBuilder.AppendLine("Ceci est une réponse automatique. Veuillez ne pas répondre à ce message.  Envoyez-vos enquêtes directement à " + help_email + ".<br />"); " is 171.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,Read_Config,The length of the statement  "                    MultiInstance_Builder_Settings.Add_Error("WARNING: Configuration file read successfully' but no instance configurations were found in the file."); " is 146.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,Read_Config,The length of the statement  "                MultiInstance_Builder_Settings.Add_Error("EXCEPTION! Unexpected exception caught while trying to read the buidler configuration file"); " is 135.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_legacy_instance_config,The length of the statement  "                            singleInstance.Microservices.Add_Endpoint("Builder.Get_Builder_Settings"' "[BASEURL]/engine/builder/settings/protobuf?IncludeDescs={0}"' Microservice_Endpoint_Protocol_Enum.PROTOBUF); " is 183.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_legacy_instance_config,The length of the statement  "                            singleInstance.Microservices.Add_Endpoint("Configuration.Extensions"' "[BASEURL]/engine/config/extensions/protobuf"' Microservice_Endpoint_Protocol_Enum.PROTOBUF); " is 163.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_legacy_instance_config,The length of the statement  "                            singleInstance.Microservices.Add_Endpoint("Configuration.Metadata"' "[BASEURL]/engine/config/metadata/protobuf"' Microservice_Endpoint_Protocol_Enum.PROTOBUF); " is 159.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_legacy_instance_config,The length of the statement  "                            singleInstance.Microservices.Add_Endpoint("Configuration.OAI_PMH"' "[BASEURL]/engine/config/oaipmh/protobuf"' Microservice_Endpoint_Protocol_Enum.PROTOBUF); " is 156.
Long Statement,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_instances,The length of the statement  "                            MicroservicesClient_Config_Reader.Read_Microservices_Client_Details(ReaderXml.ReadSubtree()' singleInstance.Microservices' String.Empty); " is 137.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The length of the statement  "                            if ((!String.IsNullOrEmpty(preSetting.Argument1)) || (!String.IsNullOrEmpty(preSetting.Argument2)) || (!String.IsNullOrEmpty(preSetting.Argument3))) " is 148.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The length of the statement  "                        if ((!String.IsNullOrEmpty(preSetting.Argument1)) || (!String.IsNullOrEmpty(preSetting.Argument2)) || (!String.IsNullOrEmpty(preSetting.Argument3))) " is 148.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The length of the statement  "                            if ((!String.IsNullOrEmpty(postSetting.Argument1)) || (!String.IsNullOrEmpty(postSetting.Argument2)) || (!String.IsNullOrEmpty(postSetting.Argument3))) " is 151.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The length of the statement  "                        if ((!String.IsNullOrEmpty(postSetting.Argument1)) || (!String.IsNullOrEmpty(postSetting.Argument2)) || (!String.IsNullOrEmpty(postSetting.Argument3))) " is 151.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The length of the statement  "                                if ((!String.IsNullOrEmpty(folderSetting.Argument1)) || (!String.IsNullOrEmpty(folderSetting.Argument2)) || (!String.IsNullOrEmpty(folderSetting.Argument3))) " is 157.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The length of the statement  "                                if ((!String.IsNullOrEmpty(folderSetting.Argument1)) || (!String.IsNullOrEmpty(folderSetting.Argument2)) || (!String.IsNullOrEmpty(folderSetting.Argument3))) " is 157.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Submission_Module,The length of the statement  "                    if ((!String.IsNullOrEmpty(ItemSetting.Argument1)) || (!String.IsNullOrEmpty(ItemSetting.Argument2)) || (!String.IsNullOrEmpty(ItemSetting.Argument3))) " is 151.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Submission_Module,The length of the statement  "                ErrorMessage = ItemSetting.Class + " loaded from assembly but does not implement the ISubmissionPackageModules interface!"; " is 123.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Submission_Module,The length of the statement  "            if ((!String.IsNullOrEmpty(ItemSetting.Argument1)) || (!String.IsNullOrEmpty(ItemSetting.Argument2)) || (!String.IsNullOrEmpty(ItemSetting.Argument3))) " is 151.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Module,The length of the statement  "                    if ((assembly_network.IndexOf(".dll"' StringComparison.InvariantCultureIgnoreCase) < 0) && ( File.Exists(assembly_network + ".dl;l"))) " is 134.
Long Statement,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Module,The length of the statement  "                        if (assembly_name.IndexOf(".dll"' StringComparison.InvariantCultureIgnoreCase) < 0) assembly_name = assembly_name + ".dll"; " is 123.
Long Statement,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The length of the statement  "                                        string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid; " is 179.
Long Statement,SobekCM.Builder_Library.Tools,HTML_XML_Text_Extractor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\HTML_XML_Text_Extractor.cs,Extract_Text,The length of the statement  "                            outFile.WriteLine(possibleLine.Replace("&amp;"' "&").Replace("&quot;"' "\"").Replace("&gt;"' ">").Replace("&lt;"' "<")); " is 120.
Long Statement,SobekCM.Builder_Library.Tools,MarcXML_Load_Creator,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\MarcXML_Load_Creator.cs,Create_MarcXML_Data_File,The length of the statement  "            DataTable endecaItemList = Test_Feed_Flag ? SobekCM_Database.MarcXML_Test_Feed_Records : SobekCM_Database.MarcXML_Production_Feed_Records; " is 138.
Long Statement,SobekCM.Builder_Library.Tools,MarcXML_Load_Creator,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\MarcXML_Load_Creator.cs,Create_MarcXML_Data_File,The length of the statement  "                        string marc_xml = server_root1 + thisRow["File_Location"].ToString().Replace("/"' "\\") + "\\" + this_vid + "\\marc.xml"; " is 121.
Long Statement,SobekCM.Builder_Library.Tools,MarcXML_Load_Creator,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\MarcXML_Load_Creator.cs,MyValidationEventHandler,The length of the statement  "            error_messages.Add("Line " + Args.Exception.LineNumber + " : " + Args.Exception.LinePosition + " " + Args.Message + "\r\n"); " is 124.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Create_Thumbnail,The length of the statement  "                Process ghostScriptProcess = new Process {StartInfo = {FileName = Ghostscript_Exectuable' Arguments = "-q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dFirstPage=1 -dLastPage=1 -dMaxBitmap=500000000 -dGraphicsTextBits=1 -dTextAlphaBits=1 -sDEVICE=jpeg -sOutputFile=\"" + Working_Directory + "\\temp_builder.jpg\" \"" + PDF_In_Name + "\""' CreateNoWindow = true}}; " is 364.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Create_Thumbnail,The length of the statement  "                Process imageMagickProcess = new Process {StartInfo = {FileName = ImageMagick_Executable' Arguments = "\"" + Working_Directory + "\\temp_builder.jpg\" -resize 150x250 \"" + JPEG_Out_Name + "\""' CreateNoWindow = true}}; " is 219.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The length of the statement  "                                if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' ')) " is 130.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The length of the statement  "                                    if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' ')) " is 130.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The length of the statement  "                                        if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' ')) " is 130.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The length of the statement  "                            if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' ')) " is 130.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The length of the statement  "                                                    if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' ')) " is 130.
Long Statement,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The length of the statement  "                        if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' ')) " is 130.
Long Statement,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Word_To_PDF,The length of the statement  "            //1 - Can't open input file. Check that you are using full local path to input file' URL and relative path are not supported " is 124.
Long Statement,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Word_To_PDF,The length of the statement  "            //2 - Can't create output file. Please check that you have permissions to write by this path or probably this path already used by another application " is 150.
Long Statement,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Word_To_PDF,The length of the statement  "            //4 - MS Office isn't installed. The component requires that any of these versions of MS Office should be installed: 2000' XP' 2003' 2007 or 2010 " is 145.
Long Statement,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Powerpoint_To_PDF,The length of the statement  "            //1 - Can't open input file. Check that you are using full local path to input file' URL and relative path are not supported " is 124.
Long Statement,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Powerpoint_To_PDF,The length of the statement  "            //2 - Can't create output file. Please check that you have permissions to write by this path or probably this path already used by another application " is 150.
Long Statement,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Powerpoint_To_PDF,The length of the statement  "            //4 - MS Office isn't installed. The component requires that any of these versions of MS Office should be installed: 2000' XP' 2003' 2007 or 2010 " is 145.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "            long updatedId = OnProcess("....Performing some aggregation update functions"' "Aggregation Updates"' String.Empty' String.Empty' -1); " is 134.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "            Static_Pages_Builder staticBuilder = new Static_Pages_Builder(Settings.Servers.Application_Server_URL' Settings.Servers.Static_Pages_Location' Settings.Servers.Application_Server_Network); " is 188.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                        Item_Aggregation aggregationObj = Item_Aggregation_Utilities.Get_Item_Aggregation(aggregationCompleteObj' Engine_ApplicationCache_Gateway.Settings.System.Default_UI_Language' null); " is 181.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                        OnProcess("........Building XML item list for " + display_code' "Aggregation Updates"' String.Empty' String.Empty' updatedId); " is 126.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                            OnError("........Error in building XML list for " + display_code + " on " + Settings.Servers.Static_Pages_Location + "\n" + ee.Message' String.Empty' String.Empty' updatedId); " is 175.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                        OnProcess("........Building RSS feed for " + display_code' "Aggregation Updates"' String.Empty' String.Empty' updatedId); " is 121.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                                File.Copy(Path.Combine(localWorkArea' thisAggrCode.ToLower() + "_rss.xml")' Settings.Servers.Static_Pages_Location + "\\rss\\" + thisAggrCode.ToLower() + "_rss.xml"' true); " is 172.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                                File.Copy(Path.Combine(localWorkArea' thisAggrCode.ToLower() + "_short_rss.xml")' Settings.Servers.Static_Pages_Location + "\\rss\\" + thisAggrCode.ToLower() + "_short_rss.xml"' true); " is 184.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                               // OnError("........Error in copying RSS feed for " + display_code + " to " + Settings.Servers.Static_Pages_Location + "\n" + ee.Message' String.Empty' String.Empty' updatedId); " is 177.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                           // OnError("........Error in building RSS feed for " + display_code + "\n" + ee.Message' String.Empty' String.Empty' updatedId); " is 128.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                        OnProcess("........Building static HTML browse page of links for " + display_code' "Aggregation Updates"' String.Empty' String.Empty' updatedId); " is 145.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                                File.Copy(Path.Combine(localWorkArea' thisAggrCode.ToLower() + "_rss.xml")' Settings.Servers.Static_Pages_Location + "\\rss\\" + thisAggrCode.ToLower() + "_rss.xml"' true); " is 172.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                                File.Copy(Path.Combine(localWorkArea' thisAggrCode.ToLower() + "_short_rss.xml")' Settings.Servers.Static_Pages_Location + "\\rss\\" + thisAggrCode.ToLower() + "_short_rss.xml"' true); " is 184.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                                OnError("........Error in copying RSS feed for " + display_code + " to " + Settings.Servers.Static_Pages_Location + "\n" + ee.Message' String.Empty' String.Empty' updatedId); " is 174.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The length of the statement  "                            OnError("........Error in building RSS feed for " + display_code + "\n" + ee.Message' String.Empty' String.Empty' updatedId); " is 125.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "            OnProcess("........Building XML list for all digital resources"' "Aggregation Updates"' String.Empty' String.Empty' Builderid); " is 127.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                        OnError("........Error in building XML list for all digital resources on " + Settings.Servers.Static_Pages_Location + "\n" + ee.Message' String.Empty' String.Empty' Builderid); " is 176.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                OnError("........Error in building XML list for all digital resources\n" + ee.Message' String.Empty' String.Empty' Builderid); " is 126.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                OnProcess("........Building RSS feed for all digital resources"' "Aggregation Updates"' String.Empty' String.Empty' Builderid); " is 127.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                    File.Copy(Path.Combine(WorkSpaceDirectory' "all_rss.xml")' Path.Combine(Settings.Servers.Static_Pages_Location' "rss"' "all_rss.xml")' true); " is 141.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                    File.Copy(Path.Combine(WorkSpaceDirectory' "all_short_rss.xml")' Path.Combine(Settings.Servers.Static_Pages_Location' "rss"' "all_short_rss.xml")' true); " is 153.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                    OnError("........Error in copying RSS feed for all digital resources to " + Settings.Servers.Static_Pages_Location + "\n" + ee.Message' String.Empty' String.Empty' Builderid); " is 175.
Long Statement,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,Recreate_Library_XML_and_RSS,The length of the statement  "                OnError("........Error in building RSS feed for all digital resources\n" + ee.Message' String.Empty' String.Empty' Builderid); " is 126.
Long Statement,SobekCM.Builder_Library.Modules.PreProcess,ProcessPendingFdaReportsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PreProcess\ProcessPendingFdaReportsModule.cs,DoWork,The length of the statement  "            if (( !String.IsNullOrEmpty(Settings.Florida.FDA_Report_DropBox)) && (Directory.Exists(Settings.Florida.FDA_Report_DropBox))) " is 125.
Long Statement,SobekCM.Builder_Library.Modules.PreProcess,ProcessPendingFdaReportsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PreProcess\ProcessPendingFdaReportsModule.cs,DoWork,The length of the statement  "                        OnError("Processed " + fdaProcessor.Success_Count + " FDA reports with " + fdaProcessor.Error_Count + " errors"' String.Empty' String.Empty' -1); " is 145.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The length of the statement  "                            Engine_ApplicationCache_Gateway.Items' Engine_ApplicationCache_Gateway.URL_Portals' Engine_ApplicationCache_Gateway.WebContent_Hierarchy' null); " is 144.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The length of the statement  "                                    returnValue.Add_Institution_Hit(institution.ToLower()' currentMode.Mode' currentMode.Aggregation_Type' thisSession.SessionID); " is 126.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\""); " is 125.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                        Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()' " is 122.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                            thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()' " is 137.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    Engine_Database.Save_Aggregation_Statistics(aggregationHash[code]' year' month' hits' Convert.ToInt32(hierarchyRow["sessions"])' " is 128.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                        Convert.ToInt32(hierarchyRow["home_page_hits"])' Convert.ToInt32(hierarchyRow["browse_hits"])' Convert.ToInt32(hierarchyRow["advanced_search_hits"])' " is 149.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    Engine_Database.Save_Aggregation_Statistics(aggregationHash[code]' year' month' hits' Convert.ToInt32(hierarchyRow["sessions"])' " is 128.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                        Convert.ToInt32(hierarchyRow["home_page_hits"])' Convert.ToInt32(hierarchyRow["browse_hits"])' Convert.ToInt32(hierarchyRow["advanced_search_hits"])' " is 149.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    Engine_Database.Save_Item_Group_Statistics(bibHash[hierarchyRow["bibid"].ToString()]' year' month' Convert.ToInt32(hierarchyRow["hits"])' Convert.ToInt32(hierarchyRow["sessions"])' null); " is 187.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    Convert.ToInt32(hierarchyRow["jpeg_hits"])' Convert.ToInt32(hierarchyRow["zoomable_hits"])' Convert.ToInt32(hierarchyRow["citation_hits"])' " is 139.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    Convert.ToInt32(hierarchyRow["thumbnail_hits"])' Convert.ToInt32(hierarchyRow["text_search_hits"])' Convert.ToInt32(hierarchyRow["flash_hits"])' " is 144.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The length of the statement  "                    Convert.ToInt32(hierarchyRow["google_map_hits"])' Convert.ToInt32(hierarchyRow["download_hits"])' Convert.ToInt32(hierarchyRow["static_hits"])' null ); " is 151.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The length of the statement  "            //lookupTables.ReadXml(@"C:\Users\mark.v.sullivan\Documents\Visual Studio 2012\Projects\SobekDbInfoSaver\SobekDbInfoSaver\bin\Release\uf\lookup.xml"); " is 150.
Long Statement,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The length of the statement  "                        string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml"; " is 167.
Complex Conditional,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Worker_Controller,The conditional expression  "(!String.IsNullOrEmpty(gsPath)) && (Directory.Exists(gsPath)) && ((File.Exists(Path.Combine(gsPath' "gswin32c.exe"))) || (File.Exists(Path.Combine(gsPath' "gswin64c.exe"))))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,AddTrackingWorkflowModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AddTrackingWorkflowModule.cs,DoWork,The conditional expression  "(!Resource.Metadata.Tracking.Born_Digital_Is_Null) && (Resource.Metadata.Tracking.Born_Digital) && (Resource.Metadata.Behaviors.IP_Restriction_Membership >= 0) && (Resource.Metadata.Divisions.Download_Tree.Has_Files)"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,AttachAllNonImageFilesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AttachAllNonImageFilesModule.cs,DoWork,The conditional expression  "(thisFileInfo.Name.IndexOf("marc.xml"' StringComparison.OrdinalIgnoreCase) != 0) && (thisFileInfo.Name.IndexOf("doc.xml"' StringComparison.OrdinalIgnoreCase) != 0) && (thisFileInfo.Name.IndexOf(".mets"' StringComparison.OrdinalIgnoreCase) < 0) && (thisFileInfo.Name.IndexOf("citation_mets.xml"' StringComparison.OrdinalIgnoreCase) < 0) &&                          (thisFileInfo.Name.IndexOf("ufdc_mets.xml"' StringComparison.OrdinalIgnoreCase) < 0) && (thisFileInfo.Name.IndexOf("agreement.txt"' StringComparison.OrdinalIgnoreCase) < 0) &&                          ((thisFileInfo.Name.IndexOf(".xml"' StringComparison.OrdinalIgnoreCase) < 0) || (thisFileInfo.Name.IndexOf(Resource.BibID' StringComparison.OrdinalIgnoreCase) < 0))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The conditional expression  "((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg2000_file_lastModTime.HasValue) || (jpeg2000_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The conditional expression  "((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)) ||                                      ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,ExtractTextFromXmlModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ExtractTextFromXmlModule.cs,DoWork,The conditional expression  "(xml_upper.IndexOf(".METS") < 0) && (xml_upper != "DOC.XML") && (xml_upper != "CITATION_METS.XML") && (xml_upper != "MARC.XML")"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,SaveToSolrLuceneModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToSolrLuceneModule.cs,DoWork,The conditional expression  "((!Resource.Metadata.Behaviors.IP_Restriction_Membership_Is_Null) && (Resource.Metadata.Behaviors.IP_Restriction_Membership < 0)) ||                      ((!Resource.Metadata.Behaviors.Dark_Flag_Is_Null) && (Resource.Metadata.Behaviors.Dark_Flag))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The conditional expression  "(previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114)"  is complex.
Complex Conditional,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The conditional expression  "(count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81)"  is complex.
Complex Conditional,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The conditional expression  "((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The conditional expression  "((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The conditional expression  "(Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The conditional expression  "(Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Tools,Text_Cleaner,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Text_Cleaner.cs,Clean_Text_File,The conditional expression  "(ascii < 169) && (ascii != 152) && (ascii != 158) && ( ascii != 127 )"  is complex.
Complex Conditional,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The conditional expression  "((currentMode.ItemID_DEPRECATED.HasValue ) && ( currentMode.ItemID_DEPRECATED > 0)) ||                                      (( !String.IsNullOrEmpty(currentMode.VID)) && (!String.IsNullOrEmpty(currentMode.BibID)))"  is complex.
Complex Conditional,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,parse_line,The conditional expression  "(stats_line_upper.IndexOf("/SOBEKCM_DATA.ASPX") < 0) &&                   (stats_line_upper.IndexOf("/SOBEKCM_DATA.ASPX") < 0) && (stats_line_upper.IndexOf("/SOBEKCM_OAI.ASPX") < 0) &&                  (stats_line_upper.IndexOf("/SOBEKCM.ASPX") < 0) && (stats_line_upper.IndexOf(".MSI") < 0) &&                  (stats_line_upper.IndexOf(".ZIP") < 0)"  is complex.
Complex Conditional,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_Item_Hit,The conditional expression  "(ViewerCode.IndexOf("FC") >= 0) || (ViewerCode.IndexOf("CITATION") >= 0) ||                      (ViewerCode.IndexOf("MARC") >= 0) || (ViewerCode.IndexOf("TRACKING") >= 0) ||                      (ViewerCode.IndexOf("METADATA") >= 0) || (ViewerCode.IndexOf("USAGE") >= 0)"  is complex.
Empty Catch Block,SobekCM.Builder_Library,Actionable_Builder_Source_Folder,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Actionable_Builder_Source_Folder.cs,Collect_Terminal_Dirs,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,delete_directory,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Move,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,publish_log_file,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.Folders,MoveAgedPackagesToProcessModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\MoveAgedPackagesToProcessModule.cs,DoWork,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Create_Error_Log,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.Items,CheckForSsnModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CheckForSsnModule.cs,DoWork,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.Items,CleanDirtyOcrModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CleanDirtyOcrModule.cs,DoWork,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Tools,HTML_XML_Text_Extractor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\HTML_XML_Text_Extractor.cs,Extract_Text,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Tools,MarcXML_Load_Creator,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\MarcXML_Load_Creator.cs,Create_MarcXML_Data_File,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Create_Thumbnail,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Extract_Text,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Extract_Text,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Modules.PostProcess,BuildAggregationBrowsesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\PostProcess\BuildAggregationBrowsesModule.cs,DoWork,The method has an empty catch block.
Empty Catch Block,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,parse_line,The method has an empty catch block.
Magic Number,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Move,The following statement contains a magic number: try              {                  // Make sure the destination directory exists                  if (!Directory.Exists(DestinationDirectory))                      Directory.CreateDirectory(DestinationDirectory);                    // Determine the new folder for this                  DirectoryInfo dirInfo = new DirectoryInfo(resourceFolder);                  string destFolder = DestinationDirectory + dirInfo.Name;                    // Does this directory appear to be a VID folder' with a BibID folder above it?                  // If so' we will flatten this folder structure                  string thisDirName = dirInfo.Name.ToUpper().Replace("VID"' "");                  if ((thisDirName.Length == 5) && ( SobekCM_Item.is_vids_format(thisDirName)))                  {                      // Is the parent directory is a bibid format' we will flatten this a Bib ID?                      string bibidCheck = Directory.GetParent(resourceFolder).Name;                      if ( SobekCM_Item.is_bibid_format(bibidCheck))                      {                          // Flatten this bibi/vid structure then and make the new destination folder bibid_vid                          destFolder = DestinationDirectory + bibidCheck + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                      }                      else if (bibidCheck.Length == 2)                      {                          // Put in special code for directories dropped in builder from resource folder                          // That is' look for the pair-tree format                          string check = bibidCheck;                          int count = 0;                          while ((Directory.GetParent(bibidCheck) != null) && (count < 4))                          {                              string parent = Directory.GetParent(bibidCheck).Name;                              if (parent.Length != 2)                              {                                  check = String.Empty;                                  break;                              }                                check = check + parent;                              count++;                          }                            if (check.Length == 10)                          {                              destFolder = DestinationDirectory + check + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                           }                      }                  }                    // If the destination directory exists' delete it                  if (Directory.Exists(destFolder))                  {                      Directory.Delete(destFolder' true);                  }                    // Move this directory                  Directory.Move(resourceFolder' destFolder);                  resourceFolder = destFolder;                    // If the parent directory is empty' try to delete it                  string parentDir = resourceFolder;                  while ((Directory.GetParent(parentDir) != null) && (Directory.GetParent(parentDir).GetFiles().Length == 0))                  {                      parentDir = Directory.GetParent(parentDir).FullName;                      try                      {                          Directory.Delete(parentDir);                      }                      catch (Exception)                      {                          // If unable to delete the directory' not the worst thing                      }                  }                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Move,The following statement contains a magic number: try              {                  // Make sure the destination directory exists                  if (!Directory.Exists(DestinationDirectory))                      Directory.CreateDirectory(DestinationDirectory);                    // Determine the new folder for this                  DirectoryInfo dirInfo = new DirectoryInfo(resourceFolder);                  string destFolder = DestinationDirectory + dirInfo.Name;                    // Does this directory appear to be a VID folder' with a BibID folder above it?                  // If so' we will flatten this folder structure                  string thisDirName = dirInfo.Name.ToUpper().Replace("VID"' "");                  if ((thisDirName.Length == 5) && ( SobekCM_Item.is_vids_format(thisDirName)))                  {                      // Is the parent directory is a bibid format' we will flatten this a Bib ID?                      string bibidCheck = Directory.GetParent(resourceFolder).Name;                      if ( SobekCM_Item.is_bibid_format(bibidCheck))                      {                          // Flatten this bibi/vid structure then and make the new destination folder bibid_vid                          destFolder = DestinationDirectory + bibidCheck + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                      }                      else if (bibidCheck.Length == 2)                      {                          // Put in special code for directories dropped in builder from resource folder                          // That is' look for the pair-tree format                          string check = bibidCheck;                          int count = 0;                          while ((Directory.GetParent(bibidCheck) != null) && (count < 4))                          {                              string parent = Directory.GetParent(bibidCheck).Name;                              if (parent.Length != 2)                              {                                  check = String.Empty;                                  break;                              }                                check = check + parent;                              count++;                          }                            if (check.Length == 10)                          {                              destFolder = DestinationDirectory + check + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                           }                      }                  }                    // If the destination directory exists' delete it                  if (Directory.Exists(destFolder))                  {                      Directory.Delete(destFolder' true);                  }                    // Move this directory                  Directory.Move(resourceFolder' destFolder);                  resourceFolder = destFolder;                    // If the parent directory is empty' try to delete it                  string parentDir = resourceFolder;                  while ((Directory.GetParent(parentDir) != null) && (Directory.GetParent(parentDir).GetFiles().Length == 0))                  {                      parentDir = Directory.GetParent(parentDir).FullName;                      try                      {                          Directory.Delete(parentDir);                      }                      catch (Exception)                      {                          // If unable to delete the directory' not the worst thing                      }                  }                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Move,The following statement contains a magic number: try              {                  // Make sure the destination directory exists                  if (!Directory.Exists(DestinationDirectory))                      Directory.CreateDirectory(DestinationDirectory);                    // Determine the new folder for this                  DirectoryInfo dirInfo = new DirectoryInfo(resourceFolder);                  string destFolder = DestinationDirectory + dirInfo.Name;                    // Does this directory appear to be a VID folder' with a BibID folder above it?                  // If so' we will flatten this folder structure                  string thisDirName = dirInfo.Name.ToUpper().Replace("VID"' "");                  if ((thisDirName.Length == 5) && ( SobekCM_Item.is_vids_format(thisDirName)))                  {                      // Is the parent directory is a bibid format' we will flatten this a Bib ID?                      string bibidCheck = Directory.GetParent(resourceFolder).Name;                      if ( SobekCM_Item.is_bibid_format(bibidCheck))                      {                          // Flatten this bibi/vid structure then and make the new destination folder bibid_vid                          destFolder = DestinationDirectory + bibidCheck + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                      }                      else if (bibidCheck.Length == 2)                      {                          // Put in special code for directories dropped in builder from resource folder                          // That is' look for the pair-tree format                          string check = bibidCheck;                          int count = 0;                          while ((Directory.GetParent(bibidCheck) != null) && (count < 4))                          {                              string parent = Directory.GetParent(bibidCheck).Name;                              if (parent.Length != 2)                              {                                  check = String.Empty;                                  break;                              }                                check = check + parent;                              count++;                          }                            if (check.Length == 10)                          {                              destFolder = DestinationDirectory + check + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                           }                      }                  }                    // If the destination directory exists' delete it                  if (Directory.Exists(destFolder))                  {                      Directory.Delete(destFolder' true);                  }                    // Move this directory                  Directory.Move(resourceFolder' destFolder);                  resourceFolder = destFolder;                    // If the parent directory is empty' try to delete it                  string parentDir = resourceFolder;                  while ((Directory.GetParent(parentDir) != null) && (Directory.GetParent(parentDir).GetFiles().Length == 0))                  {                      parentDir = Directory.GetParent(parentDir).FullName;                      try                      {                          Directory.Delete(parentDir);                      }                      catch (Exception)                      {                          // If unable to delete the directory' not the worst thing                      }                  }                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Move,The following statement contains a magic number: try              {                  // Make sure the destination directory exists                  if (!Directory.Exists(DestinationDirectory))                      Directory.CreateDirectory(DestinationDirectory);                    // Determine the new folder for this                  DirectoryInfo dirInfo = new DirectoryInfo(resourceFolder);                  string destFolder = DestinationDirectory + dirInfo.Name;                    // Does this directory appear to be a VID folder' with a BibID folder above it?                  // If so' we will flatten this folder structure                  string thisDirName = dirInfo.Name.ToUpper().Replace("VID"' "");                  if ((thisDirName.Length == 5) && ( SobekCM_Item.is_vids_format(thisDirName)))                  {                      // Is the parent directory is a bibid format' we will flatten this a Bib ID?                      string bibidCheck = Directory.GetParent(resourceFolder).Name;                      if ( SobekCM_Item.is_bibid_format(bibidCheck))                      {                          // Flatten this bibi/vid structure then and make the new destination folder bibid_vid                          destFolder = DestinationDirectory + bibidCheck + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                      }                      else if (bibidCheck.Length == 2)                      {                          // Put in special code for directories dropped in builder from resource folder                          // That is' look for the pair-tree format                          string check = bibidCheck;                          int count = 0;                          while ((Directory.GetParent(bibidCheck) != null) && (count < 4))                          {                              string parent = Directory.GetParent(bibidCheck).Name;                              if (parent.Length != 2)                              {                                  check = String.Empty;                                  break;                              }                                check = check + parent;                              count++;                          }                            if (check.Length == 10)                          {                              destFolder = DestinationDirectory + check + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                           }                      }                  }                    // If the destination directory exists' delete it                  if (Directory.Exists(destFolder))                  {                      Directory.Delete(destFolder' true);                  }                    // Move this directory                  Directory.Move(resourceFolder' destFolder);                  resourceFolder = destFolder;                    // If the parent directory is empty' try to delete it                  string parentDir = resourceFolder;                  while ((Directory.GetParent(parentDir) != null) && (Directory.GetParent(parentDir).GetFiles().Length == 0))                  {                      parentDir = Directory.GetParent(parentDir).FullName;                      try                      {                          Directory.Delete(parentDir);                      }                      catch (Exception)                      {                          // If unable to delete the directory' not the worst thing                      }                  }                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Move,The following statement contains a magic number: try              {                  // Make sure the destination directory exists                  if (!Directory.Exists(DestinationDirectory))                      Directory.CreateDirectory(DestinationDirectory);                    // Determine the new folder for this                  DirectoryInfo dirInfo = new DirectoryInfo(resourceFolder);                  string destFolder = DestinationDirectory + dirInfo.Name;                    // Does this directory appear to be a VID folder' with a BibID folder above it?                  // If so' we will flatten this folder structure                  string thisDirName = dirInfo.Name.ToUpper().Replace("VID"' "");                  if ((thisDirName.Length == 5) && ( SobekCM_Item.is_vids_format(thisDirName)))                  {                      // Is the parent directory is a bibid format' we will flatten this a Bib ID?                      string bibidCheck = Directory.GetParent(resourceFolder).Name;                      if ( SobekCM_Item.is_bibid_format(bibidCheck))                      {                          // Flatten this bibi/vid structure then and make the new destination folder bibid_vid                          destFolder = DestinationDirectory + bibidCheck + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                      }                      else if (bibidCheck.Length == 2)                      {                          // Put in special code for directories dropped in builder from resource folder                          // That is' look for the pair-tree format                          string check = bibidCheck;                          int count = 0;                          while ((Directory.GetParent(bibidCheck) != null) && (count < 4))                          {                              string parent = Directory.GetParent(bibidCheck).Name;                              if (parent.Length != 2)                              {                                  check = String.Empty;                                  break;                              }                                check = check + parent;                              count++;                          }                            if (check.Length == 10)                          {                              destFolder = DestinationDirectory + check + "_" + dirInfo.Name.ToUpper().Replace("VID"' "");                           }                      }                  }                    // If the destination directory exists' delete it                  if (Directory.Exists(destFolder))                  {                      Directory.Delete(destFolder' true);                  }                    // Move this directory                  Directory.Move(resourceFolder' destFolder);                  resourceFolder = destFolder;                    // If the parent directory is empty' try to delete it                  string parentDir = resourceFolder;                  while ((Directory.GetParent(parentDir) != null) && (Directory.GetParent(parentDir).GetFiles().Length == 0))                  {                      parentDir = Directory.GetParent(parentDir).FullName;                      try                      {                          Directory.Delete(parentDir);                      }                      catch (Exception)                      {                          // If unable to delete the directory' not the worst thing                      }                  }                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Worker_BulkLoader,The following statement contains a magic number: if (multiInstanceBuilder)  	            newItemLimit = 100;  	        else  	            newItemLimit = -1;
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Complete_Any_Recent_Loads_Requiring_Additional_Work,The following statement contains a magic number: if ((additionalWorkRequired != null) && (additionalWorkRequired.Rows.Count > 0))              {  	            Add_NonError_To_Log("Processing recently loaded items needing additional work"' "Standard"' String.Empty' String.Empty' -1);                    // Create the incoming digital folder object which will be used for all these                  Actionable_Builder_Source_Folder sourceFolder = new Actionable_Builder_Source_Folder();                    // Step through each one                  foreach (DataRow thisRow in additionalWorkRequired.Rows)                  {                      // Get the information about this item                      string bibID = thisRow["BibID"].ToString();                      string vid = thisRow["VID"].ToString();    	                // Determine the file root for this                      string file_root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2);                        // Determine the source folder for this resource                      string resource_folder = settings.Servers.Image_Server_Network + file_root + "\\" + vid;                        // Determine the METS file name                      string mets_file = resource_folder + "\\" + bibID + "_" + vid + ".mets.xml";                        // Ensure these both exist                      if ((Directory.Exists(resource_folder)) && (File.Exists(mets_file)))                      {                          // Create the incoming digital resource object                          Incoming_Digital_Resource additionalWorkResource = new Incoming_Digital_Resource(resource_folder' sourceFolder)   							{BibID = bibID' VID = vid' File_Root = bibID.Substring(0' 2) + "\\" + bibID.Substring(2' 2) + "\\" + bibID.Substring(4' 2) + "\\" + bibID.Substring(6' 2) + "\\" + bibID.Substring(8' 2)};    	                    Complete_Single_Recent_Load_Requiring_Additional_Work( additionalWorkResource);                      }                      else                      {  	                    Add_Error_To_Log("Unable to find valid resource files for reprocessing " + bibID + ":" + vid' bibID + ":" + vid' "Reprocess"' -1);    	                    int itemID = Library.Database.SobekCM_Database.Get_ItemID_From_Bib_VID(bibID' vid);    						Library.Database.SobekCM_Database.Update_Additional_Work_Needed_Flag(itemID' false' null);                      }                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The following statement contains a magic number: try              {                  // Do all the item processing per instance config                  foreach (iSubmissionPackageModule thisModule in builderModules.ItemProcessModules)                  {                      //if ( superverbose)                      //{                      //    Add_NonError_To_Log("Running module " + thisModule.GetType().ToString()' true' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                      //}                      if (!thisModule.DoWork(ResourcePackage))                      {                          Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                            // Try to move the whole package to the failures folder                          string final_failures_folder = Path.Combine(ResourcePackage.Source_Folder.Failures_Folder' ResourcePackage.BibID + "_" + ResourcePackage.VID);                          if (Directory.Exists(final_failures_folder))                          {                              final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                          }                            try                          {                              Directory.Move(ResourcePackage.Resource_Folder' final_failures_folder);                          }                          catch                          {                                                        }                          return;                      }                  }                    // Save these collections to mark them for refreshing the RSS feeds' etc..                  Add_Process_Info_To_PostProcess_Lists(ResourcePackage.BibID' ResourcePackage.VID' ResourcePackage.Metadata.Behaviors.Aggregation_Code_List);                    // Finally' clear the memory a little bit                  ResourcePackage.Clear_METS();              }              catch (Exception ee)              {                  StreamWriter errorWriter = new StreamWriter(logFileDirectory + "\\error.log"' true);                  errorWriter.WriteLine("Message: " + ee.Message);                  errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                  errorWriter.Flush();                  errorWriter.Close();                    Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId' ee);              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The following statement contains a magic number: try              {                  // Do all the item processing per instance config                  foreach (iSubmissionPackageModule thisModule in builderModules.ItemProcessModules)                  {                      //if ( superverbose)                      //{                      //    Add_NonError_To_Log("Running module " + thisModule.GetType().ToString()' true' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                      //}                      if (!thisModule.DoWork(ResourcePackage))                      {                          Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                            // Try to move the whole package to the failures folder                          string final_failures_folder = Path.Combine(ResourcePackage.Source_Folder.Failures_Folder' ResourcePackage.BibID + "_" + ResourcePackage.VID);                          if (Directory.Exists(final_failures_folder))                          {                              final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                          }                            try                          {                              Directory.Move(ResourcePackage.Resource_Folder' final_failures_folder);                          }                          catch                          {                                                        }                          return;                      }                  }                    // Save these collections to mark them for refreshing the RSS feeds' etc..                  Add_Process_Info_To_PostProcess_Lists(ResourcePackage.BibID' ResourcePackage.VID' ResourcePackage.Metadata.Behaviors.Aggregation_Code_List);                    // Finally' clear the memory a little bit                  ResourcePackage.Clear_METS();              }              catch (Exception ee)              {                  StreamWriter errorWriter = new StreamWriter(logFileDirectory + "\\error.log"' true);                  errorWriter.WriteLine("Message: " + ee.Message);                  errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                  errorWriter.Flush();                  errorWriter.Close();                    Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId' ee);              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The following statement contains a magic number: try              {                  // Do all the item processing per instance config                  foreach (iSubmissionPackageModule thisModule in builderModules.ItemProcessModules)                  {                      //if ( superverbose)                      //{                      //    Add_NonError_To_Log("Running module " + thisModule.GetType().ToString()' true' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                      //}                      if (!thisModule.DoWork(ResourcePackage))                      {                          Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                            // Try to move the whole package to the failures folder                          string final_failures_folder = Path.Combine(ResourcePackage.Source_Folder.Failures_Folder' ResourcePackage.BibID + "_" + ResourcePackage.VID);                          if (Directory.Exists(final_failures_folder))                          {                              final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                          }                            try                          {                              Directory.Move(ResourcePackage.Resource_Folder' final_failures_folder);                          }                          catch                          {                                                        }                          return;                      }                  }                    // Save these collections to mark them for refreshing the RSS feeds' etc..                  Add_Process_Info_To_PostProcess_Lists(ResourcePackage.BibID' ResourcePackage.VID' ResourcePackage.Metadata.Behaviors.Aggregation_Code_List);                    // Finally' clear the memory a little bit                  ResourcePackage.Clear_METS();              }              catch (Exception ee)              {                  StreamWriter errorWriter = new StreamWriter(logFileDirectory + "\\error.log"' true);                  errorWriter.WriteLine("Message: " + ee.Message);                  errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                  errorWriter.Flush();                  errorWriter.Close();                    Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId' ee);              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The following statement contains a magic number: try              {                  // Do all the item processing per instance config                  foreach (iSubmissionPackageModule thisModule in builderModules.ItemProcessModules)                  {                      //if ( superverbose)                      //{                      //    Add_NonError_To_Log("Running module " + thisModule.GetType().ToString()' true' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                      //}                      if (!thisModule.DoWork(ResourcePackage))                      {                          Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                            // Try to move the whole package to the failures folder                          string final_failures_folder = Path.Combine(ResourcePackage.Source_Folder.Failures_Folder' ResourcePackage.BibID + "_" + ResourcePackage.VID);                          if (Directory.Exists(final_failures_folder))                          {                              final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                          }                            try                          {                              Directory.Move(ResourcePackage.Resource_Folder' final_failures_folder);                          }                          catch                          {                                                        }                          return;                      }                  }                    // Save these collections to mark them for refreshing the RSS feeds' etc..                  Add_Process_Info_To_PostProcess_Lists(ResourcePackage.BibID' ResourcePackage.VID' ResourcePackage.Metadata.Behaviors.Aggregation_Code_List);                    // Finally' clear the memory a little bit                  ResourcePackage.Clear_METS();              }              catch (Exception ee)              {                  StreamWriter errorWriter = new StreamWriter(logFileDirectory + "\\error.log"' true);                  errorWriter.WriteLine("Message: " + ee.Message);                  errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                  errorWriter.Flush();                  errorWriter.Close();                    Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId' ee);              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_Single_Incoming_Package,The following statement contains a magic number: try              {                  // Do all the item processing per instance config                  foreach (iSubmissionPackageModule thisModule in builderModules.ItemProcessModules)                  {                      //if ( superverbose)                      //{                      //    Add_NonError_To_Log("Running module " + thisModule.GetType().ToString()' true' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                      //}                      if (!thisModule.DoWork(ResourcePackage))                      {                          Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId);                            // Try to move the whole package to the failures folder                          string final_failures_folder = Path.Combine(ResourcePackage.Source_Folder.Failures_Folder' ResourcePackage.BibID + "_" + ResourcePackage.VID);                          if (Directory.Exists(final_failures_folder))                          {                              final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                          }                            try                          {                              Directory.Move(ResourcePackage.Resource_Folder' final_failures_folder);                          }                          catch                          {                                                        }                          return;                      }                  }                    // Save these collections to mark them for refreshing the RSS feeds' etc..                  Add_Process_Info_To_PostProcess_Lists(ResourcePackage.BibID' ResourcePackage.VID' ResourcePackage.Metadata.Behaviors.Aggregation_Code_List);                    // Finally' clear the memory a little bit                  ResourcePackage.Clear_METS();              }              catch (Exception ee)              {                  StreamWriter errorWriter = new StreamWriter(logFileDirectory + "\\error.log"' true);                  errorWriter.WriteLine("Message: " + ee.Message);                  errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                  errorWriter.Flush();                  errorWriter.Close();                    Add_Error_To_Log("Unable to complete new/replacement for " + ResourcePackage.BibID + ":" + ResourcePackage.VID' ResourcePackage.BibID + ":" + ResourcePackage.VID' String.Empty' ResourcePackage.BuilderLogId' ee);              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The following statement contains a magic number: foreach (Incoming_Digital_Resource deleteResource in Deletes)              {                  // Check for abort                  if (CheckForAbort())                  {                      Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;                      return;                  }                    // Save these collections to mark them for search index building                  Add_Delete_Info_To_PostProcess_Lists(deleteResource.BibID' deleteResource.VID' deleteResource.Metadata.Behaviors.Aggregation_Code_List);                    // Only continue if this bibid/vid exists                  if (Engine_Database.Get_Item_Information(deleteResource.BibID' deleteResource.VID' null) != null)                  {                      // Do all the item processing per instance config                      foreach (iSubmissionPackageModule thisModule in builderModules.DeleteItemModules)                      {                          if (!thisModule.DoWork(deleteResource))                          {                              Add_Error_To_Log("Unable to complete delete for " + deleteResource.BibID + ":" + deleteResource.VID' deleteResource.BibID + ":" + deleteResource.VID' String.Empty' deleteResource.BuilderLogId);                                // Try to move the whole package to the failures folder                              string final_failures_folder = Path.Combine(deleteResource.Source_Folder.Failures_Folder' deleteResource.BibID + "_" + deleteResource.VID);                              if (Directory.Exists(final_failures_folder))                              {                                  final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                              }                                try                              {                                  Directory.Move(deleteResource.Resource_Folder' final_failures_folder);                              }                              catch                              {                                  // Do nothing if not able to move?                              }                              return;                          }                      }                  }                  else                  {                      Add_Error_To_Log("Delete ( " + deleteResource.BibID + ":" + deleteResource.VID + " ) invalid... no pre-existing resource"' deleteResource.BibID + ":" + deleteResource.VID' deleteResource.METS_Type_String' deleteResource.BuilderLogId);                        // Finally' clear the memory a little bit                      deleteResource.Clear_METS();                        // Delete the handled METS file and package                      deleteResource.Delete();                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The following statement contains a magic number: foreach (Incoming_Digital_Resource deleteResource in Deletes)              {                  // Check for abort                  if (CheckForAbort())                  {                      Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;                      return;                  }                    // Save these collections to mark them for search index building                  Add_Delete_Info_To_PostProcess_Lists(deleteResource.BibID' deleteResource.VID' deleteResource.Metadata.Behaviors.Aggregation_Code_List);                    // Only continue if this bibid/vid exists                  if (Engine_Database.Get_Item_Information(deleteResource.BibID' deleteResource.VID' null) != null)                  {                      // Do all the item processing per instance config                      foreach (iSubmissionPackageModule thisModule in builderModules.DeleteItemModules)                      {                          if (!thisModule.DoWork(deleteResource))                          {                              Add_Error_To_Log("Unable to complete delete for " + deleteResource.BibID + ":" + deleteResource.VID' deleteResource.BibID + ":" + deleteResource.VID' String.Empty' deleteResource.BuilderLogId);                                // Try to move the whole package to the failures folder                              string final_failures_folder = Path.Combine(deleteResource.Source_Folder.Failures_Folder' deleteResource.BibID + "_" + deleteResource.VID);                              if (Directory.Exists(final_failures_folder))                              {                                  final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                              }                                try                              {                                  Directory.Move(deleteResource.Resource_Folder' final_failures_folder);                              }                              catch                              {                                  // Do nothing if not able to move?                              }                              return;                          }                      }                  }                  else                  {                      Add_Error_To_Log("Delete ( " + deleteResource.BibID + ":" + deleteResource.VID + " ) invalid... no pre-existing resource"' deleteResource.BibID + ":" + deleteResource.VID' deleteResource.METS_Type_String' deleteResource.BuilderLogId);                        // Finally' clear the memory a little bit                      deleteResource.Clear_METS();                        // Delete the handled METS file and package                      deleteResource.Delete();                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The following statement contains a magic number: foreach (Incoming_Digital_Resource deleteResource in Deletes)              {                  // Check for abort                  if (CheckForAbort())                  {                      Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;                      return;                  }                    // Save these collections to mark them for search index building                  Add_Delete_Info_To_PostProcess_Lists(deleteResource.BibID' deleteResource.VID' deleteResource.Metadata.Behaviors.Aggregation_Code_List);                    // Only continue if this bibid/vid exists                  if (Engine_Database.Get_Item_Information(deleteResource.BibID' deleteResource.VID' null) != null)                  {                      // Do all the item processing per instance config                      foreach (iSubmissionPackageModule thisModule in builderModules.DeleteItemModules)                      {                          if (!thisModule.DoWork(deleteResource))                          {                              Add_Error_To_Log("Unable to complete delete for " + deleteResource.BibID + ":" + deleteResource.VID' deleteResource.BibID + ":" + deleteResource.VID' String.Empty' deleteResource.BuilderLogId);                                // Try to move the whole package to the failures folder                              string final_failures_folder = Path.Combine(deleteResource.Source_Folder.Failures_Folder' deleteResource.BibID + "_" + deleteResource.VID);                              if (Directory.Exists(final_failures_folder))                              {                                  final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                              }                                try                              {                                  Directory.Move(deleteResource.Resource_Folder' final_failures_folder);                              }                              catch                              {                                  // Do nothing if not able to move?                              }                              return;                          }                      }                  }                  else                  {                      Add_Error_To_Log("Delete ( " + deleteResource.BibID + ":" + deleteResource.VID + " ) invalid... no pre-existing resource"' deleteResource.BibID + ":" + deleteResource.VID' deleteResource.METS_Type_String' deleteResource.BuilderLogId);                        // Finally' clear the memory a little bit                      deleteResource.Clear_METS();                        // Delete the handled METS file and package                      deleteResource.Delete();                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The following statement contains a magic number: foreach (Incoming_Digital_Resource deleteResource in Deletes)              {                  // Check for abort                  if (CheckForAbort())                  {                      Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;                      return;                  }                    // Save these collections to mark them for search index building                  Add_Delete_Info_To_PostProcess_Lists(deleteResource.BibID' deleteResource.VID' deleteResource.Metadata.Behaviors.Aggregation_Code_List);                    // Only continue if this bibid/vid exists                  if (Engine_Database.Get_Item_Information(deleteResource.BibID' deleteResource.VID' null) != null)                  {                      // Do all the item processing per instance config                      foreach (iSubmissionPackageModule thisModule in builderModules.DeleteItemModules)                      {                          if (!thisModule.DoWork(deleteResource))                          {                              Add_Error_To_Log("Unable to complete delete for " + deleteResource.BibID + ":" + deleteResource.VID' deleteResource.BibID + ":" + deleteResource.VID' String.Empty' deleteResource.BuilderLogId);                                // Try to move the whole package to the failures folder                              string final_failures_folder = Path.Combine(deleteResource.Source_Folder.Failures_Folder' deleteResource.BibID + "_" + deleteResource.VID);                              if (Directory.Exists(final_failures_folder))                              {                                  final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                              }                                try                              {                                  Directory.Move(deleteResource.Resource_Folder' final_failures_folder);                              }                              catch                              {                                  // Do nothing if not able to move?                              }                              return;                          }                      }                  }                  else                  {                      Add_Error_To_Log("Delete ( " + deleteResource.BibID + ":" + deleteResource.VID + " ) invalid... no pre-existing resource"' deleteResource.BibID + ":" + deleteResource.VID' deleteResource.METS_Type_String' deleteResource.BuilderLogId);                        // Finally' clear the memory a little bit                      deleteResource.Clear_METS();                        // Delete the handled METS file and package                      deleteResource.Delete();                  }              }
Magic Number,SobekCM.Builder_Library,Worker_BulkLoader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_BulkLoader.cs,Process_All_Deletes,The following statement contains a magic number: foreach (Incoming_Digital_Resource deleteResource in Deletes)              {                  // Check for abort                  if (CheckForAbort())                  {                      Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;                      return;                  }                    // Save these collections to mark them for search index building                  Add_Delete_Info_To_PostProcess_Lists(deleteResource.BibID' deleteResource.VID' deleteResource.Metadata.Behaviors.Aggregation_Code_List);                    // Only continue if this bibid/vid exists                  if (Engine_Database.Get_Item_Information(deleteResource.BibID' deleteResource.VID' null) != null)                  {                      // Do all the item processing per instance config                      foreach (iSubmissionPackageModule thisModule in builderModules.DeleteItemModules)                      {                          if (!thisModule.DoWork(deleteResource))                          {                              Add_Error_To_Log("Unable to complete delete for " + deleteResource.BibID + ":" + deleteResource.VID' deleteResource.BibID + ":" + deleteResource.VID' String.Empty' deleteResource.BuilderLogId);                                // Try to move the whole package to the failures folder                              string final_failures_folder = Path.Combine(deleteResource.Source_Folder.Failures_Folder' deleteResource.BibID + "_" + deleteResource.VID);                              if (Directory.Exists(final_failures_folder))                              {                                  final_failures_folder = final_failures_folder + "_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Hour.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Minute.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Second.ToString().PadLeft(2' '0');                              }                                try                              {                                  Directory.Move(deleteResource.Resource_Folder' final_failures_folder);                              }                              catch                              {                                  // Do nothing if not able to move?                              }                              return;                          }                      }                  }                  else                  {                      Add_Error_To_Log("Delete ( " + deleteResource.BibID + ":" + deleteResource.VID + " ) invalid... no pre-existing resource"' deleteResource.BibID + ":" + deleteResource.VID' deleteResource.METS_Type_String' deleteResource.BuilderLogId);                        // Finally' clear the memory a little bit                      deleteResource.Clear_METS();                        // Delete the handled METS file and package                      deleteResource.Delete();                  }              }
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Worker_Controller,The following statement contains a magic number: try              {                  // Collect list of log files to delete                  List<string> log_files = new List<string>();                  log_files.AddRange(Directory.GetFiles(logFileDirectory' "*.html"));                  log_files.AddRange(Directory.GetFiles(logFileDirectory' "*.log"));                    // Check age of each and delete                  int deleted_logs = 0;                  foreach (string thisLogFile in log_files)                  {                      TimeSpan logFileAge = DateTime.Now.Subtract((new FileInfo(thisLogFile)).LastWriteTime);                      if (logFileAge.TotalDays > 30)                      {                          File.Delete(thisLogFile);                          deleted_logs++;                      }                  }                    // Add a message to the console                  if (deleted_logs > 0)                  {                      Console.WriteLine("Deleted " + deleted_logs + " log files that were older than 30 days");                  }                }              catch (Exception ee)              {                  Console.WriteLine("ERROR expiring logs older than 30 days: " + ee.Message);                  Console.WriteLine("Execution will continue as non-fatal error");              }
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: int time_between_polls = Engine_ApplicationCache_Gateway.Settings.Builder.Override_Seconds_Between_Polls.HasValue ? Engine_ApplicationCache_Gateway.Settings.Builder.Override_Seconds_Between_Polls.Value : 60;
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: string log_name = "incoming_" + controllerStarted.Year + "_" + controllerStarted.Month.ToString().PadLeft(2' '0') + "_" + controllerStarted.Day.ToString().PadLeft(2' '0') + ".html";
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: string log_name = "incoming_" + controllerStarted.Year + "_" + controllerStarted.Month.ToString().PadLeft(2' '0') + "_" + controllerStarted.Day.ToString().PadLeft(2' '0') + ".html";
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: feedNextBuildTime = DateTime.Now.Add(new TimeSpan(0' 10' 0));
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: if (loaders.Count > 1)                  MultiInstance_Builder_Settings.Instance_Package_Limit = 100;
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: do              {  				// Is it time to build any RSS/XML feeds?  				if (DateTime.Compare(DateTime.Now' feedNextBuildTime) >= 0)  				{  					feedNextBuildTime = DateTime.Now.Add(new TimeSpan(0' 10' 0));  				}                    bool skip_sleep = false;    				// Step through each instance  				for (int i = 0; i < loaders.Count; i++)  				{  					if (loaders[i] != null)  					{                          // Get the instance                          Single_Instance_Configuration dbInstance = instances[i];    						// Set the database connection strings  					    Engine_Database.Connection_String = dbInstance.DatabaseConnection.Connection_String;                          SobekCM_Item_Database.Connection_String = dbInstance.DatabaseConnection.Connection_String;  						Library.Database.SobekCM_Database.Connection_String = dbInstance.DatabaseConnection.Connection_String;    						// Look for abort  						if (CheckForAbort())                          {  							aborted = true;  							if (Abort_Database_Mechanism.Builder_Operation_Flag != Builder_Operation_Flag_Enum.NO_BUILDING_REQUESTED)  							{  								abort_flag = Builder_Operation_Flag_Enum.LAST_EXECUTION_ABORTED;  								Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;  							}  							break;  						}    						// Refresh all settings' etc..  						loaders[i].Refresh_Settings_And_Item_List();    						// Pull the abort/pause flag  						Builder_Operation_Flag_Enum currentPauseFlag = Abort_Database_Mechanism.Builder_Operation_Flag;    						// If not paused' run the prebuilder  						if (currentPauseFlag != Builder_Operation_Flag_Enum.PAUSE_REQUESTED)  						{  							if (firstRun)  							{    								//    // Always build an endeca feed first (so it occurs once a day)  								//    if (Engine_ApplicationCache_Gateway.Settings.Build_MARC_Feed_By_Default)  								//    {  								//        Create_Complete_MarcXML_Feed(false);  								//    }  								//}  								  								// CLear the old logs  								Console.WriteLine(dbInstance.Name + " - Expiring old log entries");  								preloader_logger.AddNonError(dbInstance.Name + " - Expiring old log entries");  								Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Expiring old log entries"' String.Empty);  								Library.Database.SobekCM_Database.Builder_Expire_Log_Entries(Engine_ApplicationCache_Gateway.Settings.Builder.Log_Expiration_Days);    								// Rebuild all the static pages  								Console.WriteLine(dbInstance.Name + " - Rebuilding all static pages");  								preloader_logger.AddNonError(dbInstance.Name + " - Rebuilding all static pages");  								long staticRebuildLogId = Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Rebuilding all static pages"' String.Empty);                                    Static_Pages_Builder builder = new Static_Pages_Builder(Engine_ApplicationCache_Gateway.Settings.Servers.Application_Server_URL' Engine_ApplicationCache_Gateway.Settings.Servers.Static_Pages_Location' Engine_ApplicationCache_Gateway.URL_Portals.Default_Portal.Default_Web_Skin);  								builder.Rebuild_All_Static_Pages(preloader_logger' false' dbInstance.Name' staticRebuildLogId);    							}                                skip_sleep = skip_sleep || Run_BulkLoader(loaders[i]' verbose);    							// Look for abort  							if ((!aborted) && (CheckForAbort()))  							{  								aborted = true;  								if (Abort_Database_Mechanism.Builder_Operation_Flag != Builder_Operation_Flag_Enum.NO_BUILDING_REQUESTED)  								{  									abort_flag = Builder_Operation_Flag_Enum.LAST_EXECUTION_ABORTED;  									Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;  								}  								break;  							}  						}  						else  						{  							preloader_logger.AddNonError( dbInstance.Name +  " - Building paused");  							Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Building temporarily PAUSED"' String.Empty);  						}  					}  				}    	            if (aborted)  		            break;      				// No longer the first run  				firstRun = false;    				// Publish the log  	            publish_log_file(local_log_name);                    // Sleep for correct number of milliseconds                  if ( !skip_sleep )                      Thread.Sleep(1000 * time_between_polls);                  } while (DateTime.Now.Hour < BULK_LOADER_END_HOUR);
Magic Number,SobekCM.Builder_Library,Worker_Controller,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Worker_Controller.cs,Execute_In_Background,The following statement contains a magic number: do              {  				// Is it time to build any RSS/XML feeds?  				if (DateTime.Compare(DateTime.Now' feedNextBuildTime) >= 0)  				{  					feedNextBuildTime = DateTime.Now.Add(new TimeSpan(0' 10' 0));  				}                    bool skip_sleep = false;    				// Step through each instance  				for (int i = 0; i < loaders.Count; i++)  				{  					if (loaders[i] != null)  					{                          // Get the instance                          Single_Instance_Configuration dbInstance = instances[i];    						// Set the database connection strings  					    Engine_Database.Connection_String = dbInstance.DatabaseConnection.Connection_String;                          SobekCM_Item_Database.Connection_String = dbInstance.DatabaseConnection.Connection_String;  						Library.Database.SobekCM_Database.Connection_String = dbInstance.DatabaseConnection.Connection_String;    						// Look for abort  						if (CheckForAbort())                          {  							aborted = true;  							if (Abort_Database_Mechanism.Builder_Operation_Flag != Builder_Operation_Flag_Enum.NO_BUILDING_REQUESTED)  							{  								abort_flag = Builder_Operation_Flag_Enum.LAST_EXECUTION_ABORTED;  								Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;  							}  							break;  						}    						// Refresh all settings' etc..  						loaders[i].Refresh_Settings_And_Item_List();    						// Pull the abort/pause flag  						Builder_Operation_Flag_Enum currentPauseFlag = Abort_Database_Mechanism.Builder_Operation_Flag;    						// If not paused' run the prebuilder  						if (currentPauseFlag != Builder_Operation_Flag_Enum.PAUSE_REQUESTED)  						{  							if (firstRun)  							{    								//    // Always build an endeca feed first (so it occurs once a day)  								//    if (Engine_ApplicationCache_Gateway.Settings.Build_MARC_Feed_By_Default)  								//    {  								//        Create_Complete_MarcXML_Feed(false);  								//    }  								//}  								  								// CLear the old logs  								Console.WriteLine(dbInstance.Name + " - Expiring old log entries");  								preloader_logger.AddNonError(dbInstance.Name + " - Expiring old log entries");  								Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Expiring old log entries"' String.Empty);  								Library.Database.SobekCM_Database.Builder_Expire_Log_Entries(Engine_ApplicationCache_Gateway.Settings.Builder.Log_Expiration_Days);    								// Rebuild all the static pages  								Console.WriteLine(dbInstance.Name + " - Rebuilding all static pages");  								preloader_logger.AddNonError(dbInstance.Name + " - Rebuilding all static pages");  								long staticRebuildLogId = Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Rebuilding all static pages"' String.Empty);                                    Static_Pages_Builder builder = new Static_Pages_Builder(Engine_ApplicationCache_Gateway.Settings.Servers.Application_Server_URL' Engine_ApplicationCache_Gateway.Settings.Servers.Static_Pages_Location' Engine_ApplicationCache_Gateway.URL_Portals.Default_Portal.Default_Web_Skin);  								builder.Rebuild_All_Static_Pages(preloader_logger' false' dbInstance.Name' staticRebuildLogId);    							}                                skip_sleep = skip_sleep || Run_BulkLoader(loaders[i]' verbose);    							// Look for abort  							if ((!aborted) && (CheckForAbort()))  							{  								aborted = true;  								if (Abort_Database_Mechanism.Builder_Operation_Flag != Builder_Operation_Flag_Enum.NO_BUILDING_REQUESTED)  								{  									abort_flag = Builder_Operation_Flag_Enum.LAST_EXECUTION_ABORTED;  									Abort_Database_Mechanism.Builder_Operation_Flag = Builder_Operation_Flag_Enum.ABORTING;  								}  								break;  							}  						}  						else  						{  							preloader_logger.AddNonError( dbInstance.Name +  " - Building paused");  							Library.Database.SobekCM_Database.Builder_Add_Log_Entry(-1' String.Empty' "Standard"' "Building temporarily PAUSED"' String.Empty);  						}  					}  				}    	            if (aborted)  		            break;      				// No longer the first run  				firstRun = false;    				// Publish the log  	            publish_log_file(local_log_name);                    // Sleep for correct number of milliseconds                  if ( !skip_sleep )                      Thread.Sleep(1000 * time_between_polls);                  } while (DateTime.Now.Hour < BULK_LOADER_END_HOUR);
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The following statement contains a magic number: try              {                  // Only continue if the processing folder exists and has subdirectories                  if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0))                  {                      // Get the list of all packages in the processing folder                      if (Settings.Builder.Verbose_Flag)                          OnProcess("....Validate packages for " + BuilderFolder.Folder_Name' "Verbose"' String.Empty' String.Empty' -1);                        List<Incoming_Digital_Resource> packages = BuilderFolder.Packages_For_Processing;                      if (packages.Count > 0)                      {                          // Create the METS validation objects                          if (thisMetsValidator == null)                          {                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("ValidateAndClassifyModule.Constructor: Created Validators"' "Verbose"' String.Empty' String.Empty' -1);                                thisMetsValidator = new SobekCM_METS_Validator(String.Empty);                              metsSchemeValidator = new METS_Validator_Object(false);                          }                            // Step through each package                          foreach (Incoming_Digital_Resource resource in packages)                          {                              // Validate the categorize the package                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("........Checking '" + resource.Folder_Name + "'"' "Verbose"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                // If there is no METS file' use special code to check this                              if (Directory.GetFiles(resource.Resource_Folder' "*.mets*").Length == 0)                              {                                  DirectoryInfo noMetsDirInfo = new DirectoryInfo(resource.Resource_Folder);                                  string vid = noMetsDirInfo.Name;                                  if (noMetsDirInfo.Parent != null) // Should never be null                                  {                                      string bibid = noMetsDirInfo.Parent.Name;                                      if ((vid.Length == 16) && (vid[10] == '_'))                                      {                                          bibid = vid.Substring(0' 10);                                          vid = vid.Substring(11' 5);                                      }                                        // Is this allowed in this incomnig folder?                                      if (BuilderFolder.Allow_Folders_No_Metadata)                                      {                                          if (itemTable == null)                                          {                                              DataSet itemListFromDb = SobekCM_Database.Get_Item_List(true' null);                                                // Reload the settings                                              if (itemListFromDb == null)                                              {                                                  OnError("ValidateAndClassifyModule : Unable to pull the item table from the database"' String.Empty' String.Empty' -1);                                                  return;                                              }                                                // Save the item table                                              itemTable = itemListFromDb.Tables[0];                                          }                                              DataRow[] selected = itemTable.Select("BibID='" + bibid + "' and VID='" + vid + "'");                                          if (selected.Length > 0)                                          {                                              resource.BibID = bibid;                                              resource.VID = vid;                                              resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.FOLDER_OF_FILES;                                              IncomingPackages.Add(resource);                                          }                                          else                                          {                                              OnError("METS-less folder is not a valid BibID/VID combination"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                                // Move this resource                                              if (!resource.Move(BuilderFolder.Failures_Folder))                                              {                                                  OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                              }                                          }                                      }                                      else                                      {                                          OnError("METS-less folders are not allowed in " + BuilderFolder.Folder_Name' bibid + ":" + vid' "NONE"' -1);                                            // Move this resource                                          if (!resource.Move(BuilderFolder.Failures_Folder))                                          {                                              OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                          }                                      }                                  }                              }                              else                              {                                  long validateId = OnProcess("....Validating METS file for " + resource.Folder_Name' "Folder Process"' resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1);                                  string validation_errors = Validate_and_Read_METS(resource' thisMetsValidator' metsSchemeValidator);                                    // Save any errors to the main log                                  if (validation_errors.Length > 0)                                  {                                      // Save the validation errors to the main log                                      Save_Validation_Errors_To_Log(validation_errors' resource.Source_Folder.Folder_Name.Replace("_"' ":")' validateId);                                        // Move this resource                                      if (!resource.Move(BuilderFolder.Failures_Folder))                                      {                                          OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                      }                                  }                                  else                                  {                                      // Categorize remaining packages by type                                      switch (resource.Resource_Type)                                      {                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE:                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE:                                              IncomingPackages.Add(resource);                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE:                                              if (BuilderFolder.Allow_Metadata_Updates)                                              {                                                  IncomingPackages.Add(resource);                                              }                                              else                                              {                                                  OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE:                                              if (BuilderFolder.Allow_Deletes)                                              {                                                  Deletes.Add(resource);                                              }                                              else                                              {                                                  OnError("Delete is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "DELETE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                      }                                  }                              }                                // If the maximum number of (incoming' non-delete) packages has now been met' no need to classify anymore                              if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit))                              {                                  OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1);                                  return;                              }                          }                      }                  }                }              catch (Exception ee)              {                  OnError("Error in harvesting packages from processing : " + ee.Message + "\n" + ee.StackTrace ' String.Empty' String.Empty' -1);              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The following statement contains a magic number: try              {                  // Only continue if the processing folder exists and has subdirectories                  if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0))                  {                      // Get the list of all packages in the processing folder                      if (Settings.Builder.Verbose_Flag)                          OnProcess("....Validate packages for " + BuilderFolder.Folder_Name' "Verbose"' String.Empty' String.Empty' -1);                        List<Incoming_Digital_Resource> packages = BuilderFolder.Packages_For_Processing;                      if (packages.Count > 0)                      {                          // Create the METS validation objects                          if (thisMetsValidator == null)                          {                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("ValidateAndClassifyModule.Constructor: Created Validators"' "Verbose"' String.Empty' String.Empty' -1);                                thisMetsValidator = new SobekCM_METS_Validator(String.Empty);                              metsSchemeValidator = new METS_Validator_Object(false);                          }                            // Step through each package                          foreach (Incoming_Digital_Resource resource in packages)                          {                              // Validate the categorize the package                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("........Checking '" + resource.Folder_Name + "'"' "Verbose"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                // If there is no METS file' use special code to check this                              if (Directory.GetFiles(resource.Resource_Folder' "*.mets*").Length == 0)                              {                                  DirectoryInfo noMetsDirInfo = new DirectoryInfo(resource.Resource_Folder);                                  string vid = noMetsDirInfo.Name;                                  if (noMetsDirInfo.Parent != null) // Should never be null                                  {                                      string bibid = noMetsDirInfo.Parent.Name;                                      if ((vid.Length == 16) && (vid[10] == '_'))                                      {                                          bibid = vid.Substring(0' 10);                                          vid = vid.Substring(11' 5);                                      }                                        // Is this allowed in this incomnig folder?                                      if (BuilderFolder.Allow_Folders_No_Metadata)                                      {                                          if (itemTable == null)                                          {                                              DataSet itemListFromDb = SobekCM_Database.Get_Item_List(true' null);                                                // Reload the settings                                              if (itemListFromDb == null)                                              {                                                  OnError("ValidateAndClassifyModule : Unable to pull the item table from the database"' String.Empty' String.Empty' -1);                                                  return;                                              }                                                // Save the item table                                              itemTable = itemListFromDb.Tables[0];                                          }                                              DataRow[] selected = itemTable.Select("BibID='" + bibid + "' and VID='" + vid + "'");                                          if (selected.Length > 0)                                          {                                              resource.BibID = bibid;                                              resource.VID = vid;                                              resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.FOLDER_OF_FILES;                                              IncomingPackages.Add(resource);                                          }                                          else                                          {                                              OnError("METS-less folder is not a valid BibID/VID combination"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                                // Move this resource                                              if (!resource.Move(BuilderFolder.Failures_Folder))                                              {                                                  OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                              }                                          }                                      }                                      else                                      {                                          OnError("METS-less folders are not allowed in " + BuilderFolder.Folder_Name' bibid + ":" + vid' "NONE"' -1);                                            // Move this resource                                          if (!resource.Move(BuilderFolder.Failures_Folder))                                          {                                              OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                          }                                      }                                  }                              }                              else                              {                                  long validateId = OnProcess("....Validating METS file for " + resource.Folder_Name' "Folder Process"' resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1);                                  string validation_errors = Validate_and_Read_METS(resource' thisMetsValidator' metsSchemeValidator);                                    // Save any errors to the main log                                  if (validation_errors.Length > 0)                                  {                                      // Save the validation errors to the main log                                      Save_Validation_Errors_To_Log(validation_errors' resource.Source_Folder.Folder_Name.Replace("_"' ":")' validateId);                                        // Move this resource                                      if (!resource.Move(BuilderFolder.Failures_Folder))                                      {                                          OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                      }                                  }                                  else                                  {                                      // Categorize remaining packages by type                                      switch (resource.Resource_Type)                                      {                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE:                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE:                                              IncomingPackages.Add(resource);                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE:                                              if (BuilderFolder.Allow_Metadata_Updates)                                              {                                                  IncomingPackages.Add(resource);                                              }                                              else                                              {                                                  OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE:                                              if (BuilderFolder.Allow_Deletes)                                              {                                                  Deletes.Add(resource);                                              }                                              else                                              {                                                  OnError("Delete is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "DELETE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                      }                                  }                              }                                // If the maximum number of (incoming' non-delete) packages has now been met' no need to classify anymore                              if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit))                              {                                  OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1);                                  return;                              }                          }                      }                  }                }              catch (Exception ee)              {                  OnError("Error in harvesting packages from processing : " + ee.Message + "\n" + ee.StackTrace ' String.Empty' String.Empty' -1);              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The following statement contains a magic number: try              {                  // Only continue if the processing folder exists and has subdirectories                  if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0))                  {                      // Get the list of all packages in the processing folder                      if (Settings.Builder.Verbose_Flag)                          OnProcess("....Validate packages for " + BuilderFolder.Folder_Name' "Verbose"' String.Empty' String.Empty' -1);                        List<Incoming_Digital_Resource> packages = BuilderFolder.Packages_For_Processing;                      if (packages.Count > 0)                      {                          // Create the METS validation objects                          if (thisMetsValidator == null)                          {                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("ValidateAndClassifyModule.Constructor: Created Validators"' "Verbose"' String.Empty' String.Empty' -1);                                thisMetsValidator = new SobekCM_METS_Validator(String.Empty);                              metsSchemeValidator = new METS_Validator_Object(false);                          }                            // Step through each package                          foreach (Incoming_Digital_Resource resource in packages)                          {                              // Validate the categorize the package                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("........Checking '" + resource.Folder_Name + "'"' "Verbose"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                // If there is no METS file' use special code to check this                              if (Directory.GetFiles(resource.Resource_Folder' "*.mets*").Length == 0)                              {                                  DirectoryInfo noMetsDirInfo = new DirectoryInfo(resource.Resource_Folder);                                  string vid = noMetsDirInfo.Name;                                  if (noMetsDirInfo.Parent != null) // Should never be null                                  {                                      string bibid = noMetsDirInfo.Parent.Name;                                      if ((vid.Length == 16) && (vid[10] == '_'))                                      {                                          bibid = vid.Substring(0' 10);                                          vid = vid.Substring(11' 5);                                      }                                        // Is this allowed in this incomnig folder?                                      if (BuilderFolder.Allow_Folders_No_Metadata)                                      {                                          if (itemTable == null)                                          {                                              DataSet itemListFromDb = SobekCM_Database.Get_Item_List(true' null);                                                // Reload the settings                                              if (itemListFromDb == null)                                              {                                                  OnError("ValidateAndClassifyModule : Unable to pull the item table from the database"' String.Empty' String.Empty' -1);                                                  return;                                              }                                                // Save the item table                                              itemTable = itemListFromDb.Tables[0];                                          }                                              DataRow[] selected = itemTable.Select("BibID='" + bibid + "' and VID='" + vid + "'");                                          if (selected.Length > 0)                                          {                                              resource.BibID = bibid;                                              resource.VID = vid;                                              resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.FOLDER_OF_FILES;                                              IncomingPackages.Add(resource);                                          }                                          else                                          {                                              OnError("METS-less folder is not a valid BibID/VID combination"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                                // Move this resource                                              if (!resource.Move(BuilderFolder.Failures_Folder))                                              {                                                  OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                              }                                          }                                      }                                      else                                      {                                          OnError("METS-less folders are not allowed in " + BuilderFolder.Folder_Name' bibid + ":" + vid' "NONE"' -1);                                            // Move this resource                                          if (!resource.Move(BuilderFolder.Failures_Folder))                                          {                                              OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                          }                                      }                                  }                              }                              else                              {                                  long validateId = OnProcess("....Validating METS file for " + resource.Folder_Name' "Folder Process"' resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1);                                  string validation_errors = Validate_and_Read_METS(resource' thisMetsValidator' metsSchemeValidator);                                    // Save any errors to the main log                                  if (validation_errors.Length > 0)                                  {                                      // Save the validation errors to the main log                                      Save_Validation_Errors_To_Log(validation_errors' resource.Source_Folder.Folder_Name.Replace("_"' ":")' validateId);                                        // Move this resource                                      if (!resource.Move(BuilderFolder.Failures_Folder))                                      {                                          OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                      }                                  }                                  else                                  {                                      // Categorize remaining packages by type                                      switch (resource.Resource_Type)                                      {                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE:                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE:                                              IncomingPackages.Add(resource);                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE:                                              if (BuilderFolder.Allow_Metadata_Updates)                                              {                                                  IncomingPackages.Add(resource);                                              }                                              else                                              {                                                  OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE:                                              if (BuilderFolder.Allow_Deletes)                                              {                                                  Deletes.Add(resource);                                              }                                              else                                              {                                                  OnError("Delete is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "DELETE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                      }                                  }                              }                                // If the maximum number of (incoming' non-delete) packages has now been met' no need to classify anymore                              if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit))                              {                                  OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1);                                  return;                              }                          }                      }                  }                }              catch (Exception ee)              {                  OnError("Error in harvesting packages from processing : " + ee.Message + "\n" + ee.StackTrace ' String.Empty' String.Empty' -1);              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The following statement contains a magic number: try              {                  // Only continue if the processing folder exists and has subdirectories                  if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0))                  {                      // Get the list of all packages in the processing folder                      if (Settings.Builder.Verbose_Flag)                          OnProcess("....Validate packages for " + BuilderFolder.Folder_Name' "Verbose"' String.Empty' String.Empty' -1);                        List<Incoming_Digital_Resource> packages = BuilderFolder.Packages_For_Processing;                      if (packages.Count > 0)                      {                          // Create the METS validation objects                          if (thisMetsValidator == null)                          {                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("ValidateAndClassifyModule.Constructor: Created Validators"' "Verbose"' String.Empty' String.Empty' -1);                                thisMetsValidator = new SobekCM_METS_Validator(String.Empty);                              metsSchemeValidator = new METS_Validator_Object(false);                          }                            // Step through each package                          foreach (Incoming_Digital_Resource resource in packages)                          {                              // Validate the categorize the package                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("........Checking '" + resource.Folder_Name + "'"' "Verbose"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                // If there is no METS file' use special code to check this                              if (Directory.GetFiles(resource.Resource_Folder' "*.mets*").Length == 0)                              {                                  DirectoryInfo noMetsDirInfo = new DirectoryInfo(resource.Resource_Folder);                                  string vid = noMetsDirInfo.Name;                                  if (noMetsDirInfo.Parent != null) // Should never be null                                  {                                      string bibid = noMetsDirInfo.Parent.Name;                                      if ((vid.Length == 16) && (vid[10] == '_'))                                      {                                          bibid = vid.Substring(0' 10);                                          vid = vid.Substring(11' 5);                                      }                                        // Is this allowed in this incomnig folder?                                      if (BuilderFolder.Allow_Folders_No_Metadata)                                      {                                          if (itemTable == null)                                          {                                              DataSet itemListFromDb = SobekCM_Database.Get_Item_List(true' null);                                                // Reload the settings                                              if (itemListFromDb == null)                                              {                                                  OnError("ValidateAndClassifyModule : Unable to pull the item table from the database"' String.Empty' String.Empty' -1);                                                  return;                                              }                                                // Save the item table                                              itemTable = itemListFromDb.Tables[0];                                          }                                              DataRow[] selected = itemTable.Select("BibID='" + bibid + "' and VID='" + vid + "'");                                          if (selected.Length > 0)                                          {                                              resource.BibID = bibid;                                              resource.VID = vid;                                              resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.FOLDER_OF_FILES;                                              IncomingPackages.Add(resource);                                          }                                          else                                          {                                              OnError("METS-less folder is not a valid BibID/VID combination"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                                // Move this resource                                              if (!resource.Move(BuilderFolder.Failures_Folder))                                              {                                                  OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                              }                                          }                                      }                                      else                                      {                                          OnError("METS-less folders are not allowed in " + BuilderFolder.Folder_Name' bibid + ":" + vid' "NONE"' -1);                                            // Move this resource                                          if (!resource.Move(BuilderFolder.Failures_Folder))                                          {                                              OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                          }                                      }                                  }                              }                              else                              {                                  long validateId = OnProcess("....Validating METS file for " + resource.Folder_Name' "Folder Process"' resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1);                                  string validation_errors = Validate_and_Read_METS(resource' thisMetsValidator' metsSchemeValidator);                                    // Save any errors to the main log                                  if (validation_errors.Length > 0)                                  {                                      // Save the validation errors to the main log                                      Save_Validation_Errors_To_Log(validation_errors' resource.Source_Folder.Folder_Name.Replace("_"' ":")' validateId);                                        // Move this resource                                      if (!resource.Move(BuilderFolder.Failures_Folder))                                      {                                          OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                      }                                  }                                  else                                  {                                      // Categorize remaining packages by type                                      switch (resource.Resource_Type)                                      {                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE:                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE:                                              IncomingPackages.Add(resource);                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE:                                              if (BuilderFolder.Allow_Metadata_Updates)                                              {                                                  IncomingPackages.Add(resource);                                              }                                              else                                              {                                                  OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE:                                              if (BuilderFolder.Allow_Deletes)                                              {                                                  Deletes.Add(resource);                                              }                                              else                                              {                                                  OnError("Delete is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "DELETE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                      }                                  }                              }                                // If the maximum number of (incoming' non-delete) packages has now been met' no need to classify anymore                              if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit))                              {                                  OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1);                                  return;                              }                          }                      }                  }                }              catch (Exception ee)              {                  OnError("Error in harvesting packages from processing : " + ee.Message + "\n" + ee.StackTrace ' String.Empty' String.Empty' -1);              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The following statement contains a magic number: try              {                  // Only continue if the processing folder exists and has subdirectories                  if ((Directory.Exists(BuilderFolder.Processing_Folder)) && (Directory.GetDirectories(BuilderFolder.Processing_Folder).Length > 0))                  {                      // Get the list of all packages in the processing folder                      if (Settings.Builder.Verbose_Flag)                          OnProcess("....Validate packages for " + BuilderFolder.Folder_Name' "Verbose"' String.Empty' String.Empty' -1);                        List<Incoming_Digital_Resource> packages = BuilderFolder.Packages_For_Processing;                      if (packages.Count > 0)                      {                          // Create the METS validation objects                          if (thisMetsValidator == null)                          {                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("ValidateAndClassifyModule.Constructor: Created Validators"' "Verbose"' String.Empty' String.Empty' -1);                                thisMetsValidator = new SobekCM_METS_Validator(String.Empty);                              metsSchemeValidator = new METS_Validator_Object(false);                          }                            // Step through each package                          foreach (Incoming_Digital_Resource resource in packages)                          {                              // Validate the categorize the package                              if (Settings.Builder.Verbose_Flag)                                  OnProcess("........Checking '" + resource.Folder_Name + "'"' "Verbose"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                // If there is no METS file' use special code to check this                              if (Directory.GetFiles(resource.Resource_Folder' "*.mets*").Length == 0)                              {                                  DirectoryInfo noMetsDirInfo = new DirectoryInfo(resource.Resource_Folder);                                  string vid = noMetsDirInfo.Name;                                  if (noMetsDirInfo.Parent != null) // Should never be null                                  {                                      string bibid = noMetsDirInfo.Parent.Name;                                      if ((vid.Length == 16) && (vid[10] == '_'))                                      {                                          bibid = vid.Substring(0' 10);                                          vid = vid.Substring(11' 5);                                      }                                        // Is this allowed in this incomnig folder?                                      if (BuilderFolder.Allow_Folders_No_Metadata)                                      {                                          if (itemTable == null)                                          {                                              DataSet itemListFromDb = SobekCM_Database.Get_Item_List(true' null);                                                // Reload the settings                                              if (itemListFromDb == null)                                              {                                                  OnError("ValidateAndClassifyModule : Unable to pull the item table from the database"' String.Empty' String.Empty' -1);                                                  return;                                              }                                                // Save the item table                                              itemTable = itemListFromDb.Tables[0];                                          }                                              DataRow[] selected = itemTable.Select("BibID='" + bibid + "' and VID='" + vid + "'");                                          if (selected.Length > 0)                                          {                                              resource.BibID = bibid;                                              resource.VID = vid;                                              resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.FOLDER_OF_FILES;                                              IncomingPackages.Add(resource);                                          }                                          else                                          {                                              OnError("METS-less folder is not a valid BibID/VID combination"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                                // Move this resource                                              if (!resource.Move(BuilderFolder.Failures_Folder))                                              {                                                  OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                              }                                          }                                      }                                      else                                      {                                          OnError("METS-less folders are not allowed in " + BuilderFolder.Folder_Name' bibid + ":" + vid' "NONE"' -1);                                            // Move this resource                                          if (!resource.Move(BuilderFolder.Failures_Folder))                                          {                                              OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                          }                                      }                                  }                              }                              else                              {                                  long validateId = OnProcess("....Validating METS file for " + resource.Folder_Name' "Folder Process"' resource.Folder_Name.Replace("_"' ":")' "UNKNOWN"' -1);                                  string validation_errors = Validate_and_Read_METS(resource' thisMetsValidator' metsSchemeValidator);                                    // Save any errors to the main log                                  if (validation_errors.Length > 0)                                  {                                      // Save the validation errors to the main log                                      Save_Validation_Errors_To_Log(validation_errors' resource.Source_Folder.Folder_Name.Replace("_"' ":")' validateId);                                        // Move this resource                                      if (!resource.Move(BuilderFolder.Failures_Folder))                                      {                                          OnError("Unable to move folder " + resource.Folder_Name + " in " + BuilderFolder.Folder_Name + " to the failures folder"' resource.Folder_Name.Replace("_"' ":")' "NONE"' -1);                                      }                                  }                                  else                                  {                                      // Categorize remaining packages by type                                      switch (resource.Resource_Type)                                      {                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE:                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE:                                              IncomingPackages.Add(resource);                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE:                                              if (BuilderFolder.Allow_Metadata_Updates)                                              {                                                  IncomingPackages.Add(resource);                                              }                                              else                                              {                                                  OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE:                                              if (BuilderFolder.Allow_Deletes)                                              {                                                  Deletes.Add(resource);                                              }                                              else                                              {                                                  OnError("Delete is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "DELETE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                      }                                  }                              }                                // If the maximum number of (incoming' non-delete) packages has now been met' no need to classify anymore                              if ((MultiInstance_Builder_Settings.Instance_Package_Limit > 0) && (IncomingPackages.Count >= MultiInstance_Builder_Settings.Instance_Package_Limit))                              {                                  OnProcess("...Package validation aborted - maximum number of packages ( " + MultiInstance_Builder_Settings.Instance_Package_Limit + " ) reached"' "Verbose"' String.Empty' String.Empty' -1);                                  return;                              }                          }                      }                  }                }              catch (Exception ee)              {                  OnError("Error in harvesting packages from processing : " + ee.Message + "\n" + ee.StackTrace ' String.Empty' String.Empty' -1);              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if ((Resource.Folder_Name.Length == 16) && (Resource.Folder_Name[10] == '_'))              {                  invalid_bibid = Resource.Folder_Name.Substring(0' 10);                  invalid_vid = Resource.Folder_Name.Substring(11' 5);                  bib_vid = invalid_bibid + ":" + invalid_vid;              }              else if (Resource.Folder_Name.Length == 10)              {                  invalid_bibid = Resource.Folder_Name;                  invalid_vid = "none";                  bib_vid = invalid_bibid + ":" + invalid_vid;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if ((Resource.Folder_Name.Length == 16) && (Resource.Folder_Name[10] == '_'))              {                  invalid_bibid = Resource.Folder_Name.Substring(0' 10);                  invalid_vid = Resource.Folder_Name.Substring(11' 5);                  bib_vid = invalid_bibid + ":" + invalid_vid;              }              else if (Resource.Folder_Name.Length == 10)              {                  invalid_bibid = Resource.Folder_Name;                  invalid_vid = "none";                  bib_vid = invalid_bibid + ":" + invalid_vid;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if ((Resource.Folder_Name.Length == 16) && (Resource.Folder_Name[10] == '_'))              {                  invalid_bibid = Resource.Folder_Name.Substring(0' 10);                  invalid_vid = Resource.Folder_Name.Substring(11' 5);                  bib_vid = invalid_bibid + ":" + invalid_vid;              }              else if (Resource.Folder_Name.Length == 10)              {                  invalid_bibid = Resource.Folder_Name;                  invalid_vid = "none";                  bib_vid = invalid_bibid + ":" + invalid_vid;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if ((Resource.Folder_Name.Length == 16) && (Resource.Folder_Name[10] == '_'))              {                  invalid_bibid = Resource.Folder_Name.Substring(0' 10);                  invalid_vid = Resource.Folder_Name.Substring(11' 5);                  bib_vid = invalid_bibid + ":" + invalid_vid;              }              else if (Resource.Folder_Name.Length == 10)              {                  invalid_bibid = Resource.Folder_Name;                  invalid_vid = "none";                  bib_vid = invalid_bibid + ":" + invalid_vid;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if ((Resource.Folder_Name.Length == 16) && (Resource.Folder_Name[10] == '_'))              {                  invalid_bibid = Resource.Folder_Name.Substring(0' 10);                  invalid_vid = Resource.Folder_Name.Substring(11' 5);                  bib_vid = invalid_bibid + ":" + invalid_vid;              }              else if (Resource.Folder_Name.Length == 10)              {                  invalid_bibid = Resource.Folder_Name;                  invalid_vid = "none";                  bib_vid = invalid_bibid + ":" + invalid_vid;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if ((Resource.Folder_Name.Length == 16) && (Resource.Folder_Name[10] == '_'))              {                  invalid_bibid = Resource.Folder_Name.Substring(0' 10);                  invalid_vid = Resource.Folder_Name.Substring(11' 5);                  bib_vid = invalid_bibid + ":" + invalid_vid;              }              else if (Resource.Folder_Name.Length == 10)              {                  invalid_bibid = Resource.Folder_Name;                  invalid_vid = "none";                  bib_vid = invalid_bibid + ":" + invalid_vid;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following statement contains a magic number: if (returnValue != null)              {                  // If there is a bibid and no vid' check to see what's going on here                  if ((returnValue.BibID.Length == 10) && (returnValue.VID.Length == 0))                  {                      DataRow[] matches = itemTable.Select("BibID='" + returnValue.BibID + "'");                      if (matches.Length == 0)                      {                          returnValue.VID = "00001";                      }                      else                      {                          if ((matches.Length == 1) && (matches[0]["VID"].ToString() == "00001"))                              returnValue.VID = "00001";                          else                          {                              // Save this error log and return the error                              Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' "METS file does not have a VID and belongs to a multi-volume title"' Resource.METS_Type_String);                              return "METS file does not have a VID and belongs to a multi-volume title";                          }                      }                  }                      // Do the basic check first                  if (Settings.Builder.Verbose_Flag)                      OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Perform basic check"' "Verbose"' Resource.Resource_Folder.Replace("_"' ":")' Resource.METS_Type_String' -1);                    if (!ThisMetsValidator.SobekCM_Standard_Check(returnValue' Resource.Resource_Folder))                  {                      // Save this error log and return null                      Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' ThisMetsValidator.ValidationError' Resource.METS_Type_String);                      return ThisMetsValidator.ValidationError;                  }                    // If this is a COMPLETE package' check files                  if (returnValue.METS_Header.RecordStatus_Enum == METS_Record_Status.COMPLETE)                  {                      if (Settings.Builder.Verbose_Flag)                          OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Check resource files (existence and checksum)"' "Verbose"' Resource.Resource_Folder.Replace("_"' ":")' Resource.METS_Type_String' -1);                        // check if all files exist in the package and the MD5 checksum if the checksum flag is true		                      if (!ThisMetsValidator.Check_Files(Resource.Resource_Folder' Settings.Builder.VerifyCheckSum))                      {                          // Save this error log and return null                          Create_Error_Log(Resource.Resource_Folder' Resource.Folder_Name' ThisMetsValidator.ValidationError' Resource.METS_Type_String);                          return ThisMetsValidator.ValidationError;                      }                  }                    // This is apparently valid' so do some final checks and copying into the resource wrapper                  Resource.BibID = returnValue.BibID;                  Resource.VID = returnValue.VID;                    switch (returnValue.METS_Header.RecordStatus_Enum)                  {                      case METS_Record_Status.METADATA_UPDATE:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE;                          break;                        case METS_Record_Status.COMPLETE:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE;                          break;                        case METS_Record_Status.PARTIAL:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE;                          break;                        case METS_Record_Status.DELETE:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE;                          break;                        case METS_Record_Status.BIB_LEVEL:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.BIB_LEVEL;                          break;                  }                    if (Settings.Builder.Verbose_Flag)                      OnProcess("ValidateAndClassifyModule.Validate_and_Read_METS: Complete - validated"' "Verbose"' Resource.Resource_Folder.Replace("_"' ":")' Resource.METS_Type_String' -1);                  return String.Empty;              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Save_Validation_Errors_To_Log,The following statement contains a magic number: foreach (string thisError in split_validation_errors)              {                  if (thisError.Trim().Length > 0)                  {                      OnError("............" + thisError' BibID_VID' String.Empty' BuilderID);                      error_count++;                      if (error_count == 5)                      {                          OnError("............(more errors)"' BibID_VID' String.Empty' BuilderID);                          break;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,UpdateNonBibFolders,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\UpdateNonBibFolders.cs,DoWork,The following statement contains a magic number: foreach ( string thisSubDir in subdirs)              {                  try                  {                      string thisSubDirName = (new DirectoryInfo(thisSubDir)).Name;                        // Must have some files to continue                      if (Directory.GetFiles(thisSubDir).Length == 0)                          continue;                        // Need to check if this MAY be a valid BibID.                       // Need to make this a bit more specific in the future' as it will skip ANY folders                      // that are ten digits long right now.                      if ((thisSubDir.Length == 10) || ((thisSubDir.Length == 16) && (thisSubDirName[0] == '_')))                          continue;                        // Look for a METS file or any source of metadata in the folder                      if ((Directory.GetFiles(thisSubDir' "*.mets").Length > 0) || (Directory.GetFiles(thisSubDir' "*.xml").Length > 0))                          continue;                        // Clean any additional periods in the filenames first                      string[] allFiles = Directory.GetFiles(thisSubDir);                      foreach (string thisFile in allFiles)                      {                          string fileName = Path.GetFileName(thisFile);                          if (Regex.Matches(fileName' "\\.").Count > 1)                          {                              string newFileName = fileName;                              while (Regex.Matches(newFileName' "\\.").Count > 1)                              {                                  char[] charArr = newFileName.ToCharArray();                                  charArr[newFileName.IndexOf(".")] = '_'; // freely modify the array                                  newFileName = new string(charArr);                              }                                File.Move(thisFile' Path.Combine(thisSubDir' newFileName));                          }                      }                        // Create the new object                      SobekCM_Item newItem = new SobekCM_Item();                      newItem.Bib_Info.SobekCM_Type = TypeOfResource_SobekCM_Enum.Archival;                      newItem.Bib_Info.Main_Title.Title = thisSubDirName;                      newItem.Bib_Info.Add_Identifier(thisSubDirName);                      newItem.Bib_Info.Source.Code = Arguments[1];                      newItem.Bib_Info.Source.Statement = Arguments[2];                      newItem.BibID = Arguments[0];                      newItem.VID = "00001";                        // Save this item' for the necessary bibid                      SobekCM_Item_Database.Save_New_Digital_Resource(newItem' false' false' "Builder"' "Created BibID folder from '" + thisSubDirName + "'"' -1);                        string newFolderName = newItem.BibID + "_" + newItem.VID;                      string newFolder = Path.Combine(BuilderFolder.Inbound_Folder' newFolderName);                      Directory.Move(thisSubDir' newFolder);                        newItem.Source_Directory = newFolder;                      newItem.Save_METS();                  }                  catch (Exception ee)                  {                      Console.WriteLine("Error moving directory " + ee.Message);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,UpdateNonBibFolders,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\UpdateNonBibFolders.cs,DoWork,The following statement contains a magic number: foreach ( string thisSubDir in subdirs)              {                  try                  {                      string thisSubDirName = (new DirectoryInfo(thisSubDir)).Name;                        // Must have some files to continue                      if (Directory.GetFiles(thisSubDir).Length == 0)                          continue;                        // Need to check if this MAY be a valid BibID.                       // Need to make this a bit more specific in the future' as it will skip ANY folders                      // that are ten digits long right now.                      if ((thisSubDir.Length == 10) || ((thisSubDir.Length == 16) && (thisSubDirName[0] == '_')))                          continue;                        // Look for a METS file or any source of metadata in the folder                      if ((Directory.GetFiles(thisSubDir' "*.mets").Length > 0) || (Directory.GetFiles(thisSubDir' "*.xml").Length > 0))                          continue;                        // Clean any additional periods in the filenames first                      string[] allFiles = Directory.GetFiles(thisSubDir);                      foreach (string thisFile in allFiles)                      {                          string fileName = Path.GetFileName(thisFile);                          if (Regex.Matches(fileName' "\\.").Count > 1)                          {                              string newFileName = fileName;                              while (Regex.Matches(newFileName' "\\.").Count > 1)                              {                                  char[] charArr = newFileName.ToCharArray();                                  charArr[newFileName.IndexOf(".")] = '_'; // freely modify the array                                  newFileName = new string(charArr);                              }                                File.Move(thisFile' Path.Combine(thisSubDir' newFileName));                          }                      }                        // Create the new object                      SobekCM_Item newItem = new SobekCM_Item();                      newItem.Bib_Info.SobekCM_Type = TypeOfResource_SobekCM_Enum.Archival;                      newItem.Bib_Info.Main_Title.Title = thisSubDirName;                      newItem.Bib_Info.Add_Identifier(thisSubDirName);                      newItem.Bib_Info.Source.Code = Arguments[1];                      newItem.Bib_Info.Source.Statement = Arguments[2];                      newItem.BibID = Arguments[0];                      newItem.VID = "00001";                        // Save this item' for the necessary bibid                      SobekCM_Item_Database.Save_New_Digital_Resource(newItem' false' false' "Builder"' "Created BibID folder from '" + thisSubDirName + "'"' -1);                        string newFolderName = newItem.BibID + "_" + newItem.VID;                      string newFolder = Path.Combine(BuilderFolder.Inbound_Folder' newFolderName);                      Directory.Move(thisSubDir' newFolder);                        newItem.Source_Directory = newFolder;                      newItem.Save_METS();                  }                  catch (Exception ee)                  {                      Console.WriteLine("Error moving directory " + ee.Message);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Folders,UpdateNonBibFolders,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\UpdateNonBibFolders.cs,DoWork,The following statement contains a magic number: foreach ( string thisSubDir in subdirs)              {                  try                  {                      string thisSubDirName = (new DirectoryInfo(thisSubDir)).Name;                        // Must have some files to continue                      if (Directory.GetFiles(thisSubDir).Length == 0)                          continue;                        // Need to check if this MAY be a valid BibID.                       // Need to make this a bit more specific in the future' as it will skip ANY folders                      // that are ten digits long right now.                      if ((thisSubDir.Length == 10) || ((thisSubDir.Length == 16) && (thisSubDirName[0] == '_')))                          continue;                        // Look for a METS file or any source of metadata in the folder                      if ((Directory.GetFiles(thisSubDir' "*.mets").Length > 0) || (Directory.GetFiles(thisSubDir' "*.xml").Length > 0))                          continue;                        // Clean any additional periods in the filenames first                      string[] allFiles = Directory.GetFiles(thisSubDir);                      foreach (string thisFile in allFiles)                      {                          string fileName = Path.GetFileName(thisFile);                          if (Regex.Matches(fileName' "\\.").Count > 1)                          {                              string newFileName = fileName;                              while (Regex.Matches(newFileName' "\\.").Count > 1)                              {                                  char[] charArr = newFileName.ToCharArray();                                  charArr[newFileName.IndexOf(".")] = '_'; // freely modify the array                                  newFileName = new string(charArr);                              }                                File.Move(thisFile' Path.Combine(thisSubDir' newFileName));                          }                      }                        // Create the new object                      SobekCM_Item newItem = new SobekCM_Item();                      newItem.Bib_Info.SobekCM_Type = TypeOfResource_SobekCM_Enum.Archival;                      newItem.Bib_Info.Main_Title.Title = thisSubDirName;                      newItem.Bib_Info.Add_Identifier(thisSubDirName);                      newItem.Bib_Info.Source.Code = Arguments[1];                      newItem.Bib_Info.Source.Statement = Arguments[2];                      newItem.BibID = Arguments[0];                      newItem.VID = "00001";                        // Save this item' for the necessary bibid                      SobekCM_Item_Database.Save_New_Digital_Resource(newItem' false' false' "Builder"' "Created BibID folder from '" + thisSubDirName + "'"' -1);                        string newFolderName = newItem.BibID + "_" + newItem.VID;                      string newFolder = Path.Combine(BuilderFolder.Inbound_Folder' newFolderName);                      Directory.Move(thisSubDir' newFolder);                        newItem.Source_Directory = newFolder;                      newItem.Save_METS();                  }                  catch (Exception ee)                  {                      Console.WriteLine("Error moving directory " + ee.Message);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,Tesseract_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\TesseractOcrModule.cs,Process_TIFF,The following statement contains a magic number: try              {                  Process tessProcess = new Process();                  tessProcess.StartInfo.FileName = Tesseract_Executable;                  tessProcess.StartInfo.Arguments = SourceFileName + " " + TextFileName;                    // Stop the process from opening a new window                  //process.StartInfo.RedirectStandardOutput = true;                  //process.StartInfo.UseShellExecute = false;                  //process.StartInfo.CreateNoWindow = true;                      tessProcess.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;                  tessProcess.Start();                    tessProcess.WaitForExit(5000);                    return true;              }              catch (Exception ee)              {                  Last_Exception = ee.Message;                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,AddTrackingWorkflowModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\AddTrackingWorkflowModule.cs,DoWork,The following statement contains a magic number: if ((!Resource.Metadata.Tracking.Born_Digital_Is_Null) && (Resource.Metadata.Tracking.Born_Digital) && (Resource.Metadata.Behaviors.IP_Restriction_Membership >= 0) && (Resource.Metadata.Divisions.Download_Tree.Has_Files))              {                  SobekCM_Item_Database.Update_Digitization_Milestone(Resource.Metadata.Web.ItemID' 4' DateTime.Now);              }
Magic Number,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Convert_Office_Files_To_PDF)              {                  try                  {                      // Preprocess each Powerpoint document to PDF                      string[] ppt_files = Directory.GetFiles(resourceFolder' "*.ppt*");                      foreach (string thisPowerpoint in ppt_files)                      {                          // Get the fileinfo and the name                          FileInfo thisPowerpointInfo = new FileInfo(thisPowerpoint);                          string filename = thisPowerpointInfo.Name.Replace(thisPowerpointInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Powerpoint_To_PDF(thisPowerpoint' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                        // Preprocess each Word document to PDF                      string[] doc_files = Directory.GetFiles(resourceFolder' "*.doc*");                      foreach (string thisWordDoc in doc_files)                      {                          // Get the fileinfo and the name                          FileInfo thisWordDocInfo = new FileInfo(thisWordDoc);                          string filename = thisWordDocInfo.Name.Replace(thisWordDocInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Word_To_PDF(thisWordDoc' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                  }                  catch (Exception ee)                  {                      StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true);                      errorWriter.WriteLine("Message: " + ee.Message);                      errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                      errorWriter.Flush();                      errorWriter.Close();                        OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                      OnError(ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Convert_Office_Files_To_PDF)              {                  try                  {                      // Preprocess each Powerpoint document to PDF                      string[] ppt_files = Directory.GetFiles(resourceFolder' "*.ppt*");                      foreach (string thisPowerpoint in ppt_files)                      {                          // Get the fileinfo and the name                          FileInfo thisPowerpointInfo = new FileInfo(thisPowerpoint);                          string filename = thisPowerpointInfo.Name.Replace(thisPowerpointInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Powerpoint_To_PDF(thisPowerpoint' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                        // Preprocess each Word document to PDF                      string[] doc_files = Directory.GetFiles(resourceFolder' "*.doc*");                      foreach (string thisWordDoc in doc_files)                      {                          // Get the fileinfo and the name                          FileInfo thisWordDocInfo = new FileInfo(thisWordDoc);                          string filename = thisWordDocInfo.Name.Replace(thisWordDocInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Word_To_PDF(thisWordDoc' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                  }                  catch (Exception ee)                  {                      StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true);                      errorWriter.WriteLine("Message: " + ee.Message);                      errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                      errorWriter.Flush();                      errorWriter.Close();                        OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                      OnError(ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Convert_Office_Files_To_PDF)              {                  try                  {                      // Preprocess each Powerpoint document to PDF                      string[] ppt_files = Directory.GetFiles(resourceFolder' "*.ppt*");                      foreach (string thisPowerpoint in ppt_files)                      {                          // Get the fileinfo and the name                          FileInfo thisPowerpointInfo = new FileInfo(thisPowerpoint);                          string filename = thisPowerpointInfo.Name.Replace(thisPowerpointInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Powerpoint_To_PDF(thisPowerpoint' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                        // Preprocess each Word document to PDF                      string[] doc_files = Directory.GetFiles(resourceFolder' "*.doc*");                      foreach (string thisWordDoc in doc_files)                      {                          // Get the fileinfo and the name                          FileInfo thisWordDocInfo = new FileInfo(thisWordDoc);                          string filename = thisWordDocInfo.Name.Replace(thisWordDocInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Word_To_PDF(thisWordDoc' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                  }                  catch (Exception ee)                  {                      StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true);                      errorWriter.WriteLine("Message: " + ee.Message);                      errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                      errorWriter.Flush();                      errorWriter.Close();                        OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                      OnError(ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Convert_Office_Files_To_PDF)              {                  try                  {                      // Preprocess each Powerpoint document to PDF                      string[] ppt_files = Directory.GetFiles(resourceFolder' "*.ppt*");                      foreach (string thisPowerpoint in ppt_files)                      {                          // Get the fileinfo and the name                          FileInfo thisPowerpointInfo = new FileInfo(thisPowerpoint);                          string filename = thisPowerpointInfo.Name.Replace(thisPowerpointInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Powerpoint_To_PDF(thisPowerpoint' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                        // Preprocess each Word document to PDF                      string[] doc_files = Directory.GetFiles(resourceFolder' "*.doc*");                      foreach (string thisWordDoc in doc_files)                      {                          // Get the fileinfo and the name                          FileInfo thisWordDocInfo = new FileInfo(thisWordDoc);                          string filename = thisWordDocInfo.Name.Replace(thisWordDocInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Word_To_PDF(thisWordDoc' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                  }                  catch (Exception ee)                  {                      StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true);                      errorWriter.WriteLine("Message: " + ee.Message);                      errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                      errorWriter.Flush();                      errorWriter.Close();                        OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                      OnError(ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Convert_Office_Files_To_PDF)              {                  try                  {                      // Preprocess each Powerpoint document to PDF                      string[] ppt_files = Directory.GetFiles(resourceFolder' "*.ppt*");                      foreach (string thisPowerpoint in ppt_files)                      {                          // Get the fileinfo and the name                          FileInfo thisPowerpointInfo = new FileInfo(thisPowerpoint);                          string filename = thisPowerpointInfo.Name.Replace(thisPowerpointInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Powerpoint_To_PDF(thisPowerpoint' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                        // Preprocess each Word document to PDF                      string[] doc_files = Directory.GetFiles(resourceFolder' "*.doc*");                      foreach (string thisWordDoc in doc_files)                      {                          // Get the fileinfo and the name                          FileInfo thisWordDocInfo = new FileInfo(thisWordDoc);                          string filename = thisWordDocInfo.Name.Replace(thisWordDocInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Word_To_PDF(thisWordDoc' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                  }                  catch (Exception ee)                  {                      StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true);                      errorWriter.WriteLine("Message: " + ee.Message);                      errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                      errorWriter.Flush();                      errorWriter.Close();                        OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                      OnError(ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Convert_Office_Files_To_PDF)              {                  try                  {                      // Preprocess each Powerpoint document to PDF                      string[] ppt_files = Directory.GetFiles(resourceFolder' "*.ppt*");                      foreach (string thisPowerpoint in ppt_files)                      {                          // Get the fileinfo and the name                          FileInfo thisPowerpointInfo = new FileInfo(thisPowerpoint);                          string filename = thisPowerpointInfo.Name.Replace(thisPowerpointInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Powerpoint_To_PDF(thisPowerpoint' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                        // Preprocess each Word document to PDF                      string[] doc_files = Directory.GetFiles(resourceFolder' "*.doc*");                      foreach (string thisWordDoc in doc_files)                      {                          // Get the fileinfo and the name                          FileInfo thisWordDocInfo = new FileInfo(thisWordDoc);                          string filename = thisWordDocInfo.Name.Replace(thisWordDocInfo.Extension' "");                            // Does a PDF version exist for this item?                          string pdf_version = resourceFolder + "\\" + filename + ".pdf";                          if (!File.Exists(pdf_version))                          {                              int conversion_error = Word_Powerpoint_to_PDF_Converter.Word_To_PDF(thisWordDoc' pdf_version);                              switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }                          }                      }                  }                  catch (Exception ee)                  {                      StreamWriter errorWriter = new StreamWriter(Path.Combine(MultiInstance_Builder_Settings.Builder_Executable_Directory' "Logs\\error.log")' true);                      errorWriter.WriteLine("Message: " + ee.Message);                      errorWriter.WriteLine("Stack Trace: " + ee.StackTrace);                      errorWriter.Flush();                      errorWriter.Close();                        OnError("Unknown error converting office files to PDF"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                      OnError(ee.Message' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The following statement contains a magic number: if (!String.IsNullOrEmpty(imagemagick_executable))              {                  // Get the list of image files first                  List<string> imageFiles = new List<string>();                  foreach (string imageExtension in image_extensions)                  {                      imageFiles.AddRange(Directory.GetFiles(resourceFolder' "*" + imageExtension));                  }                    // Only continue if some exist                  if (imageFiles.Count > 0)                  {                      //// Build the list of files listed in the metadata                      //Dictionary<string' SobekCM_File_Info> names_to_mets_file = new Dictionary<string' SobekCM_File_Info>(StringComparer.OrdinalIgnoreCase);                      //List<SobekCM_File_Info> files = Resource.Metadata.Divisions.Physical_Tree.All_Files;                      //foreach (SobekCM_File_Info thisFile in files)                      //{                      //    names_to_mets_file[thisFile.System_Name] = thisFile;                      //}                        // Step through all the image files and find the collection of page images                      Dictionary<string' List<string>> imageRootFiles = new Dictionary<string' List<string>>( StringComparer.OrdinalIgnoreCase );                      List<string> possibleThumbnails = new List<string>();                      foreach (string thisImageFile in imageFiles)                      {                          // Skip .QC.JPG files                          if (thisImageFile.IndexOf(".qc.jpg"' StringComparison.OrdinalIgnoreCase) > 0)                              continue;                            // If this might be a thumbnail image' save it for the very end for analysis                          if ((thisImageFile.IndexOf("thm.jpg"' StringComparison.OrdinalIgnoreCase) > 0) && ( Path.GetFileNameWithoutExtension(thisImageFile).Length > 3 ))                          {                              // Save for final analysis                              possibleThumbnails.Add(thisImageFile);                          }                          else                          {                              // Get this filename without the extension                              string filename_sans_extension = Path.GetFileNameWithoutExtension(thisImageFile);                                // Has this root' or image grouping' already been analyzed?                              if (imageRootFiles.ContainsKey(filename_sans_extension))                              {                                  imageRootFiles[filename_sans_extension].Add(thisImageFile);                              }                              else                              {                                  imageRootFiles.Add(filename_sans_extension' new List<string> {thisImageFile});                              }                          }                      }                        // Now' re-analyze those files that could have potentially been a thumbnail jpeg                      foreach (string thisPossibleThumbnail in possibleThumbnails)                      {                          // Get this filename without the extension                          string filename_sans_extension = Path.GetFileNameWithoutExtension(thisPossibleThumbnail);                            // Remove the final 'thm' from the name first and look for a match                          string filename_sans_thumb_extension = filename_sans_extension.Substring(0' filename_sans_extension.Length - 3);                            // Has this root' or image grouping' already been analyzed?                          if (imageRootFiles.ContainsKey(filename_sans_thumb_extension))                          {                              imageRootFiles[filename_sans_thumb_extension].Add(thisPossibleThumbnail);                          }                          else                          {                              imageRootFiles.Add(filename_sans_extension' new List<string> { thisPossibleThumbnail });                          }                      }                        // Create the image process object for creating                       Image_Derivative_Creation_Processor imageProcessor = new Image_Derivative_Creation_Processor(imagemagick_executable' kakadu_directory' true' true' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' false' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' null);                      imageProcessor.New_Task_String += imageProcessor_New_Task_String;                      imageProcessor.Error_Encountered += imageProcessor_Error_Encountered;                        // Step through each file grouping and look for the newest file and jpeg and thumbnail dates                      string jpeg_file;                      string jpeg_thumb_file;                      string jpeg2000_file;                      foreach (string thisImageRoot in imageRootFiles.Keys)                      {                          // Ready for the next set of images                          jpeg_file = String.Empty;                          jpeg_thumb_file = String.Empty;                          jpeg2000_file = String.Empty;                            // Get the list of all related files                          List<string> theseImageFiles = imageRootFiles[thisImageRoot];                            // Look for the jpeg and thumbnail derivatives                          int image_index = 0;                          while (image_index < theseImageFiles.Count)                          {                              // Get the extenxstion of this file                              string extension = Path.GetExtension(theseImageFiles[image_index]).ToUpper();                                // Was this a special image file type (i.e.' jpeg or jpeg2000?)                              if ((extension == ".JPG") || (extension == ".JP2"))                              {                                  // If JPEG' does this appear to be the thumbnail?                                  if (extension == ".JPG")                                  {                                      if (String.Compare(Path.GetFileNameWithoutExtension(theseImageFiles[image_index])' thisImageRoot + "thm"' StringComparison.OrdinalIgnoreCase) == 0)                                      {                                          jpeg_thumb_file = theseImageFiles[image_index];                                      }                                      else                                      {                                          jpeg_file = theseImageFiles[image_index];                                      }                                  }                                  else                                  {                                      jpeg2000_file = theseImageFiles[image_index];                                  }                                    // Since this was a standard derivative file' remove it from the list (and don't icrement image_index)                                  theseImageFiles.RemoveAt(image_index);                              }                              else                              {                                  // Since this looks like source image (and not a standard derivative)                                  // just keep it in the list and move to the next one                                  image_index++;                              }                          }                              // Having separated the derivatives from the possible source files' let's determine if derivatives should be created                          // based on the dates for the files                          DateTime? jpeg_file_lastModTime = null;                          if (!String.IsNullOrEmpty(jpeg_file))                              jpeg_file_lastModTime = File.GetLastWriteTime(jpeg_file);                            DateTime? jpeg_thumb_file_lastModTime = null;                          if ( !String.IsNullOrEmpty(jpeg_thumb_file))                              jpeg_thumb_file_lastModTime = File.GetLastWriteTime(jpeg_thumb_file);                            DateTime? jpeg2000_file_lastModTime = null;                          if ( !String.IsNullOrEmpty(jpeg2000_file))                              jpeg2000_file_lastModTime = File.GetLastWriteTime(jpeg2000_file);                            // Were there some ordinary source files left' that may need to be analyzed?                          if (theseImageFiles.Count > 0)                          {                              // Keep track of newest source file and date                              string newest_source_file = String.Empty;                              DateTime newest_source_file_date = new DateTime(1900' 1' 1);                                // Find the newest source file                              foreach (string thisSourceFile in theseImageFiles)                              {                                  DateTime lastModTime = File.GetLastWriteTime(thisSourceFile);                                  if (lastModTime.CompareTo(newest_source_file_date) > 0)                                  {                                      newest_source_file_date = lastModTime;                                      newest_source_file = thisSourceFile;                                  }                              }                                // Now' see if some of the basic derivatives are missing or too old                              if (((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg2000_file_lastModTime.HasValue) || (jpeg2000_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)))                              {                                  // Create all the derivatives                                  string name_sans_extension = Path.GetFileNameWithoutExtension(newest_source_file);                                    // Create the JPEG derivatives from the JPEG2000                                  imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                  imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                    imageProcessor.Create_JPEG2000(newest_source_file' name_sans_extension + ".jp2"' resourceFolder' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                    //// If the JPEG exists with width/height information clear the information                                  //if (names_to_mets_file.ContainsKey(name_sans_extension + ".jpg"))                                  //{                                  //    names_to_mets_file[name_sans_extension + ".jpg"].Height = 0;                                  //    names_to_mets_file[name_sans_extension + ".jpg"].Width = 0;                                  //}                              }                          }                          else                          {                              // No derivate source files found' but we may build the derivatives from the JPEG2000 file                              if (!String.IsNullOrEmpty(jpeg2000_file))                              {                                  //if (( jpeg_file_lastModTime.HasValue ) && ( jpeg_file_lastModTime.Value.Month == 9 ) && ( jpeg_file_lastModTime.Value.Day == 6 ))                                    // Now' see if the other derivatives are missing or too old                                  if (((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)) ||                                      ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)))                                  {                                      string name_sans_extension = Path.GetFileNameWithoutExtension(jpeg2000_file);                                        //// Create a temporary' full-size file                                      //string temp_file = resourceFolder + "\\" + name_sans_extension + "_sobektemp.tif";                                      //imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' temp_file' -1' -1' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                          // Create the JPEG derivatives from the JPEG2000                                      imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                      imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                        //// If the JPEG exists with width/height information clear the information                                      //if (names_to_mets_file.ContainsKey(name_sans_extension + ".jpg"))                                      //{                                      //    names_to_mets_file[name_sans_extension + ".jpg"].Height = 0;                                      //    names_to_mets_file[name_sans_extension + ".jpg"].Width = 0;                                      //}                                  }                              }                          }                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The following statement contains a magic number: if (!String.IsNullOrEmpty(imagemagick_executable))              {                  // Get the list of image files first                  List<string> imageFiles = new List<string>();                  foreach (string imageExtension in image_extensions)                  {                      imageFiles.AddRange(Directory.GetFiles(resourceFolder' "*" + imageExtension));                  }                    // Only continue if some exist                  if (imageFiles.Count > 0)                  {                      //// Build the list of files listed in the metadata                      //Dictionary<string' SobekCM_File_Info> names_to_mets_file = new Dictionary<string' SobekCM_File_Info>(StringComparer.OrdinalIgnoreCase);                      //List<SobekCM_File_Info> files = Resource.Metadata.Divisions.Physical_Tree.All_Files;                      //foreach (SobekCM_File_Info thisFile in files)                      //{                      //    names_to_mets_file[thisFile.System_Name] = thisFile;                      //}                        // Step through all the image files and find the collection of page images                      Dictionary<string' List<string>> imageRootFiles = new Dictionary<string' List<string>>( StringComparer.OrdinalIgnoreCase );                      List<string> possibleThumbnails = new List<string>();                      foreach (string thisImageFile in imageFiles)                      {                          // Skip .QC.JPG files                          if (thisImageFile.IndexOf(".qc.jpg"' StringComparison.OrdinalIgnoreCase) > 0)                              continue;                            // If this might be a thumbnail image' save it for the very end for analysis                          if ((thisImageFile.IndexOf("thm.jpg"' StringComparison.OrdinalIgnoreCase) > 0) && ( Path.GetFileNameWithoutExtension(thisImageFile).Length > 3 ))                          {                              // Save for final analysis                              possibleThumbnails.Add(thisImageFile);                          }                          else                          {                              // Get this filename without the extension                              string filename_sans_extension = Path.GetFileNameWithoutExtension(thisImageFile);                                // Has this root' or image grouping' already been analyzed?                              if (imageRootFiles.ContainsKey(filename_sans_extension))                              {                                  imageRootFiles[filename_sans_extension].Add(thisImageFile);                              }                              else                              {                                  imageRootFiles.Add(filename_sans_extension' new List<string> {thisImageFile});                              }                          }                      }                        // Now' re-analyze those files that could have potentially been a thumbnail jpeg                      foreach (string thisPossibleThumbnail in possibleThumbnails)                      {                          // Get this filename without the extension                          string filename_sans_extension = Path.GetFileNameWithoutExtension(thisPossibleThumbnail);                            // Remove the final 'thm' from the name first and look for a match                          string filename_sans_thumb_extension = filename_sans_extension.Substring(0' filename_sans_extension.Length - 3);                            // Has this root' or image grouping' already been analyzed?                          if (imageRootFiles.ContainsKey(filename_sans_thumb_extension))                          {                              imageRootFiles[filename_sans_thumb_extension].Add(thisPossibleThumbnail);                          }                          else                          {                              imageRootFiles.Add(filename_sans_extension' new List<string> { thisPossibleThumbnail });                          }                      }                        // Create the image process object for creating                       Image_Derivative_Creation_Processor imageProcessor = new Image_Derivative_Creation_Processor(imagemagick_executable' kakadu_directory' true' true' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' false' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' null);                      imageProcessor.New_Task_String += imageProcessor_New_Task_String;                      imageProcessor.Error_Encountered += imageProcessor_Error_Encountered;                        // Step through each file grouping and look for the newest file and jpeg and thumbnail dates                      string jpeg_file;                      string jpeg_thumb_file;                      string jpeg2000_file;                      foreach (string thisImageRoot in imageRootFiles.Keys)                      {                          // Ready for the next set of images                          jpeg_file = String.Empty;                          jpeg_thumb_file = String.Empty;                          jpeg2000_file = String.Empty;                            // Get the list of all related files                          List<string> theseImageFiles = imageRootFiles[thisImageRoot];                            // Look for the jpeg and thumbnail derivatives                          int image_index = 0;                          while (image_index < theseImageFiles.Count)                          {                              // Get the extenxstion of this file                              string extension = Path.GetExtension(theseImageFiles[image_index]).ToUpper();                                // Was this a special image file type (i.e.' jpeg or jpeg2000?)                              if ((extension == ".JPG") || (extension == ".JP2"))                              {                                  // If JPEG' does this appear to be the thumbnail?                                  if (extension == ".JPG")                                  {                                      if (String.Compare(Path.GetFileNameWithoutExtension(theseImageFiles[image_index])' thisImageRoot + "thm"' StringComparison.OrdinalIgnoreCase) == 0)                                      {                                          jpeg_thumb_file = theseImageFiles[image_index];                                      }                                      else                                      {                                          jpeg_file = theseImageFiles[image_index];                                      }                                  }                                  else                                  {                                      jpeg2000_file = theseImageFiles[image_index];                                  }                                    // Since this was a standard derivative file' remove it from the list (and don't icrement image_index)                                  theseImageFiles.RemoveAt(image_index);                              }                              else                              {                                  // Since this looks like source image (and not a standard derivative)                                  // just keep it in the list and move to the next one                                  image_index++;                              }                          }                              // Having separated the derivatives from the possible source files' let's determine if derivatives should be created                          // based on the dates for the files                          DateTime? jpeg_file_lastModTime = null;                          if (!String.IsNullOrEmpty(jpeg_file))                              jpeg_file_lastModTime = File.GetLastWriteTime(jpeg_file);                            DateTime? jpeg_thumb_file_lastModTime = null;                          if ( !String.IsNullOrEmpty(jpeg_thumb_file))                              jpeg_thumb_file_lastModTime = File.GetLastWriteTime(jpeg_thumb_file);                            DateTime? jpeg2000_file_lastModTime = null;                          if ( !String.IsNullOrEmpty(jpeg2000_file))                              jpeg2000_file_lastModTime = File.GetLastWriteTime(jpeg2000_file);                            // Were there some ordinary source files left' that may need to be analyzed?                          if (theseImageFiles.Count > 0)                          {                              // Keep track of newest source file and date                              string newest_source_file = String.Empty;                              DateTime newest_source_file_date = new DateTime(1900' 1' 1);                                // Find the newest source file                              foreach (string thisSourceFile in theseImageFiles)                              {                                  DateTime lastModTime = File.GetLastWriteTime(thisSourceFile);                                  if (lastModTime.CompareTo(newest_source_file_date) > 0)                                  {                                      newest_source_file_date = lastModTime;                                      newest_source_file = thisSourceFile;                                  }                              }                                // Now' see if some of the basic derivatives are missing or too old                              if (((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg2000_file_lastModTime.HasValue) || (jpeg2000_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)))                              {                                  // Create all the derivatives                                  string name_sans_extension = Path.GetFileNameWithoutExtension(newest_source_file);                                    // Create the JPEG derivatives from the JPEG2000                                  imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                  imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                    imageProcessor.Create_JPEG2000(newest_source_file' name_sans_extension + ".jp2"' resourceFolder' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                    //// If the JPEG exists with width/height information clear the information                                  //if (names_to_mets_file.ContainsKey(name_sans_extension + ".jpg"))                                  //{                                  //    names_to_mets_file[name_sans_extension + ".jpg"].Height = 0;                                  //    names_to_mets_file[name_sans_extension + ".jpg"].Width = 0;                                  //}                              }                          }                          else                          {                              // No derivate source files found' but we may build the derivatives from the JPEG2000 file                              if (!String.IsNullOrEmpty(jpeg2000_file))                              {                                  //if (( jpeg_file_lastModTime.HasValue ) && ( jpeg_file_lastModTime.Value.Month == 9 ) && ( jpeg_file_lastModTime.Value.Day == 6 ))                                    // Now' see if the other derivatives are missing or too old                                  if (((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)) ||                                      ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)))                                  {                                      string name_sans_extension = Path.GetFileNameWithoutExtension(jpeg2000_file);                                        //// Create a temporary' full-size file                                      //string temp_file = resourceFolder + "\\" + name_sans_extension + "_sobektemp.tif";                                      //imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' temp_file' -1' -1' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                          // Create the JPEG derivatives from the JPEG2000                                      imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                      imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                        //// If the JPEG exists with width/height information clear the information                                      //if (names_to_mets_file.ContainsKey(name_sans_extension + ".jpg"))                                      //{                                      //    names_to_mets_file[name_sans_extension + ".jpg"].Height = 0;                                      //    names_to_mets_file[name_sans_extension + ".jpg"].Width = 0;                                      //}                                  }                              }                          }                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,CreateImageDerivativesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\CreateImageDerivativesModule.cs,DoWork,The following statement contains a magic number: if (!String.IsNullOrEmpty(imagemagick_executable))              {                  // Get the list of image files first                  List<string> imageFiles = new List<string>();                  foreach (string imageExtension in image_extensions)                  {                      imageFiles.AddRange(Directory.GetFiles(resourceFolder' "*" + imageExtension));                  }                    // Only continue if some exist                  if (imageFiles.Count > 0)                  {                      //// Build the list of files listed in the metadata                      //Dictionary<string' SobekCM_File_Info> names_to_mets_file = new Dictionary<string' SobekCM_File_Info>(StringComparer.OrdinalIgnoreCase);                      //List<SobekCM_File_Info> files = Resource.Metadata.Divisions.Physical_Tree.All_Files;                      //foreach (SobekCM_File_Info thisFile in files)                      //{                      //    names_to_mets_file[thisFile.System_Name] = thisFile;                      //}                        // Step through all the image files and find the collection of page images                      Dictionary<string' List<string>> imageRootFiles = new Dictionary<string' List<string>>( StringComparer.OrdinalIgnoreCase );                      List<string> possibleThumbnails = new List<string>();                      foreach (string thisImageFile in imageFiles)                      {                          // Skip .QC.JPG files                          if (thisImageFile.IndexOf(".qc.jpg"' StringComparison.OrdinalIgnoreCase) > 0)                              continue;                            // If this might be a thumbnail image' save it for the very end for analysis                          if ((thisImageFile.IndexOf("thm.jpg"' StringComparison.OrdinalIgnoreCase) > 0) && ( Path.GetFileNameWithoutExtension(thisImageFile).Length > 3 ))                          {                              // Save for final analysis                              possibleThumbnails.Add(thisImageFile);                          }                          else                          {                              // Get this filename without the extension                              string filename_sans_extension = Path.GetFileNameWithoutExtension(thisImageFile);                                // Has this root' or image grouping' already been analyzed?                              if (imageRootFiles.ContainsKey(filename_sans_extension))                              {                                  imageRootFiles[filename_sans_extension].Add(thisImageFile);                              }                              else                              {                                  imageRootFiles.Add(filename_sans_extension' new List<string> {thisImageFile});                              }                          }                      }                        // Now' re-analyze those files that could have potentially been a thumbnail jpeg                      foreach (string thisPossibleThumbnail in possibleThumbnails)                      {                          // Get this filename without the extension                          string filename_sans_extension = Path.GetFileNameWithoutExtension(thisPossibleThumbnail);                            // Remove the final 'thm' from the name first and look for a match                          string filename_sans_thumb_extension = filename_sans_extension.Substring(0' filename_sans_extension.Length - 3);                            // Has this root' or image grouping' already been analyzed?                          if (imageRootFiles.ContainsKey(filename_sans_thumb_extension))                          {                              imageRootFiles[filename_sans_thumb_extension].Add(thisPossibleThumbnail);                          }                          else                          {                              imageRootFiles.Add(filename_sans_extension' new List<string> { thisPossibleThumbnail });                          }                      }                        // Create the image process object for creating                       Image_Derivative_Creation_Processor imageProcessor = new Image_Derivative_Creation_Processor(imagemagick_executable' kakadu_directory' true' true' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' false' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' null);                      imageProcessor.New_Task_String += imageProcessor_New_Task_String;                      imageProcessor.Error_Encountered += imageProcessor_Error_Encountered;                        // Step through each file grouping and look for the newest file and jpeg and thumbnail dates                      string jpeg_file;                      string jpeg_thumb_file;                      string jpeg2000_file;                      foreach (string thisImageRoot in imageRootFiles.Keys)                      {                          // Ready for the next set of images                          jpeg_file = String.Empty;                          jpeg_thumb_file = String.Empty;                          jpeg2000_file = String.Empty;                            // Get the list of all related files                          List<string> theseImageFiles = imageRootFiles[thisImageRoot];                            // Look for the jpeg and thumbnail derivatives                          int image_index = 0;                          while (image_index < theseImageFiles.Count)                          {                              // Get the extenxstion of this file                              string extension = Path.GetExtension(theseImageFiles[image_index]).ToUpper();                                // Was this a special image file type (i.e.' jpeg or jpeg2000?)                              if ((extension == ".JPG") || (extension == ".JP2"))                              {                                  // If JPEG' does this appear to be the thumbnail?                                  if (extension == ".JPG")                                  {                                      if (String.Compare(Path.GetFileNameWithoutExtension(theseImageFiles[image_index])' thisImageRoot + "thm"' StringComparison.OrdinalIgnoreCase) == 0)                                      {                                          jpeg_thumb_file = theseImageFiles[image_index];                                      }                                      else                                      {                                          jpeg_file = theseImageFiles[image_index];                                      }                                  }                                  else                                  {                                      jpeg2000_file = theseImageFiles[image_index];                                  }                                    // Since this was a standard derivative file' remove it from the list (and don't icrement image_index)                                  theseImageFiles.RemoveAt(image_index);                              }                              else                              {                                  // Since this looks like source image (and not a standard derivative)                                  // just keep it in the list and move to the next one                                  image_index++;                              }                          }                              // Having separated the derivatives from the possible source files' let's determine if derivatives should be created                          // based on the dates for the files                          DateTime? jpeg_file_lastModTime = null;                          if (!String.IsNullOrEmpty(jpeg_file))                              jpeg_file_lastModTime = File.GetLastWriteTime(jpeg_file);                            DateTime? jpeg_thumb_file_lastModTime = null;                          if ( !String.IsNullOrEmpty(jpeg_thumb_file))                              jpeg_thumb_file_lastModTime = File.GetLastWriteTime(jpeg_thumb_file);                            DateTime? jpeg2000_file_lastModTime = null;                          if ( !String.IsNullOrEmpty(jpeg2000_file))                              jpeg2000_file_lastModTime = File.GetLastWriteTime(jpeg2000_file);                            // Were there some ordinary source files left' that may need to be analyzed?                          if (theseImageFiles.Count > 0)                          {                              // Keep track of newest source file and date                              string newest_source_file = String.Empty;                              DateTime newest_source_file_date = new DateTime(1900' 1' 1);                                // Find the newest source file                              foreach (string thisSourceFile in theseImageFiles)                              {                                  DateTime lastModTime = File.GetLastWriteTime(thisSourceFile);                                  if (lastModTime.CompareTo(newest_source_file_date) > 0)                                  {                                      newest_source_file_date = lastModTime;                                      newest_source_file = thisSourceFile;                                  }                              }                                // Now' see if some of the basic derivatives are missing or too old                              if (((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)) ||                                  ((!jpeg2000_file_lastModTime.HasValue) || (jpeg2000_file_lastModTime.Value.CompareTo(newest_source_file_date) < 0)))                              {                                  // Create all the derivatives                                  string name_sans_extension = Path.GetFileNameWithoutExtension(newest_source_file);                                    // Create the JPEG derivatives from the JPEG2000                                  imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                  imageProcessor.ImageMagick_Create_JPEG(newest_source_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                    imageProcessor.Create_JPEG2000(newest_source_file' name_sans_extension + ".jp2"' resourceFolder' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                    //// If the JPEG exists with width/height information clear the information                                  //if (names_to_mets_file.ContainsKey(name_sans_extension + ".jpg"))                                  //{                                  //    names_to_mets_file[name_sans_extension + ".jpg"].Height = 0;                                  //    names_to_mets_file[name_sans_extension + ".jpg"].Width = 0;                                  //}                              }                          }                          else                          {                              // No derivate source files found' but we may build the derivatives from the JPEG2000 file                              if (!String.IsNullOrEmpty(jpeg2000_file))                              {                                  //if (( jpeg_file_lastModTime.HasValue ) && ( jpeg_file_lastModTime.Value.Month == 9 ) && ( jpeg_file_lastModTime.Value.Day == 6 ))                                    // Now' see if the other derivatives are missing or too old                                  if (((!jpeg_file_lastModTime.HasValue) || (jpeg_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)) ||                                      ((!jpeg_thumb_file_lastModTime.HasValue) || (jpeg_thumb_file_lastModTime.Value.CompareTo(jpeg2000_file_lastModTime) < 0)))                                  {                                      string name_sans_extension = Path.GetFileNameWithoutExtension(jpeg2000_file);                                        //// Create a temporary' full-size file                                      //string temp_file = resourceFolder + "\\" + name_sans_extension + "_sobektemp.tif";                                      //imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' temp_file' -1' -1' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                          // Create the JPEG derivatives from the JPEG2000                                      imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + "thm.jpg"' Settings.Resources.Thumbnail_Width' Settings.Resources.Thumbnail_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                      imageProcessor.ImageMagick_Create_JPEG(jpeg2000_file' resourceFolder + "\\" + name_sans_extension + ".jpg"' Settings.Resources.JPEG_Width' Settings.Resources.JPEG_Height' Resource.BuilderLogId' Resource.BibID + ":" + Resource.VID);                                        //// If the JPEG exists with width/height information clear the information                                      //if (names_to_mets_file.ContainsKey(name_sans_extension + ".jpg"))                                      //{                                      //    names_to_mets_file[name_sans_extension + ".jpg"].Height = 0;                                      //    names_to_mets_file[name_sans_extension + ".jpg"].Width = 0;                                      //}                                  }                              }                          }                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8);
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page1 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.VID + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,DeleteItemModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\DeleteItemModule.cs,DoWork,The following statement contains a magic number: string static_page2 = Settings.Servers.Static_Pages_Location + Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8) + "\\" + Resource.BibID + "_" + Resource.VID + ".html";
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,DoWork,The following statement contains a magic number: Resource.File_Root = Resource.BibID.Substring(0' 2) + "\\" + Resource.BibID.Substring(2' 2) + "\\" + Resource.BibID.Substring(4' 2) + "\\" + Resource.BibID.Substring(6' 2) + "\\" + Resource.BibID.Substring(8' 2);
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The following statement contains a magic number: string recd_filename = "recd_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + ".mets.bak";
Magic Number,SobekCM.Builder_Library.Modules.Items,MoveFilesToImageServerModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\MoveFilesToImageServerModule.cs,Rename_Any_Received_METS_File,The following statement contains a magic number: string recd_filename = "recd_" + DateTime.Now.Year + "_" + DateTime.Now.Month.ToString().PadLeft(2' '0') + "_" + DateTime.Now.Day.ToString().PadLeft(2' '0') + ".mets.bak";
Magic Number,SobekCM.Builder_Library.Modules.Items,SaveToDatabaseModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\SaveToDatabaseModule.cs,DoWork,The following statement contains a magic number: double size = all_files_final.Sum(ThisFile => (double)(((new FileInfo(ThisFile)).Length) / 1024));
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Items,UpdateJpegAttributesModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\UpdateJpegAttributesModule.cs,get_attributes_from_jpeg2000,The following statement contains a magic number: try              {                  // Get the height and width of this JPEG file                  FileStream reader = new FileStream(File' FileMode.Open' FileAccess.Read);                  int[] previousValues = { 0' 0' 0' 0 };                  int bytevalue = reader.ReadByte();                  int count = 1;                  while (bytevalue != -1)                  {                      // Move this value into the array                      previousValues[0] = previousValues[1];                      previousValues[1] = previousValues[2];                      previousValues[2] = previousValues[3];                      previousValues[3] = bytevalue;                        // Is this IHDR?                      if ((previousValues[0] == 105) && (previousValues[1] == 104) &&                          (previousValues[2] == 100) && (previousValues[3] == 114))                      {                          break;                      }                        // Is this the first four bytes and does it match the output from Kakadu 3-2?                      if ((count == 4) && (previousValues[0] == 255) && (previousValues[1] == 79) &&                          (previousValues[2] == 255) && (previousValues[3] == 81))                      {                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          reader.ReadByte();                          break;                      }                        // Read the next byte                      bytevalue = reader.ReadByte();                      count++;                  }                    // Now' read ahead for the height and width                  JPEG2000_File.Height = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  JPEG2000_File.Width = (ushort)((((((reader.ReadByte() * 256) + reader.ReadByte()) * 256) + reader.ReadByte()) * 256) + reader.ReadByte());                  reader.Close();                    return true;              }              catch              {                  return false;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (DateTime.Now.Day < 2)                  return;
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: try              {                  earliest_year = 2000 + Int32.Parse(earliest.Substring(4' 2));                  earliest_month = Int32.Parse(earliest.Substring(6' 2));                  latest_year = 2000 + Int32.Parse(latest.Substring(4' 2));                  latest_month = Int32.Parse(latest.Substring(6' 2));              }              catch (Exception )              {                  OnError("CalculateUsageStatisticsModule : Error parsing the earliest or latest log for year/month (" + earliest + " or " + latest + " )"' null' null' -1);                  return;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (statsDates.Earliest_Year == 2000)              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }              else              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        if (( curr_year > statsDates.Latest_Year ) || (( curr_year == statsDates.Latest_Year ) && ( curr_month > statsDates.Latest_Month )))                          year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (statsDates.Earliest_Year == 2000)              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }              else              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        if (( curr_year > statsDates.Latest_Year ) || (( curr_year == statsDates.Latest_Year ) && ( curr_month > statsDates.Latest_Month )))                          year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (statsDates.Earliest_Year == 2000)              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }              else              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        if (( curr_year > statsDates.Latest_Year ) || (( curr_year == statsDates.Latest_Year ) && ( curr_month > statsDates.Latest_Month )))                          year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (statsDates.Earliest_Year == 2000)              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }              else              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        if (( curr_year > statsDates.Latest_Year ) || (( curr_year == statsDates.Latest_Year ) && ( curr_month > statsDates.Latest_Month )))                          year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (statsDates.Earliest_Year == 2000)              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }              else              {                  // No stats every collected' so collect them all                  int curr_year = earliest_year;                  int curr_month = earliest_month;                  while ((curr_year < latest_year) || ((curr_year == latest_year) && (curr_month <= latest_month)))                  {                      if ((curr_year == DateTime.Now.Year) && (curr_month == DateTime.Now.Month))                          break;                        if (( curr_year > statsDates.Latest_Year ) || (( curr_year == statsDates.Latest_Year ) && ( curr_month > statsDates.Latest_Month )))                          year_month.Add(curr_year + curr_month.ToString().PadLeft(2' '0'));                        curr_month++;                      if (curr_month > 12)                      {                          curr_year++;                          curr_month = 1;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Send_Usage_Emails)              {                  // Load the text                  string possible_email_body_dir = Path.Combine(Settings.Servers.Application_Server_Network' "design"' "extra"' "stats");                  Usage_Stats_Email_Helper.Set_Email_Body(Path.Combine(possible_email_body_dir' "stats_email_body.txt"));                    // Send emails for each year/month (in order)                  foreach (string thisYearMonth in year_month)                  {                      int year = Convert.ToInt32(thisYearMonth.Substring(0' 4));                      int month = Convert.ToInt32(thisYearMonth.Substring(4' 2));                        Send_Usage_Emails(year' month' Settings.Servers.System_Base_URL' Settings.System.System_Name' Settings.Email.Setup.DefaultFromAddress' Settings.Email.Setup.DefaultFromDisplay );                    }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Send_Usage_Emails)              {                  // Load the text                  string possible_email_body_dir = Path.Combine(Settings.Servers.Application_Server_Network' "design"' "extra"' "stats");                  Usage_Stats_Email_Helper.Set_Email_Body(Path.Combine(possible_email_body_dir' "stats_email_body.txt"));                    // Send emails for each year/month (in order)                  foreach (string thisYearMonth in year_month)                  {                      int year = Convert.ToInt32(thisYearMonth.Substring(0' 4));                      int month = Convert.ToInt32(thisYearMonth.Substring(4' 2));                        Send_Usage_Emails(year' month' Settings.Servers.System_Base_URL' Settings.System.System_Name' Settings.Email.Setup.DefaultFromAddress' Settings.Email.Setup.DefaultFromDisplay );                    }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,DoWork,The following statement contains a magic number: if (Settings.Builder.Send_Usage_Emails)              {                  // Load the text                  string possible_email_body_dir = Path.Combine(Settings.Servers.Application_Server_Network' "design"' "extra"' "stats");                  Usage_Stats_Email_Helper.Set_Email_Body(Path.Combine(possible_email_body_dir' "stats_email_body.txt"));                    // Send emails for each year/month (in order)                  foreach (string thisYearMonth in year_month)                  {                      int year = Convert.ToInt32(thisYearMonth.Substring(0' 4));                      int month = Convert.ToInt32(thisYearMonth.Substring(4' 2));                        Send_Usage_Emails(year' month' Settings.Servers.System_Base_URL' Settings.System.System_Name' Settings.Email.Setup.DefaultFromAddress' Settings.Email.Setup.DefaultFromDisplay );                    }              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The following statement contains a magic number: foreach (DataRow thisRow in usersLinkedToItems.Rows)              {                  Thread.Sleep(1000);                    // Pull out the user information from this row                  string firstName = thisRow[0].ToString();                  string lastName = thisRow[1].ToString();                  string nickName = thisRow[2].ToString();                  int userid = Convert.ToInt32(thisRow[4]);                  string email = thisRow[5].ToString();                    // Compose the name                  string name = firstName + " " + lastName;                  if (nickName.Length > 0)                      name = nickName + " " + lastName;                    // Try to compose and send the email.  The email will only be sent if there was                   // some total usage this month' as well as total                  if (Usage_Stats_Email_Helper.Send_Individual_Usage_Email(userid' name' email' year' month' 10' SystemUrl' SystemName' fromAddr))                      emails_sent++;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The following statement contains a magic number: foreach (DataRow thisRow in usersLinkedToItems.Rows)              {                  Thread.Sleep(1000);                    // Pull out the user information from this row                  string firstName = thisRow[0].ToString();                  string lastName = thisRow[1].ToString();                  string nickName = thisRow[2].ToString();                  int userid = Convert.ToInt32(thisRow[4]);                  string email = thisRow[5].ToString();                    // Compose the name                  string name = firstName + " " + lastName;                  if (nickName.Length > 0)                      name = nickName + " " + lastName;                    // Try to compose and send the email.  The email will only be sent if there was                   // some total usage this month' as well as total                  if (Usage_Stats_Email_Helper.Send_Individual_Usage_Email(userid' name' email' year' month' 10' SystemUrl' SystemName' fromAddr))                      emails_sent++;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The following statement contains a magic number: foreach (DataRow thisRow in usersLinkedToItems.Rows)              {                  Thread.Sleep(1000);                    // Pull out the user information from this row                  string firstName = thisRow[0].ToString();                  string lastName = thisRow[1].ToString();                  string nickName = thisRow[2].ToString();                  int userid = Convert.ToInt32(thisRow[4]);                  string email = thisRow[5].ToString();                    // Compose the name                  string name = firstName + " " + lastName;                  if (nickName.Length > 0)                      name = nickName + " " + lastName;                    // Try to compose and send the email.  The email will only be sent if there was                   // some total usage this month' as well as total                  if (Usage_Stats_Email_Helper.Send_Individual_Usage_Email(userid' name' email' year' month' 10' SystemUrl' SystemName' fromAddr))                      emails_sent++;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The following statement contains a magic number: foreach (DataRow thisRow in usersLinkedToItems.Rows)              {                  Thread.Sleep(1000);                    // Pull out the user information from this row                  string firstName = thisRow[0].ToString();                  string lastName = thisRow[1].ToString();                  string nickName = thisRow[2].ToString();                  int userid = Convert.ToInt32(thisRow[4]);                  string email = thisRow[5].ToString();                    // Compose the name                  string name = firstName + " " + lastName;                  if (nickName.Length > 0)                      name = nickName + " " + lastName;                    // Try to compose and send the email.  The email will only be sent if there was                   // some total usage this month' as well as total                  if (Usage_Stats_Email_Helper.Send_Individual_Usage_Email(userid' name' email' year' month' 10' SystemUrl' SystemName' fromAddr))                      emails_sent++;              }
Magic Number,SobekCM.Builder_Library.Modules.Schedulable,CalculateUsageStatisticsModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Schedulable\CalculateUsageStatisticsModule.cs,Send_Usage_Emails,The following statement contains a magic number: foreach (DataRow thisRow in usersLinkedToItems.Rows)              {                  Thread.Sleep(1000);                    // Pull out the user information from this row                  string firstName = thisRow[0].ToString();                  string lastName = thisRow[1].ToString();                  string nickName = thisRow[2].ToString();                  int userid = Convert.ToInt32(thisRow[4]);                  string email = thisRow[5].ToString();                    // Compose the name                  string name = firstName + " " + lastName;                  if (nickName.Length > 0)                      name = nickName + " " + lastName;                    // Try to compose and send the email.  The email will only be sent if there was                   // some total usage this month' as well as total                  if (Usage_Stats_Email_Helper.Send_Individual_Usage_Email(userid' name' email' year' month' 10' SystemUrl' SystemName' fromAddr))                      emails_sent++;              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,FDA_Report_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\FDA_Report_Processor.cs,Process,The following statement contains a magic number: foreach (string thisXML in xml_files)              {                  if ((thisXML.IndexOf(".brief.xml") < 0) || (include_brief))                  {                      // Ensure the report still exists                      if (File.Exists(thisXML))                      {                          try                          {                              // Read the XML report                              FDA_Report_Data data = FDA_Report_Reader.Read(thisXML);                                if (data == null)                              {                                  Error_Count++;                              }                              else                              {                                    // If this is a valid report' save it to the collection                                  if (data.Report_Type != FDA_Report_Type.INVALID)                                  {                                      // Increment success count                                      Success_Count++;                                      //OnNewProgress(++success_count' 2 * (xml_files.Length + 2));                                        // Set the flags for this item                                      bool database_successful = true;                                        // Rewrite this if it is INGEST or DISSEMINATION and user asked to                                      if (((write_brief_always) || ((write_brief_on_warning) && (data.Warnings > 0)))                                          && ((data.Report_Type == FDA_Report_Type.INGEST) || (data.Report_Type == FDA_Report_Type.DISSEMINATION)))                                      {                                          // Write the brief report                                          FDA_Report_Writer.Write(data' data.FileName);                                      }                                        // Did the user ask to save to the database?                                      if (save_to_db)                                      {                                          // Save to the database                                          if (!SobekCM_Database.FDA_Report_Save( data ))                                          {                                              // If unsuccessful' set unsuccessful flag                                              database_successful = false;                                              Error_Count++;                                          }                                      }                                        // Move to the web space                                      string possible_bib_vid = data.Package;                                      if ((possible_bib_vid.Length == 16) && (possible_bib_vid[10] == '_'))                                      {                                          string bibid = possible_bib_vid.Substring(0' 10);                                          string vid = possible_bib_vid.Substring(11' 5);                                          string assocFilePath = bibid.Substring(0' 2) + "\\" + bibid.Substring(2' 2) + "\\" + bibid.Substring(4' 2) + "\\" + bibid.Substring(6' 2) + "\\" + bibid.Substring(8) + "\\" + vid;                                            // Determine the destination folder for this resource                                          string serverPackageFolder = Engine_ApplicationCache_Gateway.Settings.Servers.Image_Server_Network + assocFilePath;                                            // Make sure a directory exists here                                          if (!Directory.Exists(serverPackageFolder))                                          {                                              Directory.CreateDirectory(serverPackageFolder);                                          }                                            // Copy the file                                          string fileName = (new FileInfo(data.FileName)).Name;                                          File.Copy(data.FileName' serverPackageFolder + "\\" + fileName.Replace(".brief"' "")' true);                                      }                                        // If the user asked to delete the file and all work was successul'                                      // and this was not an error' delete the original report                                      if ((delete) && (database_successful))                                      {                                          try                                          {                                              File.Delete(data.FileName);                                          }                                          catch                                          {                                              Error_Count++;                                          }                                      }                                  }                              }                          }                          catch                           {                              Error_Count++;                          }                      }                  }                    // Show status for this part                  //OnNewProgress(success_count++' 2 * (xml_files.Length + 2));              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Create_Thumbnail,The following statement contains a magic number: try              {                  // Create the main JPEG for the first page of the PDF through ghostscript                  Process ghostScriptProcess = new Process {StartInfo = {FileName = Ghostscript_Exectuable' Arguments = "-q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dFirstPage=1 -dLastPage=1 -dMaxBitmap=500000000 -dGraphicsTextBits=1 -dTextAlphaBits=1 -sDEVICE=jpeg -sOutputFile=\"" + Working_Directory + "\\temp_builder.jpg\" \"" + PDF_In_Name + "\""' CreateNoWindow = true}};                  ghostScriptProcess.Start();                  ghostScriptProcess.WaitForExit(30000);                                    // Now' ensure the temp file was created                  if (!File.Exists(Working_Directory + "\\temp_builder.jpg"))                      return false;                    // Run imagemagick to create the thumbnail                  Process imageMagickProcess = new Process {StartInfo = {FileName = ImageMagick_Executable' Arguments = "\"" + Working_Directory + "\\temp_builder.jpg\" -resize 150x250 \"" + JPEG_Out_Name + "\""' CreateNoWindow = true}};                  imageMagickProcess.Start();                  imageMagickProcess.WaitForExit(30000);                    // Now' delete the temporary JPEG                  File.Delete(Working_Directory + "\\temp_builder.jpg");                    // Make sure the resulting file exists                  return File.Exists(JPEG_Out_Name);              }              catch              {                  try                  {                      // Delete the temporary JPEG' if it exists                      if (File.Exists(Working_Directory + "\\temp_builder.jpg"))                          File.Delete( Working_Directory + "\\temp_builder.jpg" );                  }                  catch                  {                  }                    return false;              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,Create_Thumbnail,The following statement contains a magic number: try              {                  // Create the main JPEG for the first page of the PDF through ghostscript                  Process ghostScriptProcess = new Process {StartInfo = {FileName = Ghostscript_Exectuable' Arguments = "-q -dQUIET -dSAFER -dBATCH -dNOPAUSE -dNOPROMPT -dFirstPage=1 -dLastPage=1 -dMaxBitmap=500000000 -dGraphicsTextBits=1 -dTextAlphaBits=1 -sDEVICE=jpeg -sOutputFile=\"" + Working_Directory + "\\temp_builder.jpg\" \"" + PDF_In_Name + "\""' CreateNoWindow = true}};                  ghostScriptProcess.Start();                  ghostScriptProcess.WaitForExit(30000);                                    // Now' ensure the temp file was created                  if (!File.Exists(Working_Directory + "\\temp_builder.jpg"))                      return false;                    // Run imagemagick to create the thumbnail                  Process imageMagickProcess = new Process {StartInfo = {FileName = ImageMagick_Executable' Arguments = "\"" + Working_Directory + "\\temp_builder.jpg\" -resize 150x250 \"" + JPEG_Out_Name + "\""' CreateNoWindow = true}};                  imageMagickProcess.Start();                  imageMagickProcess.WaitForExit(30000);                    // Now' delete the temporary JPEG                  File.Delete(Working_Directory + "\\temp_builder.jpg");                    // Make sure the resulting file exists                  return File.Exists(JPEG_Out_Name);              }              catch              {                  try                  {                      // Delete the temporary JPEG' if it exists                      if (File.Exists(Working_Directory + "\\temp_builder.jpg"))                          File.Delete( Working_Directory + "\\temp_builder.jpg" );                  }                  catch                  {                  }                    return false;              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: const int NUMBER_OF_CHARS_TO_KEEP = 5;
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,ExtractTextFromPDFBytes,The following statement contains a magic number: try              {                  StringBuilder resultString = new StringBuilder();                    // Flag showing if we are we currently inside a text object                  bool inTextObject = false;                    // Flag showing if the next character is literal                   // e.g. '\\' to get a '\' character or '\(' to get '('                  bool nextLiteral = false;                    // () Bracket nesting level. Text appears inside ()                  int bracketDepth = 0;                    char lastCharacter = ' ';                    // Keep previous chars to get extract numbers etc.:                  char[] previousCharacters = new char[NUMBER_OF_CHARS_TO_KEEP];                  for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP; j++) previousCharacters[j] = ' ';                    // When building ascii in a PDF' use the extended ascii encoding set and build the ascii                  int build_ascii = 0;                  int build_octal = 0;                  Encoding windows1252Encoder = Encoding.GetEncoding(1252);                    foreach (byte t in Input)                   {                      char c = (char)t;                        // If we were building the ascii for a literal >128 ascii character' deal                      // with that here and indicate done with literal                      if ((build_ascii > 0) && (!Char.IsNumber(c)))                      {                          // In some PDFs we receive from born-digital newspapers' the Windows1252                          // code section is repeated slightly higher' partly in reverse                          if (build_ascii == 325) build_octal = 146;                          if (build_ascii == 324) build_octal = 145;                          if (build_ascii == 323) build_octal = 148;                          if (build_ascii == 322) build_octal = 147;                          if (build_ascii == 320) build_octal = 150;                          if (build_ascii == 319) build_octal = 151;                            if (build_octal == 213)                              build_octal = 146;                            if ((build_octal >= 145) && (build_octal <= 151))                          {                              char[] converted_chars = windows1252Encoder.GetChars(new byte[] { (byte)build_octal });                              resultString.Append(converted_chars[0]);                              lastCharacter = converted_chars[0];                          }                            build_ascii = 0;                          build_octal = 0;                          nextLiteral = false;                      }                        if (inTextObject)                      {                          // Position the text                          if (bracketDepth == 0)                          {                              if (CheckToken(td_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                              {                                  if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                  {                                      resultString.Remove(resultString.Length - 2' 2);                                  }                                  else                                  {                                      if (lastCharacter != ' ')                                      {                                          lastCharacter = ' ';                                          resultString.Append(" ");                                      }                                  }                              }                              else                              {                                  if (CheckToken(special_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                  {                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                      {                                          resultString.Remove(resultString.Length - 2' 2);                                      }                                      else                                      {                                          if (lastCharacter != ' ')                                          {                                              lastCharacter = ' ';                                              resultString.Append(" ");                                          }                                      }                                  }                                  else                                  {                                      if (CheckToken(tj_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                                      {                                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                          {                                              resultString.Remove(resultString.Length - 2' 2);                                          }                                          else                                          {                                              if (lastCharacter != ' ')                                              {                                                  lastCharacter = ' ';                                                  resultString.Append(" ");                                              }                                          }                                      }                                  }                              }                          }                            // End of a text object' also go to a new line.                          if (bracketDepth == 0 &&                              CheckToken(et_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                          {                                inTextObject = false;                              if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                              {                                  resultString.Remove(resultString.Length - 2' 2);                              }                              else                              {                                  if (lastCharacter != ' ')                                  {                                      lastCharacter = ' ';                                      resultString.Append(" ");                                  }                              }                          }                          else                          {                              // Start outputting text                              if ((c == '(') && (bracketDepth == 0) && (!nextLiteral))                              {                                  bracketDepth = 1;                                  //if (lastCharacter != ' ')                                  //{                                  //    lastCharacter = ' ';                                  //    resultString.Append(" ");                                  //}                              }                              else                              {                                  // Stop outputting text                                  if ((c == ')') && (bracketDepth == 1) && (!nextLiteral))                                  {                                      bracketDepth = 0;                                  }                                  else                                  {                                      // Just a normal text character:                                      if (bracketDepth == 1)                                      {                                          // Only print out next character no matter what.                                           // Do not interpret.                                          if (c == '\\' && !nextLiteral)                                          {                                              nextLiteral = true;                                              build_ascii = 0;                                              build_octal = 0;                                          }                                          else                                          {                                              if ((nextLiteral) && (Char.IsNumber(c)))                                              {                                                  build_octal = (build_octal * 8) + Convert.ToInt32(c.ToString());                                                  build_ascii = (build_ascii * 10) + Convert.ToInt32(c.ToString());                                              }                                              else                                              {                                                  if (((c >= ' ') && (c <= '~')) || ((c >= 128) && (c < 255)))                                                  {                                                      if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                                                      {                                                          resultString.Remove(resultString.Length - 2' 2);                                                      }                                                        // No point in putting in two spaces in a row                                                      if ((c != ' ') || (lastCharacter != ' '))                                                      {                                                          lastCharacter = c;                                                          resultString.Append(c);                                                      }                                                  }                                                    nextLiteral = false;                                              }                                          }                                      }                                  }                              }                          }                      }                        // Store the recent characters for                       // when we have to go back for a checking                      for (int j = 0; j < NUMBER_OF_CHARS_TO_KEEP - 1; j++)                      {                          previousCharacters[j] = previousCharacters[j + 1];                      }                      previousCharacters[NUMBER_OF_CHARS_TO_KEEP - 1] = c;                        // Start of a text object                      if (!inTextObject && CheckToken(bt_array' previousCharacters' NUMBER_OF_CHARS_TO_KEEP))                      {                          if ((resultString.Length > 1) && (resultString[resultString.Length - 2] == '-') && (resultString[resultString.Length - 1] == ' '))                          {                              resultString.Remove(resultString.Length - 2' 2);                          }                          else                          {                              if (lastCharacter != ' ')                              {                                  lastCharacter = ' ';                                  resultString.Append(" ");                              }                          }                          inTextObject = true;                      }                  }                  return resultString.ToString().Replace("Υ"' "'").Replace(""' "\"").Replace("Σ"' "\"").Replace("¥"' "•");              }              catch              {                  return "";              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,PDF_Tools,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\PDF_Tools.cs,CheckToken,The following statement contains a magic number: foreach (string token in Tokens)              {                  if (token.Length > 1)                  {                      if ((Recent[NumberOfCharsToKeep - 3] == token[0]) &&                          (Recent[NumberOfCharsToKeep - 2] == token[1]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 4] == ' ') ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 4] == 0x0a))                          )                      {                          return true;                      }                  }                  else                  {                      if ((Recent[NumberOfCharsToKeep - 2] == token[0]) &&                          ((Recent[NumberOfCharsToKeep - 1] == ' ') ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 1] == 0x0a)) &&                          ((Recent[NumberOfCharsToKeep - 3] == ' ') ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0d) ||                          (Recent[NumberOfCharsToKeep - 3] == 0x0a))                          )                      {                          return true;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Tools,Text_Cleaner,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Text_Cleaner.cs,Clean_Text_File,The following statement contains a magic number: for (int i = 0; i < 100; i++)              {                  alltext = alltext.Replace("  "' " ");              }
Magic Number,SobekCM.Builder_Library.Tools,Text_Cleaner,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Text_Cleaner.cs,Clean_Text_File,The following statement contains a magic number: foreach (char thisChar in alltext)              {                  int ascii = thisChar;                  if ((ascii < 169) && (ascii != 152) && (ascii != 158) && ( ascii != 127 ))                  {                      textWriter.Write(thisChar);                  }              }
Magic Number,SobekCM.Builder_Library.Tools,Text_Cleaner,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Text_Cleaner.cs,Clean_Text_File,The following statement contains a magic number: foreach (char thisChar in alltext)              {                  int ascii = thisChar;                  if ((ascii < 169) && (ascii != 152) && (ascii != 158) && ( ascii != 127 ))                  {                      textWriter.Write(thisChar);                  }              }
Magic Number,SobekCM.Builder_Library.Tools,Text_Cleaner,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Text_Cleaner.cs,Clean_Text_File,The following statement contains a magic number: foreach (char thisChar in alltext)              {                  int ascii = thisChar;                  if ((ascii < 169) && (ascii != 152) && (ascii != 158) && ( ascii != 127 ))                  {                      textWriter.Write(thisChar);                  }              }
Magic Number,SobekCM.Builder_Library.Tools,Text_Cleaner,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Text_Cleaner.cs,Clean_Text_File,The following statement contains a magic number: foreach (char thisChar in alltext)              {                  int ascii = thisChar;                  if ((ascii < 169) && (ascii != 152) && (ascii != 158) && ( ascii != 127 ))                  {                      textWriter.Write(thisChar);                  }              }
Magic Number,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Word_To_PDF,The following statement contains a magic number: if (ret == 1)                  return 4;
Magic Number,SobekCM.Builder_Library.Tools,Word_Powerpoint_to_PDF_Converter,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Tools\Word_Powerpoint_to_PDF_Converter.cs,Powerpoint_To_PDF,The following statement contains a magic number: if (ret == 1)                  return 4;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: foreach (SobekCM_Hit hit in hits.Values)              {  				if (hit.SobekCM_URL.ToUpper().IndexOf(".ASPX") < 0)                  {                      // Always increment the hits                      returnValue.Increment_Hits();                        // Add this IP hit                      returnValue.Add_IP_Hit(hit.IP' hit.UserAgent);                        // Shouldn't start with '/'  					if (hit.SobekCM_URL[0] == '/')                      {  						hit.SobekCM_URL = hit.SobekCM_URL.Substring(1);                      }  					hit.SobekCM_URL = hit.SobekCM_URL.ToLower();  					if (hit.SobekCM_URL.IndexOf("design/webcontent/") == 0)  						hit.SobekCM_URL = hit.SobekCM_URL.Substring(18);                        // Add this as a webcontent hit  					returnValue.Add_WebContent_Hit(hit.SobekCM_URL);                  }                  else                  {                      // parse the url                      string[] splitter = hit.Query_String.ToLower().Split("&".ToCharArray());                      NameValueCollection queryStringCollection = new NameValueCollection();                      foreach (string thisSplit in splitter)                      {                          int equals_index = thisSplit.IndexOf("=");                          if ((equals_index > 0) && (equals_index < thisSplit.Length - 1))                          {                              string query_name = thisSplit.Substring(0' equals_index);                              string query_value = thisSplit.Substring(equals_index + 1);                              queryStringCollection[query_name] = query_value;                                if (query_name.ToLower() == "portal")  								hit.SobekCM_URL = query_value;                          }                      }                        // Now' get the navigation object using the standard SobekCM method                        try                      {                          Navigation_Object currentMode = new Navigation_Object();                          QueryString_Analyzer.Parse_Query(queryStringCollection' currentMode' hit.SobekCM_URL'                              new string[] { "en" }' Engine_ApplicationCache_Gateway.Codes' Engine_ApplicationCache_Gateway.Collection_Aliases'                              Engine_ApplicationCache_Gateway.Items' Engine_ApplicationCache_Gateway.URL_Portals' Engine_ApplicationCache_Gateway.WebContent_Hierarchy' null);                            if (currentMode != null)                              currentMode.Set_Robot_Flag(hit.UserAgent' hit.IP);                          if ((currentMode != null) && (!currentMode.Is_Robot))                          {                              // Always increment the hits                              returnValue.Increment_Hits();                                // Add this IP hit                              returnValue.Add_IP_Hit(hit.IP' hit.UserAgent);                                // Increment the portal hits                              returnValue.Add_Portal_Hit(currentMode.Instance_Name.ToUpper());                                // Check for pre-existing session                              SobekCM_Session thisSession;                              if (sessions.ContainsKey(hit.IP))                              {                                  SobekCM_Session possibleSession = sessions[hit.IP];                                  TimeSpan difference = hit.Time.Subtract(possibleSession.Last_Hit);                                  if (difference.TotalMinutes >= 60)                                  {                                      thisSession = new SobekCM_Session(hit.IP' hit.Time);                                      sessions[hit.IP] = thisSession;                                        returnValue.Increment_Sessions();                                  }                                  else                                  {                                      possibleSession.Last_Hit = hit.Time;                                      thisSession = possibleSession;                                  }                              }                              else                              {                                  thisSession = new SobekCM_Session(hit.IP' hit.Time);                                  sessions.Add(hit.IP' thisSession);                                    returnValue.Increment_Sessions();                              }                                if ((currentMode.Mode == Display_Mode_Enum.Item_Display) ||                                  (currentMode.Mode == Display_Mode_Enum.Item_Print))                              {                                  if (((currentMode.ItemID_DEPRECATED.HasValue ) && ( currentMode.ItemID_DEPRECATED > 0)) ||                                      (( !String.IsNullOrEmpty(currentMode.VID)) && (!String.IsNullOrEmpty(currentMode.BibID))))                                  {                                      if ((!currentMode.ItemID_DEPRECATED.HasValue ) || ( currentMode.ItemID_DEPRECATED < 0 ))                                      {                                          if (bib_vid_itemid_dictionary.ContainsKey(currentMode.BibID + ":" + currentMode.VID))                                          {                                              currentMode.ItemID_DEPRECATED = bib_vid_itemid_dictionary[currentMode.BibID + ":" + currentMode.VID];                                          }                                      }                                        int itemid = -1;                                      if (currentMode.ItemID_DEPRECATED.HasValue)                                          itemid = currentMode.ItemID_DEPRECATED.Value;                                        returnValue.Add_Item_Hit(itemid' currentMode.BibID'                                                               currentMode.VID' currentMode.ViewerCode'                                                               currentMode.Text_Search' thisSession.SessionID);                                  }                                  else if ( !String.IsNullOrEmpty(currentMode.BibID))                                  {                                      returnValue.Add_Bib_Hit(currentMode.BibID.ToUpper()' thisSession.SessionID);                                  }                              }                              else                              {                                  string code = currentMode.Aggregation;                                  string institution = String.Empty;                                  if (( !String.IsNullOrEmpty(code)) && (code.ToUpper()[0] == 'I'))                                  {                                      institution = code;                                      code = String.Empty;                                  }                                      if (( !String.IsNullOrEmpty(institution)) && (institution.ToUpper()[0] != 'I'))                                      institution = "i" + institution;                                    // For some collections we are counting the institution hit and collection                                  // hit just so the full use of the site is recorded                                  if ( !String.IsNullOrEmpty(code))                                  {                                      returnValue.Add_Collection_Hit(code.ToLower()' currentMode.Mode' currentMode.Aggregation_Type' thisSession.SessionID);                                  }                                    // Was this an institutional level hit?                                  if ( !String.IsNullOrEmpty(institution))                                  {                                      returnValue.Add_Institution_Hit(institution.ToLower()' currentMode.Mode' currentMode.Aggregation_Type' thisSession.SessionID);                                  }                                    // Is this a static "webcontent" top-level page?                                  if (currentMode.Mode == Display_Mode_Enum.Simple_HTML_CMS)                                  {                                      if ((currentMode.Info_Browse_Mode != "unknown") &&                                          (currentMode.Info_Browse_Mode != "default"))                                      {                                          returnValue.Add_WebContent_Hit(currentMode.Info_Browse_Mode.ToLower());                                      }                                  }                                    // Add the write type' if not normal HTML stuff                                  switch (currentMode.Writer_Type)                                  {                                      case Writer_Type_Enum.DataSet:                                      case Writer_Type_Enum.XML:                                          returnValue.Add_XML_Hit();                                          break;                                        case Writer_Type_Enum.OAI:                                          returnValue.Add_OAI_Hit();                                          break;                                        case Writer_Type_Enum.JSON:                                          returnValue.Add_JSON_Hit();                                          break;                                  }                              }                          }                          else                          {                              if ((currentMode != null) && (currentMode.Is_Robot))                                  returnValue.Add_Robot_Hit();                          }                      }                      catch (Exception ee)                      {                          if (ee.Message.Length > 0)                              return null;                          // Do nothing.. not important?                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following statement contains a magic number: foreach (SobekCM_Hit hit in hits.Values)              {  				if (hit.SobekCM_URL.ToUpper().IndexOf(".ASPX") < 0)                  {                      // Always increment the hits                      returnValue.Increment_Hits();                        // Add this IP hit                      returnValue.Add_IP_Hit(hit.IP' hit.UserAgent);                        // Shouldn't start with '/'  					if (hit.SobekCM_URL[0] == '/')                      {  						hit.SobekCM_URL = hit.SobekCM_URL.Substring(1);                      }  					hit.SobekCM_URL = hit.SobekCM_URL.ToLower();  					if (hit.SobekCM_URL.IndexOf("design/webcontent/") == 0)  						hit.SobekCM_URL = hit.SobekCM_URL.Substring(18);                        // Add this as a webcontent hit  					returnValue.Add_WebContent_Hit(hit.SobekCM_URL);                  }                  else                  {                      // parse the url                      string[] splitter = hit.Query_String.ToLower().Split("&".ToCharArray());                      NameValueCollection queryStringCollection = new NameValueCollection();                      foreach (string thisSplit in splitter)                      {                          int equals_index = thisSplit.IndexOf("=");                          if ((equals_index > 0) && (equals_index < thisSplit.Length - 1))                          {                              string query_name = thisSplit.Substring(0' equals_index);                              string query_value = thisSplit.Substring(equals_index + 1);                              queryStringCollection[query_name] = query_value;                                if (query_name.ToLower() == "portal")  								hit.SobekCM_URL = query_value;                          }                      }                        // Now' get the navigation object using the standard SobekCM method                        try                      {                          Navigation_Object currentMode = new Navigation_Object();                          QueryString_Analyzer.Parse_Query(queryStringCollection' currentMode' hit.SobekCM_URL'                              new string[] { "en" }' Engine_ApplicationCache_Gateway.Codes' Engine_ApplicationCache_Gateway.Collection_Aliases'                              Engine_ApplicationCache_Gateway.Items' Engine_ApplicationCache_Gateway.URL_Portals' Engine_ApplicationCache_Gateway.WebContent_Hierarchy' null);                            if (currentMode != null)                              currentMode.Set_Robot_Flag(hit.UserAgent' hit.IP);                          if ((currentMode != null) && (!currentMode.Is_Robot))                          {                              // Always increment the hits                              returnValue.Increment_Hits();                                // Add this IP hit                              returnValue.Add_IP_Hit(hit.IP' hit.UserAgent);                                // Increment the portal hits                              returnValue.Add_Portal_Hit(currentMode.Instance_Name.ToUpper());                                // Check for pre-existing session                              SobekCM_Session thisSession;                              if (sessions.ContainsKey(hit.IP))                              {                                  SobekCM_Session possibleSession = sessions[hit.IP];                                  TimeSpan difference = hit.Time.Subtract(possibleSession.Last_Hit);                                  if (difference.TotalMinutes >= 60)                                  {                                      thisSession = new SobekCM_Session(hit.IP' hit.Time);                                      sessions[hit.IP] = thisSession;                                        returnValue.Increment_Sessions();                                  }                                  else                                  {                                      possibleSession.Last_Hit = hit.Time;                                      thisSession = possibleSession;                                  }                              }                              else                              {                                  thisSession = new SobekCM_Session(hit.IP' hit.Time);                                  sessions.Add(hit.IP' thisSession);                                    returnValue.Increment_Sessions();                              }                                if ((currentMode.Mode == Display_Mode_Enum.Item_Display) ||                                  (currentMode.Mode == Display_Mode_Enum.Item_Print))                              {                                  if (((currentMode.ItemID_DEPRECATED.HasValue ) && ( currentMode.ItemID_DEPRECATED > 0)) ||                                      (( !String.IsNullOrEmpty(currentMode.VID)) && (!String.IsNullOrEmpty(currentMode.BibID))))                                  {                                      if ((!currentMode.ItemID_DEPRECATED.HasValue ) || ( currentMode.ItemID_DEPRECATED < 0 ))                                      {                                          if (bib_vid_itemid_dictionary.ContainsKey(currentMode.BibID + ":" + currentMode.VID))                                          {                                              currentMode.ItemID_DEPRECATED = bib_vid_itemid_dictionary[currentMode.BibID + ":" + currentMode.VID];                                          }                                      }                                        int itemid = -1;                                      if (currentMode.ItemID_DEPRECATED.HasValue)                                          itemid = currentMode.ItemID_DEPRECATED.Value;                                        returnValue.Add_Item_Hit(itemid' currentMode.BibID'                                                               currentMode.VID' currentMode.ViewerCode'                                                               currentMode.Text_Search' thisSession.SessionID);                                  }                                  else if ( !String.IsNullOrEmpty(currentMode.BibID))                                  {                                      returnValue.Add_Bib_Hit(currentMode.BibID.ToUpper()' thisSession.SessionID);                                  }                              }                              else                              {                                  string code = currentMode.Aggregation;                                  string institution = String.Empty;                                  if (( !String.IsNullOrEmpty(code)) && (code.ToUpper()[0] == 'I'))                                  {                                      institution = code;                                      code = String.Empty;                                  }                                      if (( !String.IsNullOrEmpty(institution)) && (institution.ToUpper()[0] != 'I'))                                      institution = "i" + institution;                                    // For some collections we are counting the institution hit and collection                                  // hit just so the full use of the site is recorded                                  if ( !String.IsNullOrEmpty(code))                                  {                                      returnValue.Add_Collection_Hit(code.ToLower()' currentMode.Mode' currentMode.Aggregation_Type' thisSession.SessionID);                                  }                                    // Was this an institutional level hit?                                  if ( !String.IsNullOrEmpty(institution))                                  {                                      returnValue.Add_Institution_Hit(institution.ToLower()' currentMode.Mode' currentMode.Aggregation_Type' thisSession.SessionID);                                  }                                    // Is this a static "webcontent" top-level page?                                  if (currentMode.Mode == Display_Mode_Enum.Simple_HTML_CMS)                                  {                                      if ((currentMode.Info_Browse_Mode != "unknown") &&                                          (currentMode.Info_Browse_Mode != "default"))                                      {                                          returnValue.Add_WebContent_Hit(currentMode.Info_Browse_Mode.ToLower());                                      }                                  }                                    // Add the write type' if not normal HTML stuff                                  switch (currentMode.Writer_Type)                                  {                                      case Writer_Type_Enum.DataSet:                                      case Writer_Type_Enum.XML:                                          returnValue.Add_XML_Hit();                                          break;                                        case Writer_Type_Enum.OAI:                                          returnValue.Add_OAI_Hit();                                          break;                                        case Writer_Type_Enum.JSON:                                          returnValue.Add_JSON_Hit();                                          break;                                  }                              }                          }                          else                          {                              if ((currentMode != null) && (currentMode.Is_Robot))                                  returnValue.Add_Robot_Hit();                          }                      }                      catch (Exception ee)                      {                          if (ee.Message.Length > 0)                              return null;                          // Do nothing.. not important?                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,SobekCM_Stats_DataSet,The following statement contains a magic number: newRow[2] = 0;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,SobekCM_Stats_DataSet,The following statement contains a magic number: newRow[3] = 0;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,SobekCM_Stats_DataSet,The following statement contains a magic number: newRow[4] = 0;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,SobekCM_Stats_DataSet,The following statement contains a magic number: newRow[5] = 0;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,SobekCM_Stats_DataSet,The following statement contains a magic number: hit_ip_cutoff = 50;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_XML_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_XML_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_OAI_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_OAI_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_JSON_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_JSON_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_Robot_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Add_Robot_Hit,The following statement contains a magic number: sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + 1;
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: institution_stats = stats.Tables[2];
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: bib_stats = stats.Tables[3];
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: item_stats = stats.Tables[4];
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: ip_addresses = stats.Tables[5];
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (stats.Tables.Count > 6)              {                  portal_stats = stats.Tables[6];                  webcontent_stats = stats.Tables[7];              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (stats.Tables.Count > 6)              {                  portal_stats = stats.Tables[6];                  webcontent_stats = stats.Tables[7];              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (stats.Tables.Count > 6)              {                  portal_stats = stats.Tables[6];                  webcontent_stats = stats.Tables[7];              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (filename.Length == 8)              {                  int year = Convert.ToInt32(filename.Substring(0' 4));                  int month = Convert.ToInt32(filename.Substring(4' 2));                  int day = Convert.ToInt32(filename.Substring(6' 2));                    date = new DateTime(year' month' day);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (filename.Length == 8)              {                  int year = Convert.ToInt32(filename.Substring(0' 4));                  int month = Convert.ToInt32(filename.Substring(4' 2));                  int day = Convert.ToInt32(filename.Substring(6' 2));                    date = new DateTime(year' month' day);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (filename.Length == 8)              {                  int year = Convert.ToInt32(filename.Substring(0' 4));                  int month = Convert.ToInt32(filename.Substring(4' 2));                  int day = Convert.ToInt32(filename.Substring(6' 2));                    date = new DateTime(year' month' day);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (filename.Length == 8)              {                  int year = Convert.ToInt32(filename.Substring(0' 4));                  int month = Convert.ToInt32(filename.Substring(4' 2));                  int day = Convert.ToInt32(filename.Substring(6' 2));                    date = new DateTime(year' month' day);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (filename.Length == 8)              {                  int year = Convert.ToInt32(filename.Substring(0' 4));                  int month = Convert.ToInt32(filename.Substring(4' 2));                  int day = Convert.ToInt32(filename.Substring(6' 2));                    date = new DateTime(year' month' day);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Read_XML,The following statement contains a magic number: if (filename.Length == 8)              {                  int year = Convert.ToInt32(filename.Substring(0' 4));                  int month = Convert.ToInt32(filename.Substring(4' 2));                  int day = Convert.ToInt32(filename.Substring(6' 2));                    date = new DateTime(year' month' day);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Perform_SQL_Inserts,The following statement contains a magic number: if ((webcontent_stats != null) && (webcontent_stats.Rows.Count > 0))              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      // Calculate the complete hits                      StringBuilder sql_builder = new StringBuilder("Level1=\"" + thisRow[2].ToString().Replace("\""' "").Replace("'"' "") + "\"");                      if (thisRow[3].ToString().Length > 0)                      {                          sql_builder.Append(" and Level2=\"" + thisRow[3].ToString().Replace("\""' "").Replace("'"' "") + "\"");                          if (thisRow[4].ToString().Length > 0)                          {                              sql_builder.Append(" and Level3=\"" + thisRow[4].ToString().Replace("\""' "").Replace("'"' "") + "\"");                              if (thisRow[5].ToString().Length > 0)                              {                                  sql_builder.Append(" and Level4=\"" + thisRow[5].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                  if (thisRow[6].ToString().Length > 0)                                  {                                      sql_builder.Append(" and Level5=\"" + thisRow[6].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                      if (thisRow[7].ToString().Length > 0)                                      {                                          sql_builder.Append(" and Level6=\"" + thisRow[7].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                          if (thisRow[8].ToString().Length > 0)                                          {                                              sql_builder.Append(" and Level7=\"" + thisRow[8].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              if (thisRow[9].ToString().Length > 0)                                              {                                                  sql_builder.Append(" and Level8=\"" + thisRow[9].ToString().Replace("\""' "").Replace("'"' "") + "\"");                                              }                                          }                                      }                                  }                              }                          }                      }                        try                      {                          DataRow[] matches = webcontent_stats.Select(sql_builder.ToString().Replace("\""'"'"));                          int hits_complete = matches.Sum(childRow => Convert.ToInt32(childRow[1]));                            Engine_Database.Save_WebContent_Statistics(year' month' Convert.ToInt32(thisRow[1])' hits_complete' thisRow[2].ToString()'                              thisRow[3].ToString()' thisRow[4].ToString()' thisRow[5].ToString()' thisRow[6].ToString()' thisRow[7].ToString()' thisRow[8].ToString()'                              thisRow[9].ToString()' null);                      }                      catch (Exception ee)                      {                          throw ee;                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (webcontent_stats != null)              {                  foreach (DataRow thisRow in webcontent_stats.Rows)                  {                      thisRow[2] = String.Empty;                      thisRow[3] = String.Empty;                      thisRow[4] = String.Empty;                      thisRow[5] = String.Empty;                      thisRow[6] = String.Empty;                      thisRow[7] = String.Empty;                      thisRow[8] = String.Empty;                      thisRow[9] = String.Empty;                      string[] address = thisRow[0].ToString().Split("/".ToCharArray());                      if (address.Length > 0) thisRow[2] = address[0];                      if (address.Length > 1) thisRow[3] = address[1];                      if (address.Length > 2) thisRow[4] = address[2];                      if (address.Length > 3) thisRow[5] = address[3];                      if (address.Length > 4) thisRow[6] = address[4];                      if (address.Length > 5) thisRow[7] = address[5];                      if (address.Length > 6) thisRow[8] = address[6];                      if (address.Length > 7) thisRow[9] = address[7];                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (ip_addresses.Rows.Count != 0)              {                  ip_to_agent.Clear();                  ip_hits.Clear();                  foreach (DataRow thisRow in ip_addresses.Rows)                  {                      string ip = thisRow[0].ToString();                      string useragent = thisRow[1].ToString();                      int hits = Convert.ToInt32(thisRow[2]);                        ip_to_agent[ip] = useragent;                      ip_hits[ip] = hits;                  }                  ip_addresses.Clear();              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: if (ip_hits.Count > 0)              {                  SortedList<int' List<string>> sort_ip = new SortedList<int' List<string>>();                  foreach (string thisKey in ip_hits.Keys)                  {                      int hits = ip_hits[thisKey];                      if (sort_ip.ContainsKey(hits))                      {                          sort_ip[hits].Add(thisKey);                      }                      else                      {                          List<string> new_ip_list = new List<string> {thisKey};                          sort_ip[hits] = new_ip_list;                      }                  }                    foreach (KeyValuePair<int' List<string>> ipPair in sort_ip)                  {                      if (ipPair.Key >= hit_ip_cutoff)                      {                          foreach (string IP in ipPair.Value)                          {                              DataRow newRow = ip_addresses.NewRow();                              newRow[0] = IP;                              if (ip_to_agent.ContainsKey(IP))                                  newRow[1] = ip_to_agent[IP];                                newRow[2] = ipPair.Key;                              ip_addresses.Rows.Add(newRow);                          }                      }                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: Write_XML(directory' date.Year + date.Month.ToString().PadLeft(2' '0') + date.Day.ToString().PadLeft(2' '0') + ".xml");
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Write_XML,The following statement contains a magic number: Write_XML(directory' date.Year + date.Month.ToString().PadLeft(2' '0') + date.Day.ToString().PadLeft(2' '0') + ".xml");
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.SobekCM_Stats_Table.Rows)              {                  sobekcm_stats.Rows[0][0] = Convert.ToInt32(sobekcm_stats.Rows[0][0]) + Convert.ToInt32(thisRow[0]);                  sobekcm_stats.Rows[0][1] = Convert.ToInt32(sobekcm_stats.Rows[0][1]) + Convert.ToInt32(thisRow[1]);                  sobekcm_stats.Rows[0][2] = Convert.ToInt32(sobekcm_stats.Rows[0][2]) + Convert.ToInt32(thisRow[2]);                  sobekcm_stats.Rows[0][3] = Convert.ToInt32(sobekcm_stats.Rows[0][3]) + Convert.ToInt32(thisRow[3]);                  sobekcm_stats.Rows[0][4] = Convert.ToInt32(sobekcm_stats.Rows[0][4]) + Convert.ToInt32(thisRow[4]);                  sobekcm_stats.Rows[0][5] = Convert.ToInt32(sobekcm_stats.Rows[0][5]) + Convert.ToInt32(thisRow[5]);              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Collection_Stats_Table.Rows)              {                  if (collection_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = collection_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newCollectionRow = collection_stats.NewRow();                      newCollectionRow[0] = thisRow[0];                      newCollectionRow[1] = thisRow[1];                      newCollectionRow[2] = thisRow[2];                      newCollectionRow[3] = thisRow[3];                      newCollectionRow[4] = thisRow[4];                      newCollectionRow[5] = thisRow[5];                      collection_stats.Rows.Add(newCollectionRow);                      collection_rows.Add(thisRow[0].ToString()' newCollectionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Institution_Stats_Table.Rows)              {                  if (institution_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = institution_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                  }                  else                  {                      // Add as a new row                      DataRow newInstitutionRow = institution_stats.NewRow();                      newInstitutionRow[0] = thisRow[0];                      newInstitutionRow[1] = thisRow[1];                      newInstitutionRow[2] = thisRow[2];                      newInstitutionRow[3] = thisRow[3];                      newInstitutionRow[4] = thisRow[4];                      newInstitutionRow[5] = thisRow[5];                      institution_stats.Rows.Add(newInstitutionRow);                      institution_rows.Add(thisRow[0].ToString()' newInstitutionRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Bib_Stats_Table.Rows)              {                  if (bib_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = bib_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newBibRow = bib_stats.NewRow();                      newBibRow[0] = thisRow[0];                      newBibRow[1] = thisRow[1];                      newBibRow[2] = thisRow[2];                      bib_stats.Rows.Add(newBibRow);                      bib_rows.Add(thisRow[0].ToString()' newBibRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Bib_Stats_Table.Rows)              {                  if (bib_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = bib_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newBibRow = bib_stats.NewRow();                      newBibRow[0] = thisRow[0];                      newBibRow[1] = thisRow[1];                      newBibRow[2] = thisRow[2];                      bib_stats.Rows.Add(newBibRow);                      bib_rows.Add(thisRow[0].ToString()' newBibRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Bib_Stats_Table.Rows)              {                  if (bib_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = bib_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newBibRow = bib_stats.NewRow();                      newBibRow[0] = thisRow[0];                      newBibRow[1] = thisRow[1];                      newBibRow[2] = thisRow[2];                      bib_stats.Rows.Add(newBibRow);                      bib_rows.Add(thisRow[0].ToString()' newBibRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Bib_Stats_Table.Rows)              {                  if (bib_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = bib_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newBibRow = bib_stats.NewRow();                      newBibRow[0] = thisRow[0];                      newBibRow[1] = thisRow[1];                      newBibRow[2] = thisRow[2];                      bib_stats.Rows.Add(newBibRow);                      bib_rows.Add(thisRow[0].ToString()' newBibRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Bib_Stats_Table.Rows)              {                  if (bib_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = bib_rows[thisRow[0].ToString()];                      matchRow[1] = Convert.ToInt32(matchRow[1]) + Convert.ToInt32(thisRow[1]);                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newBibRow = bib_stats.NewRow();                      newBibRow[0] = thisRow[0];                      newBibRow[1] = thisRow[1];                      newBibRow[2] = thisRow[2];                      bib_stats.Rows.Add(newBibRow);                      bib_rows.Add(thisRow[0].ToString()' newBibRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.Item_Stats_Table.Rows)              {                  if (item_rows.ContainsKey(Convert.ToInt32(thisRow["itemID"])))                  {                      // Sum the two rows together                      DataRow matchRow = item_rows[Convert.ToInt32(thisRow["itemID"])];                      matchRow[3] = Convert.ToInt32(matchRow[3]) + Convert.ToInt32(thisRow[3]);                      matchRow[4] = Convert.ToInt32(matchRow[4]) + Convert.ToInt32(thisRow[4]);                      matchRow[5] = Convert.ToInt32(matchRow[5]) + Convert.ToInt32(thisRow[5]);                      matchRow[6] = Convert.ToInt32(matchRow[6]) + Convert.ToInt32(thisRow[6]);                      matchRow[7] = Convert.ToInt32(matchRow[7]) + Convert.ToInt32(thisRow[7]);                      matchRow[8] = Convert.ToInt32(matchRow[8]) + Convert.ToInt32(thisRow[8]);                      matchRow[9] = Convert.ToInt32(matchRow[9]) + Convert.ToInt32(thisRow[9]);                      matchRow[10] = Convert.ToInt32(matchRow[10]) + Convert.ToInt32(thisRow[10]);                      matchRow[11] = Convert.ToInt32(matchRow[11]) + Convert.ToInt32(thisRow[11]);                      matchRow[12] = Convert.ToInt32(matchRow[12]) + Convert.ToInt32(thisRow[12]);                      matchRow[13] = Convert.ToInt32(matchRow[13]) + Convert.ToInt32(thisRow[13]);                      matchRow[14] = Convert.ToInt32(matchRow[14]) + Convert.ToInt32(thisRow[14]);                  }                  else                  {                      // Add as a new row                      DataRow newItemRow = item_stats.NewRow();                      newItemRow[0] = thisRow[0];                      newItemRow[1] = thisRow[1];                      newItemRow[2] = thisRow[2];                      newItemRow[3] = thisRow[3];                      newItemRow[4] = thisRow[4];                      newItemRow[5] = thisRow[5];                      newItemRow[6] = thisRow[6];                      newItemRow[7] = thisRow[7];                      newItemRow[8] = thisRow[8];                      newItemRow[9] = thisRow[9];                      newItemRow[10] = thisRow[10];                      newItemRow[11] = thisRow[11];                      newItemRow[12] = thisRow[12];                      newItemRow[13] = thisRow[13];                      newItemRow[14] = thisRow[14];                      item_stats.Rows.Add(newItemRow);                      item_rows.Add(Convert.ToInt32(thisRow["itemID"])' newItemRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.IP_Addresses.Rows)              {                  if (ip_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = ip_rows[thisRow[0].ToString()];                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newIpRow = ip_addresses.NewRow();                      newIpRow[0] = thisRow[0];                      newIpRow[1] = thisRow[1];                      newIpRow[2] = thisRow[2];                      ip_addresses.Rows.Add(newIpRow);                      ip_rows.Add(thisRow[0].ToString()' newIpRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.IP_Addresses.Rows)              {                  if (ip_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = ip_rows[thisRow[0].ToString()];                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newIpRow = ip_addresses.NewRow();                      newIpRow[0] = thisRow[0];                      newIpRow[1] = thisRow[1];                      newIpRow[2] = thisRow[2];                      ip_addresses.Rows.Add(newIpRow);                      ip_rows.Add(thisRow[0].ToString()' newIpRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.IP_Addresses.Rows)              {                  if (ip_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = ip_rows[thisRow[0].ToString()];                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newIpRow = ip_addresses.NewRow();                      newIpRow[0] = thisRow[0];                      newIpRow[1] = thisRow[1];                      newIpRow[2] = thisRow[2];                      ip_addresses.Rows.Add(newIpRow);                      ip_rows.Add(thisRow[0].ToString()' newIpRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.IP_Addresses.Rows)              {                  if (ip_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = ip_rows[thisRow[0].ToString()];                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newIpRow = ip_addresses.NewRow();                      newIpRow[0] = thisRow[0];                      newIpRow[1] = thisRow[1];                      newIpRow[2] = thisRow[2];                      ip_addresses.Rows.Add(newIpRow);                      ip_rows.Add(thisRow[0].ToString()' newIpRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_DataSet,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_DataSet.cs,Merge,The following statement contains a magic number: foreach (DataRow thisRow in Stats_DataSet.IP_Addresses.Rows)              {                  if (ip_rows.ContainsKey(thisRow[0].ToString()))                  {                      // Sum the two rows together                      DataRow matchRow = ip_rows[thisRow[0].ToString()];                      matchRow[2] = Convert.ToInt32(matchRow[2]) + Convert.ToInt32(thisRow[2]);                  }                  else                  {                      // Add as a new row                      DataRow newIpRow = ip_addresses.NewRow();                      newIpRow[0] = thisRow[0];                      newIpRow[1] = thisRow[1];                      newIpRow[2] = thisRow[2];                      ip_addresses.Rows.Add(newIpRow);                      ip_rows.Add(thisRow[0].ToString()' newIpRow);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisYearMonth in year_months)              {                  logs_start.Add("u_ex" + thisYearMonth.Substring(2' 2) + thisYearMonth.Substring(4' 2));              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisYearMonth in year_months)              {                  logs_start.Add("u_ex" + thisYearMonth.Substring(2' 2) + thisYearMonth.Substring(4' 2));              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisYearMonth in year_months)              {                  logs_start.Add("u_ex" + thisYearMonth.Substring(2' 2) + thisYearMonth.Substring(4' 2));              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisYearMonth in year_months)              {                  logs_start.Add("u_ex" + thisYearMonth.Substring(2' 2) + thisYearMonth.Substring(4' 2));              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (string thisFile in files)              {                  try                  {                      string filename_lower = Path.GetFileName(thisFile).ToLower().Substring(0' 8);                      if (logs_start.Contains(filename_lower))                      {                          On_New_Status("Processing " + (new FileInfo(thisFile)).Name' false);                            FileInfo fileInfo = new FileInfo(thisFile);                          string name = fileInfo.Name.Replace(fileInfo.Extension' "");                          DateTime logDate = new DateTime(Convert.ToInt32("20" + name.Substring(4' 2))'                              Convert.ToInt32(name.Substring(6' 2))' Convert.ToInt32(name.Substring(8' 2)));                            string resultant_file = dataset_location + "\\" + logDate.Year.ToString() + logDate.Month.ToString().PadLeft(2' '0') + logDate.Day.ToString().PadLeft(2' '0') + ".xml";                          if (!File.Exists(resultant_file))                              sobekcm_log_reader.Read_Log(thisFile).Write_XML(dataset_location);                      }                  }                  catch (Exception ee)                  {                      On_New_Status("Error reading a log file and writing as XML dataset. " + ee.Message' true);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: Dictionary<string' int> aggregationHash = Table_To_Hash(lookupTables.Tables[2]);
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (DataRow thisRow in lookupTables.Tables[3].Rows)              {                  if (!portalHash.ContainsKey(thisRow[2].ToString().ToUpper()))                  {                      portalHash[thisRow[2].ToString().ToUpper()] = Convert.ToInt32(thisRow[0]);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (DataRow thisRow in lookupTables.Tables[3].Rows)              {                  if (!portalHash.ContainsKey(thisRow[2].ToString().ToUpper()))                  {                      portalHash[thisRow[2].ToString().ToUpper()] = Convert.ToInt32(thisRow[0]);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: foreach (DataRow thisRow in lookupTables.Tables[3].Rows)              {                  if (!portalHash.ContainsKey(thisRow[2].ToString().ToUpper()))                  {                      portalHash[thisRow[2].ToString().ToUpper()] = Convert.ToInt32(thisRow[0]);                  }              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: try              {                  foreach (string yearmonth in year_months)                  {                      On_New_Status("Writing statistics for " + yearmonth' false);                        SobekCM_Stats_DataSet monthly;                      string thisFile = dataset_location + "\\" + yearmonth + ".xml";                      if (File.Exists(thisFile))                      {                          monthly = new SobekCM_Stats_DataSet();                          monthly.Read_XML(thisFile);                          int year = Convert.ToInt32(yearmonth.Substring(0' 4));                          int month = Convert.ToInt32(yearmonth.Substring(4));                          monthly.Perform_SQL_Inserts(year' month' aggregationHash' bibHash' portalHash);                      }                  }              }              catch (Exception ee)              {                  On_New_Status("Error saving new usage statistics into the database. " + ee.Message' true);                  On_New_Status("Trace from previous error: " + ee.StackTrace' true);                  return;              }
Magic Number,SobekCM.Builder_Library.Statistics,SobekCM_Stats_Reader_Processor,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Stats_Reader_Processor.cs,Process_IIS_Logs,The following statement contains a magic number: try              {                  foreach (string yearmonth in year_months)                  {                      On_New_Status("Writing statistics for " + yearmonth' false);                        SobekCM_Stats_DataSet monthly;                      string thisFile = dataset_location + "\\" + yearmonth + ".xml";                      if (File.Exists(thisFile))                      {                          monthly = new SobekCM_Stats_DataSet();                          monthly.Read_XML(thisFile);                          int year = Convert.ToInt32(yearmonth.Substring(0' 4));                          int month = Convert.ToInt32(yearmonth.Substring(4));                          monthly.Perform_SQL_Inserts(year' month' aggregationHash' bibHash' portalHash);                      }                  }              }              catch (Exception ee)              {                  On_New_Status("Error saving new usage statistics into the database. " + ee.Message' true);                  On_New_Status("Trace from previous error: " + ee.StackTrace' true);                  return;              }
Missing Default,SobekCM.Builder_Library,Abort_Database_Mechanism,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Abort_Database_Mechanism.cs,Abort_Requested,The following switch statement is missing a default case: switch (builder_settings[setting_key].ToUpper().Replace("_"' " "))  				{  					case "ABORT REQUESTED":  					case "ABORTING":  					case "NO BUILDING REQUESTED":  						return true;  				}
Missing Default,SobekCM.Builder_Library,Incoming_Digital_Resource,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Incoming_Digital_Resource.cs,Load_METS,The following switch statement is missing a default case: switch (Metadata.METS_Header.RecordStatus_Enum)                  {                      case METS_Record_Status.METADATA_UPDATE:                          type = Incoming_Digital_Resource_Type.METADATA_UPDATE;                          break;                        case METS_Record_Status.COMPLETE:                          type = Incoming_Digital_Resource_Type.COMPLETE_PACKAGE;                          break;                        case METS_Record_Status.PARTIAL:                          type = Incoming_Digital_Resource_Type.PARTIAL_PACKAGE;                          break;                        case METS_Record_Status.DELETE:                          type = Incoming_Digital_Resource_Type.DELETE;                          break;                        case METS_Record_Status.BIB_LEVEL:                          type = Incoming_Digital_Resource_Type.BIB_LEVEL;                          break;                  }
Missing Default,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,DoWork,The following switch statement is missing a default case: switch (resource.Resource_Type)                                      {                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE:                                          case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE:                                              IncomingPackages.Add(resource);                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE:                                              if (BuilderFolder.Allow_Metadata_Updates)                                              {                                                  IncomingPackages.Add(resource);                                              }                                              else                                              {                                                  OnError("Metadata update is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "METADATA UPDATE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                            case Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE:                                              if (BuilderFolder.Allow_Deletes)                                              {                                                  Deletes.Add(resource);                                              }                                              else                                              {                                                  OnError("Delete is not allowed in " + BuilderFolder.Folder_Name' resource.Folder_Name.Replace("_"' ":")' "DELETE"' -1);                                                    // Move this resource                                                  if (!resource.Move(BuilderFolder.Failures_Folder))                                                  {                                                      OnError("Unable to move folder " + resource.Folder_Name + " to failures"' resource.Folder_Name.Replace("_"' ":")' String.Empty' -1);                                                  }                                              }                                              break;                                      }
Missing Default,SobekCM.Builder_Library.Modules.Folders,ValidateAndClassifyModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Folders\ValidateAndClassifyModule.cs,Validate_and_Read_METS,The following switch statement is missing a default case: switch (returnValue.METS_Header.RecordStatus_Enum)                  {                      case METS_Record_Status.METADATA_UPDATE:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.METADATA_UPDATE;                          break;                        case METS_Record_Status.COMPLETE:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.COMPLETE_PACKAGE;                          break;                        case METS_Record_Status.PARTIAL:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.PARTIAL_PACKAGE;                          break;                        case METS_Record_Status.DELETE:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.DELETE;                          break;                        case METS_Record_Status.BIB_LEVEL:                          Resource.Resource_Type = Incoming_Digital_Resource.Incoming_Digital_Resource_Type.BIB_LEVEL;                          break;                  }
Missing Default,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following switch statement is missing a default case: switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting PPT to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting PPT to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting PPT to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting PPT to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }
Missing Default,SobekCM.Builder_Library.Modules.Items,ConvertOfficeFilesToPdfModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ConvertOfficeFilesToPdfModule.cs,DoWork,The following switch statement is missing a default case: switch (conversion_error)                              {                                  case 1:                                      OnError("Error converting Word DOC to PDF: Can't open input file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 2:                                      OnError("Error converting Word DOC to PDF: Can't create output file"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 3:                                      OnError("Error converting Word DOC to PDF: Converting failed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                                    case 4:                                      OnError("Error converting Word DOC to PDF: MS Office not installed"' Resource.BibID + ":" + Resource.VID' Resource.METS_Type_String' Resource.BuilderLogId);                                      break;                              }
Missing Default,SobekCM.Builder_Library.Modules.Items,ReloadMetsAndBasicDbInfoModule,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Modules\Items\ReloadMetsAndBasicDbInfoModule.cs,DoWork,The following switch statement is missing a default case: switch (rightsInfo.Access_Code)                      {                          case RightsMD_Info.AccessCode_Enum.Campus:                              // Was there an embargo date?                              if (rightsInfo.Has_Embargo_End)                              {                                  if (DateTime.Compare(DateTime.Now' rightsInfo.Embargo_End) < 0)                                  {                                      Resource.Metadata.Behaviors.IP_Restriction_Membership = 1;                                  }                              }                              else                              {                                  Resource.Metadata.Behaviors.IP_Restriction_Membership = 1;                              }                              break;                            case RightsMD_Info.AccessCode_Enum.Private:                              // Was there an embargo date?                              if (rightsInfo.Has_Embargo_End)                              {                                  if (DateTime.Compare(DateTime.Now' rightsInfo.Embargo_End) < 0)                                  {                                      Resource.Metadata.Behaviors.Dark_Flag = true;                                  }                              }                              else                              {                                  Resource.Metadata.Behaviors.Dark_Flag = true;                              }                              break;                      }
Missing Default,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,Read_Config,The following switch statement is missing a default case: switch (node_name)                          {                              case "instances":                                  read_instances(xmlReader.ReadSubtree());                                  break;                                case "ghostscript_executable":                                  xmlReader.Read();                                  MultiInstance_Builder_Settings.Ghostscript_Executable = xmlReader.Value;                                  break;                                case "imagemagick_executable":                                  xmlReader.Read();                                  MultiInstance_Builder_Settings.ImageMagick_Executable = xmlReader.Value;                                  break;                                case "tesseract_executable":                                  xmlReader.Read();                                  MultiInstance_Builder_Settings.Tesseract_Executable = xmlReader.Value;                                  break;                                case "pause_between_polls":                                  xmlReader.Read();                                  int testValue;                                  if (Int32.TryParse(xmlReader.Value' out testValue))                                      MultiInstance_Builder_Settings.Override_Seconds_Between_Polls = testValue;                                  break;                                case "connections":                                  // This is the old ( pre version 4.10.0 ) format of instance information                                  // This will remain backwardly compatible for a while                                  read_legacy_instance_config(xmlReader.ReadSubtree());                                  break;                            }
Missing Default,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_legacy_instance_config,The following switch statement is missing a default case: switch (ReaderXml.Name.ToLower())                      {                          case "connection_string":                              Single_Instance_Configuration singleInstance = new Single_Instance_Configuration();                              if (ReaderXml.MoveToAttribute("active"))                              {                                  if (ReaderXml.Value.ToLower() == "false")                                      singleInstance.Is_Active = false;                              }                              if (ReaderXml.MoveToAttribute("name"))                                  singleInstance.Name = ReaderXml.Value.Trim();                              if (ReaderXml.MoveToAttribute("type"))                              {                                  if (ReaderXml.Value.ToLower() == "postgresql")                                      singleInstance.DatabaseConnection.Database_Type = EalDbTypeEnum.PostgreSQL;                              }                              ReaderXml.Read();                              singleInstance.DatabaseConnection.Connection_String = ReaderXml.Value;                                // Add the default microservice endpoints then                              singleInstance.Microservices.Add_Endpoint("Builder.Get_Builder_Settings"' "[BASEURL]/engine/builder/settings/protobuf?IncludeDescs={0}"' Microservice_Endpoint_Protocol_Enum.PROTOBUF);                              singleInstance.Microservices.Add_Endpoint("Configuration.Extensions"' "[BASEURL]/engine/config/extensions/protobuf"' Microservice_Endpoint_Protocol_Enum.PROTOBUF);                              singleInstance.Microservices.Add_Endpoint("Configuration.Metadata"' "[BASEURL]/engine/config/metadata/protobuf"' Microservice_Endpoint_Protocol_Enum.PROTOBUF);                              singleInstance.Microservices.Add_Endpoint("Configuration.OAI_PMH"' "[BASEURL]/engine/config/oaipmh/protobuf"' Microservice_Endpoint_Protocol_Enum.PROTOBUF);                                // Esnure it has SOME name                              if (String.IsNullOrWhiteSpace(singleInstance.Name))                                  singleInstance.Name = "Connection" + (MultiInstance_Builder_Settings.Instances.Count + 1);                                // Add this to the list of instances                              MultiInstance_Builder_Settings.Instances.Add(singleInstance);                              break;                      }
Missing Default,SobekCM.Builder_Library.Settings,MultiInstance_Builder_Settings_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\MultiInstance_Builder_Settings_Reader.cs,read_instances,The following switch statement is missing a default case: switch (ReaderXml.Name.ToLower())                      {                          case "instance":                              singleInstance = new Single_Instance_Configuration();                              if (ReaderXml.MoveToAttribute("active"))                              {                                  if (ReaderXml.Value.ToLower() == "false")                                      singleInstance.Is_Active = false;                              }                              if (ReaderXml.MoveToAttribute("name"))                                  singleInstance.Name = ReaderXml.Value.Trim();                              break;                            case "connection_string":                              if (ReaderXml.MoveToAttribute("type"))                              {                                  if (ReaderXml.Value.ToLower() == "postgresql")                                      singleInstance.DatabaseConnection.Database_Type = EalDbTypeEnum.PostgreSQL;                              }                              ReaderXml.Read();                              singleInstance.DatabaseConnection.Connection_String = ReaderXml.Value;                              break;                            case "microservices":                              MicroservicesClient_Config_Reader.Read_Microservices_Client_Details(ReaderXml.ReadSubtree()' singleInstance.Microservices' String.Empty);                              break;                      }
Missing Default,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The following switch statement is missing a default case: switch (preSetting.Class)                      {                          case "SobekCM.Builder_Library.Modules.PreProcess.ProcessPendingFdaReportsModule":                              iPreProcessModule thisModule = new ProcessPendingFdaReportsModule();                              if ((!String.IsNullOrEmpty(preSetting.Argument1)) || (!String.IsNullOrEmpty(preSetting.Argument2)) || (!String.IsNullOrEmpty(preSetting.Argument3)))                              {                                  if(thisModule.Arguments == null)                                       thisModule.Arguments = new List<string>();                                  thisModule.Arguments.Add(String.IsNullOrEmpty(preSetting.Argument1) ? String.Empty : preSetting.Argument1);                                  thisModule.Arguments.Add(String.IsNullOrEmpty(preSetting.Argument2) ? String.Empty : preSetting.Argument2);                                  thisModule.Arguments.Add(String.IsNullOrEmpty(preSetting.Argument3) ? String.Empty : preSetting.Argument3);                              }                              preProcessModules.Add(thisModule);                              continue;                      }
Missing Default,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The following switch statement is missing a default case: switch (postSetting.Class)                      {                          case "SobekCM.Builder_Library.Modules.PostProcess.BuildAggregationBrowsesModule":                              iPostProcessModule thisModule = new BuildAggregationBrowsesModule();                              if ((!String.IsNullOrEmpty(postSetting.Argument1)) || (!String.IsNullOrEmpty(postSetting.Argument2)) || (!String.IsNullOrEmpty(postSetting.Argument3)))                              {                                  if (thisModule.Arguments == null)                                      thisModule.Arguments = new List<string>();                                  thisModule.Arguments.Add(String.IsNullOrEmpty(postSetting.Argument1) ? String.Empty : postSetting.Argument1);                                  thisModule.Arguments.Add(String.IsNullOrEmpty(postSetting.Argument2) ? String.Empty : postSetting.Argument2);                                  thisModule.Arguments.Add(String.IsNullOrEmpty(postSetting.Argument3) ? String.Empty : postSetting.Argument3);                              }                              postProcessModules.Add(thisModule);                              continue;                      }
Missing Default,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Builder_Modules_From_Settings,The following switch statement is missing a default case: switch (folderSetting.Class)                              {                                  case "SobekCM.Builder_Library.Modules.Folders.MoveAgedPackagesToProcessModule":                                      thisModule = new MoveAgedPackagesToProcessModule();                                      break;                                    case "SobekCM.Builder_Library.Modules.Folders.ApplyBibIdRestrictionModule":                                      thisModule = new ApplyBibIdRestrictionModule();                                      break;                                    case "SobekCM.Builder_Library.Modules.Folders.ValidateAndClassifyModule":                                      thisModule = new ValidateAndClassifyModule();                                      break;                                    case "SobekCM.Builder_Library.Modules.Folders.UpdateNonBibFolders":                                      thisModule = new UpdateNonBibFolders();                                      break;                                  }
Missing Default,SobekCM.Builder_Library.Settings,Builder_Modules,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Settings\Builder_Modules.cs,Get_Submission_Module,The following switch statement is missing a default case: switch (ItemSetting.Class)                  {                      case "SobekCM.Builder_Library.Modules.Items.ConvertOfficeFilesToPdfModule":                          thisModule = new ConvertOfficeFilesToPdfModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.ExtractTextFromPdfModule":                          thisModule = new ExtractTextFromPdfModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CreatePdfThumbnailModule":                          thisModule = new CreatePdfThumbnailModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.ExtractTextFromHtmlModule":                          thisModule = new ExtractTextFromHtmlModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.ExtractTextFromXmlModule":                          thisModule = new ExtractTextFromXmlModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.OcrTiffsModule":                          thisModule = new OcrTiffsModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CleanDirtyOcrModule":                          thisModule = new CleanDirtyOcrModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CheckForSsnModule":                          thisModule = new CheckForSsnModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CreateImageDerivativesModule":                          thisModule = new CreateImageDerivativesModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CreateImageDerivativesLegacyModule":                          thisModule = new CreateImageDerivativesLegacyModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CopyToArchiveFolderModule":                          thisModule = new CopyToArchiveFolderModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.MoveFilesToImageServerModule":                          thisModule = new MoveFilesToImageServerModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.ReloadMetsAndBasicDbInfoModule":                          thisModule = new ReloadMetsAndBasicDbInfoModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.UpdateJpegAttributesModule":                          thisModule = new UpdateJpegAttributesModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.AttachAllNonImageFilesModule":                          thisModule = new AttachAllNonImageFilesModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.AddNewImagesAndViewsModule":                          thisModule = new AddNewImagesAndViewsModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.AttachImagesAllModule":                          thisModule = new AttachImagesAllModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.EnsureMainThumbnailModule":                          thisModule = new EnsureMainThumbnailModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.GetPageCountFromPdfModule":                          thisModule = new GetPageCountFromPdfModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.UpdateWebConfigModule":                          thisModule = new UpdateWebConfigModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.SaveServiceMetsModule":                          thisModule = new SaveServiceMetsModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.SaveMarcXmlModule":                          thisModule = new SaveMarcXmlModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.SaveToDatabaseModule":                          thisModule = new SaveToDatabaseModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.SaveToSolrLuceneModule":                          thisModule = new SaveToSolrLuceneModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CleanWebResourceFolderModule":                          thisModule = new CleanWebResourceFolderModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.CreateStaticVersionModule":                          thisModule = new CreateStaticVersionModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.AddTrackingWorkflowModule":                          thisModule = new AddTrackingWorkflowModule();                          break;                        case "SobekCM.Builder_Library.Modules.Items.DeleteItemModule":                          thisModule = new DeleteItemModule();                          break;                  }
Missing Default,SobekCM.Builder_Library.Statistics,SobekCM_Log_Reader,C:\repos\MarkVSullivan_SobekCM-Web-Application\SobekCM_Builder_Library\Statistics\SobekCM_Log_Reader.cs,Read_Log,The following switch statement is missing a default case: switch (currentMode.Writer_Type)                                  {                                      case Writer_Type_Enum.DataSet:                                      case Writer_Type_Enum.XML:                                          returnValue.Add_XML_Hit();                                          break;                                        case Writer_Type_Enum.OAI:                                          returnValue.Add_OAI_Hit();                                          break;                                        case Writer_Type_Enum.JSON:                                          returnValue.Add_JSON_Hit();                                          break;                                  }
