Implementation smell,Namespace,Class,File,Method,Description
Long Method,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The method has 162 lines of code.
Long Method,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertObject,The method has 156 lines of code.
Long Method,RethinkDb.Expressions,BaseExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\BaseExpression.cs,SimpleMap,The method has 146 lines of code.
Complex Method,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertObject,Cyclomatic complexity of the method is 13
Complex Method,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,Cyclomatic complexity of the method is 9
Complex Method,SineSignal.Ottoman.Serialization,JsonReader,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonReader.cs,Read,Cyclomatic complexity of the method is 14
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,CompoundIndex,The method has 5 parameters. Parameters: table' name' indexExpression1' indexExpression2' indexExpression3
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,CompoundIndex,The method has 6 parameters. Parameters: table' name' indexExpression1' indexExpression2' indexExpression3' indexExpression4
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,CompoundIndex,The method has 7 parameters. Parameters: table' name' indexExpression1' indexExpression2' indexExpression3' indexExpression4' indexExpression5
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,Key,The method has 5 parameters. Parameters: key1' key2' key3' key4' key5
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,CompoundIndex,The method has 8 parameters. Parameters: table' name' indexExpression1' indexExpression2' indexExpression3' indexExpression4' indexExpression5' indexExpression6
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,Key,The method has 6 parameters. Parameters: key1' key2' key3' key4' key5' key6
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,CompoundIndex,The method has 9 parameters. Parameters: table' name' indexExpression1' indexExpression2' indexExpression3' indexExpression4' indexExpression5' indexExpression6' indexExpression7
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,Key,The method has 7 parameters. Parameters: key1' key2' key3' key4' key5' key6' key7
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7;TKey8>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,CompoundIndex,The method has 10 parameters. Parameters: table' name' indexExpression1' indexExpression2' indexExpression3' indexExpression4' indexExpression5' indexExpression6' indexExpression7' indexExpression8
Long Parameter List,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7;TKey8>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,Key,The method has 8 parameters. Parameters: key1' key2' key3' key4' key5' key6' key7' key8
Long Parameter List,RethinkDb,CompoundIndexKey<TKey1;TKey2;TKey3;TKey4;TKey5>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndexKeys.cs,CompoundIndexKey,The method has 5 parameters. Parameters: key1' key2' key3' key4' key5
Long Parameter List,RethinkDb,CompoundIndexKey<TKey1;TKey2;TKey3;TKey4;TKey5;TKey6>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndexKeys.cs,CompoundIndexKey,The method has 6 parameters. Parameters: key1' key2' key3' key4' key5' key6
Long Parameter List,RethinkDb,CompoundIndexKey<TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndexKeys.cs,CompoundIndexKey,The method has 7 parameters. Parameters: key1' key2' key3' key4' key5' key6' key7
Long Parameter List,RethinkDb,CompoundIndexKey<TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7;TKey8>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndexKeys.cs,CompoundIndexKey,The method has 8 parameters. Parameters: key1' key2' key3' key4' key5' key6' key7' key8
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,TableCreate,The method has 5 parameters. Parameters: target' table' datacenter' primaryKey' cacheSize
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The method has 5 parameters. Parameters: table' name' indexAccessor1' indexAccessor2' indexAccessor3
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The method has 6 parameters. Parameters: table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The method has 7 parameters. Parameters: table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The method has 8 parameters. Parameters: table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5' indexAccessor6
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The method has 9 parameters. Parameters: table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5' indexAccessor6' indexAccessor7
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The method has 10 parameters. Parameters: table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5' indexAccessor6' indexAccessor7' indexAccessor8
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,Between,The method has 6 parameters. Parameters: target' leftKey' rightKey' indexName' leftBound' rightBound
Long Parameter List,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,Between,The method has 6 parameters. Parameters: target' leftKey' rightKey' index' leftBound' rightBound
Long Parameter List,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Slice,The method has 5 parameters. Parameters: sequenceQuery' startIndex' endIndex' leftBound' rightBound
Long Parameter List,RethinkDb,ICompoundIndex,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Interfaces\ICompoundIndex.cs,Key,The method has 5 parameters. Parameters: key1' key2' key3' key4' key5
Long Parameter List,RethinkDb,ICompoundIndex,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Interfaces\ICompoundIndex.cs,Key,The method has 6 parameters. Parameters: key1' key2' key3' key4' key5' key6
Long Parameter List,RethinkDb,ICompoundIndex,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Interfaces\ICompoundIndex.cs,Key,The method has 7 parameters. Parameters: key1' key2' key3' key4' key5' key6' key7
Long Parameter List,RethinkDb,ICompoundIndex,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Interfaces\ICompoundIndex.cs,Key,The method has 8 parameters. Parameters: key1' key2' key3' key4' key5' key6' key7' key8
Long Parameter List,RethinkDb.QueryTerm,TableCreateQuery,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\QueryTerm\TableCreateQuery.cs,TableCreateQuery,The method has 5 parameters. Parameters: dbTerm' table' datacenter' primaryKey' cacheSize
Long Parameter List,RethinkDb.QueryTerm,BetweenQuery<TSequence;TKey>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\QueryTerm\BetweenQuery.cs,BetweenQuery,The method has 6 parameters. Parameters: tableTerm' leftKey' rightKey' indexName' leftBound' rightBound
Long Identifier,RethinkDb,QueryConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\QueryConverter.cs,,The length of the parameter delegatedDatumConverterFactory is 30.
Long Identifier,RethinkDb,QueryConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\QueryConverter.cs,,The length of the parameter delegatedExpressionConverterFactory is 35.
Long Identifier,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,,The length of the parameter binaryExpressionMappingRegistry is 31.
Long Identifier,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,,The length of the parameter unaryExpressionMappingRegistry is 30.
Long Statement,RethinkDb,CompoundIndex<TRecord;TKey1;TKey2;TKey3;TKey4;TKey5;TKey6;TKey7;TKey8>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\CompoundIndex.cs,Key,The length of the statement  "            return new CompoundIndexKey<TKey1' TKey2' TKey3' TKey4' TKey5' TKey6' TKey7' TKey8>(key1' key2' key3' key4' key5' key6' key7' key8); " is 132.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ConnectAsync,The length of the statement  "                        Logger.Warning("Unexpected exception occurred while connecting to endpoint {0}: {1}; connection attempts will continue with any other addresses available"' ipEndpoint' e); " is 171.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The length of the statement  "                            Logger.Debug("Exception occurred while disposing network stream during exception handling: {0}; probably not important"' ex); " is 125.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The length of the statement  "                            Logger.Debug("Exception occurred while disposing network socket during exception handling: {0}; probably not important"' ex); " is 125.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The length of the statement  "                    Logger.Error("Network related exception occurred while connecting to endpoint {0}: {1}; tearing down connection"' endpoint' e); " is 127.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The length of the statement  "                    Logger.Error("Unexpected exception occurred while connecting to endpoint {0}: {1}; tearing down connection"' endpoint' e); " is 122.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The length of the statement  "                        Logger.Debug("Exception occurred while disposing network stream during exception handling: {0}; probably not important"' ex); " is 125.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The length of the statement  "                        Logger.Debug("Exception occurred while disposing network socket during exception handling: {0}; probably not important"' ex); " is 125.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                        Logger.Warning("Received response to query token {0}' but no handler was waiting for that response.  This can occur if the query times out around the same time a response is received."' response.token); " is 202.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                responseException = new RethinkDbNetworkException("ReadLoop terminated unexpectedly while waiting for response from query"' e); " is 127.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                responseException = new RethinkDbRuntimeException("ReadLoop terminated unexpectedly due to connection Dispose while waiting for response from query"' e); " is 153.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                Logger.Fatal("Exception occurred in Connection.ReadLoop: {0}; this connection will no longer function correctly' no error recovery will take place"' e); " is 152.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                responseException = new RethinkDbInternalErrorException("Unexpected exception in ReadLoop prevented this query from returning data"' e); " is 136.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                Logger.Warning("{0} queries were still waiting for responses from a connection that is closing; they'll receive exceptions instead"' responseSnapshot.Count); " is 157.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReadLoop,The length of the statement  "                Logger.Warning("Cleanup in ReadLoop termination didn't succeed' there are still tasks waiting for data from this connection that will never receive it"); " is 153.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,InternalRunQuery,The length of the statement  "                        "Query token {0} timed out after {1}; usually this happens because of a query timeout' but' query never acquired write lock on the connection in before timing out.  Write lock is currently held by query token {2}."' " is 215.
Long Statement,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,InternalRunQuery,The length of the statement  "                        "Query token {0} timed out after {1} because CancellationToken was triggered; usually this happens because of a query timeout."' " is 128.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The length of the statement  "            return new CompoundIndex<TRecord' T1' T2' T3' T4>(table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4); " is 127.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The length of the statement  "            return new CompoundIndex<TRecord' T1' T2' T3' T4' T5>(table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5); " is 147.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The length of the statement  "            return new CompoundIndex<TRecord' T1' T2' T3' T4' T5' T6>(table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5' indexAccessor6); " is 167.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The length of the statement  "            return new CompoundIndex<TRecord' T1' T2' T3' T4' T5' T6' T7>(table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5' indexAccessor6' indexAccessor7); " is 187.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,IndexDefine,The length of the statement  "            return new CompoundIndex<TRecord' T1' T2' T3' T4' T5' T6' T7' T8>(table' name' indexAccessor1' indexAccessor2' indexAccessor3' indexAccessor4' indexAccessor5' indexAccessor6' indexAccessor7' indexAccessor8); " is 207.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,EqJoin,The length of the statement  "            return new EqJoinQuery<TLeft' TRight' Tuple<TLeft' TRight>>(leftQuery' leftMemberReferenceExpression' rightQuery' indexName); " is 125.
Long Statement,RethinkDb,Query,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Query.cs,Group,The length of the statement  "            return new GroupByFunctionQuery<TRecord' TKey1' TKey2' TKey3' Tuple<TKey1' TKey2' TKey3>>(sequenceQuery' key1' key2' key3); " is 123.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Append,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Slice,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Slice,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Slice,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Error,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Match,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,SetValue,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,ReQLExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\ReQLExpression.cs,Without,The length of the statement  "            throw new NotSupportedException("This method cannot be invoked directly' it can only be used as part of an expression tree."); " is 126.
Long Statement,RethinkDb,SynchronousApiExtensions,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\SynchronousApiExtensions.cs,Run,The length of the statement  "            return TaskUtilities.ExecuteSynchronously(() => connection.RunAsync<T>(queryObject' queryConverter' cancellationToken)); " is 120.
Long Statement,RethinkDb,SynchronousApiExtensions,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\SynchronousApiExtensions.cs,Run,The length of the statement  "            return new AsyncEnumerableSynchronizer<T>(() => connection.RunAsync<T>(queryObject' queryConverter)' cancellationToken); " is 120.
Long Statement,RethinkDb,SynchronousApiExtensions,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\SynchronousApiExtensions.cs,StreamChanges,The length of the statement  "            return new AsyncEnumerableSynchronizer<T>(() => connection.StreamChangesAsync<T>(queryObject' queryConverter)' cancellationToken); " is 130.
Long Statement,RethinkDb,QueryConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\QueryConverter.cs,CreateExpressionConverter,The length of the statement  "            return delegatedExpressionConverterFactory.CreateExpressionConverter<TParameter1' TParameter2' TReturn>(datumConverterFactory); " is 127.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,Create,The length of the statement  "                    //dynamicModule = assemblyBuilder.DefineDynamicModule("DataContractDynamicAssembly"' "DataContractDynamicAssembly.dll"); " is 120.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineDatumConverterField,The length of the statement  "            return type.DefineField("datumConverterFactory"' typeof(IDatumConverterFactory)' FieldAttributes.Private | FieldAttributes.InitOnly); " is 133.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConstructor,The length of the statement  "            var meth = type.DefineConstructor(MethodAttributes.Public' CallingConventions.Standard' new Type[] { typeof(IDatumConverterFactory) }); " is 135.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The length of the statement  "                gen.Emit(OpCodes.Callvirt' typeof(System.Collections.Generic.List<Spec.Datum.AssocPair>).GetProperty("Count").GetGetMethod()); " is 126.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The length of the statement  "                gen.Emit(OpCodes.Callvirt' typeof(System.Collections.Generic.List<Spec.Datum.AssocPair>).GetProperty("Item").GetGetMethod()); " is 125.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The length of the statement  "                gen.Emit(OpCodes.Call' typeof(string).GetMethod("Equals"' BindingFlags.Static | BindingFlags.Public' null' new Type[] { typeof(string)' typeof(string) }' null)); " is 161.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The length of the statement  "                gen.Emit(OpCodes.Callvirt' typeof(System.Collections.Generic.List<Spec.Datum.AssocPair>).GetProperty("Count").GetGetMethod()); " is 126.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The length of the statement  "                gen.Emit(OpCodes.Callvirt' typeof(System.Collections.Generic.List<Spec.Datum.AssocPair>).GetProperty("Item").GetGetMethod()); " is 125.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The length of the statement  "                gen.Emit(OpCodes.Call' typeof(string).GetMethod("Equals"' BindingFlags.Static | BindingFlags.Public' null' new Type[] { typeof(string)' typeof(string) }' null)); " is 161.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertObject,The length of the statement  "                gen.Emit(OpCodes.Callvirt' typeof(IDatumConverter<>).MakeGenericType(property.PropertyType).GetMethod("ConvertObject")); " is 120.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineGetDatumFieldName,The length of the statement  "                gen.Emit(OpCodes.Call' typeof(string).GetMethod("Equals"' BindingFlags.Static | BindingFlags.Public' null' new Type[] { typeof(string)' typeof(string) }' null)); " is 161.
Long Statement,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineGetDatumFieldName,The length of the statement  "                gen.Emit(OpCodes.Call' typeof(string).GetMethod("Equals"' BindingFlags.Static | BindingFlags.Public' null' new Type[] { typeof(string)' typeof(string) }' null)); " is 161.
Long Statement,RethinkDb.DatumConverters,CharDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\PrimitiveDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                    throw new NotSupportedException("Attempted to cast Datum to non-nullable char' but Datum was unsupported type " + datum.type); " is 126.
Long Statement,RethinkDb.DatumConverters,UnsignedIntDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\PrimitiveDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                    throw new NotSupportedException("Attempted to cast Datum to unsigned Int' but Datum was unsupported type " + datum.type); " is 121.
Long Statement,RethinkDb.DatumConverters,UnsignedLongDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\PrimitiveDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                        throw new NotSupportedException("Attempted to cast Datum to non-nullable unsigned long' but Datum outside range of valid unsigned long"); " is 137.
Long Statement,RethinkDb.DatumConverters,UnsignedLongDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\PrimitiveDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                    throw new NotSupportedException("Attempted to cast Datum to unsigned Long' but Datum was unsupported type " + datum.type); " is 122.
Long Statement,RethinkDb.DatumConverters,UnsignedShortDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\PrimitiveDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                    throw new NotSupportedException("Attempted to cast Datum to unsigned Short' but Datum was unsupported type " + datum.type); " is 123.
Long Statement,RethinkDb.DatumConverters,SignedByteDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\PrimitiveDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                    throw new NotSupportedException("Attempted to cast Datum to signed Byte' but Datum was unsupported type " + datum.type); " is 120.
Long Statement,RethinkDb.DatumConverters,TupleConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\TupleDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                        throw new NotSupportedException("TupleDatumConverter only supports OBJECT values if it's a two-tuple; this one is a " + typeof(T).FullName); " is 140.
Long Statement,RethinkDb.DatumConverters,TupleConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\TupleDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                            throw new InvalidOperationException("Unexpected key/value pair in tuple object: " + assocPair.key + "; expected left/right or group/reduction"); " is 144.
Long Statement,RethinkDb.DatumConverters,TupleConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\TupleDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                        throw new InvalidOperationException(String.Format("Unexpected array of length {0} where tuple of type {1} was expected"' datum.r_array.Count' typeof(T))); " is 154.
Long Statement,RethinkDb.DatumConverters,AnonymousTypeDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AnonymousTypeDatumConverterFactory.cs,IsTypeSupported,The length of the statement  "            if (t.IsClass && t.Name.Contains("Anon") && t.GetCustomAttributes(typeof(CompilerGeneratedAttribute)' false).Length == 1) " is 121.
Long Statement,RethinkDb.DatumConverters,AnonymousTypeConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AnonymousTypeDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                        var property = properties.Where(pi => String.Equals(pi.Name' assocPair.key' StringComparison.InvariantCultureIgnoreCase)).SingleOrDefault(); " is 140.
Long Statement,RethinkDb.DatumConverters,AnonymousTypeConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AnonymousTypeDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                    throw new NotSupportedException("Attempted to cast Datum to anonymous type' but Datum was unsupported type " + datum.type); " is 123.
Long Statement,RethinkDb.DatumConverters,DateTimeDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeDatumConverterFactory.cs,ConvertDatum,The length of the statement  "            if (!keys.TryGetValue("$reql_type$"' out reql_type) || reql_type.type != Datum.DatumType.R_STR || reql_type.r_str != "TIME") " is 124.
Long Statement,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The length of the statement  "            if (!keys.TryGetValue("$reql_type$"' out reql_type) || reql_type.type != Datum.DatumType.R_STR || reql_type.r_str != "TIME") " is 124.
Long Statement,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                throw new FormatException(String.Format("Unexpected timezone format: {0}; minutes couldn't be parsed"' timezone.r_str)); " is 120.
Long Statement,RethinkDb.DatumConverters,AbstractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AbstractDatumConverterFactory.cs,GetBestNativeTypeForDatum,The length of the statement  "                        if (nativeTypesExcludingNulls.Length == 2 && nativeTypesExcludingNulls.Contains(typeof(double)) && nativeTypesExcludingNulls.Contains(typeof(int))) " is 147.
Long Statement,RethinkDb.DatumConverters,AbstractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AbstractDatumConverterFactory.cs,GetBestNativeTypeForDatum,The length of the statement  "                            // This is a special case; only works because we know GetBestNativeTypeForDatum will only return int or double.  If that changes' " is 129.
Long Statement,RethinkDb.DatumConverters,AbstractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AbstractDatumConverterFactory.cs,GetBestNativeTypeForDatum,The length of the statement  "                        throw new RethinkDbRuntimeException("Heterogeneous arrays are not currently supported as their types are indistinguishable"); " is 125.
Long Statement,RethinkDb.DatumConverters,AbstractValueTypeDatumConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AbstractValueTypeDatumConverter.cs,ConvertObject,The length of the statement  "                throw new NotSupportedException("Attempted to cast object to non-nullable type " + typeof(T) + "' but object was null"); " is 120.
Long Statement,RethinkDb.DatumConverters,TimeSpanDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\TimeSpanDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                throw new NotSupportedException("Attempted to cast Datum to TimeSpan' but Datum was unexpected type " + datum.type + "; expected R_NUM"); " is 137.
Long Statement,RethinkDb.DatumConverters,GroupingDictionaryDatumConverter<TKey;TValue>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\GroupingDictionaryDatumConverterFactory.cs,ConvertDatum,The length of the statement  "                        throw new NotSupportedException("GROUPED_DATA data is expected to contain array elements of two items' a key and a value"); " is 123.
Long Statement,RethinkDb.DatumConverters,GroupingDictionaryDatumConverter<TKey;TValue>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\GroupingDictionaryDatumConverterFactory.cs,ConvertObject,The length of the statement  "            throw new NotImplementedException("IGroupingDictionary objects are only currently supported for reading Group results"); " is 120.
Long Statement,RethinkDb.DatumConverters,BinaryDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\BinaryDatumConverterFactory.cs,ConvertDatum,The length of the statement  "            if (!keys.TryGetValue("$reql_type$"' out reql_type) || reql_type.type != Datum.DatumType.R_STR || reql_type.r_str != "BINARY") " is 126.
Long Statement,RethinkDb.DatumConverters,NamedValueDictionaryDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\NamedValueDictionaryDatumConverterFactory.cs.cs,TryGet,The length of the statement  "                var specificType = typeof(NamedValueDictionaryKeysDatumConverter<>).MakeGenericType(typeof(T).GetGenericArguments()[1]); " is 120.
Long Statement,RethinkDb.DatumConverters,NamedValueDictionaryDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\NamedValueDictionaryDatumConverterFactory.cs.cs,TryGet,The length of the statement  "                var dictionaryConverterType = typeof(NamedValueDictionaryDatumConverter<>).MakeGenericType(typeof(T).GetGenericArguments()[1]); " is 127.
Long Statement,RethinkDb.DatumConverters,NamedValueDictionaryDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\NamedValueDictionaryDatumConverterFactory.cs.cs,TryGet,The length of the statement  "                var dictionaryConverter = Activator.CreateInstance(dictionaryConverterType' new object[] { rootDatumConverterFactory }); " is 120.
Long Statement,RethinkDb.DatumConverters,NamedValueDictionaryDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\NamedValueDictionaryDatumConverterFactory.cs.cs,TryGet,The length of the statement  "                var specificType = typeof(NamedValueDictionaryValuesDatumConverter<>).MakeGenericType(typeof(T).GetGenericArguments()[1]); " is 122.
Long Statement,RethinkDb.DatumConverters,NamedValueDictionaryDatumConverter<TValue>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\NamedValueDictionaryDatumConverterFactory.cs.cs,ConvertDatum,The length of the statement  "                throw new NotSupportedException("Attempted to convert Datum to named-value dictionary' but Datum was unsupported type " + datum.type); " is 134.
Long Statement,RethinkDb.QueryTerm,EqJoinQuery<TLeft;TRight;TResult>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\QueryTerm\EqJoinQuery.cs,GetMemberName,The length of the statement  "                throw new NotSupportedException("Unsupported expression type " + leftMemberReferenceExpression.Type + "; expected Lambda"); " is 123.
Long Statement,RethinkDb.Configuration,ConfigurationAssembler,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Configuration\ConfigurationAssembler.cs,CreateConnectionFactory,The length of the statement  "                            connectionFactory = new ConnectionPoolingConnectionFactory(connectionFactory' TimeSpan.FromSeconds(cluster.ConnectionPool.QueryTimeout)); " is 137.
Long Statement,RethinkDb.Expressions,BaseExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\BaseExpression.cs,ConvertBinaryExpressionToTerm,The length of the statement  "            if (expressionConverterFactory.TryGetBinaryExpressionMapping(expr.Left.Type' expr.Right.Type' expr.NodeType' out binaryExpressionMapping)) " is 138.
Long Statement,RethinkDb.Expressions,BaseExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\BaseExpression.cs,ConvertUnaryExpressionToTerm,The length of the statement  "            if (expressionConverterFactory.TryGetUnaryExpressionMapping(expr.Operand.Type' expr.NodeType' out unaryExpressionMapping)) " is 122.
Long Statement,RethinkDb.Expressions,BaseExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\BaseExpression.cs,AttemptClientSideConversion,The length of the statement  "                        "Failed to perform client-side evaluation of expression tree node '{0}'; this is caused by refering to a server-side variable in an expression tree that isn't convertible to ReQL logic"' " is 186.
Long Statement,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,TryGetBinaryExpressionMapping,The length of the statement  "            return binaryExpressionMappingRegistry.TryGetValue(Tuple.Create(leftType' rightType' expressionType)' out binaryExpressionMapping); " is 131.
Long Statement,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,TryGetUnaryExpressionMapping,The length of the statement  "            return unaryExpressionMappingRegistry.TryGetValue(Tuple.Create(expression' expressionType)' out unaryExpressionMapping); " is 120.
Long Statement,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,TryGetMemberAccessMapping,The length of the statement  "                if (memberAccessMappingRegistry.TryGetValue(Tuple.Create(member.DeclaringType.GetGenericTypeDefinition()' member.Name)' out memberAccessMapping)) " is 145.
Long Statement,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The length of the statement  "                    RegisterMethodCallTemplateMapping((MethodCallExpression)templateBody' terms => termConstructor(terms[0]' terms[1]' terms[2])); " is 126.
Long Statement,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,RegisterOnConverterFactory,The length of the statement  "                (list' startIndex' endIndex' leftBound' rightBound) => ReQLExpression.Slice(list' startIndex' endIndex' leftBound' rightBound)' " is 127.
Long Statement,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,ConvertAppendToTerm,The length of the statement  "                    throw new NotSupportedException(String.Format("Expected second arg to ReQLExpression.Append to be an array' but was: {0}"' memberExpression.Type)); " is 147.
Long Statement,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,ConvertAppendToTerm,The length of the statement  "                throw new NotSupportedException(String.Format("Expected second arg to ReQLExpression.Append to be NewArrayInit or MemberAccess' but was: {0}"' appendArray.NodeType)); " is 166.
Long Statement,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,ConvertEnumerableWhereToTerm,The length of the statement  "            var functionTerm = (Term)createFunctionTermMethod.Invoke(null' new object[] { new QueryConverter(datumConverterFactory' expressionConverterFactory)' predicate }); " is 162.
Long Statement,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,ConvertEnumerableAnyToTerm,The length of the statement  "            var functionTerm = (Term)createFunctionTermMethod.Invoke(null' new object[] { new QueryConverter(datumConverterFactory' expressionConverterFactory)' predicate }); " is 162.
Long Statement,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The length of the statement  "                (year' month' day' hour' minute' second' millisecond) => new DateTime(year' month' day' hour' minute' second' millisecond)' " is 123.
Long Statement,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The length of the statement  "                (year' month' day' hour' minute' second' millisecond' offset) => new DateTimeOffset(year' month' day' hour' minute' second' millisecond' offset)' " is 145.
Long Statement,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The length of the statement  "                    args = { year' month' day' hour' minute' Add(second' Binary(millisecond' Term.TermType.DIV' 1000))' TimeSpanToOffset(offset) } " is 126.
Long Statement,RethinkDb.Expressions,DictionaryExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DictionaryExpressionConverters.cs,RegisterOnConverterFactory,The length of the statement  "            expressionConverterFactory.RegisterTemplateMapping<Dictionary<string' object>' string' object' Dictionary<string' object>>( " is 123.
Long Statement,RethinkDb.Expressions,DictionaryExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DictionaryExpressionConverters.cs,RegisterOnConverterFactory,The length of the statement  "            expressionConverterFactory.RegisterTemplateMapping<Dictionary<string' object>' Dictionary<string' object>.KeyCollection>( " is 121.
Long Statement,RethinkDb.Expressions,DictionaryExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DictionaryExpressionConverters.cs,RegisterOnConverterFactory,The length of the statement  "            expressionConverterFactory.RegisterTemplateMapping<Dictionary<string' object>' Dictionary<string' object>.ValueCollection>( " is 123.
Long Statement,RethinkDb.Protocols,Version_0_3_Json,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_JsonProtocol.cs,ReadJsonResponse,The length of the statement  "                    throw new RethinkDbInternalErrorException(String.Format("Unexpected JSON state; expected MemberName' but was {0}"' json.CurrentToken)); " is 135.
Complex Conditional,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State22,The conditional expression  "context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9' ||  					context.Parser.InputCharacter >= 'A' && context.Parser.InputCharacter <= 'F' ||  					context.Parser.InputCharacter >= 'a' && context.Parser.InputCharacter <= 'f'"  is complex.
Empty Catch Block,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,Dispose,The method has an empty catch block.
Empty Catch Block,RethinkDb.Logging,LoggingUtils,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Logging\LoggingUtils.cs,SafeIsLoggingEnabled,The method has an empty catch block.
Empty Catch Block,RethinkDb.Logging,LoggingUtils,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Logging\LoggingUtils.cs,SafeLog,The method has an empty catch block.
Magic Number,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,Connection,The following statement contains a magic number: ConnectTimeout = QueryTimeout = TimeSpan.FromSeconds(30);
Magic Number,RethinkDb,QueryEnumerator<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,ReissueQuery,The following statement contains a magic number: switch (lastResponse.type)                  {                      case Response.ResponseType.SUCCESS_SEQUENCE:                      case Response.ResponseType.SUCCESS_PARTIAL:                      case (Response.ResponseType)5: // deprecated; SUCCESS_FEED from pre-RethinkDB 2.0                          break;                      case Response.ResponseType.SUCCESS_ATOM:                          if (lastResponse.response[0].type != Datum.DatumType.R_ARRAY)                              throw new RethinkDbRuntimeException("Received an unexpected non-enumerable response to an enumeration query");                          break;                      case Response.ResponseType.CLIENT_ERROR:                      case Response.ResponseType.COMPILE_ERROR:                          throw new RethinkDbInternalErrorException("Client error: " + lastResponse.response[0].r_str);                      case Response.ResponseType.RUNTIME_ERROR:                          throw new RethinkDbRuntimeException("Runtime error: " + lastResponse.response[0].r_str);                      default:                          throw new RethinkDbInternalErrorException("Unhandled response type: " + lastResponse.type);                  }
Magic Number,RethinkDb,QueryEnumerator<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,MoveNext,The following statement contains a magic number: if (lastResponse.type == Response.ResponseType.SUCCESS_SEQUENCE ||                      lastResponse.type == Response.ResponseType.SUCCESS_ATOM)                  {                      return false;                  }                  else if (lastResponse.type == Response.ResponseType.SUCCESS_PARTIAL ||                           lastResponse.type == (Response.ResponseType)5)                  {                      query.type = RethinkDb.Spec.Query.QueryType.CONTINUE;                      query.query = null;                      await ReissueQuery(cancellationToken);                      return await MoveNext(cancellationToken);                  }                  else                  {                      throw new RethinkDbInternalErrorException("Unreachable code; ReissueQuery should prevent reaching this condition");                  }
Magic Number,RethinkDb.DatumConverters,TupleConverter<T>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\TupleDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (datum.type == Spec.Datum.DatumType.R_NULL)                  {                      return default(T);                  }                  else if (datum.type == Spec.Datum.DatumType.R_OBJECT)                  {                      if (itemConverters.Length != 2)                          throw new NotSupportedException("TupleDatumConverter only supports OBJECT values if it's a two-tuple; this one is a " + typeof(T).FullName);                        object item1 = null;                      object item2 = null;                        foreach (var assocPair in datum.r_object)                      {                          // left/right for a join                          if (assocPair.key == "left")                              item1 = itemConverters[0].ConvertDatum(assocPair.val);                          else if (assocPair.key == "right")                              item2 = itemConverters[1].ConvertDatum(assocPair.val);                            // group/reduction for a grouped map reduce                          else if (assocPair.key == "group")                              item1 = itemConverters[0].ConvertDatum(assocPair.val);                          else if (assocPair.key == "reduction")                              item2 = itemConverters[1].ConvertDatum(assocPair.val);                          else                              throw new InvalidOperationException("Unexpected key/value pair in tuple object: " + assocPair.key + "; expected left/right or group/reduction");                      }                        return (T)(tupleConstructor.Invoke(new object[] { item1' item2 }));                  }                  else if (datum.type == Spec.Datum.DatumType.R_ARRAY)                  {                      if (itemConverters.Length != datum.r_array.Count)                          throw new InvalidOperationException(String.Format("Unexpected array of length {0} where tuple of type {1} was expected"' datum.r_array.Count' typeof(T)));                        object[] values = new object[itemConverters.Length];                      for (int i = 0; i < itemConverters.Length; i++)                          values[i] = itemConverters[i].ConvertDatum(datum.r_array[i]);                      return (T)(tupleConstructor.Invoke(values));                  }                  else                      throw new NotSupportedException("Attempted to cast Datum to tuple' but Datum was unsupported type " + datum.type);
Magic Number,RethinkDb.DatumConverters,DateTimeDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: return new DateTime((long)(epoch_time.r_num * 10000000) + 621355968000000000' DateTimeKind.Utc);
Magic Number,RethinkDb.DatumConverters,DateTimeDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: return new DateTime((long)(epoch_time.r_num * 10000000) + 621355968000000000' DateTimeKind.Utc);
Magic Number,RethinkDb.DatumConverters,DateTimeDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeDatumConverterFactory.cs,ConvertObject,The following statement contains a magic number: datum.r_object.Add(new Datum.AssocPair() {                  key = "epoch_time"'                  val = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = (dateTime.Ticks - 621355968000000000) / 10000000.0                  }              });
Magic Number,RethinkDb.DatumConverters,DateTimeDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeDatumConverterFactory.cs,ConvertObject,The following statement contains a magic number: datum.r_object.Add(new Datum.AssocPair() {                  key = "epoch_time"'                  val = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = (dateTime.Ticks - 621355968000000000) / 10000000.0                  }              });
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (timezone.r_str == "Z")              {                  sign = '+';                  h = "00";                  m = "00";              }              else if (timezone.r_str.Length == 6)              {                  // [+-]\d\d:\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(4' 2);              }              else if (timezone.r_str.Length == 5)              {                  // [+-]\d\d\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = timezone.r_str.Substring(3' 2);              }              else if (timezone.r_str.Length == 3)              {                  // [+-]\d\d                  sign = timezone.r_str[0];                  h = timezone.r_str.Substring(1' 2);                  m = "00";              }              else                  throw new FormatException(String.Format("Unexpected timezone format: {0}; unexpected length"' timezone.r_str));
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: return new DateTimeOffset((long)(epoch_time.r_num * 10000000) + 621355968000000000' TimeSpan.Zero).ToOffset(offset);
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: return new DateTimeOffset((long)(epoch_time.r_num * 10000000) + 621355968000000000' TimeSpan.Zero).ToOffset(offset);
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertObject,The following statement contains a magic number: datum.r_object.Add(new Datum.AssocPair() {                  key = "epoch_time"'                  val = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = (dateTimeOffset.UtcTicks - 621355968000000000) / 10000000.0                  }              });
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertObject,The following statement contains a magic number: datum.r_object.Add(new Datum.AssocPair() {                  key = "epoch_time"'                  val = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = (dateTimeOffset.UtcTicks - 621355968000000000) / 10000000.0                  }              });
Magic Number,RethinkDb.DatumConverters,DateTimeOffsetDatumConverter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DateTimeOffsetDatumConverterFactory.cs,ConvertObject,The following statement contains a magic number: StringBuilder offset = new StringBuilder(5);
Magic Number,RethinkDb.DatumConverters,AbstractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\AbstractDatumConverterFactory.cs,GetBestNativeTypeForDatum,The following statement contains a magic number: switch (datum.type)              {                  case Datum.DatumType.R_ARRAY:                      {                          var hasNullValues = datum.r_array.Any(d => d.type == Datum.DatumType.R_NULL);                            var arrayValuesExcludingNulls = datum.r_array.Where(d => d.type != Datum.DatumType.R_NULL);                            var nativeTypesExcludingNulls = arrayValuesExcludingNulls.Select(GetBestNativeTypeForDatum).Distinct().ToArray();                            if (nativeTypesExcludingNulls.Length == 0)                              // only have nulls' or' empty                              return typeof(object[]);                            if (nativeTypesExcludingNulls.Length == 2 && nativeTypesExcludingNulls.Contains(typeof(double)) && nativeTypesExcludingNulls.Contains(typeof(int)))                              // we have numbers' both ints and doubles; we'll make an array of doubles as the return value.                              // This is a special case; only works because we know GetBestNativeTypeForDatum will only return int or double.  If that changes'                              // we need a more sophisticated manner to get the best numeric type here.                              nativeTypesExcludingNulls = new [] { typeof(double) };                            if (nativeTypesExcludingNulls.Length == 1)                          {                              Type arrayContentType = nativeTypesExcludingNulls[0];                              if (!hasNullValues || !arrayContentType.IsValueType)                                  // we either have no nulls' or' this type can be assigned to null' so we just use the type                                  return arrayContentType.MakeArrayType();                              else                                  // the type is Nullable<T>[]' where T is the type of all the objects in the array                                  return typeof(Nullable<>).MakeGenericType(arrayContentType).MakeArrayType();                          }                            throw new RethinkDbRuntimeException("Heterogeneous arrays are not currently supported as their types are indistinguishable");                      }                                    case Datum.DatumType.R_BOOL:                      return typeof(bool);                                    case Datum.DatumType.R_NULL:                      return typeof(object);                                    case Datum.DatumType.R_NUM:                      if (datum.r_num == Math.Floor(datum.r_num))                          return typeof(int);                      else                          return typeof(double);                                    case Datum.DatumType.R_OBJECT:                      {                          var reqlTypeDatum = datum.r_object.SingleOrDefault(kvp => kvp.key == "$reql_type$");                          if (reqlTypeDatum != null && reqlTypeDatum.val.type == Datum.DatumType.R_STR)                          {                              var reqlType = reqlTypeDatum.val.r_str;                              switch (reqlType)                              {                                  case "BINARY":                                      return typeof(byte[]);                                  case "TIME":                                      return typeof(DateTimeOffset);                                  default:                                      throw new RethinkDbInternalErrorException("Unrecognized reql_type");                              }                          }                            return typeof(Dictionary<string' object>);                      }                                    case Datum.DatumType.R_STR:                      return typeof(string);                                    case Datum.DatumType.R_JSON:                      throw new RethinkDbInternalErrorException("Unsupported datum type");                    default:                      throw new RethinkDbInternalErrorException("Unrecognized datum type");              }
Magic Number,RethinkDb.DatumConverters,GroupingDictionaryDatumConverter<TKey;TValue>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\GroupingDictionaryDatumConverterFactory.cs,ConvertDatum,The following statement contains a magic number: if (datum.type == Datum.DatumType.R_NULL)              {                  return null;              }              else if (datum.type == Datum.DatumType.R_OBJECT)              {                  var keys = datum.r_object.ToDictionary(kvp => kvp.key' kvp => kvp.val);                    Datum typeDatum;                  if (!keys.TryGetValue("$reql_type$"' out typeDatum))                      throw new NotSupportedException("Object without $reql_type$ key cannot be converted to a dictionary");                  if (typeDatum.type != Datum.DatumType.R_STR || typeDatum.r_str != "GROUPED_DATA")                      throw new NotSupportedException("Object without $reql_type$ = GROUPED_DATA cannot be converted to a dictionary");                    Datum dataDatum;                  if (!keys.TryGetValue("data"' out dataDatum))                      throw new NotSupportedException("Object without data key cannot be converted to a dictionary");                  if (dataDatum.type != Datum.DatumType.R_ARRAY)                      throw new NotSupportedException("Object's data key must be an array type");                    var retval = new GroupingDictionary<TKey' TValue>(dataDatum.r_array.Count);                  foreach (var item in dataDatum.r_array)                  {                      if (item.type != Datum.DatumType.R_ARRAY || item.r_array.Count != 2)                          throw new NotSupportedException("GROUPED_DATA data is expected to contain array elements of two items' a key and a value");                      var key = keyTypeConverter.ConvertDatum(item.r_array[0]);                      var value = valueTypeConverter.ConvertDatum(item.r_array[1]);                      retval[key] = value;                  }                    return retval;              }              else              {                  throw new NotSupportedException("Attempted to cast Datum to array' but Datum was unsupported type " + datum.type);              }
Magic Number,RethinkDb.Logging,LoggingUtils,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Logging\LoggingUtils.cs,EnumerableToString,The following statement contains a magic number: return enumerable.Aggregate(""' (s' m) => (s + "' " + m)' res => res.Length > 0 ? res.Substring(2) : res);
Magic Number,RethinkDb.Expressions,SingleParameterLambda<TParameter1;TReturn>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\SingleParameterLambda.cs,CreateFunctionTerm,The following statement contains a magic number: parametersTerm.args.Add(new Term() {                  type = Term.TermType.DATUM'                  datum = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = 2                  }              });
Magic Number,RethinkDb.Expressions,SingleParameterLambda<TParameter1;TReturn>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\SingleParameterLambda.cs,MapExpressionToTerm,The following statement contains a magic number: switch (expr.NodeType)              {                  case ExpressionType.Parameter:                  {                      return new Term()                      {                          type = Term.TermType.VAR'                          args = {                              new Term() {                                  type = Term.TermType.DATUM'                                  datum = new Datum() {                                      type = Datum.DatumType.R_NUM'                                      r_num = 2                                  }'                              }                          }                      };                  }                    case ExpressionType.Convert:                  {                      // In some cases the CLR can insert a type-cast when a generic type constrant is present on a                      // generic type that's a parameter.  We pretty much just ignore those casts.  It might be                      // valid to use the cast to switch to a different datum converter?' but the use-case isn't                      // really clear right now.  We do check that the type-cast makes sense for the parameter type'                      // but it's just to feel safer; it seems like the compiler should've made sure about that.                        var convertExpression = (UnaryExpression)expr;                      if (convertExpression.Operand.NodeType != ExpressionType.Parameter)                          // If this isn't a cast on a Parameter' just drop it through to do continue processing.                          return SimpleMap(datumConverterFactory' expr);                        // Otherwise; type-check it' and then just strip the Convert node out and recursivemap the inside.                      var parameterExpr = (ParameterExpression)convertExpression.Operand;                      if (!convertExpression.Type.IsAssignableFrom(parameterExpr.Type))                          throw new NotSupportedException(String.Format(                              "Cast on parameter expression not currently supported (from type {0} to type {1})"'                              parameterExpr.Type' convertExpression.Type));                        return RecursiveMap(parameterExpr);                  }                                    default:                      return SimpleMap(datumConverterFactory' expr);              }
Magic Number,RethinkDb.Expressions,TwoParameterLambda<TParameter1;TParameter2;TReturn>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\TwoParameterLambda.cs,CreateFunctionTerm,The following statement contains a magic number: parametersTerm.args.Add(new Term() {                  type = Term.TermType.DATUM'                  datum = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = 3                  }              });
Magic Number,RethinkDb.Expressions,TwoParameterLambda<TParameter1;TParameter2;TReturn>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\TwoParameterLambda.cs,CreateFunctionTerm,The following statement contains a magic number: parametersTerm.args.Add(new Term() {                  type = Term.TermType.DATUM'                  datum = new Datum() {                      type = Datum.DatumType.R_NUM'                      r_num = 4                  }              });
Magic Number,RethinkDb.Expressions,TwoParameterLambda<TParameter1;TParameter2;TReturn>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\TwoParameterLambda.cs,MapExpressionToTerm,The following statement contains a magic number: switch (expr.NodeType)              {                  case ExpressionType.Parameter:                  {                      var parameterExpr = (ParameterExpression)expr;                      int parameterIndex;                      if (parameterExpr.Name == parameter1Name)                          parameterIndex = 3;                      else if (parameterExpr.Name == parameter2Name)                          parameterIndex = 4;                      else                          throw new InvalidOperationException("Unmatched parameter name:" + parameterExpr.Name);                        return new Term() {                          type = Term.TermType.VAR'                          args = {                              new Term() {                                  type = Term.TermType.DATUM'                                  datum = new Datum() {                                      type = Datum.DatumType.R_NUM'                                      r_num = parameterIndex                                  }'                              }                          }                      };                  }                                    case ExpressionType.Convert:                  {                      // In some cases the CLR can insert a type-cast when a generic type constrant is present on a                      // generic type that's a parameter.  We pretty much just ignore those casts.  It might be                      // valid to use the cast to switch to a different datum converter?' but the use-case isn't                      // really clear right now.  We do check that the type-cast makes sense for the parameter type'                      // but it's just to feel safer; it seems like the compiler should've made sure about that.                        var convertExpression = (UnaryExpression)expr;                      if (convertExpression.Operand.NodeType != ExpressionType.Parameter)                          // If this isn't a cast on a Parameter' just drop it through to do continue processing.                          return SimpleMap(datumConverterFactory' expr);                        // Otherwise; type-check it' and then just strip the Convert node out and recursivemap the inside.                      var parameterExpr = (ParameterExpression)convertExpression.Operand;                      if (!convertExpression.Type.IsAssignableFrom(parameterExpr.Type))                          throw new NotSupportedException(String.Format(                              "Cast on parameter expression not currently supported (from type {0} to type {1})"'                              parameterExpr.Type' convertExpression.Type));                        return RecursiveMap(parameterExpr);                  }                                    default:                      return SimpleMap(datumConverterFactory' expr);              }
Magic Number,RethinkDb.Expressions,TwoParameterLambda<TParameter1;TParameter2;TReturn>,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\TwoParameterLambda.cs,MapExpressionToTerm,The following statement contains a magic number: switch (expr.NodeType)              {                  case ExpressionType.Parameter:                  {                      var parameterExpr = (ParameterExpression)expr;                      int parameterIndex;                      if (parameterExpr.Name == parameter1Name)                          parameterIndex = 3;                      else if (parameterExpr.Name == parameter2Name)                          parameterIndex = 4;                      else                          throw new InvalidOperationException("Unmatched parameter name:" + parameterExpr.Name);                        return new Term() {                          type = Term.TermType.VAR'                          args = {                              new Term() {                                  type = Term.TermType.DATUM'                                  datum = new Datum() {                                      type = Datum.DatumType.R_NUM'                                      r_num = parameterIndex                                  }'                              }                          }                      };                  }                                    case ExpressionType.Convert:                  {                      // In some cases the CLR can insert a type-cast when a generic type constrant is present on a                      // generic type that's a parameter.  We pretty much just ignore those casts.  It might be                      // valid to use the cast to switch to a different datum converter?' but the use-case isn't                      // really clear right now.  We do check that the type-cast makes sense for the parameter type'                      // but it's just to feel safer; it seems like the compiler should've made sure about that.                        var convertExpression = (UnaryExpression)expr;                      if (convertExpression.Operand.NodeType != ExpressionType.Parameter)                          // If this isn't a cast on a Parameter' just drop it through to do continue processing.                          return SimpleMap(datumConverterFactory' expr);                        // Otherwise; type-check it' and then just strip the Convert node out and recursivemap the inside.                      var parameterExpr = (ParameterExpression)convertExpression.Operand;                      if (!convertExpression.Type.IsAssignableFrom(parameterExpr.Type))                          throw new NotSupportedException(String.Format(                              "Cast on parameter expression not currently supported (from type {0} to type {1})"'                              parameterExpr.Type' convertExpression.Type));                        return RecursiveMap(parameterExpr);                  }                                    default:                      return SimpleMap(datumConverterFactory' expr);              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping((MethodCallExpression)templateBody' terms => termConstructor(terms[0]' terms[1]' terms[2]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping((NewExpression)templateBody' terms => termConstructor(terms[0]' terms[1]' terms[2]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping((MethodCallExpression)templateBody' terms => termConstructor(terms[0]' terms[1]' terms[2]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping((NewExpression)templateBody' terms => termConstructor(terms[0]' terms[1]' terms[2]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                      RegisterMethodCallTemplateMapping(                          (MethodCallExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  case ExpressionType.New:                      RegisterNewTemplateMapping(                          (NewExpression)templateBody'                          terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]));                      break;                  default:                      throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,DefaultExpressionConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DefaultExpressionConverterFactory.cs,RegisterTemplateMapping,The following statement contains a magic number: switch (templateBody.NodeType)              {                  case ExpressionType.Call:                          RegisterMethodCallTemplateMapping(                              (MethodCallExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      case ExpressionType.New:                          RegisterNewTemplateMapping(                              (NewExpression)templateBody'                              terms => termConstructor(terms[0]' terms[1]' terms[2]' terms[3]' terms[4]' terms[5]' terms[6]' terms[7]));                          break;                      default:                          throw new NotImplementedException("Template did not match supported pattern");              }
Magic Number,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,ConvertEnumerableWhereToTerm,The following statement contains a magic number: var createFunctionTermMethod = typeof(ExpressionUtils)                  .GetMethods(BindingFlags.Public | BindingFlags.Static)                      .Single(m => m.Name == "CreateFunctionTerm" && m.GetGenericArguments().Length == 2);
Magic Number,RethinkDb.Expressions,LinqExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\LinqExpressionConverters.cs,ConvertEnumerableAnyToTerm,The following statement contains a magic number: var createFunctionTermMethod = typeof(ExpressionUtils)                  .GetMethods(BindingFlags.Public | BindingFlags.Static)                  .Single(m => m.Name == "CreateFunctionTerm" && m.GetGenericArguments().Length == 2);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The following statement contains a magic number: expressionConverterFactory.RegisterTemplateMapping<int' int' int' int' int' int' int' DateTime>(                  (year' month' day' hour' minute' second' millisecond) => new DateTime(year' month' day' hour' minute' second' millisecond)'                  (year' month' day' hour' minute' second' millisecond) => new Term() {                      type = Term.TermType.TIME'                      args = { year' month' day' hour' minute' Add(second' Binary(millisecond' Term.TermType.DIV' 1000))' String("Z") }                  });
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The following statement contains a magic number: expressionConverterFactory.RegisterTemplateMapping<long' TimeSpan' DateTimeOffset>(                  (ticks' offset) => new DateTimeOffset(ticks' offset)'                  (ticks' offset) => new Term() {                      type = Term.TermType.IN_TIMEZONE'                      args = {                          new Term() {                              type = Term.TermType.EPOCH_TIME'                              args = {                                  Binary(                                      Binary(                                          Binary(ticks' Term.TermType.SUB' 621355968000000000)'                                          Term.TermType.DIV'                                          10000000                                      )'                                      Term.TermType.SUB'                                      offset                                  )                              }                          }'                          TimeSpanToOffset(offset)                      }                  });
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The following statement contains a magic number: expressionConverterFactory.RegisterTemplateMapping<long' TimeSpan' DateTimeOffset>(                  (ticks' offset) => new DateTimeOffset(ticks' offset)'                  (ticks' offset) => new Term() {                      type = Term.TermType.IN_TIMEZONE'                      args = {                          new Term() {                              type = Term.TermType.EPOCH_TIME'                              args = {                                  Binary(                                      Binary(                                          Binary(ticks' Term.TermType.SUB' 621355968000000000)'                                          Term.TermType.DIV'                                          10000000                                      )'                                      Term.TermType.SUB'                                      offset                                  )                              }                          }'                          TimeSpanToOffset(offset)                      }                  });
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,RegisterDateTimeConstructors,The following statement contains a magic number: expressionConverterFactory.RegisterTemplateMapping<int' int' int' int' int' int' int' TimeSpan' DateTimeOffset>(                  (year' month' day' hour' minute' second' millisecond' offset) => new DateTimeOffset(year' month' day' hour' minute' second' millisecond' offset)'                  (year' month' day' hour' minute' second' millisecond' offset) => new Term() {                      type = Term.TermType.TIME'                      args = { year' month' day' hour' minute' Add(second' Binary(millisecond' Term.TermType.DIV' 1000))' TimeSpanToOffset(offset) }                  });
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,DaysToSeconds,The following statement contains a magic number: return Binary(term' Term.TermType.MUL' 86400);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,HoursToSeconds,The following statement contains a magic number: return Binary(term' Term.TermType.MUL' 3600);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,MinutesToSeconds,The following statement contains a magic number: return Binary(term' Term.TermType.MUL' 60);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,MillisecondsToSeconds,The following statement contains a magic number: return Binary(term' Term.TermType.DIV' 1000);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetHouts,The following statement contains a magic number: var hours = Binary(                  Binary(offset' Term.TermType.SUB' Binary(offset' Term.TermType.MOD' 3600))'                  Term.TermType.DIV'                  3600);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetHouts,The following statement contains a magic number: var hours = Binary(                  Binary(offset' Term.TermType.SUB' Binary(offset' Term.TermType.MOD' 3600))'                  Term.TermType.DIV'                  3600);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetHouts,The following statement contains a magic number: return                  Branch(                      Binary(hours' Term.TermType.LT' 10)'                      Add(String("0")' CoerceTo(hours' "string"))'                      CoerceTo(hours' "string")                  );
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetMinutes,The following statement contains a magic number: var minutes = Binary(                  Binary(offset' Term.TermType.SUB' Binary(offset' Term.TermType.MOD' 60))'                  Term.TermType.DIV'                  60);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetMinutes,The following statement contains a magic number: var minutes = Binary(                  Binary(offset' Term.TermType.SUB' Binary(offset' Term.TermType.MOD' 60))'                  Term.TermType.DIV'                  60);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetMinutes,The following statement contains a magic number: minutes = Binary(minutes' Term.TermType.MOD' 60);
Magic Number,RethinkDb.Expressions,DateTimeExpressionConverters,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\DateTimeExpressionConverters.cs,TimeSpanToOffsetMinutes,The following statement contains a magic number: return                  Branch(                      Binary(minutes' Term.TermType.LE' 10)'                      Add(String("0")' CoerceTo(minutes' "string"))' // leading zero                      CoerceTo(minutes' "string")                  );
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,JsonParser,The following statement contains a magic number: StringBuffer = new StringBuilder(128);
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,PopulateStateTables,The following statement contains a magic number: stateHandlerTable = new Func<StateContext' bool>[28] {  				State1'  				State2'  				State3'  				State4'  				State5'  				State6'  				State7'  				State8'  				State9'  				State10'  				State11'  				State12'  				State13'  				State14'  				State15'  				State16'  				State17'  				State18'  				State19'  				State20'  				State21'  				State22'  				State23'  				State24'  				State25'  				State26'  				State27'  				State28  			};
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,PopulateStateTables,The following statement contains a magic number: stateReturnTable = new int[28] {  				(int)JsonParserToken.Char'  				0'  				(int)JsonParserToken.Number'  				(int)JsonParserToken.Number'  				0'  				(int)JsonParserToken.Number'  				0'  				(int)JsonParserToken.Number'  				0'  				0'  				(int)JsonParserToken.True'  				0'  				0'  				0'  				(int)JsonParserToken.False'  				0'  				0'  				(int)JsonParserToken.Null'  				(int)JsonParserToken.CharSeq'  				(int)JsonParserToken.Char'  				0'  				0'  				(int)JsonParserToken.CharSeq'  				(int)JsonParserToken.Char'  				0'  				0'  				0'  				0  			};
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State1,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  					continue;  				  				if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 3;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.NextState = 19;  						context.Return = true;  						return true;  					  					case ''':  					case ':':  					case '[':  					case ']':  					case '{':  					case '}':  						context.NextState = 1;  						context.Return = true;  						return true;  					  					case '-':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 2;  						return true;  					  					case '0':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 4;  						return true;  					  					case 'f':  						context.NextState = 12;  						return true;  					  					case 'n':  						context.NextState = 16;  						return true;  					  					case 't':  						context.NextState = 9;  						return true;  					  					case '\'':  						if (!context.Parser.AllowSingleQuotedStrings)  							return false;  						  						context.Parser.InputCharacter = '"';  						context.NextState = 23;  						context.Return = true;  						return true;  					  					case '/':  						if (!context.Parser.AllowComments)  							return false;  						  						context.NextState = 25;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State2,The following statement contains a magic number: if (context.Parser.InputCharacter >= '1' && context.Parser.InputCharacter<= '9')  			{  				context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  				context.NextState = 3;  				return true;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State2,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case '0':  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 4;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State3,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					continue;  				}  				  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  				{  					context.Return = true;  					context.NextState = 1;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case ''':  					case ']':  					case '}':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 1;  						return true;  					  					case '.':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 5;  						return true;  					  					case 'e':  					case 'E':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 7;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State3,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					continue;  				}  				  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  				{  					context.Return = true;  					context.NextState = 1;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case ''':  					case ']':  					case '}':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 1;  						return true;  					  					case '.':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 5;  						return true;  					  					case 'e':  					case 'E':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 7;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State4,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case ''':  				case ']':  				case '}':  					context.Parser.PreviousCharacter();  					context.Return = true;  					context.NextState = 1;  					return true;  				  				case '.':  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 5;  					return true;    				case 'e':  				case 'E':  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 7;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State4,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case ''':  				case ']':  				case '}':  					context.Parser.PreviousCharacter();  					context.Return = true;  					context.NextState = 1;  					return true;  				  				case '.':  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 5;  					return true;    				case 'e':  				case 'E':  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 7;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State5,The following statement contains a magic number: if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9')  			{  				context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  				context.NextState = 6;  				return true;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State6,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9')  				{  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					continue;  				}  				  				if (context.Parser.InputCharacter == ' ' ||  					context.Parser.InputCharacter >= '\t' && context.Parser.InputCharacter <= '\r')  				{  					context.Return = true;  					context.NextState = 1;  					return true;  				}  				  				switch (context.Parser.InputCharacter)  				{  					case ''':  					case ']':  					case '}':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 1;  						return true;  					  					case 'e':  					case 'E':  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						context.NextState = 7;  						return true;  					  					default:  						return false;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State7,The following statement contains a magic number: if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter<= '9')  			{  				context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  				context.NextState = 8;  				return true;              }
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State7,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case '+':  				case '-':  					context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  					context.NextState = 8;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State9,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'r':  					context.NextState = 10;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State10,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'u':  					context.NextState = 11;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State12,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'a':  					context.NextState = 13;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State13,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'l':  					context.NextState = 14;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State14,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 's':  					context.NextState = 15;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State16,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'u':  					context.NextState = 17;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State17,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'l':  					context.NextState = 18;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State19,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 20;  						return true;  					  					case '\\':  						context.StateStack = 19;  						context.NextState = 21;  						return true;  					  					default:  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						continue;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State19,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 20;  						return true;  					  					case '\\':  						context.StateStack = 19;  						context.NextState = 21;  						return true;  					  					default:  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						continue;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State19,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				switch (context.Parser.InputCharacter)  				{  					case '"':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 20;  						return true;  					  					case '\\':  						context.StateStack = 19;  						context.NextState = 21;  						return true;  					  					default:  						context.Parser.StringBuffer.Append((char)context.Parser.InputCharacter);  						continue;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State21,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case 'u':  					context.NextState = 22;  					return true;  				  				case '"':  				case '\'':  				case '/':  				case '\\':  				case 'b':  				case 'f':  				case 'n':  				case 'r':  				case 't':  					context.Parser.StringBuffer.Append(ProcessEscChar(context.Parser.InputCharacter));  					context.NextState = context.StateStack;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State22,The following statement contains a magic number: int mult = 4096;
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State22,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9' ||  					context.Parser.InputCharacter >= 'A' && context.Parser.InputCharacter <= 'F' ||  					context.Parser.InputCharacter >= 'a' && context.Parser.InputCharacter <= 'f')  				{  					  					context.Parser.UnicodeCharacter += HexValue(context.Parser.InputCharacter) * mult;  					  					counter++;  					mult /= 16;  					  					if (counter == 4)  					{  						context.Parser.StringBuffer.Append(Convert.ToChar(context.Parser.UnicodeCharacter));  						context.NextState = context.StateStack;  						return true;  					}  					  					continue;  				}  				  				return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State22,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter >= '0' && context.Parser.InputCharacter <= '9' ||  					context.Parser.InputCharacter >= 'A' && context.Parser.InputCharacter <= 'F' ||  					context.Parser.InputCharacter >= 'a' && context.Parser.InputCharacter <= 'f')  				{  					  					context.Parser.UnicodeCharacter += HexValue(context.Parser.InputCharacter) * mult;  					  					counter++;  					mult /= 16;  					  					if (counter == 4)  					{  						context.Parser.StringBuffer.Append(Convert.ToChar(context.Parser.UnicodeCharacter));  						context.NextState = context.StateStack;  						return true;  					}  					  					continue;  				}  				  				return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State23,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				switch (context.Parser.InputCharacter)  				{  					case '\'':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 24;  						return true;  					  					case '\\':  						context.StateStack = 23;  						context.NextState = 21;  						return true;  					  					default:  						context.Parser.StringBuffer.Append((char) context.Parser.InputCharacter);  						continue;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State23,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				switch (context.Parser.InputCharacter)  				{  					case '\'':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 24;  						return true;  					  					case '\\':  						context.StateStack = 23;  						context.NextState = 21;  						return true;  					  					default:  						context.Parser.StringBuffer.Append((char) context.Parser.InputCharacter);  						continue;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State23,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				switch (context.Parser.InputCharacter)  				{  					case '\'':  						context.Parser.PreviousCharacter();  						context.Return = true;  						context.NextState = 24;  						return true;  					  					case '\\':  						context.StateStack = 23;  						context.NextState = 21;  						return true;  					  					default:  						context.Parser.StringBuffer.Append((char) context.Parser.InputCharacter);  						continue;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State25,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case '*':  					context.NextState = 27;  					return true;  				  				case '/':  					context.NextState = 26;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State25,The following statement contains a magic number: switch (context.Parser.InputCharacter)  			{  				case '*':  					context.NextState = 27;  					return true;  				  				case '/':  					context.NextState = 26;  					return true;  				  				default:  					return false;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State27,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == '*')  				{  					context.NextState = 28;  					return true;  				}  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,State28,The following statement contains a magic number: while (context.Parser.GetCharacter())  			{  				if (context.Parser.InputCharacter == '*')  					continue;  				  				if (context.Parser.InputCharacter == '/')  				{  					context.NextState = 1;  					return true;  				}  				  				context.NextState = 27;  				return true;  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,HexValue,The following statement contains a magic number: switch (digit)  			{  				case 'a':  				case 'A':  					return 10;  				  				case 'b':  				case 'B':  					return 11;  				  				case 'c':  				case 'C':  					return 12;  				  				case 'd':  				case 'D':  					return 13;  				  				case 'e':  				case 'E':  					return 14;  				  				case 'f':  				case 'F':  					return 15;  				  				default:  					return digit - '0';  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,HexValue,The following statement contains a magic number: switch (digit)  			{  				case 'a':  				case 'A':  					return 10;  				  				case 'b':  				case 'B':  					return 11;  				  				case 'c':  				case 'C':  					return 12;  				  				case 'd':  				case 'D':  					return 13;  				  				case 'e':  				case 'E':  					return 14;  				  				case 'f':  				case 'F':  					return 15;  				  				default:  					return digit - '0';  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,HexValue,The following statement contains a magic number: switch (digit)  			{  				case 'a':  				case 'A':  					return 10;  				  				case 'b':  				case 'B':  					return 11;  				  				case 'c':  				case 'C':  					return 12;  				  				case 'd':  				case 'D':  					return 13;  				  				case 'e':  				case 'E':  					return 14;  				  				case 'f':  				case 'F':  					return 15;  				  				default:  					return digit - '0';  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,HexValue,The following statement contains a magic number: switch (digit)  			{  				case 'a':  				case 'A':  					return 10;  				  				case 'b':  				case 'B':  					return 11;  				  				case 'c':  				case 'C':  					return 12;  				  				case 'd':  				case 'D':  					return 13;  				  				case 'e':  				case 'E':  					return 14;  				  				case 'f':  				case 'F':  					return 15;  				  				default:  					return digit - '0';  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,HexValue,The following statement contains a magic number: switch (digit)  			{  				case 'a':  				case 'A':  					return 10;  				  				case 'b':  				case 'B':  					return 11;  				  				case 'c':  				case 'C':  					return 12;  				  				case 'd':  				case 'D':  					return 13;  				  				case 'e':  				case 'E':  					return 14;  				  				case 'f':  				case 'F':  					return 15;  				  				default:  					return digit - '0';  			}
Magic Number,SineSignal.Ottoman.Serialization,JsonParser,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonParser.cs,HexValue,The following statement contains a magic number: switch (digit)  			{  				case 'a':  				case 'A':  					return 10;  				  				case 'b':  				case 'B':  					return 11;  				  				case 'c':  				case 'C':  					return 12;  				  				case 'd':  				case 'D':  					return 13;  				  				case 'e':  				case 'E':  					return 14;  				  				case 'f':  				case 'F':  					return 15;  				  				default:  					return digit - '0';  			}
Magic Number,RethinkDb.Protocols,Version_0_2,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_2_Protocol.cs,ConnectionHandshake,The following statement contains a magic number: if (String.IsNullOrEmpty(authorizationKey))              {                  await stream.WriteAsync(new byte[] { 0' 0' 0' 0 }' 0' 4' cancellationToken);              }              else              {                  var keyInBytes = Encoding.UTF8.GetBytes(authorizationKey);                  var authKeyLength = BitConverter.GetBytes(keyInBytes.Length);                  if (!BitConverter.IsLittleEndian)                      Array.Reverse(authKeyLength' 0' authKeyLength.Length);                  await stream.WriteAsync(authKeyLength' 0' authKeyLength.Length);                  await stream.WriteAsync(keyInBytes' 0' keyInBytes.Length);              }
Magic Number,RethinkDb.Protocols,Version_0_2,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_2_Protocol.cs,ConnectionHandshake,The following statement contains a magic number: byte[] authReponseBuffer = new byte[1024];
Magic Number,RethinkDb.Protocols,Version_0_2,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_2_Protocol.cs,WriteQueryToStream,The following statement contains a magic number: using (var memoryBuffer = new MemoryStream(1024))              {                  Serializer.Serialize(memoryBuffer' query);                    var data = memoryBuffer.ToArray();                  var lengthHeader = BitConverter.GetBytes(data.Length);                  if (!BitConverter.IsLittleEndian)                      Array.Reverse(lengthHeader' 0' lengthHeader.Length);                    logger.Debug("Writing packet' {0} bytes"' data.Length);                  await stream.WriteAsync(lengthHeader' 0' lengthHeader.Length' cancellationToken);                  await stream.WriteAsync(data' 0' data.Length' cancellationToken);              }
Magic Number,RethinkDb.Protocols,Version_0_2,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_2_Protocol.cs,ReadResponseFromStream,The following statement contains a magic number: byte[] headerSize = new byte[4];
Magic Number,RethinkDb.Protocols,Version_0_3_Json,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_JsonProtocol.cs,WriteQueryToStream,The following statement contains a magic number: using (var memoryBuffer = new MemoryStream(1024))              using (var streamWriter = new StreamWriter(memoryBuffer' utf8Encoding))              {                  WriteQuery(new JsonWriter(streamWriter)' query);                  streamWriter.Flush();                    var data = memoryBuffer.ToArray();                  memoryBuffer.Seek(0' SeekOrigin.Begin);                    if (logger.InformationEnabled())                  {                      string dataStr = Encoding.UTF8.GetString(data);                      logger.Information("JSON query: {0}"' dataStr);                  }                    var tokenHeader = BitConverter.GetBytes(query.token);                  if (!BitConverter.IsLittleEndian)                      Array.Reverse(tokenHeader' 0' tokenHeader.Length);                  memoryBuffer.Write(tokenHeader' 0' tokenHeader.Length);                    var lengthHeader = BitConverter.GetBytes(data.Length);                  if (!BitConverter.IsLittleEndian)                      Array.Reverse(lengthHeader' 0' lengthHeader.Length);                  memoryBuffer.Write(lengthHeader' 0' lengthHeader.Length);                    memoryBuffer.Write(data' 0' data.Length);                    logger.Debug("Writing packet' {0} bytes"' data.Length);                  data = memoryBuffer.ToArray();                  await stream.WriteAsync(data' 0' data.Length' cancellationToken);              }
Magic Number,RethinkDb.Protocols,Version_0_3_Json,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_JsonProtocol.cs,ReadResponseFromStream,The following statement contains a magic number: byte[] tokenHeader = new byte[8];
Magic Number,RethinkDb.Protocols,Version_0_3_Json,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_JsonProtocol.cs,ReadResponseFromStream,The following statement contains a magic number: byte[] lengthHeader = new byte[4];
Magic Number,RethinkDb.Protocols,Version_0_3_Protobuf,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_ProtobufProtocol.cs,WriteQueryToStream,The following statement contains a magic number: using (var memoryBuffer = new MemoryStream(1024))              {                  Serializer.Serialize(memoryBuffer' query);                    var data = memoryBuffer.ToArray();                  var lengthHeader = BitConverter.GetBytes(data.Length);                  if (!BitConverter.IsLittleEndian)                      Array.Reverse(lengthHeader' 0' lengthHeader.Length);                    logger.Debug("Writing packet' {0} bytes"' data.Length);                  await stream.WriteAsync(lengthHeader' 0' lengthHeader.Length' cancellationToken);                  await stream.WriteAsync(data' 0' data.Length' cancellationToken);              }
Magic Number,RethinkDb.Protocols,Version_0_3_Protobuf,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_ProtobufProtocol.cs,ReadResponseFromStream,The following statement contains a magic number: byte[] headerSize = new byte[4];
Magic Number,RethinkDb.Protocols,Version_0_3,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3.cs,ConnectionHandshake,The following statement contains a magic number: if (String.IsNullOrEmpty(authorizationKey))              {                  await stream.WriteAsync(new byte[] { 0' 0' 0' 0 }' 0' 4' cancellationToken);              }              else              {                  var keyInBytes = Encoding.UTF8.GetBytes(authorizationKey);                  var authKeyLength = BitConverter.GetBytes(keyInBytes.Length);                  if (!BitConverter.IsLittleEndian)                      Array.Reverse(authKeyLength' 0' authKeyLength.Length);                  await stream.WriteAsync(authKeyLength' 0' authKeyLength.Length);                  await stream.WriteAsync(keyInBytes' 0' keyInBytes.Length);              }
Magic Number,RethinkDb.Protocols,Version_0_3,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3.cs,ConnectionHandshake,The following statement contains a magic number: byte[] authReponseBuffer = new byte[1024];
Duplicate Code,RethinkDb,Connection,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Connection.cs,DoTryConnect,The method contains a code clone-set at the following line numbers (starting from the method definition): ((12' 37)' (64' 89))
Duplicate Code,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertDatum,The method contains a code clone-set at the following line numbers (starting from the method definition): ((50' 78)' (120' 148))
Duplicate Code,RethinkDb.DatumConverters,DataContractDatumConverterFactory,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\DatumConverters\DataContractDatumConverterFactory.cs,DefineConvertObject,The method contains a code clone-set at the following line numbers (starting from the method definition): ((84' 105)' (155' 176))
Missing Default,RethinkDb.Expressions,BaseExpression,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Expressions\BaseExpression.cs,SimpleMap,The following switch statement is missing a default case: switch (binding.BindingType)                          {                              case MemberBindingType.Assignment:                              {                                  var memberAssignment = (MemberAssignment)binding;                                  var pair = new Term.AssocPair();                                    pair.key = fieldConverter.GetDatumFieldName(memberAssignment.Member);                                  pair.val = RecursiveMap(memberAssignment.Expression);                                    if (pair.key == null)                                      throw new NotSupportedException("Cannot map member assignments into ReQL without implementing IObjectDatumConverter");                                      makeObjTerm.optargs.Add(pair);                                  break;                              }                              case MemberBindingType.ListBinding:                              case MemberBindingType.MemberBinding:                                  throw new NotSupportedException("Binding type not currently supported");                          }
Missing Default,SineSignal.Ottoman.Serialization,JsonWriter,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Json\JsonWriter.cs,EscapeString,The following switch statement is missing a default case: switch (character)  				{  					case '\n':  						stringBuilder.Append("\\n");  						continue;  					  					case '\r':  						stringBuilder.Append("\\r");  						continue;  					  					case '\t':  						stringBuilder.Append("\\t");  						continue;  	                  					case '"':  					case '\\':  						stringBuilder.Append('\\');  						stringBuilder.Append(character);  						continue;  					  					case '\f':  						stringBuilder.Append("\\f");  						continue;  					  					case '\b':  						stringBuilder.Append("\\b");  						continue;  				}
Missing Default,RethinkDb.Protocols,Version_0_3_Json,C:\repos\mfenniak_rethinkdb-net\rethinkdb-net\Protocols\Version_0_3_JsonProtocol.cs,WriteDatum,The following switch statement is missing a default case: switch (datum.type)              {                  case Spec.Datum.DatumType.R_BOOL:                      writer.WriteBoolean(datum.r_bool);                      break;                  case Spec.Datum.DatumType.R_JSON:                      throw new NotSupportedException();                  case Spec.Datum.DatumType.R_NULL:                      writer.WriteNull();                      break;                  case Spec.Datum.DatumType.R_NUM:                      writer.WriteNumber(datum.r_num);                      break;                  case Spec.Datum.DatumType.R_STR:                      writer.WriteString(datum.r_str);                      break;                  case Spec.Datum.DatumType.R_ARRAY:                      {                          var newterm = new Term() { type = Term.TermType.MAKE_ARRAY };                          newterm.args.AddRange(datum.r_array.Select(ap => new Term()                          {                              type = Term.TermType.DATUM'                              datum = ap'                          }));                          WriteTerm(writer' newterm);                      }                      break;                  case Spec.Datum.DatumType.R_OBJECT:                      {                          var newterm = new Term() { type = Term.TermType.MAKE_OBJ };                          newterm.optargs.AddRange(datum.r_object.Select(ap => new Term.AssocPair()                          {                              key = ap.key'                              val = new Term()                              {                                  type = Term.TermType.DATUM'                                  datum = ap.val                              }                          }));                          WriteTerm(writer' newterm);                      }                      break;              }
