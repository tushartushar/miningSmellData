Implementation smell,Namespace,Class,File,Method,Description
Complex Method,RethinkDb.Newtonsoft,DatumReader,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\DatumReader.cs,ReadInternal,Cyclomatic complexity of the method is 11
Complex Method,RethinkDb.Newtonsoft,DatumReader,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\DatumReader.cs,ReadDatum,Cyclomatic complexity of the method is 8
Long Statement,RethinkDb.Newtonsoft.Configuration,ConfigurationAssembler,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\Configuration\ConfigurationAssembler.cs,CreateConnectionFactory,The length of the statement  "                            connectionFactory = new ConnectionPoolingConnectionFactory(connectionFactory' TimeSpan.FromSeconds(cluster.ConnectionPool.QueryTimeout)); " is 137.
Long Statement,RethinkDb.Newtonsoft.Configuration,NewtonsoftConnectionFactory,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\Configuration\NewtonsoftConnectionFactory.cs,GetAsync,The length of the statement  "            connection.QueryConverter = new QueryConverter(new NewtonSerializer()' new RethinkDb.Expressions.DefaultExpressionConverterFactory()); " is 134.
Long Statement,RethinkDb.Newtonsoft,DatumWriter,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\DatumWriter.cs,WriteValue,The length of the statement  "                "TimeSpans can only be converted by including the TimeSpanConverter in JsonSeralizerSettings. Be sure to include it if you're using custom serializer settings."); " is 162.
Long Statement,RethinkDb.Newtonsoft,DatumWriter,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\DatumWriter.cs,WriteValue,The length of the statement  "                "TimeSpans can only be converted by including the TimeSpanConverter in JsonSeralizerSettings. Be sure to include it if you're using custom serializer settings."); " is 162.
Missing Default,RethinkDb.Newtonsoft,DatumReader,D:\research\architectureSmells\repos\mfenniak_rethinkdb-net\rethinkdb-net-newtonsoft\DatumReader.cs,ReadInternal,The following switch statement is missing a default case: switch (this.CurrentState)              {                  case State.Start:                      if (Context.IsObject && readAs == null)                      {                          this.SetToken(JsonToken.StartObject);                          return true;                      }                      if (Context.IsArray && readAs == null)                      {                          this.SetToken(JsonToken.StartArray);                          return true;                      }                      ReadDatum(Context.Datum' readAs);                      return true;                    case State.Complete:                  case State.Closed:                      return false;                    case State.Property:                  {                      ReadDatum(Context.AssocPairs.Current.val' readAs);                      return true;                  }                    case State.ObjectStart:                  case State.ArrayStart:                  case State.PostValue:                      if (this.stack.Count == 0)                          return false;                        if (Context.IsArray)                      {                          if (Context.Array.MoveNext())                          {                              ReadDatum(Context.Array.Current);                              return true;                          }                            //else pop state' no more elements                          this.stack.Pop();                          SetToken(JsonToken.EndArray);                          return true;                      }                        if (Context.IsObject && readAs == null)                      {                          if (Context.AssocPairs.MoveNext())                          {                              SetToken(JsonToken.PropertyName' Context.AssocPairs.Current.key);                              return true;                          }                            //else pop state' no more elements                          this.stack.Pop();                          SetToken(JsonToken.EndObject);                          return true;                      }                        return false;              }
