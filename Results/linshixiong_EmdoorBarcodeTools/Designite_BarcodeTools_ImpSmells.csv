Implementation smell,Namespace,Class,File,Method,Description
Complex Method,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,initUI,Cyclomatic complexity of the method is 12
Complex Method,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,setInputType,Cyclomatic complexity of the method is 15
Complex Method,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,CheckHexInput,Cyclomatic complexity of the method is 10
Complex Method,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,CheckSNInput,Cyclomatic complexity of the method is 11
Complex Method,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,HandleMessge,Cyclomatic complexity of the method is 50
Complex Method,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,ReadAll,Cyclomatic complexity of the method is 8
Complex Method,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,CheckAndStartPrint,Cyclomatic complexity of the method is 18
Complex Method,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,HandleMessge,Cyclomatic complexity of the method is 34
Complex Method,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,CheckAndStartWrite,Cyclomatic complexity of the method is 10
Long Statement,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,buttonSave_Click,The length of the statement  "            if (MessageBox.Show("是否保存设置的参数？"' "保存参数"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) != DialogResult.OK)" is 147.
Long Statement,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,buttonReset_Click,The length of the statement  "	if (MessageBox.Show ("是否将参数复位到默认值？"' "复位"' MessageBoxButtons.OKCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) != DialogResult.OK) { " is 150.
Complex Conditional,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_KeyPress,The conditional expression  "e.KeyChar == '\b' || e.KeyChar == 22 || e.KeyChar == 3 || e.KeyChar == 24"  is complex.
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,buttonSave_Click,The following statement contains a magic number: Settings.Default.USB_VID = Convert.ToInt32 (textBoxVID.Text.Trim ()' 16);  
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,buttonSave_Click,The following statement contains a magic number: Settings.Default.USB_PID = Convert.ToInt32 (textBoxPID.Text.Trim ()' 16);  
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,buttonSave_Click,The following statement contains a magic number: Settings.Default.USB_MI = Convert.ToInt32 (textBoxMI.Text.Trim ()' 16);  
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,buttonReset_Click,The following statement contains a magic number: Settings.Default.USB_MI = 5;  
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,textBox_TextChanged,The following statement contains a magic number: if (textBoxVID.Text.Length == 4 && textBoxPID.Text.Length == 4 && textBoxMI.Text.Length == 2) {  	buttonSave.Enabled = true;  }  else {  	buttonSave.Enabled = false;  }  
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,textBox_TextChanged,The following statement contains a magic number: if (textBoxVID.Text.Length == 4 && textBoxPID.Text.Length == 4 && textBoxMI.Text.Length == 2) {  	buttonSave.Enabled = true;  }  else {  	buttonSave.Enabled = false;  }  
Magic Number,IMEI_Reader,UsbConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\UsbConfig.cs,textBox_TextChanged,The following statement contains a magic number: if (textBoxVID.Text.Length == 4 && textBoxPID.Text.Length == 4 && textBoxMI.Text.Length == 2) {  	buttonSave.Enabled = true;  }  else {  	buttonSave.Enabled = false;  }  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,initUI,The following statement contains a magic number: switch (inputType) {  case 0:  	radioButton_0.Checked = true;  	break;  case 1:  	radioButton_1.Checked = true;  	break;  case 2:  	radioButton_2.Checked = true;  	break;  default:  	radioButton_0.Checked = true;  	break;  }  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,textBox_KeyPress,The following statement contains a magic number: if (source == CodeType.TYPE_IMEI) {  	maxLength = 14;  }  else if (source == CodeType.TYPE_SN) {  	maxLength = 32;  }  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,textBox_KeyPress,The following statement contains a magic number: if (source == CodeType.TYPE_IMEI) {  	maxLength = 14;  }  else if (source == CodeType.TYPE_SN) {  	maxLength = 32;  }  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,textBox_KeyPress,The following statement contains a magic number: maxLength = 14;  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,textBox_KeyPress,The following statement contains a magic number: if (source == CodeType.TYPE_SN) {  	maxLength = 32;  }  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,textBox_KeyPress,The following statement contains a magic number: maxLength = 32;  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,radioButton_CheckedChanged,The following statement contains a magic number: if (radioButton.Checked) {  	this.inputType = Convert.ToInt32 (radioButton.Tag);  	groupBox1.Visible = inputType == 1;  	groupBox2.Visible = inputType == 2;  	if (inputType == 0) {  		buttonSave.Enabled = true;  	}  	else if (inputType == 1) {  		if (string.IsNullOrEmpty (textBoxMin.Text) || string.IsNullOrEmpty (textBoxMax.Text)) {  			buttonSave.Enabled = false;  		}  	}  }  
Magic Number,IMEI_Reader,WriterConfig,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\WriterConfig.cs,radioButton_CheckedChanged,The following statement contains a magic number: groupBox2.Visible = inputType == 2;  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: for (int i = 0; i < codes.Count; i++) {  	KeyValuePair<int' string> item = codes [i];  	int key = item.Key;  	string code = item.Value;  	string label = getBarcodeLabel (key) + code;  	//字体样式  	int t_x = Settings.Default.T_X;  	//计算打印位置  	int labelIndex = i % labelColumnCount;  	if (labelIndex > 0) {  		t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  	}  	int t_y = Settings.Default.T_Y;  	int t_height = Settings.Default.T_H;  	int t_rotation = Settings.Default.T_R;  	int t_font_style = Settings.Default.T_S;  	int t_under_line = Settings.Default.T_L;  	//条码样式  	string b_y = (t_y + t_height + Settings.Default.Gap1).ToString ();  	string b_height = Settings.Default.B_Height.ToString ();  	string b_readable = Settings.Default.B_Readable.ToString ();  	string b_rotation = Settings.Default.B_Rotation.ToString ();  	string b_narrow = Settings.Default.B_Narrow.ToString ();  	string b_wide = Settings.Default.B_Wide.ToString ();  	//打印字符      	TSCLib.windowsfont (t_x' t_y' t_height' 0' t_font_style' t_under_line' "Times new Roman"' label);  	//打印条码  	TSCLib.barcode (t_x.ToString ()' b_y' "128"' b_height' b_readable' "0"' b_narrow' b_wide' code);  	if (labelIndex + 1 == labelColumnCount || i == codes.Count - 1) {  		TSCLib.printlabel ("1"' "1");  		TSCLib.clearbuffer ();  	}  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: for (int i = 0; i < codes.Count; i++) {  	KeyValuePair<int' string> item = codes [i];  	int key = item.Key;  	string code = item.Value;  	string label = getBarcodeLabel (key) + code;  	//字体样式  	int t_x = Settings.Default.T_X;  	//计算打印位置  	int labelIndex = i % labelColumnCount;  	if (labelIndex > 0) {  		t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  	}  	int t_y = Settings.Default.T_Y;  	int t_height = Settings.Default.T_H;  	int t_rotation = Settings.Default.T_R;  	int t_font_style = Settings.Default.T_S;  	int t_under_line = Settings.Default.T_L;  	//条码样式  	string b_y = (t_y + t_height + Settings.Default.Gap1).ToString ();  	string b_height = Settings.Default.B_Height.ToString ();  	string b_readable = Settings.Default.B_Readable.ToString ();  	string b_rotation = Settings.Default.B_Rotation.ToString ();  	string b_narrow = Settings.Default.B_Narrow.ToString ();  	string b_wide = Settings.Default.B_Wide.ToString ();  	//打印字符      	TSCLib.windowsfont (t_x' t_y' t_height' 0' t_font_style' t_under_line' "Times new Roman"' label);  	//打印条码  	TSCLib.barcode (t_x.ToString ()' b_y' "128"' b_height' b_readable' "0"' b_narrow' b_wide' code);  	if (labelIndex + 1 == labelColumnCount || i == codes.Count - 1) {  		TSCLib.printlabel ("1"' "1");  		TSCLib.clearbuffer ();  	}  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: for (int i = 0; i < codes.Count; i++) {  	KeyValuePair<int' string> item = codes [i];  	int key = item.Key;  	string code = item.Value;  	string label = getBarcodeLabel (key) + code;  	//字体样式  	int t_x = Settings.Default.T_X;  	//计算打印位置  	int labelIndex = i % labelColumnCount;  	if (labelIndex > 0) {  		t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  	}  	int t_y = Settings.Default.T_Y;  	int t_height = Settings.Default.T_H;  	int t_rotation = Settings.Default.T_R;  	int t_font_style = Settings.Default.T_S;  	int t_under_line = Settings.Default.T_L;  	//条码样式  	string b_y = (t_y + t_height + Settings.Default.Gap1).ToString ();  	string b_height = Settings.Default.B_Height.ToString ();  	string b_readable = Settings.Default.B_Readable.ToString ();  	string b_rotation = Settings.Default.B_Rotation.ToString ();  	string b_narrow = Settings.Default.B_Narrow.ToString ();  	string b_wide = Settings.Default.B_Wide.ToString ();  	//打印字符      	TSCLib.windowsfont (t_x' t_y' t_height' 0' t_font_style' t_under_line' "Times new Roman"' label);  	//打印条码  	TSCLib.barcode (t_x.ToString ()' b_y' "128"' b_height' b_readable' "0"' b_narrow' b_wide' code);  	if (labelIndex + 1 == labelColumnCount || i == codes.Count - 1) {  		TSCLib.printlabel ("1"' "1");  		TSCLib.clearbuffer ();  	}  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: for (int i = 0; i < codes.Count; i++) {  	KeyValuePair<int' string> item = codes [i];  	int key = item.Key;  	string code = item.Value;  	string label = getBarcodeLabel (key) + code;  	//字体样式  	int t_x = Settings.Default.T_X;  	//计算打印位置  	int labelIndex = i % labelColumnCount;  	if (labelIndex > 0) {  		t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  	}  	int t_y = Settings.Default.T_Y;  	int t_height = Settings.Default.T_H;  	int t_rotation = Settings.Default.T_R;  	int t_font_style = Settings.Default.T_S;  	int t_under_line = Settings.Default.T_L;  	//条码样式  	string b_y = (t_y + t_height + Settings.Default.Gap1).ToString ();  	string b_height = Settings.Default.B_Height.ToString ();  	string b_readable = Settings.Default.B_Readable.ToString ();  	string b_rotation = Settings.Default.B_Rotation.ToString ();  	string b_narrow = Settings.Default.B_Narrow.ToString ();  	string b_wide = Settings.Default.B_Wide.ToString ();  	//打印字符      	TSCLib.windowsfont (t_x' t_y' t_height' 0' t_font_style' t_under_line' "Times new Roman"' label);  	//打印条码  	TSCLib.barcode (t_x.ToString ()' b_y' "128"' b_height' b_readable' "0"' b_narrow' b_wide' code);  	if (labelIndex + 1 == labelColumnCount || i == codes.Count - 1) {  		TSCLib.printlabel ("1"' "1");  		TSCLib.clearbuffer ();  	}  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: if (labelIndex > 0) {  	t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: if (labelIndex > 0) {  	t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: if (labelIndex > 0) {  	t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: if (labelIndex > 0) {  	t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,print,The following statement contains a magic number: t_x = 30 * 12 * labelIndex + 2 * 12 * labelIndex + t_x;  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,textBoxPrintCount_KeyPress,The following statement contains a magic number: if (!(Char.IsNumber (e.KeyChar)) && e.KeyChar != (char)13 && e.KeyChar != (char)8) {  	e.Handled = true;  }  
Magic Number,IMEI_Reader,Printer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Printer.cs,textBoxPrintCount_KeyPress,The following statement contains a magic number: if (!(Char.IsNumber (e.KeyChar)) && e.KeyChar != (char)13 && e.KeyChar != (char)8) {  	e.Handled = true;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxSN_KeyPress,The following statement contains a magic number: if (e.KeyChar != '\b' && e.KeyChar != 22 && e.KeyChar != 3) {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxSN_KeyPress,The following statement contains a magic number: if (e.KeyChar != '\b' && e.KeyChar != 22 && e.KeyChar != 3) {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_TextChanged,The following statement contains a magic number: if (text.Length > 12) {  	text = text.Substring (0' 12);  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_TextChanged,The following statement contains a magic number: if (text.Length > 12) {  	text = text.Substring (0' 12);  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_TextChanged,The following statement contains a magic number: text = text.Substring (0' 12);  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_KeyPress,The following statement contains a magic number: if (e.KeyChar == '\b' || e.KeyChar == 22 || e.KeyChar == 3 || e.KeyChar == 24) {  	return;  }  else if (textBox.Text.Length >= 12) {  	e.Handled = true;  }  else {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_KeyPress,The following statement contains a magic number: if (e.KeyChar == '\b' || e.KeyChar == 22 || e.KeyChar == 3 || e.KeyChar == 24) {  	return;  }  else if (textBox.Text.Length >= 12) {  	e.Handled = true;  }  else {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_KeyPress,The following statement contains a magic number: if (e.KeyChar == '\b' || e.KeyChar == 22 || e.KeyChar == 3 || e.KeyChar == 24) {  	return;  }  else if (textBox.Text.Length >= 12) {  	e.Handled = true;  }  else {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_KeyPress,The following statement contains a magic number: if (e.KeyChar == '\b' || e.KeyChar == 22 || e.KeyChar == 3 || e.KeyChar == 24) {  	return;  }  else if (textBox.Text.Length >= 12) {  	e.Handled = true;  }  else {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
Magic Number,IMEI_Reader,Writer,C:\repos\linshixiong_EmdoorBarcodeTools\IMEI_Reader\Writer.cs,textBoxWifi_KeyPress,The following statement contains a magic number: if (textBox.Text.Length >= 12) {  	e.Handled = true;  }  else {  	e.Handled = "0123456789ABCDEF".IndexOf (char.ToUpper (e.KeyChar)) < 0;  }  
