Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,StartExcuteReadCmd,Cyclomatic complexity of the method is 32
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,StartExcuteWriteCmd,Cyclomatic complexity of the method is 24
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIReadCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIWriteCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressReadCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressWriteCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressReadCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressWriteCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNReadCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNWriteCmd,Cyclomatic complexity of the method is 8
Complex Method,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,Cyclomatic complexity of the method is 10
Long Parameter List,Common,TSCLib,C:\repos\linshixiong_EmdoorBarcodeTools\Common\TSCLib.cs,barcode,The method has 9 parameters.
Long Parameter List,Common,TSCLib,C:\repos\linshixiong_EmdoorBarcodeTools\Common\TSCLib.cs,printerfont,The method has 7 parameters.
Long Parameter List,Common,TSCLib,C:\repos\linshixiong_EmdoorBarcodeTools\Common\TSCLib.cs,setup,The method has 7 parameters.
Long Parameter List,Common,TSCLib,C:\repos\linshixiong_EmdoorBarcodeTools\Common\TSCLib.cs,windowsfont,The method has 8 parameters.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIReadCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh read-mrd-imei"' receiver); " is 133.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIWriteCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-imei " + imei' receiver); " is 143.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressReadCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  wifi-get-mac"' receiver); " is 133.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressWriteCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh wifi-set-mac " + mac' receiver); " is 139.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressReadCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  bt-get-mac"' receiver); " is 131.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressWriteCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh bt-set-mac " + mac' receiver); " is 137.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNReadCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh   read-mrd-sn"' receiver); " is 133.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNWriteCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-sn " + sn' receiver); " is 139.
Long Statement,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSWVersionReadCmd,The length of the statement  "			AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("getprop ro.build.display.id"' receiver); " is 131.
Long Statement,Common,WMIUsbQuery,C:\repos\linshixiong_EmdoorBarcodeTools\Common\WMIUsbQuery.cs,AddUSBEventWatcher,The length of the statement  "			WqlEventQuery InsertQuery = new WqlEventQuery ("__InstanceCreationEvent"' withinInterval' "TargetInstance isa 'Win32_USBControllerDevice'"); " is 140.
Long Statement,Common,WMIUsbQuery,C:\repos\linshixiong_EmdoorBarcodeTools\Common\WMIUsbQuery.cs,AddUSBEventWatcher,The length of the statement  "			WqlEventQuery RemoveQuery = new WqlEventQuery ("__InstanceDeletionEvent"' withinInterval' "TargetInstance isa 'Win32_USBControllerDevice'"); " is 140.
Long Statement,Common,WMIUsbQuery,C:\repos\linshixiong_EmdoorBarcodeTools\Common\WMIUsbQuery.cs,GetDeviceCount,The length of the statement  "	string VIDPID = "'%VID[_]" + DeviceDetector.vid.ToString ("X4") + "&PID[_]" + DeviceDetector.pid.ToString ("X4") + "&MI[_]" + DeviceDetector.mi.ToString ("D2") + "%'"; " is 167.
Long Statement,Common,WMIUsbQuery,C:\repos\linshixiong_EmdoorBarcodeTools\Common\WMIUsbQuery.cs,GetDeviceCount,The length of the statement  "	ManagementObjectCollection PnPEntityCollection = new ManagementObjectSearcher ("SELECT * FROM Win32_PnPEntity WHERE DeviceID LIKE " + VIDPID).Get (); " is 149.
Long Statement,Common,DeviceDetector,C:\repos\linshixiong_EmdoorBarcodeTools\Common\DeviceDetector.cs,USBEventHandler,The length of the statement  "	if (e.NewEvent.ClassPath.ClassName == "__InstanceCreationEvent" || e.NewEvent.ClassPath.ClassName == "__InstanceDeletionEvent") { " is 129.
Empty Catch Block,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,CleanUpAdbProcess,The method has an empty catch block.
Empty Catch Block,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The method has an empty catch block.
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh read-mrd-imei"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh read-mrd-imei"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIReadCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh read-mrd-imei"' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIReadCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-imei " + imei' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-imei " + imei' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIWriteCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-imei " + imei' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteIMEIWriteCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  wifi-get-mac"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  wifi-get-mac"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressReadCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  wifi-get-mac"' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressReadCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh wifi-set-mac " + mac' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh wifi-set-mac " + mac' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressWriteCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh wifi-set-mac " + mac' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteWifiAddressWriteCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  bt-get-mac"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  bt-get-mac"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressReadCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh  bt-get-mac"' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressReadCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh bt-set-mac " + mac' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh bt-set-mac " + mac' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressWriteCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh bt-set-mac " + mac' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteBtAddressWriteCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh   read-mrd-sn"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh   read-mrd-sn"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNReadCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh   read-mrd-sn"' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNReadCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-sn " + sn' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNWriteCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return false;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-sn " + sn' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNWriteCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("tcmd-subcase.sh update-mrd-sn " + sn' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSNWriteCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSWVersionReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("getprop ro.build.display.id"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSWVersionReadCmd,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		error = null;  		return null;  	}  	success = true;  	try {  		AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("getprop ro.build.display.id"' receiver);  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSWVersionReadCmd,The following statement contains a magic number: try {  	AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress) [0].ExecuteShellCommand ("getprop ro.build.display.id"' receiver);  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,ExcuteSWVersionReadCmd,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,GetDeviceCount,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		return 0;  	}  	success = true;  	try {  		count = AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress).Count;  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,GetDeviceCount,The following statement contains a magic number: for (int i = 0; i <= 10; i++) {  	if (isCanceled) {  		return 0;  	}  	success = true;  	try {  		count = AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress).Count;  	}  	catch (Exception) {  		success = false;  		Thread.Sleep (1000);  	}  	if (success) {  		break;  	}  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,GetDeviceCount,The following statement contains a magic number: try {  	count = AdbHelper.Instance.GetDevices (AndroidDebugBridge.SocketAddress).Count;  }  catch (Exception) {  	success = false;  	Thread.Sleep (1000);  }  
Magic Number,Common,AdbOperator,C:\repos\linshixiong_EmdoorBarcodeTools\Common\AdbOperator.cs,GetDeviceCount,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,Common,DeviceDetector,C:\repos\linshixiong_EmdoorBarcodeTools\Common\DeviceDetector.cs,DeviceDetector,The following statement contains a magic number: usbQuery.AddUSBEventWatcher (USBEventHandler' USBEventHandler' new TimeSpan (0' 0' 3));  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetResult,The following statement contains a magic number: if (str != null && str.Contains ("[") && str.Contains ("]")) {  	string[] result = new string[2];  	string value = str.Substring (1' str.IndexOf ("]") - 1);  	string msg = str.Substring (str.IndexOf ("]") + 1);  	result [0] = value;  	result [1] = msg;  	return result;  }  else {  	return null;  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (containSeparator) {  	string[] temp = source.Split (':');  	if (temp != null) {  		StringBuilder sb = new StringBuilder ();  		foreach (string s in temp) {  			if (s.Length == 2) {  				byte b = Convert.ToByte (s' 16);  				char c = (char)b;  				if (c != '\0') {  					sb.Append (c);  				}  			}  		}  		return sb.ToString ();  	}  }  else {  	StringBuilder sb = new StringBuilder ();  	byte[] data = new byte[source.Length % 2];  	try {  		for (int index = 0; index < source.Length; index += 2) {  			String s = source.Substring (index' 2);  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	catch (Exception ex) {  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (containSeparator) {  	string[] temp = source.Split (':');  	if (temp != null) {  		StringBuilder sb = new StringBuilder ();  		foreach (string s in temp) {  			if (s.Length == 2) {  				byte b = Convert.ToByte (s' 16);  				char c = (char)b;  				if (c != '\0') {  					sb.Append (c);  				}  			}  		}  		return sb.ToString ();  	}  }  else {  	StringBuilder sb = new StringBuilder ();  	byte[] data = new byte[source.Length % 2];  	try {  		for (int index = 0; index < source.Length; index += 2) {  			String s = source.Substring (index' 2);  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	catch (Exception ex) {  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (containSeparator) {  	string[] temp = source.Split (':');  	if (temp != null) {  		StringBuilder sb = new StringBuilder ();  		foreach (string s in temp) {  			if (s.Length == 2) {  				byte b = Convert.ToByte (s' 16);  				char c = (char)b;  				if (c != '\0') {  					sb.Append (c);  				}  			}  		}  		return sb.ToString ();  	}  }  else {  	StringBuilder sb = new StringBuilder ();  	byte[] data = new byte[source.Length % 2];  	try {  		for (int index = 0; index < source.Length; index += 2) {  			String s = source.Substring (index' 2);  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	catch (Exception ex) {  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (containSeparator) {  	string[] temp = source.Split (':');  	if (temp != null) {  		StringBuilder sb = new StringBuilder ();  		foreach (string s in temp) {  			if (s.Length == 2) {  				byte b = Convert.ToByte (s' 16);  				char c = (char)b;  				if (c != '\0') {  					sb.Append (c);  				}  			}  		}  		return sb.ToString ();  	}  }  else {  	StringBuilder sb = new StringBuilder ();  	byte[] data = new byte[source.Length % 2];  	try {  		for (int index = 0; index < source.Length; index += 2) {  			String s = source.Substring (index' 2);  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	catch (Exception ex) {  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (containSeparator) {  	string[] temp = source.Split (':');  	if (temp != null) {  		StringBuilder sb = new StringBuilder ();  		foreach (string s in temp) {  			if (s.Length == 2) {  				byte b = Convert.ToByte (s' 16);  				char c = (char)b;  				if (c != '\0') {  					sb.Append (c);  				}  			}  		}  		return sb.ToString ();  	}  }  else {  	StringBuilder sb = new StringBuilder ();  	byte[] data = new byte[source.Length % 2];  	try {  		for (int index = 0; index < source.Length; index += 2) {  			String s = source.Substring (index' 2);  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	catch (Exception ex) {  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (containSeparator) {  	string[] temp = source.Split (':');  	if (temp != null) {  		StringBuilder sb = new StringBuilder ();  		foreach (string s in temp) {  			if (s.Length == 2) {  				byte b = Convert.ToByte (s' 16);  				char c = (char)b;  				if (c != '\0') {  					sb.Append (c);  				}  			}  		}  		return sb.ToString ();  	}  }  else {  	StringBuilder sb = new StringBuilder ();  	byte[] data = new byte[source.Length % 2];  	try {  		for (int index = 0; index < source.Length; index += 2) {  			String s = source.Substring (index' 2);  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	catch (Exception ex) {  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (temp != null) {  	StringBuilder sb = new StringBuilder ();  	foreach (string s in temp) {  		if (s.Length == 2) {  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (temp != null) {  	StringBuilder sb = new StringBuilder ();  	foreach (string s in temp) {  		if (s.Length == 2) {  			byte b = Convert.ToByte (s' 16);  			char c = (char)b;  			if (c != '\0') {  				sb.Append (c);  			}  		}  	}  	return sb.ToString ();  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: foreach (string s in temp) {  	if (s.Length == 2) {  		byte b = Convert.ToByte (s' 16);  		char c = (char)b;  		if (c != '\0') {  			sb.Append (c);  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: foreach (string s in temp) {  	if (s.Length == 2) {  		byte b = Convert.ToByte (s' 16);  		char c = (char)b;  		if (c != '\0') {  			sb.Append (c);  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (s.Length == 2) {  	byte b = Convert.ToByte (s' 16);  	char c = (char)b;  	if (c != '\0') {  		sb.Append (c);  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: if (s.Length == 2) {  	byte b = Convert.ToByte (s' 16);  	char c = (char)b;  	if (c != '\0') {  		sb.Append (c);  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: try {  	for (int index = 0; index < source.Length; index += 2) {  		String s = source.Substring (index' 2);  		byte b = Convert.ToByte (s' 16);  		char c = (char)b;  		if (c != '\0') {  			sb.Append (c);  		}  	}  }  catch (Exception ex) {  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: try {  	for (int index = 0; index < source.Length; index += 2) {  		String s = source.Substring (index' 2);  		byte b = Convert.ToByte (s' 16);  		char c = (char)b;  		if (c != '\0') {  			sb.Append (c);  		}  	}  }  catch (Exception ex) {  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: try {  	for (int index = 0; index < source.Length; index += 2) {  		String s = source.Substring (index' 2);  		byte b = Convert.ToByte (s' 16);  		char c = (char)b;  		if (c != '\0') {  			sb.Append (c);  		}  	}  }  catch (Exception ex) {  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: for (int index = 0; index < source.Length; index += 2) {  	String s = source.Substring (index' 2);  	byte b = Convert.ToByte (s' 16);  	char c = (char)b;  	if (c != '\0') {  		sb.Append (c);  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: for (int index = 0; index < source.Length; index += 2) {  	String s = source.Substring (index' 2);  	byte b = Convert.ToByte (s' 16);  	char c = (char)b;  	if (c != '\0') {  		sb.Append (c);  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: for (int index = 0; index < source.Length; index += 2) {  	String s = source.Substring (index' 2);  	byte b = Convert.ToByte (s' 16);  	char c = (char)b;  	if (c != '\0') {  		sb.Append (c);  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,ConvertASCIIToString,The following statement contains a magic number: index += 2
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,EncryptDES,The following statement contains a magic number: try {  	byte[] rgbKey = Encoding.UTF8.GetBytes (encryptKey.Substring (0' 8));  	byte[] rgbIV = Keys;  	byte[] inputByteArray = Encoding.UTF8.GetBytes (encryptString);  	DESCryptoServiceProvider dCSP = new DESCryptoServiceProvider ();  	MemoryStream mStream = new MemoryStream ();  	CryptoStream cStream = new CryptoStream (mStream' dCSP.CreateEncryptor (rgbKey' rgbIV)' CryptoStreamMode.Write);  	cStream.Write (inputByteArray' 0' inputByteArray.Length);  	cStream.FlushFinalBlock ();  	return Convert.ToBase64String (mStream.ToArray ());  }  catch {  	return encryptString;  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetStringFromMixData,The following statement contains a magic number: for (int index = 0; index < buff.Length; index++) {  	byte b = buff [index];  	buff [index] = b -= 128;  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetStringFromMixData,The following statement contains a magic number: buff [index] = b -= 128;  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetDataAfterMix,The following statement contains a magic number: for (int index = 0; index < buff.Length; index++) {  	byte b = buff [index];  	buff [index] = b += 128;  	char c = (char)buff [index];  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetDataAfterMix,The following statement contains a magic number: buff [index] = b += 128;  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: for (i = 0; i < 14; i++) {  	if ((i % 2) == 0) {  		sum1 = sum1 + imei [i] - '0';  	}  	else {  		temp = (imei [i] - '0') * 2;  		if (temp < 10) {  			sum2 = sum2 + temp;  		}  		else {  			sum2 = sum2 + 1 + temp - 10;  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: for (i = 0; i < 14; i++) {  	if ((i % 2) == 0) {  		sum1 = sum1 + imei [i] - '0';  	}  	else {  		temp = (imei [i] - '0') * 2;  		if (temp < 10) {  			sum2 = sum2 + temp;  		}  		else {  			sum2 = sum2 + 1 + temp - 10;  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: for (i = 0; i < 14; i++) {  	if ((i % 2) == 0) {  		sum1 = sum1 + imei [i] - '0';  	}  	else {  		temp = (imei [i] - '0') * 2;  		if (temp < 10) {  			sum2 = sum2 + temp;  		}  		else {  			sum2 = sum2 + 1 + temp - 10;  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: for (i = 0; i < 14; i++) {  	if ((i % 2) == 0) {  		sum1 = sum1 + imei [i] - '0';  	}  	else {  		temp = (imei [i] - '0') * 2;  		if (temp < 10) {  			sum2 = sum2 + temp;  		}  		else {  			sum2 = sum2 + 1 + temp - 10;  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: for (i = 0; i < 14; i++) {  	if ((i % 2) == 0) {  		sum1 = sum1 + imei [i] - '0';  	}  	else {  		temp = (imei [i] - '0') * 2;  		if (temp < 10) {  			sum2 = sum2 + temp;  		}  		else {  			sum2 = sum2 + 1 + temp - 10;  		}  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((i % 2) == 0) {  	sum1 = sum1 + imei [i] - '0';  }  else {  	temp = (imei [i] - '0') * 2;  	if (temp < 10) {  		sum2 = sum2 + temp;  	}  	else {  		sum2 = sum2 + 1 + temp - 10;  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((i % 2) == 0) {  	sum1 = sum1 + imei [i] - '0';  }  else {  	temp = (imei [i] - '0') * 2;  	if (temp < 10) {  		sum2 = sum2 + temp;  	}  	else {  		sum2 = sum2 + 1 + temp - 10;  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((i % 2) == 0) {  	sum1 = sum1 + imei [i] - '0';  }  else {  	temp = (imei [i] - '0') * 2;  	if (temp < 10) {  		sum2 = sum2 + temp;  	}  	else {  		sum2 = sum2 + 1 + temp - 10;  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((i % 2) == 0) {  	sum1 = sum1 + imei [i] - '0';  }  else {  	temp = (imei [i] - '0') * 2;  	if (temp < 10) {  		sum2 = sum2 + temp;  	}  	else {  		sum2 = sum2 + 1 + temp - 10;  	}  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: temp = (imei [i] - '0') * 2;  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if (temp < 10) {  	sum2 = sum2 + temp;  }  else {  	sum2 = sum2 + 1 + temp - 10;  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if (temp < 10) {  	sum2 = sum2 + temp;  }  else {  	sum2 = sum2 + 1 + temp - 10;  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: sum2 = sum2 + 1 + temp - 10;  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((total % 10) == 0) {  	return '0';  }  else {  	return (char)(((total / 10) * 10) + 10 - total + '0');  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((total % 10) == 0) {  	return '0';  }  else {  	return (char)(((total / 10) * 10) + 10 - total + '0');  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((total % 10) == 0) {  	return '0';  }  else {  	return (char)(((total / 10) * 10) + 10 - total + '0');  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: if ((total % 10) == 0) {  	return '0';  }  else {  	return (char)(((total / 10) * 10) + 10 - total + '0');  }  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: return (char)(((total / 10) * 10) + 10 - total + '0');  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: return (char)(((total / 10) * 10) + 10 - total + '0');  
Magic Number,Common,Util,C:\repos\linshixiong_EmdoorBarcodeTools\Common\Util.cs,GetIMEICheckDigit,The following statement contains a magic number: return (char)(((total / 10) * 10) + 10 - total + '0');  
