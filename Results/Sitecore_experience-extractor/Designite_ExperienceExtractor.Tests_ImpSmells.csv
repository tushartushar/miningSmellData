Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ExperienceExtractor.Tests.Support,TestSets,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\TestSets.cs,Countries,The method has 5 parameters. Parameters: count' countries' start' offset' regionsPerCountry
Long Parameter List,ExperienceExtractor.Tests.Support,TestSets,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\TestSets.cs,Pages,The method has 5 parameters. Parameters: data' start' duration' count' events
Long Statement,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The length of the statement  "            Assert.AreEqual(2' partitions' string.Format("{0:N0} rows should create 2 file partitions and one in memory"' visitCount * rowsPerVisit)); " is 138.
Long Statement,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The length of the statement  "            Assert.AreEqual(expectedFilePartitions * eventRowsPerVisit * visitPerBatch' batchWriter.Tables.FirstOrDefault(t => t.Schema.Name == "Events").Rows.Count()' " is 155.
Long Statement,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The length of the statement  "                string.Format("{0:N0} rows in event tables in file partitions"' expectedFilePartitions * eventRowsPerVisit * visitPerBatch)); " is 125.
Long Statement,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestTableDataBuilderFieldOrder,The length of the statement  "                builder.Schema.Fields.SequenceEqual(new[] { fields[0]' fields[4]' fields[2]' fields[3]' fields[6]' fields[1]' fields[5] })); " is 124.
Long Statement,ExperienceExtractor.Tests.Support,TestSets,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\TestSets.cs,Countries,The length of the statement  "                        new[] { new PageEventData { PageEventDefinitionId = p.VisitPageIndex.ToGuid()' Value = p.VisitPageIndex * p.VisitPageIndex } }); " is 128.
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: var splitter = new PageConditionSplitter((scope' page) => page.VisitPageIndex == 2);
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new SplittingFieldMapper(splitter' (name) =>                      new[]{                          new SimpleFieldMapper("Value" + name'                              s =>                                  s.Current<IVisitAggregationContext>()                                      .Visit.Value' typeof(int)' FieldType.Fact)                      })))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new SplittingFieldMapper(splitter' (name) =>                      new[]{                          new SimpleFieldMapper("Value" + name'                              s =>                                  s.Current<IVisitAggregationContext>()                                      .Visit.Value' typeof(int)' FieldType.Fact)                      })))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: Assert.AreEqual(1000' table.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: Assert.AreEqual(5000' table.Fields<int>("ValueBefore").Sum());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: Assert.AreEqual(9000' table.Fields<int>("ValueAfter").Sum());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,Splitter,The following statement contains a magic number: Assert.AreEqual(14000' table.Fields<int>("ValueTotal").Sum());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldHashLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldHashLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldHashLookup,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldHashLookup,The following statement contains a magic number: Assert.AreEqual(9' countries.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldHashLookup,The following statement contains a magic number: Assert.AreEqual(9' visits.Fields<long>("CountryId").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldHashLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldHashLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldHashLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldHashLookup,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldHashLookup,The following statement contains a magic number: Assert.AreEqual(27' countries.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldHashLookup,The following statement contains a magic number: Assert.AreEqual(27' visits.Fields<long>("CountryId").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldInlineLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' true' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldInlineLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' true' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldInlineLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' true' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Dimension)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldInlineLookup,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldInlineLookup,The following statement contains a magic number: Assert.AreEqual(9' visits.Fields<string>("Country").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldInlineLookup,The following statement contains a magic number: Assert.AreEqual(27' visits.Fields<string>("Region").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Key)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Key)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Key)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Key)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9' regionsPerCountry: 3).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Key)'                          new SimpleFieldMapper("Region"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Region' typeof (string)'                              FieldType.Key)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(27' countries.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(9' visits.Fields<string>("Country").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TwoFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(27' visits.Fields<string>("Region").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldKeyLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Key)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldKeyLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Key)'                      }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(9' countries.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,OneFieldKeyLookup,The following statement contains a magic number: Assert.AreEqual(9' visits.Fields<string>("Country").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new IFieldMapper[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new FieldMapperSet("Country2"' false' new []                          {                                                          new SimpleFieldMapper("Country"'                                  scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                                  FieldType.Dimension)'                                  new SimpleFieldMapper("Count"' s=>1' typeof(int)' FieldType.Fact)'                                           })'                                                 }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: var tables = TestSets.Countries(1000' 9).Process(() =>                  new TableDefinition("Test")                      .Dimension("VisitId"' scope => scope.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Map(new FieldMapperSet("Country"' false' new IFieldMapper[]                      {                          new SimpleFieldMapper("Country"'                              scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                              FieldType.Dimension)'                          new FieldMapperSet("Country2"' false' new []                          {                                                          new SimpleFieldMapper("Country"'                                  scope => scope.Current<IVisitAggregationContext>().Visit.GeoData.Country' typeof (string)'                                  FieldType.Dimension)'                                  new SimpleFieldMapper("Count"' s=>1' typeof(int)' FieldType.Fact)'                                           })'                                                 }))                  );
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: Assert.AreEqual(9' countries.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: Assert.AreEqual(9' countries2.Rows.Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: Assert.AreEqual(9' visits.Fields<long>("CountryId").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: Assert.AreEqual(9' countries.Fields<long>("Country2Id").Distinct().Count());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,LookupInLookup,The following statement contains a magic number: Assert.AreEqual(1000' countries2.Fields<int>("Count").Sum());
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: var cache = new LruCache<object' object>(5);
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(2' cache.GetOrAdd(2' _ => 2));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(2' cache.GetOrAdd(2' _ => 2));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(2' cache.GetOrAdd(2' _ => 2));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(3' cache.GetOrAdd(3' _ => 3));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(3' cache.GetOrAdd(3' _ => 3));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(3' cache.GetOrAdd(3' _ => 3));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(4' cache.GetOrAdd(4' _ => 4));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(4' cache.GetOrAdd(4' _ => 4));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(4' cache.GetOrAdd(4' _ => 4));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(5' cache.GetOrAdd(5' _ => 5));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(5' cache.GetOrAdd(5' _ => 5));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(5' cache.GetOrAdd(5' _ => 5));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(6' cache.GetOrAdd(6' _ => 6));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(6' cache.GetOrAdd(6' _ => 6));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(6' cache.GetOrAdd(6' _ => 6));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 2' 3' 4' 5' 6 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 2' 3' 4' 5' 6 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 2' 3' 4' 5' 6 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 2' 3' 4' 5' 6 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 2' 3' 4' 5' 6 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 4' 5' 6' 1 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(false' CacheLoaded(cache' 4' 4));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(false' CacheLoaded(cache' 4' 4));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 5' 6' 1' 4 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 5' 6' 1' 4 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 5' 6' 1' 4 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 3' 5' 6' 1' 4 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(true' CacheLoaded(cache' 2' 2));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.AreEqual(true' CacheLoaded(cache' 2' 2));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 5' 6' 1' 4' 2 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 5' 6' 1' 4' 2 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 5' 6' 1' 4' 2 }));
Magic Number,ExperienceExtractor.Tests,FieldMappers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\FieldMappers.cs,TestLruCache,The following statement contains a magic number: Assert.IsTrue(cache.Keys.SequenceEqual(new object[] { 5' 6' 1' 4' 2 }));
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,SimpleIndexIncrement,The following statement contains a magic number: Assert.AreEqual(2' scope.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.Index<Level2>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.Index<Level3>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.ChildIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope2.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope2.Index<Level2>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope2.ChildIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope1.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(3' scope2.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(3' scope1.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(4' scope2.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope2.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(5' scope2.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(3' scope3.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(3' scope2.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(6' scope2.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(4' scope3.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(3' scope3.Index<Level1>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(2' scope3.Index<Level2>());
Magic Number,ExperienceExtractor.Tests,ProcessingScopeTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingScopeTests.cs,TestNesting,The following statement contains a magic number: Assert.AreEqual(5' scope3.GlobalIndex);
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,RowPerVisitKey,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,RowPerVisitKey,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,RowPerVisitKey,The following statement contains a magic number: Assert.AreEqual(1000' table.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,RowPerVisitHashKey,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Dimension("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,RowPerVisitHashKey,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Dimension("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,RowPerVisitHashKey,The following statement contains a magic number: Assert.AreEqual(1000' table.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,FactAggregation,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,FactAggregation,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value))).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,FactAggregation,The following statement contains a magic number: Assert.AreEqual(1000' table.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,FactAggregation,The following statement contains a magic number: Assert.AreEqual(14000' table.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,Count,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Count())).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,Count,The following statement contains a magic number: var table = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Count())).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,Count,The following statement contains a magic number: Assert.AreEqual(1000' table.Field<int>("Count"' table.Rows.First()));
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,CountSum,The following statement contains a magic number: var table = TestSets.Countries(1000' 5).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("Country"' s => s.Current<IVisitAggregationContext>().Visit.GeoData.Country)                      .Count())).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,CountSum,The following statement contains a magic number: var table = TestSets.Countries(1000' 5).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("Country"' s => s.Current<IVisitAggregationContext>().Visit.GeoData.Country)                      .Count())).FirstOrDefault();
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,CountSum,The following statement contains a magic number: Assert.AreEqual(5' rows.Count);
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,CountSum,The following statement contains a magic number: Assert.AreEqual(1000' table.Fields<int>("Count").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,ChildTable,The following statement contains a magic number: var tables = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value)                      .Map(s => s.Current<IVisitAggregationContext>().Visit.Pages'                          new TableDefinition("Pages")                              .Key("Id"' s => s.Current<PageData>().Item.Id))));
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,ChildTable,The following statement contains a magic number: var tables = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value)                      .Map(s => s.Current<IVisitAggregationContext>().Visit.Pages'                          new TableDefinition("Pages")                              .Key("Id"' s => s.Current<PageData>().Item.Id))));
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,ChildTable,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,ChildTable,The following statement contains a magic number: Assert.AreEqual(14000' visits.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,ChildTable,The following statement contains a magic number: Assert.AreEqual(3000' pages.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: var tables = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value)                      .Map(s => s.Current<IVisitAggregationContext>().Visit.Pages'                          new TableDefinition("Pages")                              .Key("Id"' s => s.Current<PageData>().Item.Id)                              .Fact("Value"' s => s.Current<PageData>().PageEvents.Sum(pe => pe.Value))                              .Map(s => s.Current<PageData>().PageEvents'                              new TableDefinition("Events")                                  .Dimension("Event"' s => s.Current<PageEventData>().PageEventDefinitionId)                                  .Fact("Value"' s => s.Current<PageEventData>().Value)))                      .Map(s => new[] { s.Current<IVisitAggregationContext>().Visit.Pages.First() }'                          new TableDefinition("Pages2")                              .Key("Id"' s => s.Current<PageData>().Item.Id))));
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: var tables = TestSets.Countries(1000' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value)                      .Map(s => s.Current<IVisitAggregationContext>().Visit.Pages'                          new TableDefinition("Pages")                              .Key("Id"' s => s.Current<PageData>().Item.Id)                              .Fact("Value"' s => s.Current<PageData>().PageEvents.Sum(pe => pe.Value))                              .Map(s => s.Current<PageData>().PageEvents'                              new TableDefinition("Events")                                  .Dimension("Event"' s => s.Current<PageEventData>().PageEventDefinitionId)                                  .Fact("Value"' s => s.Current<PageEventData>().Value)))                      .Map(s => new[] { s.Current<IVisitAggregationContext>().Visit.Pages.First() }'                          new TableDefinition("Pages2")                              .Key("Id"' s => s.Current<PageData>().Item.Id))));
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(14000' visits.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(14000' pages.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(14000' events.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(3000' pages.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(3000' events.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTables,The following statement contains a magic number: Assert.AreEqual(1000' pages2.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: var visitCount = 1000;
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: var rowsPerVisit = 8;
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: var visitPerBatch = (int)Math.Ceiling(visitCount / 3d);
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: var eventRowsPerVisit = 3;
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: var expectedFilePartitions = 2;
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: var tables = TestSets.Countries(visitCount' 37).Process(                  () => new SimpleTableMapper(new TableDefinition("Test")                      .Key("VisitId"' s => s.Current<IVisitAggregationContext>().Visit.InteractionId)                      .Fact("Value"' s => s.Current<IVisitAggregationContext>().Visit.Value)                      .Map(s => s.Current<IVisitAggregationContext>().Visit.Pages'                          new TableDefinition("Pages")                              .Key("PageId"' s => s.Current<PageData>().Item.Id)                              .Fact("Value"' s => s.Current<PageData>().PageEvents.Sum(pe => pe.Value))                              .Map(s => s.Current<PageData>().PageEvents'                                  new TableDefinition("Events")                                      .Dimension("Event"' s => s.Current<PageEventData>().PageEventDefinitionId)                                      .Fact("Value"' s => s.Current<PageEventData>().Value)))                      .Map(s => new[] { s.Current<IVisitAggregationContext>().Visit.Pages.First() }'                          new TableDefinition("Pages2")                              .Key("Id"' s => s.Current<PageData>().Item.Id)))'                  initializer: p =>                  {                      p.BatchWriter = batchWriter;                      p.BatchSize = rowsPerFilePartition;                  });
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(2' partitions' string.Format("{0:N0} rows should create 2 file partitions and one in memory"' visitCount * rowsPerVisit));
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(1000' visits.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(14000' visits.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(14000' pages.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(14000' events.Fields<int>("Value").Sum());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(3000' pages.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(3000' events.Rows.Count());
Magic Number,ExperienceExtractor.Tests,ProcessingTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\ProcessingTests.cs,NestedChildTablesWithBatchingInCsv,The following statement contains a magic number: Assert.AreEqual(1000' pages2.Rows.Count());
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestSingle,The following statement contains a magic number: var row3 = new object[] { 3 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row1 = new object[] { "A"' 1' null' 37 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row2 = new object[] { "A"' 1' null' 11 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row3 = new object[] { "B"' 1' null' 3 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row4 = new object[] { "B"' 1' new DateTime(2000' 1' 1)' 9 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row4 = new object[] { "B"' 1' new DateTime(2000' 1' 1)' 9 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row5 = new object[] { "B"' 1' new DateTime(2000' 1' 1)' 11 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row5 = new object[] { "B"' 1' new DateTime(2000' 1' 1)' 11 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row6 = new object[] { "B"' 1' new DateTime(2000' 1' 2)' 3 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row6 = new object[] { "B"' 1' new DateTime(2000' 1' 2)' 3 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row6 = new object[] { "B"' 1' new DateTime(2000' 1' 2)' 3 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row7 = new object[] { "B"' 2' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row7 = new object[] { "B"' 2' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row7 = new object[] { "B"' 2' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row7 = new object[] { "B"' 2' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row8 = new object[] { "C"' 19' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row8 = new object[] { "C"' 19' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row8 = new object[] { "C"' 19' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestMulti,The following statement contains a magic number: var row8 = new object[] { "C"' 19' new DateTime(2000' 1' 2)' 2 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestDimensionKey,The following statement contains a magic number: var row2 = new object[] { 1' 1' 4 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestDimensionKey,The following statement contains a magic number: var row3 = new object[] { 1' 2' 1 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestUseKeyWhenPresent,The following statement contains a magic number: var row2 = new object[] { 1' 2' 4 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestUseKeyWhenPresent,The following statement contains a magic number: var row2 = new object[] { 1' 2' 4 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestUseKeyWhenPresent,The following statement contains a magic number: var row3 = new object[] { 2' 3' 1 };
Magic Number,ExperienceExtractor.Tests,RowComparerTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\RowComparerTests.cs,TestUseKeyWhenPresent,The following statement contains a magic number: var row3 = new object[] { 2' 3' 1 };
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Keys.Select(k => k.Index).SequenceEqual(new[] { 0' 4 }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Keys.Select(k => k.Value).SequenceEqual(new[] { fields[0]' fields[4] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Dimensions.Select(k => k.Index).SequenceEqual(new[] { 2' 6 }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Dimensions.Select(k => k.Index).SequenceEqual(new[] { 2' 6 }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Dimensions.Select(k => k.Value).SequenceEqual(new[] { fields[2]' fields[6] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Dimensions.Select(k => k.Value).SequenceEqual(new[] { fields[2]' fields[6] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Labels.Select(k => k.Index).SequenceEqual(new[] { 3 }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Labels.Select(k => k.Value).SequenceEqual(new[] { fields[3] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Facts.Select(k => k.Index).SequenceEqual(new[] { 1' 5 }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestSchemaFieldCache,The following statement contains a magic number: Assert.IsTrue(schema.Facts.Select(k => k.Value).SequenceEqual(new[] { fields[1]' fields[5] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestTableDataBuilderFieldOrder,The following statement contains a magic number: Assert.IsTrue(                  builder.Schema.Fields.SequenceEqual(new[] { fields[0]' fields[4]' fields[2]' fields[3]' fields[6]' fields[1]' fields[5] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestTableDataBuilderFieldOrder,The following statement contains a magic number: Assert.IsTrue(                  builder.Schema.Fields.SequenceEqual(new[] { fields[0]' fields[4]' fields[2]' fields[3]' fields[6]' fields[1]' fields[5] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestTableDataBuilderFieldOrder,The following statement contains a magic number: Assert.IsTrue(                  builder.Schema.Fields.SequenceEqual(new[] { fields[0]' fields[4]' fields[2]' fields[3]' fields[6]' fields[1]' fields[5] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestTableDataBuilderFieldOrder,The following statement contains a magic number: Assert.IsTrue(                  builder.Schema.Fields.SequenceEqual(new[] { fields[0]' fields[4]' fields[2]' fields[3]' fields[6]' fields[1]' fields[5] }));
Magic Number,ExperienceExtractor.Tests,SchemaTests,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\SchemaTests.cs,TestTableDataBuilderFieldOrder,The following statement contains a magic number: Assert.IsTrue(                  builder.Schema.Fields.SequenceEqual(new[] { fields[0]' fields[4]' fields[2]' fields[3]' fields[6]' fields[1]' fields[5] }));
Magic Number,ExperienceExtractor.Tests.Support,Helpers,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\Helpers.cs,ToGuid,The following statement contains a magic number: var bytes = new byte[16];
Magic Number,ExperienceExtractor.Tests.Support,TestSets,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\TestSets.cs,Countries,The following statement contains a magic number: start = start ?? new DateTime(2000' 1' 1);
Magic Number,ExperienceExtractor.Tests.Support,TestSets,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\TestSets.cs,Countries,The following statement contains a magic number: return Enumerable.Range(1' count).Select(i =>              {                  var countryName = "C" + ((i / regionsPerCountry) % countries);                  var regionName = countryName + "_R" + i % regionsPerCountry;                  var vd = baseData.Clone().SetGeoData(countryName' regionName)                      .Pages(date' TimeSpan.FromSeconds(3)' 3' p =>                          new[] { new PageEventData { PageEventDefinitionId = p.VisitPageIndex.ToGuid()' Value = p.VisitPageIndex * p.VisitPageIndex } });                    date = date.Add(offset.Value);                    vd.InteractionId = i.ToGuid();                  return vd.AsContext();              });
Magic Number,ExperienceExtractor.Tests.Support,TestSets,D:\research\architectureSmells\repos1\Sitecore_experience-extractor\src\ExperienceExtractor.Tests\Support\TestSets.cs,Countries,The following statement contains a magic number: return Enumerable.Range(1' count).Select(i =>              {                  var countryName = "C" + ((i / regionsPerCountry) % countries);                  var regionName = countryName + "_R" + i % regionsPerCountry;                  var vd = baseData.Clone().SetGeoData(countryName' regionName)                      .Pages(date' TimeSpan.FromSeconds(3)' 3' p =>                          new[] { new PageEventData { PageEventDefinitionId = p.VisitPageIndex.ToGuid()' Value = p.VisitPageIndex * p.VisitPageIndex } });                    date = date.Add(offset.Value);                    vd.InteractionId = i.ToGuid();                  return vd.AsContext();              });
