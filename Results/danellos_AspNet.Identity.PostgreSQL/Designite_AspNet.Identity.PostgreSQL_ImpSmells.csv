Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AspNet.Identity.PostgreSQL,UserClaimsTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserClaimsTable.cs,Insert,The length of the statement  "            string commandText = "INSERT INTO \"AspNetUserClaims\" (\"ClaimValue\"' \"ClaimType\"' \"UserId\") VALUES (@value' @type' @userId)"; " is 132.
Long Statement,AspNet.Identity.PostgreSQL,UserClaimsTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserClaimsTable.cs,Delete,The length of the statement  "            string commandText = "DELETE FROM \"AspNetUserClaims\" WHERE \"UserId\" = @userId AND @ClaimValue = @value AND ClaimType = @type"; " is 130.
Long Statement,AspNet.Identity.PostgreSQL,UserLoginsTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserLoginsTable.cs,Delete,The length of the statement  "            string commandText = "DELETE FROM \"AspNetUserLogins\" WHERE \"UserId\" = @userId AND \"LoginProvider\" = @loginProvider AND \"ProviderKey\" = @providerKey"; " is 157.
Long Statement,AspNet.Identity.PostgreSQL,UserLoginsTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserLoginsTable.cs,Insert,The length of the statement  "            string commandText = "INSERT INTO \"AspNetUserLogins\" (\"LoginProvider\"' \"ProviderKey\"' \"UserId\") VALUES (@loginProvider' @providerKey' @userId)"; " is 152.
Long Statement,AspNet.Identity.PostgreSQL,UserLoginsTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserLoginsTable.cs,FindUserIdByLogin,The length of the statement  "            string commandText = "SELECT \"UserId\" FROM \"AspNetUserLogins\" WHERE \"LoginProvider\" = @loginProvider AND \"ProviderKey\" = @providerKey"; " is 143.
Long Statement,AspNet.Identity.PostgreSQL,UserRolesTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserRoleTable.cs,FindByUserId,The length of the statement  "            //       commandText += "WHERE \"AspNetUsers\".\"Id\" = \"AspNetUserRoles\".\"UserId\" AND \"AspNetUserRoles\".\"RoleId\" = \"AspNetRoles\".\"Id\";"; " is 149.
Long Statement,AspNet.Identity.PostgreSQL,UserRolesTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserRoleTable.cs,FindByUserId,The length of the statement  "            //string commandText = "SELECT \"Name\"" + " FROM \"AspNetRoles\" " + " INNER JOIN \"AspNetUserRoles\" ON \"AspNetUserRoles\".\"RoleId\" = \"AspNetRoles\".\"Id\" "  " is 163.
Long Statement,AspNet.Identity.PostgreSQL,UserRolesTable,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserRoleTable.cs,FindByUserId,The length of the statement  "            string commandText = "SELECT \"AspNetRoles\".\"Name\" FROM \"AspNetRoles\" JOIN \"AspNetUserRoles\" ON \"AspNetUserRoles\".\"RoleId\" = \"AspNetRoles\".\"Id\" WHERE \"AspNetUserRoles\".\"UserId\" = @userId;"; " is 208.
Long Statement,AspNet.Identity.PostgreSQL,UserTable<TUser>,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserTable.cs,Update,The length of the statement  "//                   SET ""UserName"" = @userName' ""PasswordHash"" = @pswHash' ""SecurityStamp"" = @secStamp' ""Email""= @email'  " is 129.
Long Statement,AspNet.Identity.PostgreSQL,UserTable<TUser>,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\UserTable.cs,Update,The length of the statement  "            string commandText = "UPDATE \"AspNetUsers\" SET \"UserName\" = @userName' \"PasswordHash\" = @pswHash' \"SecurityStamp\" = @secStamp' \"Email\"= @email' \"EmailConfirmed\" = @emailconfirmed WHERE \"Id\" = @userId;"; " is 216.
Magic Number,AspNet.Identity.PostgreSQL,PostgreSQLDatabase,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\PostgreSQLDatabase.cs,OpenConnection,The following statement contains a magic number: var retries = 10;
Magic Number,AspNet.Identity.PostgreSQL,PostgreSQLDatabase,C:\repos\danellos_AspNet.Identity.PostgreSQL\src\PostgreSQLDatabase.cs,OpenConnection,The following statement contains a magic number: if (_connection.State == ConnectionState.Open)              {                  return;              }              else              {                  while (retries >= 0 && _connection.State != ConnectionState.Open)                  {                      _connection.Open();                      retries--;                      Thread.Sleep(50);                  }              }
