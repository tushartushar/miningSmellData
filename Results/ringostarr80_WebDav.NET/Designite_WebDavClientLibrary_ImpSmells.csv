Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,Cyclomatic complexity of the method is 20
Complex Method,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,SetProperty,Cyclomatic complexity of the method is 8
Complex Method,Client,WebDavHierarchyItem,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,SetProperty,Cyclomatic complexity of the method is 8
Long Parameter List,Client,IResumableUpload,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResumableUpload.cs,GetWriteStream,The method has 5 parameters. Parameters: startIndex' contentLength' resourceTotalSize' contentType' lockToken
Long Parameter List,Client,WebDavResumableUpload,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResumableUpload.cs,GetWriteStream,The method has 5 parameters. Parameters: startIndex' contentLength' resourceTotalSize' contentType' lockToken
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,CreateResource,The length of the statement  "					string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password));" is 138.
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,CreateFolder,The length of the statement  "					string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,Open,The length of the statement  "					string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "															item.SetProperty(new Property(new PropertyName("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText)); " is 134.
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "															item.SetProperty(new Property(new PropertyName("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText)); " is 132.
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "															item.SetProperty(new Property(new PropertyName("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText)); " is 130.
Long Statement,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "															item.SetProperty(new Property(new PropertyName("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml)); " is 127.
Long Statement,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Upload,The length of the statement  "				string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Long Statement,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,GetReadStream,The length of the statement  "				string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Long Statement,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,GetWriteStream,The length of the statement  "					string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Long Statement,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Delete,The length of the statement  "				string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Long Statement,Client,WebDavHierarchyItem,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,Delete,The length of the statement  "                string auth = "Basic " + Convert.ToBase64String(System.Text.Encoding.Default.GetBytes(credentials.UserName + ":" + credentials.Password)); " is 138.
Empty Catch Block,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,SetProperty,The method has an empty catch block.
Magic Number,Client,WebDavResource,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Delete,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,Client,WebDavHierarchyItem,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,Delete,The following statement contains a magic number: byte[] buffer = new byte[8192];
Missing Default,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The following switch statement is missing a default case: switch(XmlCurrentNode.LocalName) {  								case "href":  									string href = XmlCurrentNode.InnerText;  									if (!Regex.Match(href' "^https?:\\/\\/").Success) {  										href = this._path.Scheme + "://" + this._path.Host + href;  									}  									item.SetHref(href' this._path);  									break;    								case "propstat":  									foreach(XmlNode XmlCurrentPropStatNode in XmlCurrentNode) {  										switch(XmlCurrentPropStatNode.LocalName) {  											case "prop":  												foreach(XmlNode XmlCurrentPropNode in XmlCurrentPropStatNode) {  													switch(XmlCurrentPropNode.LocalName) {  														case "creationdate":  															item.SetCreationDate(XmlCurrentPropNode.InnerText);  															break;    														case "getcontentlanguage":  															item.SetProperty(new Property(new PropertyName("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;    														case "getcontentlength":  															item.SetProperty(new Property(new PropertyName("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;  														case "getcontenttype":  															item.SetProperty(new Property(new PropertyName("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;    														case "getlastmodified":  															item.SetLastModified(XmlCurrentPropNode.InnerText);  															break;    														case "resourcetype":  															item.SetProperty(new Property(new PropertyName("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml));  															break;  													}  												}  												break;    											case "status":                                                  //Console.WriteLine("status: " + XmlCurrentPropStatNode.InnerText);  												break;  										}  									}  									break;  							}
Missing Default,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The following switch statement is missing a default case: switch(XmlCurrentPropStatNode.LocalName) {  											case "prop":  												foreach(XmlNode XmlCurrentPropNode in XmlCurrentPropStatNode) {  													switch(XmlCurrentPropNode.LocalName) {  														case "creationdate":  															item.SetCreationDate(XmlCurrentPropNode.InnerText);  															break;    														case "getcontentlanguage":  															item.SetProperty(new Property(new PropertyName("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;    														case "getcontentlength":  															item.SetProperty(new Property(new PropertyName("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;  														case "getcontenttype":  															item.SetProperty(new Property(new PropertyName("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;    														case "getlastmodified":  															item.SetLastModified(XmlCurrentPropNode.InnerText);  															break;    														case "resourcetype":  															item.SetProperty(new Property(new PropertyName("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml));  															break;  													}  												}  												break;    											case "status":                                                  //Console.WriteLine("status: " + XmlCurrentPropStatNode.InnerText);  												break;  										}
Missing Default,Client,WebDavFolder,C:\research\architectureSmells\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The following switch statement is missing a default case: switch(XmlCurrentPropNode.LocalName) {  														case "creationdate":  															item.SetCreationDate(XmlCurrentPropNode.InnerText);  															break;    														case "getcontentlanguage":  															item.SetProperty(new Property(new PropertyName("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;    														case "getcontentlength":  															item.SetProperty(new Property(new PropertyName("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;  														case "getcontenttype":  															item.SetProperty(new Property(new PropertyName("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  															break;    														case "getlastmodified":  															item.SetLastModified(XmlCurrentPropNode.InnerText);  															break;    														case "resourcetype":  															item.SetProperty(new Property(new PropertyName("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml));  															break;  													}
