Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,Cyclomatic complexity of the method is 42
Complex Method,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,SetProperty,Cyclomatic complexity of the method is 14
Complex Method,Client,WebDavHierarchyItem,C:\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,SetProperty,Cyclomatic complexity of the method is 13
Long Parameter List,Client,IResumableUpload,C:\repos\ringostarr80_WebDav.NET\WebDav\IResumableUpload.cs,GetWriteStream,The method has 5 parameters.
Long Parameter List,Client,WebDavResumableUpload,C:\repos\ringostarr80_WebDav.NET\WebDav\IResumableUpload.cs,GetWriteStream,The method has 5 parameters.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,CreateResource,The length of the statement  "		string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,CreateFolder,The length of the statement  "		string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,Open,The length of the statement  "		string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "									item.SetProperty (new Property (new PropertyName ("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText)); " is 137.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "									item.SetProperty (new Property (new PropertyName ("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText)); " is 135.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "									item.SetProperty (new Property (new PropertyName ("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText)); " is 133.
Long Statement,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The length of the statement  "									item.SetProperty (new Property (new PropertyName ("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml)); " is 130.
Long Statement,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Upload,The length of the statement  "	string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,GetReadStream,The length of the statement  "	string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,GetWriteStream,The length of the statement  "		string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Delete,The length of the statement  "	string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Long Statement,Client,WebDavHierarchyItem,C:\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,Delete,The length of the statement  "	string auth = "Basic " + Convert.ToBase64String (System.Text.Encoding.Default.GetBytes (credentials.UserName + ":" + credentials.Password)); " is 140.
Empty Catch Block,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,SetProperty,The method has an empty catch block.
Magic Number,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Delete,The following statement contains a magic number: using (WebResponse webResponse = webRequest.GetResponse ()) {  	using (Stream responseStream = webResponse.GetResponseStream ()) {  		byte[] buffer = new byte[8192];  		string result = "";  		int bytesRead = 0;  		do {  			bytesRead = responseStream.Read (buffer' 0' buffer.Length);  			if (bytesRead > 0) {  				result += Encoding.UTF8.GetString (buffer' 0' bytesRead);  			}  		}  		while (bytesRead > 0);  	}  }  
Magic Number,Client,WebDavResource,C:\repos\ringostarr80_WebDav.NET\WebDav\IResource.cs,Delete,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	byte[] buffer = new byte[8192];  	string result = "";  	int bytesRead = 0;  	do {  		bytesRead = responseStream.Read (buffer' 0' buffer.Length);  		if (bytesRead > 0) {  			result += Encoding.UTF8.GetString (buffer' 0' bytesRead);  		}  	}  	while (bytesRead > 0);  }  
Magic Number,Client,WebDavHierarchyItem,C:\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,Delete,The following statement contains a magic number: using (WebResponse webResponse = webRequest.GetResponse ()) {  	using (Stream responseStream = webResponse.GetResponseStream ()) {  		byte[] buffer = new byte[8192];  		string result = "";  		int bytesRead = 0;  		do {  			bytesRead = responseStream.Read (buffer' 0' buffer.Length);  			if (bytesRead > 0) {  				result += Encoding.UTF8.GetString (buffer' 0' bytesRead);  			}  		}  		while (bytesRead > 0);  	}  }  
Magic Number,Client,WebDavHierarchyItem,C:\repos\ringostarr80_WebDav.NET\WebDav\IHierarchyItem.cs,Delete,The following statement contains a magic number: using (Stream responseStream = webResponse.GetResponseStream ()) {  	byte[] buffer = new byte[8192];  	string result = "";  	int bytesRead = 0;  	do {  		bytesRead = responseStream.Read (buffer' 0' buffer.Length);  		if (bytesRead > 0) {  			result += Encoding.UTF8.GetString (buffer' 0' bytesRead);  		}  	}  	while (bytesRead > 0);  }  
Missing Default,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The following switch statement is missing a default case: switch (XmlCurrentNode.LocalName) {  case "href":  	string href = XmlCurrentNode.InnerText;  	if (!Regex.Match (href' "^https?:\\/\\/").Success) {  		href = this._path.Scheme + "://" + this._path.Host + href;  	}  	item.SetHref (href' this._path);  	break;  case "propstat":  	foreach (XmlNode XmlCurrentPropStatNode in XmlCurrentNode) {  		switch (XmlCurrentPropStatNode.LocalName) {  		case "prop":  			foreach (XmlNode XmlCurrentPropNode in XmlCurrentPropStatNode) {  				switch (XmlCurrentPropNode.LocalName) {  				case "creationdate":  					item.SetCreationDate (XmlCurrentPropNode.InnerText);  					break;  				case "getcontentlanguage":  					item.SetProperty (new Property (new PropertyName ("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  					break;  				case "getcontentlength":  					item.SetProperty (new Property (new PropertyName ("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  					break;  				case "getcontenttype":  					item.SetProperty (new Property (new PropertyName ("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  					break;  				case "getlastmodified":  					item.SetLastModified (XmlCurrentPropNode.InnerText);  					break;  				case "resourcetype":  					item.SetProperty (new Property (new PropertyName ("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml));  					break;  				}  			}  			break;  		case "status":  			//Console.WriteLine("status: " + XmlCurrentPropStatNode.InnerText);  			break;  		}  	}  	break;  }  
Missing Default,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The following switch statement is missing a default case: switch (XmlCurrentPropStatNode.LocalName) {  case "prop":  	foreach (XmlNode XmlCurrentPropNode in XmlCurrentPropStatNode) {  		switch (XmlCurrentPropNode.LocalName) {  		case "creationdate":  			item.SetCreationDate (XmlCurrentPropNode.InnerText);  			break;  		case "getcontentlanguage":  			item.SetProperty (new Property (new PropertyName ("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  			break;  		case "getcontentlength":  			item.SetProperty (new Property (new PropertyName ("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  			break;  		case "getcontenttype":  			item.SetProperty (new Property (new PropertyName ("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  			break;  		case "getlastmodified":  			item.SetLastModified (XmlCurrentPropNode.InnerText);  			break;  		case "resourcetype":  			item.SetProperty (new Property (new PropertyName ("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml));  			break;  		}  	}  	break;  case "status":  	//Console.WriteLine("status: " + XmlCurrentPropStatNode.InnerText);  	break;  }  
Missing Default,Client,WebDavFolder,C:\repos\ringostarr80_WebDav.NET\WebDav\IFolder.cs,ProcessResponse,The following switch statement is missing a default case: switch (XmlCurrentPropNode.LocalName) {  case "creationdate":  	item.SetCreationDate (XmlCurrentPropNode.InnerText);  	break;  case "getcontentlanguage":  	item.SetProperty (new Property (new PropertyName ("getcontentlanguage"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  	break;  case "getcontentlength":  	item.SetProperty (new Property (new PropertyName ("getcontentlength"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  	break;  case "getcontenttype":  	item.SetProperty (new Property (new PropertyName ("getcontenttype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerText));  	break;  case "getlastmodified":  	item.SetLastModified (XmlCurrentPropNode.InnerText);  	break;  case "resourcetype":  	item.SetProperty (new Property (new PropertyName ("resourcetype"' XmlCurrentPropNode.NamespaceURI)' XmlCurrentPropNode.InnerXml));  	break;  }  
