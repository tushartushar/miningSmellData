Implementation smell,Namespace,Class,File,Method,Description
Long Method,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The method has 151 lines of code.
Long Method,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,InterpretMouseEvents,The method has 192 lines of code.
Complex Method,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,Cyclomatic complexity of the method is 14
Complex Method,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,InterpretMouseEvents,Cyclomatic complexity of the method is 9
Long Parameter List,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The method has 5 parameters. Parameters: tabs' graphicsContext' offset' cursor' forceRedraw
Long Parameter List,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The method has 7 parameters. Parameters: graphicsContext' tab' area' cursor' tabLeftImage' tabCenterImage' tabRightImage
Long Parameter List,EasyTabs,LayeredWindow,C:\repos\lstratman_EasyTabs\TornTabForm.cs,UpdateWindow,The method has 5 parameters. Parameters: image' opacity' width' height' position
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Overlay_MouseDown,The length of the statement  "			_tabClickOffset = _parentWindow._overlay.GetRelativeCursorPosition(e.Location).X - _parentWindow.SelectedTab.Area.Location.X; " is 125.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Overlay_MouseMove,The length of the statement  "			    (Math.Abs(e.X - _dragStart.Value.X) > TabRepositionDragDistance || Math.Abs(e.Y - _dragStart.Value.Y) > TabRepositionDragDistance)) " is 131.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,OverTab,The length of the statement  "				// We have to loop through each of the tabs in turn and check their status; if the tabs overlap' then their areas overlap as well' which means  " is 142.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,OverTab,The length of the statement  "				// that we may find see that the cursor is over an inactive tab' but we need to check the active tabs as well' since they may overlap their  " is 139.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,IsOverCloseButton,The length of the statement  "				tab.Area.X + tab.CloseButtonArea.X' tab.Area.Y + tab.CloseButtonArea.Y' tab.CloseButtonArea.Width' tab.CloseButtonArea.Height); " is 127.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "			_maxTabArea.Location = new Point(SystemInformation.BorderSize.Width + offset.X + screenCoordinates.X' offset.Y + screenCoordinates.Y); " is 134.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "			// Get the width of the content area for each tab by taking the parent window's client width' subtracting the left and right border widths and the  " is 146.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "			int tabContentWidth = Math.Min(_activeCenterImage.Width' Convert.ToInt32(Math.Floor(Convert.ToDouble(_maxTabArea.Width / tabs.Count)))); " is 136.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "			// Determine if we need to redraw the TabImage properties for each tab by seeing if the content width that we calculated above is equal to content  " is 146.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "				// In this first pass' we only render the inactive tabs since we need the active tabs to show up on top of everything else " is 122.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "                // We render the tab to an internal property so that we don't necessarily have to redraw it in every rendering pass' only if its width or  " is 137.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "				        tabLeftImage' new Rectangle(0' 0' tabLeftImage.Width' tabLeftImage.Height)' 0' 0' tabLeftImage.Width' tabLeftImage.Height' GraphicsUnit.Pixel); " is 143.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "				        tabCenterImage' new Rectangle(tabLeftImage.Width' 0' _tabContentWidth' tabCenterImage.Height)' 0' 0' _tabContentWidth' tabCenterImage.Height' " is 141.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "				        tabRightImage' new Rectangle(tabLeftImage.Width + _tabContentWidth' 0' tabRightImage.Width' tabRightImage.Height)' 0' 0' tabRightImage.Width' " is 141.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The length of the statement  "					        area.Width - tabRightImage.Width - CloseButtonMarginRight - closeButtonImage.Width' CloseButtonMarginTop' closeButtonImage.Width' " is 129.
Long Statement,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,CombineTab,The length of the statement  "			// Simulate the user having clicked in the middle of the tab when they started dragging it so that the tab will move correctly within the window " is 144.
Long Statement,EasyTabs,TitleBarTab,C:\repos\lstratman_EasyTabs\TitleBarTab.cs,GetImage,The length of the statement  "			contentsGraphics.CopyFromScreen(Content.PointToScreen(Point.Empty).X' Content.PointToScreen(Point.Empty).Y' 0' 0' Content.Size); " is 128.
Long Statement,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,SetWindowThemeAttributes,The length of the statement  "			Uxtheme.SetWindowThemeAttribute(Handle' WINDOWTHEMEATTRIBUTETYPE.WTA_NONCLIENT' ref options' (uint) Marshal.SizeOf(typeof (WTA_OPTIONS))); " is 138.
Long Statement,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,SetFrameSize,The length of the statement  "						Tabs.Select(tab => TaskbarManager.Instance.TabbedThumbnail.GetThumbnailPreview(tab.Content)).Where(preview => preview != null)) " is 127.
Long Statement,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,preview_TabbedThumbnailBitmapRequested,The length of the statement  "				TitleBarTab rdcWindow in Tabs.Where(rdcWindow => rdcWindow.Content.Handle == e.WindowHandle && _previews.ContainsKey(rdcWindow.Content))) " is 137.
Long Statement,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,WndProc,The length of the statement  "					if (!(hitResult == HT.HTCLOSE || hitResult == HT.HTMINBUTTON || hitResult == HT.HTMAXBUTTON || hitResult == HT.HTMENU || " is 120.
Long Statement,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,WndProc,The length of the statement  "					// Catch the case where the user is clicking the minimize button and use this opportunity to update the AeroPeek thumbnail for the current tab " is 142.
Long Statement,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,HitTest,The length of the statement  "			if (point.Y >= area.Top && point.Y < area.Top + SystemInformation.VerticalResizeBorderThickness + _nonClientAreaHeight - 2) " is 123.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,InterpretMouseEvents,The length of the statement  "									// In all cases where we need to affect the UI' we call Invoke so that those changes are made on the main UI thread since " is 121.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,InterpretMouseEvents,The length of the statement  "						     !_parentForm.TabRenderer.IsOverCloseButton(_parentForm.Tabs[_isOverCloseButtonForTab]' GetRelativeCursorPosition(cursorPosition)))) " is 131.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,InterpretMouseEvents,The length of the statement  "									// When determining if a tab has been torn from the window while dragging' we take the drop area for this window and inflate it by the " is 134.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,InterpretMouseEvents,The length of the statement  "												// Clear the event handler subscriptions from the tab and then create a thumbnail representation of it to use when dragging " is 123.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The length of the statement  "					new Rectangle(new Point(fillArea.Location.X + fillArea.Width - rightMargin' fillArea.Location.Y)' new Size(rightMargin' fillArea.Height))); " is 139.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The length of the statement  "				bufferedGraphics.Graphics.FillRectangle(new SolidBrush(TitleBarColor)' new Rectangle(fillArea.Location' new Size(24' fillArea.Height))); " is 136.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,OnPosition,The length of the statement  "				Left = _parentForm.Left + SystemInformation.HorizontalResizeBorderThickness - SystemInformation.BorderSize.Width + borderPadding; " is 129.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,OnPosition,The length of the statement  "				Width = _parentForm.Width - ((SystemInformation.VerticalResizeBorderThickness + borderPadding) * 2) + (SystemInformation.BorderSize.Width * 2); " is 143.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,OnPosition,The length of the statement  "				Height = _parentForm.TabRenderer.TabHeight + (DisplayType == DisplayType.Classic && _parentForm.WindowState != FormWindowState.Maximized " is 136.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,Render,The length of the statement  "			if (!IsDisposed && _parentForm.TabRenderer != null && _parentForm.WindowState != FormWindowState.Minimized && _parentForm.ClientRectangle.Width > 0) " is 148.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,Render,The length of the statement  "						// Since classic mode themes draw over the *entire* titlebar' not just the area immediately behind the tabs' we have to offset the tabs " is 135.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,Render,The length of the statement  "						if (DisplayType == DisplayType.Classic && (_parentForm.ControlBox || _parentForm.MaximizeBox || _parentForm.MinimizeBox)) " is 121.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,WndProc,The length of the statement  "						// When the user clicks a mouse button' save the tab that the user was over so we can respond properly when the mouse button is released " is 136.
Long Statement,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,WndProc,The length of the statement  "						// When the user clicks a mouse button' save the tab that the user was over so we can respond properly when the mouse button is released " is 136.
Long Statement,EasyTabs,LayeredWindow,C:\repos\lstratman_EasyTabs\TornTabForm.cs,UpdateWindow,The length of the statement  "			User32.UpdateLayeredWindow(Handle' windowHandle' ref position' ref size' deviceContextHandle' ref destinationPosition' 0' ref blendFunction' ULW.ULW_ALPHA); " is 156.
Complex Conditional,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Overlay_MouseMove,The conditional expression  "_dragStart != null && !IsTabRepositioning &&  			    (Math.Abs(e.X - _dragStart.Value.X) > TabRepositionDragDistance || Math.Abs(e.Y - _dragStart.Value.Y) > TabRepositionDragDistance)"  is complex.
Complex Conditional,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,WndProc,The conditional expression  "!(hitResult == HT.HTCLOSE || hitResult == HT.HTMINBUTTON || hitResult == HT.HTMAXBUTTON || hitResult == HT.HTMENU ||  					      hitResult == HT.HTSYSMENU)"  is complex.
Complex Conditional,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,Render,The conditional expression  "!IsDisposed && _parentForm.TabRenderer != null && _parentForm.WindowState != FormWindowState.Minimized && _parentForm.ClientRectangle.Width > 0"  is complex.
Complex Conditional,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,Render,The conditional expression  "DisplayType == DisplayType.Classic && (_parentForm.ControlBox || _parentForm.MaximizeBox || _parentForm.MinimizeBox)"  is complex.
Virtual Method Call from Constructor,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The constructor "TornTabForm" calls a virtual method "GetImage".
Virtual Method Call from Constructor,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The constructor "TornTabForm" calls a virtual method "Render".
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,BaseTabRenderer,The following statement contains a magic number: TabRepositionDragDistance = 10;
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,BaseTabRenderer,The following statement contains a magic number: TabTearDragDistance = 10;
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (tab.Content.ShowIcon && _tabContentWidth > 16 + IconMarginLeft + (tab.ShowCloseButton  				? CloseButtonMarginLeft +  				  tab.CloseButtonArea.Width +  				  CloseButtonMarginRight  				: 0))  			{  				graphicsContext.DrawIcon(  					new Icon(tab.Content.Icon' 16' 16)'  					new Rectangle(area.X + OverlapWidth + IconMarginLeft' IconMarginTop + area.Y' 16' 16));  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (tab.Content.ShowIcon && _tabContentWidth > 16 + IconMarginLeft + (tab.ShowCloseButton  				? CloseButtonMarginLeft +  				  tab.CloseButtonArea.Width +  				  CloseButtonMarginRight  				: 0))  			{  				graphicsContext.DrawIcon(  					new Icon(tab.Content.Icon' 16' 16)'  					new Rectangle(area.X + OverlapWidth + IconMarginLeft' IconMarginTop + area.Y' 16' 16));  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (tab.Content.ShowIcon && _tabContentWidth > 16 + IconMarginLeft + (tab.ShowCloseButton  				? CloseButtonMarginLeft +  				  tab.CloseButtonArea.Width +  				  CloseButtonMarginRight  				: 0))  			{  				graphicsContext.DrawIcon(  					new Icon(tab.Content.Icon' 16' 16)'  					new Rectangle(area.X + OverlapWidth + IconMarginLeft' IconMarginTop + area.Y' 16' 16));  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (tab.Content.ShowIcon && _tabContentWidth > 16 + IconMarginLeft + (tab.ShowCloseButton  				? CloseButtonMarginLeft +  				  tab.CloseButtonArea.Width +  				  CloseButtonMarginRight  				: 0))  			{  				graphicsContext.DrawIcon(  					new Icon(tab.Content.Icon' 16' 16)'  					new Rectangle(area.X + OverlapWidth + IconMarginLeft' IconMarginTop + area.Y' 16' 16));  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (tab.Content.ShowIcon && _tabContentWidth > 16 + IconMarginLeft + (tab.ShowCloseButton  				? CloseButtonMarginLeft +  				  tab.CloseButtonArea.Width +  				  CloseButtonMarginRight  				: 0))  			{  				graphicsContext.DrawIcon(  					new Icon(tab.Content.Icon' 16' 16)'  					new Rectangle(area.X + OverlapWidth + IconMarginLeft' IconMarginTop + area.Y' 16' 16));  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (_tabContentWidth > (tab.Content.ShowIcon  				? 16 + IconMarginLeft + IconMarginRight  				: 0) + CaptionMarginLeft + CaptionMarginRight + (tab.ShowCloseButton  					? CloseButtonMarginLeft +  					  tab.CloseButtonArea.Width +  					  CloseButtonMarginRight  					: 0))  			{  				graphicsContext.DrawString(  					tab.Caption' SystemFonts.CaptionFont' Brushes.Black'  					new Rectangle(  						area.X + OverlapWidth + CaptionMarginLeft + (tab.Content.ShowIcon  							? IconMarginLeft +  							  16 +  							  IconMarginRight  							: 0)'  						CaptionMarginTop + area.Y'  						_tabContentWidth - (tab.Content.ShowIcon  							? IconMarginLeft + 16 + IconMarginRight  							: 0) - (tab.ShowCloseButton  								? _closeButtonImage.Width +  								  CloseButtonMarginRight +  								  CloseButtonMarginLeft  								: 0)' tab.TabImage.Height)'  					new StringFormat(StringFormatFlags.NoWrap)  					{  						Trimming = StringTrimming.EllipsisCharacter  					});  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (_tabContentWidth > (tab.Content.ShowIcon  				? 16 + IconMarginLeft + IconMarginRight  				: 0) + CaptionMarginLeft + CaptionMarginRight + (tab.ShowCloseButton  					? CloseButtonMarginLeft +  					  tab.CloseButtonArea.Width +  					  CloseButtonMarginRight  					: 0))  			{  				graphicsContext.DrawString(  					tab.Caption' SystemFonts.CaptionFont' Brushes.Black'  					new Rectangle(  						area.X + OverlapWidth + CaptionMarginLeft + (tab.Content.ShowIcon  							? IconMarginLeft +  							  16 +  							  IconMarginRight  							: 0)'  						CaptionMarginTop + area.Y'  						_tabContentWidth - (tab.Content.ShowIcon  							? IconMarginLeft + 16 + IconMarginRight  							: 0) - (tab.ShowCloseButton  								? _closeButtonImage.Width +  								  CloseButtonMarginRight +  								  CloseButtonMarginLeft  								: 0)' tab.TabImage.Height)'  					new StringFormat(StringFormatFlags.NoWrap)  					{  						Trimming = StringTrimming.EllipsisCharacter  					});  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,Render,The following statement contains a magic number: if (_tabContentWidth > (tab.Content.ShowIcon  				? 16 + IconMarginLeft + IconMarginRight  				: 0) + CaptionMarginLeft + CaptionMarginRight + (tab.ShowCloseButton  					? CloseButtonMarginLeft +  					  tab.CloseButtonArea.Width +  					  CloseButtonMarginRight  					: 0))  			{  				graphicsContext.DrawString(  					tab.Caption' SystemFonts.CaptionFont' Brushes.Black'  					new Rectangle(  						area.X + OverlapWidth + CaptionMarginLeft + (tab.Content.ShowIcon  							? IconMarginLeft +  							  16 +  							  IconMarginRight  							: 0)'  						CaptionMarginTop + area.Y'  						_tabContentWidth - (tab.Content.ShowIcon  							? IconMarginLeft + 16 + IconMarginRight  							: 0) - (tab.ShowCloseButton  								? _closeButtonImage.Width +  								  CloseButtonMarginRight +  								  CloseButtonMarginLeft  								: 0)' tab.TabImage.Height)'  					new StringFormat(StringFormatFlags.NoWrap)  					{  						Trimming = StringTrimming.EllipsisCharacter  					});  			}
Magic Number,EasyTabs,BaseTabRenderer,C:\repos\lstratman_EasyTabs\BaseTabRenderer.cs,CombineTab,The following statement contains a magic number: if (_parentWindow.Tabs.Count > 0)  			{  				_tabClickOffset = _parentWindow.Tabs.First().Area.Width / 2;  			}  			else  			{  				_tabClickOffset = 0;  			}
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: CloseButtonMarginTop = 6;
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: CloseButtonMarginLeft = 2;
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: AddButtonMarginTop = 7;
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: CaptionMarginTop = 6;
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: IconMarginTop = 7;
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: IconMarginRight = 5;
Magic Number,EasyTabs,ChromeTabRenderer,C:\repos\lstratman_EasyTabs\ChromeTabRenderer.cs,ChromeTabRenderer,The following statement contains a magic number: AddButtonMarginRight = 5;
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,preview_TabbedThumbnailActivated,The following statement contains a magic number: if (WindowState == FormWindowState.Minimized)  			{  				User32.ShowWindow(Handle' 3);  			}    			else  			{  				Focus();  			}
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,HitTest,The following statement contains a magic number: Point point = new Point(lParam & 0xffff' lParam >> 16);
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,HitTest,The following statement contains a magic number: if (point.Y >= area.Top && point.Y < area.Top + SystemInformation.VerticalResizeBorderThickness + _nonClientAreaHeight - 2)  			{  				onResizeBorder = point.Y < (area.Top + SystemInformation.VerticalResizeBorderThickness);  				row = 0;  			}    			else if (point.Y < area.Bottom && point.Y > area.Bottom - SystemInformation.VerticalResizeBorderThickness)  			{  				row = 2;  			}
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,HitTest,The following statement contains a magic number: if (point.Y >= area.Top && point.Y < area.Top + SystemInformation.VerticalResizeBorderThickness + _nonClientAreaHeight - 2)  			{  				onResizeBorder = point.Y < (area.Top + SystemInformation.VerticalResizeBorderThickness);  				row = 0;  			}    			else if (point.Y < area.Bottom && point.Y > area.Bottom - SystemInformation.VerticalResizeBorderThickness)  			{  				row = 2;  			}
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,HitTest,The following statement contains a magic number: if (point.X >= area.Left && point.X < area.Left + SystemInformation.HorizontalResizeBorderThickness)  			{  				column = 0;  			}    			else if (point.X < area.Right && point.X >= area.Right - SystemInformation.HorizontalResizeBorderThickness)  			{  				column = 2;  			}
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The following statement contains a magic number: if (DisplayType == DisplayType.Basic)  			{  				fillArea = new Rectangle(  					new Point(  						1' Top == 0  							? SystemInformation.CaptionHeight - 1  							: (SystemInformation.CaptionHeight + SystemInformation.VerticalResizeBorderThickness) - (Top - _parentForm.Top) - 1)'  					new Size(Width - 2' _parentForm.Padding.Top));  			}    			else  			{  				fillArea = new Rectangle(new Point(1' 0)' new Size(Width - 2' Height - 1));  			}
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The following statement contains a magic number: if (DisplayType == DisplayType.Basic)  			{  				fillArea = new Rectangle(  					new Point(  						1' Top == 0  							? SystemInformation.CaptionHeight - 1  							: (SystemInformation.CaptionHeight + SystemInformation.VerticalResizeBorderThickness) - (Top - _parentForm.Top) - 1)'  					new Size(Width - 2' _parentForm.Padding.Top));  			}    			else  			{  				fillArea = new Rectangle(new Point(1' 0)' new Size(Width - 2' Height - 1));  			}
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The following statement contains a magic number: int rightMargin = 3;
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The following statement contains a magic number: LinearGradientBrush gradient = new LinearGradientBrush(  				new Point(24' 0)' new Point(fillArea.Width - rightMargin + 1' 0)' TitleBarColor' TitleBarGradientColor);
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,DrawTitleBarBackground,The following statement contains a magic number: using (BufferedGraphics bufferedGraphics = BufferedGraphicsManager.Current.Allocate(graphics' fillArea))  			{  				bufferedGraphics.Graphics.FillRectangle(new SolidBrush(TitleBarColor)' fillArea);  				bufferedGraphics.Graphics.FillRectangle(  					new SolidBrush(TitleBarGradientColor)'  					new Rectangle(new Point(fillArea.Location.X + fillArea.Width - rightMargin' fillArea.Location.Y)' new Size(rightMargin' fillArea.Height)));  				bufferedGraphics.Graphics.FillRectangle(  					gradient' new Rectangle(fillArea.Location' new Size(fillArea.Width - rightMargin' fillArea.Height)));  				bufferedGraphics.Graphics.FillRectangle(new SolidBrush(TitleBarColor)' new Rectangle(fillArea.Location' new Size(24' fillArea.Height)));    				bufferedGraphics.Render(graphics);  			}
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,OnPosition,The following statement contains a magic number: if (!IsDisposed)  			{  			    // 92 is SM_CXPADDEDBORDER' which returns the amount of extra border padding around captioned windows                  int borderPadding = DisplayType == DisplayType.Classic  			        ? 0  			        : User32.GetSystemMetrics(92);                    // If the form is in a non-maximized state' we position the tabs below the minimize/maximize/close                  // buttons                  Top = _parentForm.Top + (DisplayType == DisplayType.Classic  					? SystemInformation.VerticalResizeBorderThickness  					: _parentForm.WindowState == FormWindowState.Maximized                          ? SystemInformation.VerticalResizeBorderThickness + borderPadding                          : SystemInformation.CaptionHeight + borderPadding);  				Left = _parentForm.Left + SystemInformation.HorizontalResizeBorderThickness - SystemInformation.BorderSize.Width + borderPadding;  				Width = _parentForm.Width - ((SystemInformation.VerticalResizeBorderThickness + borderPadding) * 2) + (SystemInformation.BorderSize.Width * 2);  				Height = _parentForm.TabRenderer.TabHeight + (DisplayType == DisplayType.Classic && _parentForm.WindowState != FormWindowState.Maximized  					? SystemInformation.CaptionButtonSize.Height  					: 0);    				Render();  			}
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,OnPosition,The following statement contains a magic number: if (!IsDisposed)  			{  			    // 92 is SM_CXPADDEDBORDER' which returns the amount of extra border padding around captioned windows                  int borderPadding = DisplayType == DisplayType.Classic  			        ? 0  			        : User32.GetSystemMetrics(92);                    // If the form is in a non-maximized state' we position the tabs below the minimize/maximize/close                  // buttons                  Top = _parentForm.Top + (DisplayType == DisplayType.Classic  					? SystemInformation.VerticalResizeBorderThickness  					: _parentForm.WindowState == FormWindowState.Maximized                          ? SystemInformation.VerticalResizeBorderThickness + borderPadding                          : SystemInformation.CaptionHeight + borderPadding);  				Left = _parentForm.Left + SystemInformation.HorizontalResizeBorderThickness - SystemInformation.BorderSize.Width + borderPadding;  				Width = _parentForm.Width - ((SystemInformation.VerticalResizeBorderThickness + borderPadding) * 2) + (SystemInformation.BorderSize.Width * 2);  				Height = _parentForm.TabRenderer.TabHeight + (DisplayType == DisplayType.Classic && _parentForm.WindowState != FormWindowState.Maximized  					? SystemInformation.CaptionButtonSize.Height  					: 0);    				Render();  			}
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,OnPosition,The following statement contains a magic number: if (!IsDisposed)  			{  			    // 92 is SM_CXPADDEDBORDER' which returns the amount of extra border padding around captioned windows                  int borderPadding = DisplayType == DisplayType.Classic  			        ? 0  			        : User32.GetSystemMetrics(92);                    // If the form is in a non-maximized state' we position the tabs below the minimize/maximize/close                  // buttons                  Top = _parentForm.Top + (DisplayType == DisplayType.Classic  					? SystemInformation.VerticalResizeBorderThickness  					: _parentForm.WindowState == FormWindowState.Maximized                          ? SystemInformation.VerticalResizeBorderThickness + borderPadding                          : SystemInformation.CaptionHeight + borderPadding);  				Left = _parentForm.Left + SystemInformation.HorizontalResizeBorderThickness - SystemInformation.BorderSize.Width + borderPadding;  				Width = _parentForm.Width - ((SystemInformation.VerticalResizeBorderThickness + borderPadding) * 2) + (SystemInformation.BorderSize.Width * 2);  				Height = _parentForm.TabRenderer.TabHeight + (DisplayType == DisplayType.Classic && _parentForm.WindowState != FormWindowState.Maximized  					? SystemInformation.CaptionButtonSize.Height  					: 0);    				Render();  			}
Magic Number,EasyTabs,TitleBarTabsOverlay,C:\repos\lstratman_EasyTabs\TitleBarTabsOverlay.cs,Render,The following statement contains a magic number: if (!IsDisposed && _parentForm.TabRenderer != null && _parentForm.WindowState != FormWindowState.Minimized && _parentForm.ClientRectangle.Width > 0)  			{  				cursorPosition = GetRelativeCursorPosition(cursorPosition);    				using (Bitmap bitmap = new Bitmap(Width' Height' PixelFormat.Format32bppArgb))  				{  					using (Graphics graphics = Graphics.FromImage(bitmap))  					{  						DrawTitleBarBackground(graphics);    						// Since classic mode themes draw over the *entire* titlebar' not just the area immediately behind the tabs' we have to offset the tabs  						// when rendering in the window  						Point offset = _parentForm.WindowState != FormWindowState.Maximized && DisplayType == DisplayType.Classic  							? new Point(0' SystemInformation.CaptionButtonSize.Height)  							: _parentForm.WindowState != FormWindowState.Maximized  								? new Point(0' SystemInformation.VerticalResizeBorderThickness - SystemInformation.BorderSize.Height)  								: new Point(0' 0);    						// Render the tabs into the bitmap  						_parentForm.TabRenderer.Render(_parentForm.Tabs' graphics' offset' cursorPosition' forceRedraw);    						// Cut out a hole in the background so that the control box on the underlying window can be shown  						if (DisplayType == DisplayType.Classic && (_parentForm.ControlBox || _parentForm.MaximizeBox || _parentForm.MinimizeBox))  						{  							int boxWidth = 0;    							if (_parentForm.ControlBox)  							{  								boxWidth += SystemInformation.CaptionButtonSize.Width;  							}    							if (_parentForm.MinimizeBox)  							{  								boxWidth += SystemInformation.CaptionButtonSize.Width;  							}    							if (_parentForm.MaximizeBox)  							{  								boxWidth += SystemInformation.CaptionButtonSize.Width;  							}    							CompositingMode oldCompositingMode = graphics.CompositingMode;    							graphics.CompositingMode = CompositingMode.SourceCopy;  							graphics.FillRectangle(  								new SolidBrush(Color.Transparent)' Width - boxWidth' 0' boxWidth' SystemInformation.CaptionButtonSize.Height);  							graphics.CompositingMode = oldCompositingMode;  						}    						IntPtr screenDc = User32.GetDC(IntPtr.Zero);  						IntPtr memDc = Gdi32.CreateCompatibleDC(screenDc);  						IntPtr oldBitmap = IntPtr.Zero;  						IntPtr bitmapHandle = IntPtr.Zero;    						try  						{  							// Copy the contents of the bitmap into memDc  							bitmapHandle = bitmap.GetHbitmap(Color.FromArgb(0));  							oldBitmap = Gdi32.SelectObject(memDc' bitmapHandle);    							SIZE size = new SIZE  							            {  								            cx = bitmap.Width'  								            cy = bitmap.Height  							            };    							POINT pointSource = new POINT  							                    {  								                    x = 0'  								                    y = 0  							                    };  							POINT topPos = new POINT  							               {  								               x = Left'  								               y = Top  							               };  							BLENDFUNCTION blend = new BLENDFUNCTION  							                      {  								                      // We want to blend the bitmap's content with the screen content under it  								                      BlendOp = Convert.ToByte((int) AC.AC_SRC_OVER)'  								                      BlendFlags = 0'  								                      SourceConstantAlpha = 255'  								                      // We use the bitmap's alpha channel for blending instead of a pre-defined transparency key  								                      AlphaFormat = Convert.ToByte((int) AC.AC_SRC_ALPHA)  							                      };    							// Blend the tab content with the underlying content  							if (!User32.UpdateLayeredWindow(  								Handle' screenDc' ref topPos' ref size' memDc' ref pointSource' 0' ref blend' ULW.ULW_ALPHA))  							{  								int error = Marshal.GetLastWin32Error();  								throw new Win32Exception(error' "Error while calling UpdateLayeredWindow().");  							}  						}    							// Clean up after ourselves  						finally  						{  							User32.ReleaseDC(IntPtr.Zero' screenDc);    							if (bitmapHandle != IntPtr.Zero)  							{  								Gdi32.SelectObject(memDc' oldBitmap);  								Gdi32.DeleteObject(bitmapHandle);  							}    							Gdi32.DeleteDC(memDc);  						}  					}  				}  			}
Magic Number,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The following statement contains a magic number: Opacity = 0.70;
Magic Number,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The following statement contains a magic number: _tabThumbnail = new Bitmap(contentsAndTab.Width / 2' contentsAndTab.Height / 2' contentsAndTab.PixelFormat);
Magic Number,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The following statement contains a magic number: _tabThumbnail = new Bitmap(contentsAndTab.Width / 2' contentsAndTab.Height / 2' contentsAndTab.PixelFormat);
Magic Number,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The following statement contains a magic number: _cursorOffset = new Point(tabRenderer.TabContentWidth / 4' tabRenderer.TabHeight / 4);
Magic Number,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,TornTabForm,The following statement contains a magic number: _cursorOffset = new Point(tabRenderer.TabContentWidth / 4' tabRenderer.TabHeight / 4);
Magic Number,EasyTabs,TornTabForm,C:\repos\lstratman_EasyTabs\TornTabForm.cs,UpdateLayeredBackground,The following statement contains a magic number: byte opacity = (byte) (Opacity * 255);
Missing Default,EasyTabs,TitleBarTabs,C:\repos\lstratman_EasyTabs\TitleBarTabs.cs,WndProc,The following switch statement is missing a default case: switch ((WM) m.Msg)  			{  					// When the window is activated' set the size of the non-client area appropriately  				case WM.WM_ACTIVATE:  					if ((m.WParam.ToInt64() & 0x0000FFFF) != 0)  					{  						SetFrameSize();  						ResizeTabContents();  						m.Result = IntPtr.Zero;  					}    					break;    				case WM.WM_NCHITTEST:  					// Call the base message handler to see where the user clicked in the window  					base.WndProc(ref m);    					HT hitResult = (HT) m.Result.ToInt32();    					// If they were over the minimize/maximize/close buttons or the system menu' let the message pass  					if (!(hitResult == HT.HTCLOSE || hitResult == HT.HTMINBUTTON || hitResult == HT.HTMAXBUTTON || hitResult == HT.HTMENU ||  					      hitResult == HT.HTSYSMENU))  					{  						m.Result = new IntPtr((int) HitTest(m));  					}    					callDwp = false;    					break;    					// Catch the case where the user is clicking the minimize button and use this opportunity to update the AeroPeek thumbnail for the current tab  				case WM.WM_NCLBUTTONDOWN:  					if (((HT) m.WParam.ToInt32()) == HT.HTMINBUTTON && AeroPeekEnabled && SelectedTab != null)  					{  						UpdateTabThumbnail(SelectedTab);  					}    					break;  			}
