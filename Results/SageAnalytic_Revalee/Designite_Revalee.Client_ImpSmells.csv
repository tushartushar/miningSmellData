Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Revalee.Client.RecurringTasks,ConfiguredTask,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\ConfiguredTask.cs,ConfiguredTask,The method has 6 parameters. Parameters: identifier' clockSource' periodicity' hourOffset' minuteOffset' url
Long Parameter List,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,Create,The method has 5 parameters. Parameters: clockSource' periodicity' hourOffset' minuteOffset' url
Long Parameter List,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AddTask,The method has 5 parameters. Parameters: clockSource' periodicity' hour' minute' url
Long Identifier,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,,The length of the parameter _DefaultRequestTimeoutInMilliseconds is 36.
Long Identifier,Revalee.Client,RevaleeClientSettings,C:\repos\SageAnalytic_Revalee\Revalee.Client\RevaleeClientSettings.cs,,The length of the parameter _AuthorizationKeyAppSettingsKey is 31.
Long Identifier,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,,The length of the parameter _RecurringTaskHandlerAbsolutePath is 33.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,ScheduleCallbackAsync,The length of the statement  "			Task<WebResponse> responseTask = Task.Factory.FromAsync<WebResponse>(webRequest.BeginGetResponse' webRequest.EndGetResponse' webRequest); " is 137.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,ScheduleCallbackAsync,The length of the statement  "			ThreadPool.RegisterWaitForSingleObject((responseTask as IAsyncResult).AsyncWaitHandle' TimeoutCallback' webRequest' webRequest.Timeout' true); " is 142.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,CancelCallbackAsync,The length of the statement  "			Task<WebResponse> responseTask = Task.Factory.FromAsync<WebResponse>(webRequest.BeginGetResponse' webRequest.EndGetResponse' webRequest); " is 137.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,CancelCallbackAsync,The length of the statement  "			ThreadPool.RegisterWaitForSingleObject((responseTask as IAsyncResult).AsyncWaitHandle' TimeoutCallback' webRequest' webRequest.Timeout' true); " is 142.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,ScheduleCallback,The length of the statement  "				throw new RevaleeRequestException(serviceBaseUri' callbackUri' new InvalidOperationException("Service did not return a valid tracking number.")); " is 145.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,BuildScheduleRequestUrl,The length of the statement  "			return string.Format(CultureInfo.InvariantCulture' "{0}://{1}/Schedule?CallbackTime={2:s}Z&CallbackUrl={3}"' serviceBaseUri.Scheme' serviceBaseUri.Authority' callbackUtcTime' PrepareCallbackUrl(callbackUri)); " is 208.
Long Statement,Revalee.Client,RevaleeRegistrar,C:\repos\SageAnalytic_Revalee\Revalee.Client\AsyncRevaleeRegistrar.cs,BuildCancelRequestUrl,The length of the statement  "			return string.Format(CultureInfo.InvariantCulture' "{0}://{1}/Cancel?CallbackId={2:D}&CallbackUrl={3}"' serviceBaseUri.Scheme' serviceBaseUri.Authority' callbackId' PrepareCallbackUrl(callbackUri)); " is 198.
Long Statement,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,TryCreate,The length of the statement  "						uri = new ServiceBaseUri(new UriBuilder(_DefaultServiceScheme' serviceHost' _DefaultHttpPortNumber).ToString()' UriKind.Absolute); " is 130.
Long Statement,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,TryCreate,The length of the statement  "								uri = new ServiceBaseUri(new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpPortNumber).ToString()' UriKind.Absolute); " is 126.
Long Statement,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,TryCreate,The length of the statement  "								uri = new ServiceBaseUri(new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpsPortNumber).ToString()' UriKind.Absolute); " is 127.
Long Statement,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,BuildSpecifiedServiceBase,The length of the statement  "					if (!proxyUri.IsAbsoluteUri || !(Uri.UriSchemeHttp.Equals(proxyUri.Scheme) || Uri.UriSchemeHttps.Equals(proxyUri.Scheme))) " is 122.
Long Statement,Revalee.Client.Configuration,UrlValidator,C:\repos\SageAnalytic_Revalee\Revalee.Client\Configuration\UrlValidatorAttribute.cs,Validate,The length of the statement  "					throw new ArgumentException(string.Format("The URL attribute only supports {0} and {1}."' Uri.UriSchemeHttp' Uri.UriSchemeHttps)); " is 130.
Long Statement,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,Create,The length of the statement  "					throw new InvalidOperationException(string.Format("The recurring task targeting \"{0}\" is not an absolute URL and no callbackBaseUri attribute was supplied."' url)); " is 166.
Long Statement,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,Create,The length of the statement  "					throw new InvalidOperationException(string.Format("The recurring task targeting \"{0}\" is not an absolute URL and it cannot be combined with the callbackBaseUri attribute of \"{1}\"."' url' _CallbackBaseUri)); " is 210.
Long Statement,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,CreateTaskIdentifier,The length of the statement  "			string compoundKey = string.Format(CultureInfo.InvariantCulture' keyFormat' (int)periodicity' hourOffset' minuteOffset' url); " is 125.
Long Statement,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AnalyzeRequest,The length of the statement  "							if (long.TryParse(absolutePath.Substring(taskParameterDelimiterIndex + 1)' NumberStyles.None' CultureInfo.InvariantCulture' out analysis.Occurrence)) " is 149.
Long Statement,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AnalyzeRequest,The length of the statement  "								analysis.TaskIdentifier = absolutePath.Substring(parameterStartingIndex' taskParameterDelimiterIndex - parameterStartingIndex); " is 127.
Long Statement,Revalee.Client.RecurringTasks,RecurringTaskModule,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\RecurringTaskModule.cs,BuildCallbackDetails,The length of the statement  "			return new RecurringTaskCallbackDetails(request.Form["CallbackId"]' request.Form["CallbackTime"]' request.Form["CurrentServiceTime"]); " is 134.
Long Statement,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,TryParse,The length of the statement  "			decodedCipher = new AuthorizationCipher() { Source = source' Version = version' Nonce = nonce' Cryptogram = cryptogram }; " is 121.
Long Statement,Revalee.Client.Validation,RequestValidator,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\RequestValidator.cs,Validate,The length of the statement  "			if (!AuthorizationCipher.TryParse(authorizationHeaderValue' out incomingCipher) || incomingCipher.Source != AuthorizationCipher.CipherSource.Server) " is 148.
Long Statement,Revalee.Client.Validation,RequestValidator,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\RequestValidator.cs,RemoveDefaultPortFromOriginalString,The length of the statement  "					canonicalizedUriString = canonicalizedUriString.Substring(0' portDelimiterIndex) + canonicalizedUriString.Substring(portDelimiterIndex + ":80".Length); " is 151.
Long Statement,Revalee.Client.Validation,RequestValidator,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\RequestValidator.cs,RemoveDefaultPortFromOriginalString,The length of the statement  "					canonicalizedUriString = canonicalizedUriString.Substring(0' portDelimiterIndex) + canonicalizedUriString.Substring(portDelimiterIndex + ":443".Length); " is 152.
Complex Conditional,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,TryCreate,The conditional expression  "proxyUri != null  						&& proxyUri.HostNameType != UriHostNameType.Unknown  						&& proxyUri.IsAbsoluteUri  						&& (Uri.UriSchemeHttp.Equals(proxyUri.Scheme) || Uri.UriSchemeHttps.Equals(proxyUri.Scheme))"  is complex.
Complex Conditional,Revalee.Client.RecurringTasks,RecurringTaskModule,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\RecurringTaskModule.cs,context_BeginRequest,The conditional expression  "application != null && application.Context != null && application.Request != null && _Manifest != null"  is complex.
Empty Catch Block,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The method has an empty catch block.
Empty Catch Block,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The method has an empty catch block.
Empty Catch Block,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The method has an empty catch block.
Empty Catch Block,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The method has an empty catch block.
Magic Number,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,TryCreate,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(serviceHost))  			{  				if (serviceHost.IndexOfAny(new char[] { ':'' '/' }' 0) < 0)  				{  					if (Uri.CheckHostName(serviceHost) != UriHostNameType.Unknown)  					{  						uri = new ServiceBaseUri(new UriBuilder(_DefaultServiceScheme' serviceHost' _DefaultHttpPortNumber).ToString()' UriKind.Absolute);  						return true;  					}  				}  				else  				{  					Uri proxyUri = null;    					if (serviceHost.IndexOf(Uri.SchemeDelimiter' StringComparison.OrdinalIgnoreCase) < 0)  					{  						Uri.TryCreate(string.Concat(_DefaultServiceScheme' Uri.SchemeDelimiter' serviceHost)' UriKind.Absolute' out proxyUri);  					}  					else  					{  						Uri.TryCreate(serviceHost' UriKind.Absolute' out proxyUri);  					}    					if (proxyUri != null  						&& proxyUri.HostNameType != UriHostNameType.Unknown  						&& proxyUri.IsAbsoluteUri  						&& (Uri.UriSchemeHttp.Equals(proxyUri.Scheme) || Uri.UriSchemeHttps.Equals(proxyUri.Scheme)))  					{  						if (proxyUri.IsDefaultPort)  						{  							if (Uri.UriSchemeHttp.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  								&& serviceHost.LastIndexOf(":80"' StringComparison.Ordinal) < (serviceHost.Length - 3))  							{  								// Incorrect default port  								uri = new ServiceBaseUri(new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpPortNumber).ToString()' UriKind.Absolute);  								return true;  							}  							else if (Uri.UriSchemeHttps.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  								&& serviceHost.LastIndexOf(":443"' StringComparison.Ordinal) < (serviceHost.Length - 4))  							{  								// Incorrect default port  								uri = new ServiceBaseUri(new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpsPortNumber).ToString()' UriKind.Absolute);  								return true;  							}  						}  						else  						{  							uri = new ServiceBaseUri(proxyUri.ToString()' UriKind.Absolute);  							return true;  						}  					}  				}  			}
Magic Number,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,TryCreate,The following statement contains a magic number: if (!string.IsNullOrWhiteSpace(serviceHost))  			{  				if (serviceHost.IndexOfAny(new char[] { ':'' '/' }' 0) < 0)  				{  					if (Uri.CheckHostName(serviceHost) != UriHostNameType.Unknown)  					{  						uri = new ServiceBaseUri(new UriBuilder(_DefaultServiceScheme' serviceHost' _DefaultHttpPortNumber).ToString()' UriKind.Absolute);  						return true;  					}  				}  				else  				{  					Uri proxyUri = null;    					if (serviceHost.IndexOf(Uri.SchemeDelimiter' StringComparison.OrdinalIgnoreCase) < 0)  					{  						Uri.TryCreate(string.Concat(_DefaultServiceScheme' Uri.SchemeDelimiter' serviceHost)' UriKind.Absolute' out proxyUri);  					}  					else  					{  						Uri.TryCreate(serviceHost' UriKind.Absolute' out proxyUri);  					}    					if (proxyUri != null  						&& proxyUri.HostNameType != UriHostNameType.Unknown  						&& proxyUri.IsAbsoluteUri  						&& (Uri.UriSchemeHttp.Equals(proxyUri.Scheme) || Uri.UriSchemeHttps.Equals(proxyUri.Scheme)))  					{  						if (proxyUri.IsDefaultPort)  						{  							if (Uri.UriSchemeHttp.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  								&& serviceHost.LastIndexOf(":80"' StringComparison.Ordinal) < (serviceHost.Length - 3))  							{  								// Incorrect default port  								uri = new ServiceBaseUri(new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpPortNumber).ToString()' UriKind.Absolute);  								return true;  							}  							else if (Uri.UriSchemeHttps.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  								&& serviceHost.LastIndexOf(":443"' StringComparison.Ordinal) < (serviceHost.Length - 4))  							{  								// Incorrect default port  								uri = new ServiceBaseUri(new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpsPortNumber).ToString()' UriKind.Absolute);  								return true;  							}  						}  						else  						{  							uri = new ServiceBaseUri(proxyUri.ToString()' UriKind.Absolute);  							return true;  						}  					}  				}  			}
Magic Number,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,BuildSpecifiedServiceBase,The following statement contains a magic number: if (serviceHost.IndexOfAny(new char[] { ':'' '/' }' 0) < 0)  			{  				if (Uri.CheckHostName(serviceHost) == UriHostNameType.Unknown)  				{  					throw new ArgumentException("Invalid host name specified for service host."' "serviceHost");  				}    				return (new UriBuilder(_DefaultServiceScheme' serviceHost' _DefaultHttpPortNumber)).ToString();  			}  			else  			{  				try  				{  					Uri proxyUri;    					if (serviceHost.IndexOf(Uri.SchemeDelimiter' StringComparison.OrdinalIgnoreCase) < 0)  					{  						proxyUri = new Uri(string.Concat(_DefaultServiceScheme' Uri.SchemeDelimiter' serviceHost)' UriKind.Absolute);  					}  					else  					{  						proxyUri = new Uri(serviceHost' UriKind.Absolute);  					}    					if (proxyUri.HostNameType == UriHostNameType.Unknown)  					{  						throw new ArgumentException("Invalid host name specified for service host."' "serviceHost");  					}    					if (!proxyUri.IsAbsoluteUri || !(Uri.UriSchemeHttp.Equals(proxyUri.Scheme) || Uri.UriSchemeHttps.Equals(proxyUri.Scheme)))  					{  						throw new ArgumentException("Invalid scheme specified for service host."' "serviceHost");  					}    					if (proxyUri.IsDefaultPort)  					{  						if (Uri.UriSchemeHttp.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  							&& serviceHost.LastIndexOf(":80"' StringComparison.Ordinal) < (serviceHost.Length - 3))  						{  							// Incorrect default port  							return (new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpPortNumber)).ToString();  						}  						else if (Uri.UriSchemeHttps.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  							&& serviceHost.LastIndexOf(":443"' StringComparison.Ordinal) < (serviceHost.Length - 4))  						{  							// Incorrect default port  							return (new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpsPortNumber)).ToString();  						}  					}    					return proxyUri.ToString();  				}  				catch (UriFormatException ufex)  				{  					throw new ArgumentException("Invalid format specified for service host."' "serviceHost"' ufex);  				}  			}
Magic Number,Revalee.Client,ServiceBaseUri,C:\repos\SageAnalytic_Revalee\Revalee.Client\ServiceBaseUri.cs,BuildSpecifiedServiceBase,The following statement contains a magic number: if (serviceHost.IndexOfAny(new char[] { ':'' '/' }' 0) < 0)  			{  				if (Uri.CheckHostName(serviceHost) == UriHostNameType.Unknown)  				{  					throw new ArgumentException("Invalid host name specified for service host."' "serviceHost");  				}    				return (new UriBuilder(_DefaultServiceScheme' serviceHost' _DefaultHttpPortNumber)).ToString();  			}  			else  			{  				try  				{  					Uri proxyUri;    					if (serviceHost.IndexOf(Uri.SchemeDelimiter' StringComparison.OrdinalIgnoreCase) < 0)  					{  						proxyUri = new Uri(string.Concat(_DefaultServiceScheme' Uri.SchemeDelimiter' serviceHost)' UriKind.Absolute);  					}  					else  					{  						proxyUri = new Uri(serviceHost' UriKind.Absolute);  					}    					if (proxyUri.HostNameType == UriHostNameType.Unknown)  					{  						throw new ArgumentException("Invalid host name specified for service host."' "serviceHost");  					}    					if (!proxyUri.IsAbsoluteUri || !(Uri.UriSchemeHttp.Equals(proxyUri.Scheme) || Uri.UriSchemeHttps.Equals(proxyUri.Scheme)))  					{  						throw new ArgumentException("Invalid scheme specified for service host."' "serviceHost");  					}    					if (proxyUri.IsDefaultPort)  					{  						if (Uri.UriSchemeHttp.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  							&& serviceHost.LastIndexOf(":80"' StringComparison.Ordinal) < (serviceHost.Length - 3))  						{  							// Incorrect default port  							return (new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpPortNumber)).ToString();  						}  						else if (Uri.UriSchemeHttps.Equals(proxyUri.Scheme' StringComparison.OrdinalIgnoreCase)  							&& serviceHost.LastIndexOf(":443"' StringComparison.Ordinal) < (serviceHost.Length - 4))  						{  							// Incorrect default port  							return (new UriBuilder(proxyUri.Scheme' proxyUri.Host' _DefaultHttpsPortNumber)).ToString();  						}  					}    					return proxyUri.ToString();  				}  				catch (UriFormatException ufex)  				{  					throw new ArgumentException("Invalid format specified for service host."' "serviceHost"' ufex);  				}  			}
Magic Number,Revalee.Client.RecurringTasks,RandomWaitScheduler,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\ImmutableTaskCollection.cs,Wait,The following statement contains a magic number: Thread.Sleep(_RandomNumberGenerator.Next(15));
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: char[] charArray = new char[bytes.Length * 2];
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskBuilder,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskBuilder.cs,ConvertByteArrayToHexadecimalString,The following statement contains a magic number: for (int index = 0; index < bytes.Length; index++)  			{  				byteValue = bytes[index] >> 4;  				charArray[index * 2] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  				byteValue = bytes[index] & 0xF;  				charArray[index * 2 + 1] = (char)(55 + byteValue + (((byteValue - 10) >> 31) & -7));  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,Start,The following statement contains a magic number: if (this.CallbackBaseUri != null)  			{  				if (!this.IsActive)  				{  					if (_HeartbeatTimer == null)  					{  						// Schedule a heartbeat on a timer  						lock (_TaskCollection)  						{  							if (_HeartbeatTimer == null)  							{  								_HeartbeatTimer = new Timer(delegate(object self)  								{  									try  									{  										if (this.IsActive)  										{  											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													_HeartbeatTimer.Dispose();  													_HeartbeatTimer = null;  												}  											}  										}  										else  										{  											if (_HeartbeatTimer == null || AppDomain.CurrentDomain.IsFinalizingForUnload())  											{  												return;  											}    											int failureCount = Interlocked.Increment(ref _HeartbeatCount) - 1;    											lock (_TaskCollection)  											{  												if (_HeartbeatTimer != null)  												{  													if (_HeartbeatCount > 20)  													{  														// Leave current timer setting in-place  													}  													else if (_HeartbeatCount > 13)  													{  														_HeartbeatTimer.Change(3600000' 14400000);  													}  													else if (_HeartbeatCount > 3)  													{  														_HeartbeatTimer.Change(60000' 60000);  													}  													else if (_HeartbeatCount > 2)  													{  														_HeartbeatTimer.Change(49750' 60000);  													}  												}  											}    											if (failureCount > 0)  											{  												OnActivationFailure(failureCount);  											}    											try  											{  												RevaleeRegistrar.ScheduleCallback(_ClockSource.Now' this.GenerateHeartbeatCallbackUri());  											}  											catch (RevaleeRequestException)  											{  												// Ignore network errors and retry based on the timer schedule  											}  										}  									}  									catch (AppDomainUnloadedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ObjectDisposedException)  									{  										// Ignore errors when already shutting down  									}  									catch (ThreadAbortException)  									{  										// Ignore errors when already shutting down  									}  								}' null' 250' 10000);  							}  						}  					}  					else  					{  						// Schedule an on-demand heartbeat  						this.Schedule(this.PrepareHeartbeat());  					}  				}  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AddDailyTask,The following statement contains a magic number: if (hour < 0 || hour > 23)  			{  				throw new ArgumentOutOfRangeException("hour");  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AddDailyTask,The following statement contains a magic number: if (minute < 0 || minute > 59)  			{  				throw new ArgumentOutOfRangeException("minute");  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AddHourlyTask,The following statement contains a magic number: if (minute < 0 || minute > 59)  			{  				throw new ArgumentOutOfRangeException("minute");  			}
Magic Number,Revalee.Client.RecurringTasks,TaskManifest,C:\repos\SageAnalytic_Revalee\Revalee.Client\RecurringTasks\TaskManifest.cs,AnalyzeRequest,The following statement contains a magic number: if (absolutePath.StartsWith(_RecurringTaskHandlerAbsolutePath' StringComparison.Ordinal))  			{  				var analysis = new RequestAnalysis();  				analysis.IsRecurringTask = true;  				int parameterStartingIndex = _RecurringTaskHandlerAbsolutePath.Length;    				if (absolutePath.Length > parameterStartingIndex)  				{  					// AbsolutePath format:  					// task       -> ~/__RevaleeRecurring.axd/{identifier}/{occurrence}  					// heartbeat  -> ~/__RevaleeRecurring.axd/{heartbeatId}    					int taskParameterDelimiterIndex = absolutePath.IndexOf('/'' parameterStartingIndex);    					if (taskParameterDelimiterIndex < 0)  					{  						// no task parameter delimiter    						if ((absolutePath.Length - parameterStartingIndex) == 32)  						{  							Guid heartbeatId;    							if (Guid.TryParseExact(absolutePath.Substring(parameterStartingIndex)' "N"' out heartbeatId))  							{  								if (heartbeatId.Equals(_Id))  								{  									this.OnActivate();  								}  							}  						}  					}  					else  					{  						// task parameter delimiter present    						if ((absolutePath.Length - taskParameterDelimiterIndex) > 1)  						{  							if (long.TryParse(absolutePath.Substring(taskParameterDelimiterIndex + 1)' NumberStyles.None' CultureInfo.InvariantCulture' out analysis.Occurrence))  							{  								analysis.TaskIdentifier = absolutePath.Substring(parameterStartingIndex' taskParameterDelimiterIndex - parameterStartingIndex);  							}  						}  					}  				}    				// If the TaskIdentifier is not set the default will be string.Empty' which will be discarded by the HttpModule    				return analysis;  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,TryParse,The following statement contains a magic number: if (cipherValues.Count < 3)  			{  				decodedCipher = null;  				return false;  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ToString,The following statement contains a magic number: var cipher = new StringBuilder(128);
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,ConvertHexadecimalToByteArray,The following statement contains a magic number: for (int byteIndex = 0; byteIndex < byteLength; byteIndex++)  			{  				unchecked  				{  					int digitIndex = byteIndex << 1;  					uint hexDigit = value[digitIndex];  					uint highNibble = hexDigit - '0';    					if (highNibble > 9)  					{  						highNibble = (hexDigit & ~0x20u) - 'A';    						if (highNibble > 5)  						{  							return null;  						}    						highNibble += 10;  					}    					hexDigit = value[++digitIndex];  					uint lowNibble = hexDigit - '0';    					if (lowNibble > 9)  					{  						lowNibble = (hexDigit & ~0x20u) - 'A';    						if (lowNibble > 5)  						{  							return null;  						}    						lowNibble += 10;  					}    					byteArray[byteIndex] = (byte)((highNibble << 4) | lowNibble);  				}  			}
Magic Number,Revalee.Client.Validation,AuthorizationCipher,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\AuthorizationCipher.cs,AppendHexadecimal,The following statement contains a magic number: for (int i = 0; i < value.Length; i++)  			{  				int byteValue = value[i];  				output.Append(hexDigits[byteValue >> 4]);  				output.Append(hexDigits[byteValue & 0xF]);  			}
Magic Number,Revalee.Client.Validation,RequestValidator,C:\repos\SageAnalytic_Revalee\Revalee.Client\Validation\RequestValidator.cs,GenerateNonce,The following statement contains a magic number: byte[] nonceBytes = new byte[16];
