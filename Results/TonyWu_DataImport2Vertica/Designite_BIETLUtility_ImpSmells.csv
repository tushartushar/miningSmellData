Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BIETLUtility.Common,BindingHelper,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\BindingHelper.cs,GetMemberName,Cyclomatic complexity of the method is 12
Complex Method,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,Cyclomatic complexity of the method is 15
Complex Method,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,Cyclomatic complexity of the method is 15
Complex Method,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyVerticaToDiskAsync,Cyclomatic complexity of the method is 12
Complex Method,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,WriteLine,Cyclomatic complexity of the method is 9
Complex Method,BIETLUtility.StudentActivityProgressDelete,StudentActivityDelete,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\StudentActivityProgressDelete\StudentActivityDelete.cs,LoadDeletedStudentActivityIds,Cyclomatic complexity of the method is 9
Long Statement,BIETLUtility.Configuration,Transformation,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformation.cs,Load,The length of the statement  "	if (xmlDoc.Root.Element ("PrimaryKey") != null && !string.IsNullOrWhiteSpace (xmlDoc.Root.Element ("PrimaryKey").Value)) { " is 122.
Long Statement,BIETLUtility.Configuration,Transformation,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformation.cs,Load,The length of the statement  "	//    con.ConnectionType = item.Element("ConnectionType").Value == ConnectionType.MSSQLSERVER.ToString() ? ConnectionType.MSSQLSERVER : ConnectionType.Vertica; " is 159.
Long Statement,BIETLUtility.Configuration,Transformation,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformation.cs,Load,The length of the statement  "	this.InputStep.Connection = Transformations.Instance ().GetConnection (xmlDoc.Root.Element ("InputSetting").Element ("Connection").Value); " is 138.
Long Statement,BIETLUtility.Configuration,Transformation,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformation.cs,Load,The length of the statement  "	this.OutputStep.Connection = Transformations.Instance ().GetConnection (xmlDoc.Root.Element ("OutputSetting").Element ("Connection").Value); " is 140.
Long Statement,BIETLUtility.Configuration,Transformation,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformation.cs,Save,The length of the statement  "	xmlDoc.Root.Element ("InputSetting").Add (new XElement ("SQLStatement"' new XCData (this.InputStep.SQLStatement ?? string.Empty))); " is 131.
Long Statement,BIETLUtility.Configuration,Transformation,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformation.cs,Save,The length of the statement  "	xmlDoc.Root.Element ("OutputSetting").Add (new XElement ("SQLStatement"' new XCData (this.OutputStep.SQLStatement ?? string.Empty))); " is 133.
Long Statement,BIETLUtility.Configuration,Transformations,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformations.cs,PopulateTransforms,The length of the statement  "	string folder = System.Reflection.Assembly.GetExecutingAssembly ().CodeBase.Remove (System.Reflection.Assembly.GetExecutingAssembly ().CodeBase.LastIndexOf ("/")); " is 163.
Long Statement,BIETLUtility.Configuration,Transformations,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Configuration\Transformations.cs,Save,The length of the statement  "	Xdoc.Root.Element ("SmtpServer").Element ("UsePickupDirectoryLocation").Value = this.SmtpServer.UsePickupDirectoryLocation.ToString (); " is 135.
Long Statement,BIETLUtility.Mail,SmtpClientAdaptor,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Mail\SmtpClientAdapter.cs,ExceptionNotify,The length of the statement  "		message.From = new MailAddress (string.IsNullOrEmpty (_smtpServer.ExceptionFrom) ? "BIEtlException@ef.com" : _smtpServer.ExceptionFrom); " is 136.
Long Statement,BIETLUtility.Mail,SmtpServer,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Mail\SmtpServer.cs,Validate,The length of the statement  "	return !string.IsNullOrEmpty (this.Server) && !string.IsNullOrEmpty (this.User) && !string.IsNullOrEmpty (this.Password) && !string.IsNullOrEmpty (this.PickupDirectoryLocation); " is 177.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,The length of the statement  "			this.LogMessage (LogType.Message' string.Format ("Min {0}:{1}' Max {0}: {2}"' this._transform.DeltaId' minDeltaID' maxDeltaID)); " is 128.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,The length of the statement  "			//string SQLCommand = (this._transform.InputStep.EnableSQL && this._transform.InputStep.SQLStatement.Length > 0) ? this._transform.InputStep.SQLStatement : "SELECT * FROM dbo.%01%02".Replace("%01"' this._transform.InputStep.TargetTable).Replace("%02"' (this._transform.OriginDeltasChecked && minDeltaID.Length > 0 && maxDeltaID.Length > 0) ? sqlBetween.Replace("%00"' this._transform.DeltaId).Replace("%01"' minDeltaID).Replace("%02"' maxDeltaID) : string.Empty); " is 463.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,The length of the statement  "										fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\"); " is 299.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,The length of the statement  "					this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter); " is 174.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVertica,The length of the statement  "				this.LogMessage (LogType.Message' string.Format ("Truncate table {0} in vertica!"' this._transform.OutputStep.TargetTable)); " is 124.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVertica,The length of the statement  "				VerticaCommand command = new VerticaCommand ("Truncate table " + this._transform.OutputStep.TargetTable + ";"' verticaConnection); " is 130.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVertica,The length of the statement  "				//VerticaCommand command = new VerticaCommand("CREATE TABLE PageVisit(Id int NOT NULL'Session_id varchar(400) NULL'Member_id bigint NULL'EFGuid varchar(400) NULL'ReferrerUrl varchar(4000) NULL'RequestUrl varchar(4000) NULL'PartnerTrackName varchar(512) NULL'VisitDate varchar(100) NULL'EntryTag varchar(200) NULL'MarketCode varchar(100) NULL'ServerName varchar(100) NULL'InsertDate varchar(100) NULL'VisitId varchar(100) NULL'IPAddress varchar(80) NULL'RequestUrlPageId varchar(10) NULL);"' verticaConnection); " is 510.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVertica,The length of the statement  "				VerticaCommand command = new VerticaCommand (string.Format ("Delete from {0} Where {1} >= '{2}';"' this._transform.OutputStep.TargetTable' this._transform.DeltaId' maxDeltaID)' verticaConnection); " is 196.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVertica,The length of the statement  "			string copy = "copy " + this._transform.OutputStep.TargetTable + " from stdin delimiter '" + this._delimiter + "' no commit"; " is 125.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The length of the statement  "			this.LogMessage (LogType.Debug' string.Format ("Min {0}:{1}' Max {0}: {2}"' this._transform.DeltaId' minDeltaID' maxDeltaID)); " is 126.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The length of the statement  "			//string SQLCommand = (this._transform.InputStep.EnableSQL && this._transform.InputStep.SQLStatement.Length > 0) ? this._transform.InputStep.SQLStatement : "SELECT * FROM dbo.%01%02".Replace("%01"' this._transform.InputStep.TargetTable).Replace("%02"' (this._transform.OriginDeltasChecked && minDeltaID.Length > 0 && maxDeltaID.Length > 0) ? sqlBetween.Replace("%00"' this._transform.DeltaId).Replace("%01"' minDeltaID).Replace("%02"' maxDeltaID) : string.Empty); " is 463.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The length of the statement  "										fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\"); " is 299.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The length of the statement  "					this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter); " is 174.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVerticaAsync,The length of the statement  "		this.LogMessage (LogType.Debug' string.Format ("verticaConnection.OpenAsync()' host:{0}' Database:{1}' table:{2}"' this._transform.OutputStep.Connection.Host' this._transform.OutputStep.Connection.Database' this._transform.OutputStep.TargetTable)); " is 248.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVerticaAsync,The length of the statement  "				this.LogMessage (LogType.Message' string.Format ("Truncate table {0} in vertica!"' this._transform.OutputStep.TargetTable)); " is 124.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVerticaAsync,The length of the statement  "				VerticaCommand command = new VerticaCommand ("Truncate table " + this._transform.OutputStep.TargetTable + ";"' verticaConnection); " is 130.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVerticaAsync,The length of the statement  "				//VerticaCommand command = new VerticaCommand("CREATE TABLE PageVisit(Id int NOT NULL'Session_id varchar(400) NULL'Member_id bigint NULL'EFGuid varchar(400) NULL'ReferrerUrl varchar(4000) NULL'RequestUrl varchar(4000) NULL'PartnerTrackName varchar(512) NULL'VisitDate varchar(100) NULL'EntryTag varchar(200) NULL'MarketCode varchar(100) NULL'ServerName varchar(100) NULL'InsertDate varchar(100) NULL'VisitId varchar(100) NULL'IPAddress varchar(80) NULL'RequestUrlPageId varchar(10) NULL);"' verticaConnection); " is 510.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVerticaAsync,The length of the statement  "				string cmdText = string.Format ("Delete from {0} Where {1} >= '{2}';"' this._transform.OutputStep.TargetTable' this._transform.DeltaId' maxDeltaID); " is 148.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyDiskToVerticaAsync,The length of the statement  "			string copy = "copy " + this._transform.OutputStep.TargetTable + " from stdin delimiter '" + this._delimiter + "' no commit"; " is 125.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyVerticaToDiskAsync,The length of the statement  "									fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\"); " is 299.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopyVerticaToDiskAsync,The length of the statement  "				this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter); " is 174.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,WriteLine,The length of the statement  "			string str = originStr.Replace (this._delimiter' this._pipeAsciiCode).Replace ("\\"' this._slashAsciiCode).Replace ("\n"' string.Empty).Replace ("\r"' string.Empty); " is 165.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,GetMinMaxFromVertica,The length of the statement  "			VerticaCommand command = new VerticaCommand (deltaSQL.Replace ("%00"' this._transform.DeltaId).Replace ("%01"' this._transform.DeltaId).Replace ("%02"' this._transform.OutputStep.TargetTable)' verticaConnection); " is 212.
Long Statement,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,GetTotolCount,The length of the statement  "			commandText = string.Format ("Select count(*) from {0} with (nolock) where {1} >= '{2}' "' this._transform.InputStep.TargetTable' this._transform.DeltaId' maxDeltaID); " is 167.
Long Statement,BIETLUtility.StudentActivityProgressDelete,StudentActivityDelete,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\StudentActivityProgressDelete\StudentActivityDelete.cs,SendExeptionMail,The length of the statement  "	new SmtpClientAdaptor (SmtpServer).ExceptionNotify ("Delete Student Activity Progress failed."' ex.Message + "\n" + ex.StackTrace' out outstring); " is 146.
Long Statement,BIETLUtility.StudentActivityProgressDelete,StudentActivityDelete,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\StudentActivityProgressDelete\StudentActivityDelete.cs,ExecuteDeletionOnVertica,The length of the statement  "			string commandText = string.Format ("Delete from {0} Where StudentActivityProgress_id IN ({1});"' this._vertivaConnection.TargetTable' string.Join ("'"' ids.IdList)); " is 166.
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Encode,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	htext = htext + (char)(str [i] + 10 - 1 * 2);  }  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Encode,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	htext = htext + (char)(str [i] + 10 - 1 * 2);  }  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Encode,The following statement contains a magic number: htext = htext + (char)(str [i] + 10 - 1 * 2);  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Encode,The following statement contains a magic number: htext = htext + (char)(str [i] + 10 - 1 * 2);  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Decode,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	dtext = dtext + (char)(str [i] - 10 + 1 * 2);  }  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Decode,The following statement contains a magic number: for (int i = 0; i < str.Length; i++) {  	dtext = dtext + (char)(str [i] - 10 + 1 * 2);  }  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Decode,The following statement contains a magic number: dtext = dtext + (char)(str [i] - 10 + 1 * 2);  
Magic Number,BIETLUtility.Common,EncryptionDecryption,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\Common\EncryptionDecryption.cs,Decode,The following statement contains a magic number: dtext = dtext + (char)(str [i] - 10 + 1 * 2);  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,The following statement contains a magic number: try {  	int recordBatchCounter = 0;  	int fileCounter = 0;  	int recordCounter = 0;  	int totalCounter = 0;  	int maxRecordCount = this._transform.MaxRecordCounter;  	if (this._transform.OriginDeltasChecked) {  		this.LogMessage (LogType.Message' "Get Min Max From Vertica...");  		GetMinMaxFromVertica (out minDeltaID' out maxDeltaID);  		this.LogMessage (LogType.Message' string.Format ("Min {0}:{1}' Max {0}: {2}"' this._transform.DeltaId' minDeltaID' maxDeltaID));  	}  	this.LogMessage (LogType.Message' "Create working folder...");  	Directory.CreateDirectory (this._transform.WorkingFolder);  	this.LogMessage (LogType.Message' "Get total count...");  	totalCounter = 100000;  	// this.GetTotolCount();  	StreamWriter streamWriter = new StreamWriter (fileName);  	using (SqlConnection connection = new SqlConnection (this._transform.InputStep.Connection.ConnectionString)) {  		connection.Open ();  		//string SQLCommand = (this._transform.InputStep.EnableSQL && this._transform.InputStep.SQLStatement.Length > 0) ? this._transform.InputStep.SQLStatement : "SELECT * FROM dbo.%01%02".Replace("%01"' this._transform.InputStep.TargetTable).Replace("%02"' (this._transform.OriginDeltasChecked && minDeltaID.Length > 0 && maxDeltaID.Length > 0) ? sqlBetween.Replace("%00"' this._transform.DeltaId).Replace("%01"' minDeltaID).Replace("%02"' maxDeltaID) : string.Empty);  		string SQLCommand = this.GetSqlCommand ();  		this.LogMessage (LogType.Debug' "CommandText:" + SQLCommand);  		using (SqlCommand command = new SqlCommand (SQLCommand' connection)) {  			using (SqlDataReader reader = command.ExecuteReader (CommandBehavior.SequentialAccess)) {  				if (reader.Read ()) {  					if (!(reader.IsDBNull (0))) {  						do {  							if (recordBatchCounter < maxRecordCount) {  								if (recordBatchCounter.Equals (0) && (fileCounter > 0)) {  									double percent = (double)recordCounter / totalCounter;  									this.LogMessage (LogType.Debug' "Copy SQL Stream to Disk..."' percent);  									fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\");  									streamWriter = new StreamWriter (fileName);  								}  								this.WriteLine (reader' streamWriter);  								recordBatchCounter = recordBatchCounter + 1;  								//stream = new MemoryStream(byteArray);  								recordCounter++;  							}  							else if (recordBatchCounter == maxRecordCount) {  								this.WriteLine (reader' streamWriter);  								streamWriter.Flush ();  								streamWriter.Close ();  								streamWriter.Dispose ();  								recordBatchCounter = 0;  								fileCounter = fileCounter + 1;  								recordCounter++;  								double percent = (double)recordCounter / totalCounter;  								this.LogMessage (LogType.Debug' "Copy Disk to Vertica..."' percent);  								CopyDiskToVertica ();  							}  						}  						while (reader.Read ());  						streamWriter.Flush ();  						streamWriter.Close ();  						streamWriter.Dispose ();  						CopyDiskToVertica ();  					}  				}  				this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter);  			}  		}  	}  }  catch (Exception e) {  	this.LogMessage (LogType.Error' e.Message);  	throw;  }  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDisk,The following statement contains a magic number: totalCounter = 100000;  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The following statement contains a magic number: try {  	int recordBatchCounter = 0;  	int fileCounter = 0;  	int recordCounter = 0;  	int totalCounter = 0;  	int maxRecordCount = this._transform.MaxRecordCounter;  	if (this._transform.OriginDeltasChecked) {  		this.LogMessage (LogType.Message' "Get Min Max From Vertica...");  		GetMinMaxFromVertica (out minDeltaID' out maxDeltaID);  		this.LogMessage (LogType.Debug' string.Format ("Min {0}:{1}' Max {0}: {2}"' this._transform.DeltaId' minDeltaID' maxDeltaID));  	}  	this.LogMessage (LogType.Message' "Create working folder...");  	Directory.CreateDirectory (this._transform.WorkingFolder);  	this.LogMessage (LogType.Message' "Get total count...");  	totalCounter = this.GetTotolCount ();  	StreamWriter streamWriter = new StreamWriter (fileName);  	using (SqlConnection connection = new SqlConnection (this._transform.InputStep.Connection.ConnectionString)) {  		await connection.OpenAsync ();  		//string SQLCommand = (this._transform.InputStep.EnableSQL && this._transform.InputStep.SQLStatement.Length > 0) ? this._transform.InputStep.SQLStatement : "SELECT * FROM dbo.%01%02".Replace("%01"' this._transform.InputStep.TargetTable).Replace("%02"' (this._transform.OriginDeltasChecked && minDeltaID.Length > 0 && maxDeltaID.Length > 0) ? sqlBetween.Replace("%00"' this._transform.DeltaId).Replace("%01"' minDeltaID).Replace("%02"' maxDeltaID) : string.Empty);  		string SQLCommand = this.GetSqlCommand ();  		this.LogMessage (LogType.Debug' "CommandText:" + SQLCommand);  		using (SqlCommand command = new SqlCommand (SQLCommand' connection)) {  			command.CommandTimeout = 60;  			using (SqlDataReader reader = await command.ExecuteReaderAsync (CommandBehavior.SequentialAccess)) {  				if (await reader.ReadAsync ()) {  					if (!(await reader.IsDBNullAsync (0))) {  						do {  							if (recordBatchCounter < maxRecordCount) {  								if (recordBatchCounter.Equals (0) && (fileCounter > 0)) {  									double percent = (double)recordCounter / totalCounter;  									this.LogMessage (LogType.Debug' "Copy SQL Stream to Disk..."' percent);  									fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\");  									streamWriter = new StreamWriter (fileName);  								}  								this.WriteLine (reader' streamWriter);  								recordBatchCounter = recordBatchCounter + 1;  								//stream = new MemoryStream(byteArray);  								recordCounter++;  							}  							else if (recordBatchCounter == maxRecordCount) {  								this.WriteLine (reader' streamWriter);  								streamWriter.Flush ();  								streamWriter.Close ();  								streamWriter.Dispose ();  								recordBatchCounter = 0;  								fileCounter = fileCounter + 1;  								recordCounter++;  								await CopyDiskToVerticaAsync ();  								double percent = (double)recordCounter / totalCounter;  								this.LogMessage (LogType.Debug' "Copy Disk to Vertica..."' percent);  							}  						}  						while (reader.Read ());  						streamWriter.Flush ();  						streamWriter.Close ();  						streamWriter.Dispose ();  						await CopyDiskToVerticaAsync ();  					}  				}  				this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter);  			}  		}  	}  }  catch (Exception e) {  	this.LogMessage (LogType.Error' e.Message);  	throw;  }  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The following statement contains a magic number: using (SqlConnection connection = new SqlConnection (this._transform.InputStep.Connection.ConnectionString)) {  	await connection.OpenAsync ();  	//string SQLCommand = (this._transform.InputStep.EnableSQL && this._transform.InputStep.SQLStatement.Length > 0) ? this._transform.InputStep.SQLStatement : "SELECT * FROM dbo.%01%02".Replace("%01"' this._transform.InputStep.TargetTable).Replace("%02"' (this._transform.OriginDeltasChecked && minDeltaID.Length > 0 && maxDeltaID.Length > 0) ? sqlBetween.Replace("%00"' this._transform.DeltaId).Replace("%01"' minDeltaID).Replace("%02"' maxDeltaID) : string.Empty);  	string SQLCommand = this.GetSqlCommand ();  	this.LogMessage (LogType.Debug' "CommandText:" + SQLCommand);  	using (SqlCommand command = new SqlCommand (SQLCommand' connection)) {  		command.CommandTimeout = 60;  		using (SqlDataReader reader = await command.ExecuteReaderAsync (CommandBehavior.SequentialAccess)) {  			if (await reader.ReadAsync ()) {  				if (!(await reader.IsDBNullAsync (0))) {  					do {  						if (recordBatchCounter < maxRecordCount) {  							if (recordBatchCounter.Equals (0) && (fileCounter > 0)) {  								double percent = (double)recordCounter / totalCounter;  								this.LogMessage (LogType.Debug' "Copy SQL Stream to Disk..."' percent);  								fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\");  								streamWriter = new StreamWriter (fileName);  							}  							this.WriteLine (reader' streamWriter);  							recordBatchCounter = recordBatchCounter + 1;  							//stream = new MemoryStream(byteArray);  							recordCounter++;  						}  						else if (recordBatchCounter == maxRecordCount) {  							this.WriteLine (reader' streamWriter);  							streamWriter.Flush ();  							streamWriter.Close ();  							streamWriter.Dispose ();  							recordBatchCounter = 0;  							fileCounter = fileCounter + 1;  							recordCounter++;  							await CopyDiskToVerticaAsync ();  							double percent = (double)recordCounter / totalCounter;  							this.LogMessage (LogType.Debug' "Copy Disk to Vertica..."' percent);  						}  					}  					while (reader.Read ());  					streamWriter.Flush ();  					streamWriter.Close ();  					streamWriter.Dispose ();  					await CopyDiskToVerticaAsync ();  				}  			}  			this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter);  		}  	}  }  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The following statement contains a magic number: using (SqlCommand command = new SqlCommand (SQLCommand' connection)) {  	command.CommandTimeout = 60;  	using (SqlDataReader reader = await command.ExecuteReaderAsync (CommandBehavior.SequentialAccess)) {  		if (await reader.ReadAsync ()) {  			if (!(await reader.IsDBNullAsync (0))) {  				do {  					if (recordBatchCounter < maxRecordCount) {  						if (recordBatchCounter.Equals (0) && (fileCounter > 0)) {  							double percent = (double)recordCounter / totalCounter;  							this.LogMessage (LogType.Debug' "Copy SQL Stream to Disk..."' percent);  							fileName = @"%05%00_%01.txt".Replace ("%00"' this._transform.InputStep.TargetTable).Replace ("%01"' (fileCounter.ToString () + DateTime.Now.ToString ("MMddyyyy_hh_mm_ss_fff_tt"))).Replace ("%05"' _transform.WorkingFolder.EndsWith ("\\") ? _transform.WorkingFolder : _transform.WorkingFolder + "\\");  							streamWriter = new StreamWriter (fileName);  						}  						this.WriteLine (reader' streamWriter);  						recordBatchCounter = recordBatchCounter + 1;  						//stream = new MemoryStream(byteArray);  						recordCounter++;  					}  					else if (recordBatchCounter == maxRecordCount) {  						this.WriteLine (reader' streamWriter);  						streamWriter.Flush ();  						streamWriter.Close ();  						streamWriter.Dispose ();  						recordBatchCounter = 0;  						fileCounter = fileCounter + 1;  						recordCounter++;  						await CopyDiskToVerticaAsync ();  						double percent = (double)recordCounter / totalCounter;  						this.LogMessage (LogType.Debug' "Copy Disk to Vertica..."' percent);  					}  				}  				while (reader.Read ());  				streamWriter.Flush ();  				streamWriter.Close ();  				streamWriter.Dispose ();  				await CopyDiskToVerticaAsync ();  			}  		}  		this.LogMessage (LogType.Message' string.Format ("Complete transform {0}' Total records {1}"' this._transform.Name' recordCounter.ToString ())' recordCounter / totalCounter);  	}  }  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,CopySQLStreamToDiskAsync,The following statement contains a magic number: command.CommandTimeout = 60;  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,GetTotolCount,The following statement contains a magic number: using (SqlConnection connection = new SqlConnection (this._transform.InputStep.Connection.ConnectionString)) {  	connection.Open ();  	string commandText = string.Empty;  	if (this._transform.InputStep.EnableSQL) {  		//int index = this._transform.InputStep.SQLStatement.ToLower().IndexOf(" from ");  		//commandText = "Select count(*) " + this._transform.InputStep.SQLStatement.Remove(0' index);  		return 100000;  	}  	else if (this._transform.OriginDeltasChecked) {  		commandText = string.Format ("Select count(*) from {0} with (nolock) where {1} >= '{2}' "' this._transform.InputStep.TargetTable' this._transform.DeltaId' maxDeltaID);  		this.LogMessage (LogType.Debug' "CommandText:" + commandText);  	}  	else {  		commandText = string.Format ("Select count(*) from {0} with (nolock)"' this._transform.InputStep.TargetTable);  		this.LogMessage (LogType.Debug' "CommandText:" + commandText);  	}  	SqlCommand command = new SqlCommand (commandText' connection);  	SqlDataReader reader = command.ExecuteReader ();  	while (reader.Read ()) {  		total = reader.GetInt32 (0);  	}  	connection.Close ();  }  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,GetTotolCount,The following statement contains a magic number: if (this._transform.InputStep.EnableSQL) {  	//int index = this._transform.InputStep.SQLStatement.ToLower().IndexOf(" from ");  	//commandText = "Select count(*) " + this._transform.InputStep.SQLStatement.Remove(0' index);  	return 100000;  }  else if (this._transform.OriginDeltasChecked) {  	commandText = string.Format ("Select count(*) from {0} with (nolock) where {1} >= '{2}' "' this._transform.InputStep.TargetTable' this._transform.DeltaId' maxDeltaID);  	this.LogMessage (LogType.Debug' "CommandText:" + commandText);  }  else {  	commandText = string.Format ("Select count(*) from {0} with (nolock)"' this._transform.InputStep.TargetTable);  	this.LogMessage (LogType.Debug' "CommandText:" + commandText);  }  
Magic Number,BIETLUtility,SqlStreamClient,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\SqlStreamClient.cs,GetTotolCount,The following statement contains a magic number: return 100000;  
Magic Number,BIETLUtility.StudentActivityProgressDelete,StudentActivityDelete,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\StudentActivityProgressDelete\StudentActivityDelete.cs,LoadDeletedStudentActivityIds,The following statement contains a magic number: using (SqlConnection connection = new SqlConnection (this._sqlconnectionstring)) {  	connection.Open ();  	using (SqlCommand command = new SqlCommand (commandText' connection)) {  		command.CommandTimeout = 120;  		command.Parameters.Add (new SqlParameter () {  			ParameterName = "LastDeleteDate"'  			DbType = System.Data.DbType.DateTime'  			Value = startTime  		});  		using (SqlDataReader reader = command.ExecuteReader ()) {  			while (reader.Read ()) {  				DateTime time = reader.GetDateTime (0);  				ids.IdList.Add (reader.GetInt64 (1));  				if (time > ids.MaxInsertDate)  					ids.MaxInsertDate = time;  			}  		}  	}  }  
Magic Number,BIETLUtility.StudentActivityProgressDelete,StudentActivityDelete,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\StudentActivityProgressDelete\StudentActivityDelete.cs,LoadDeletedStudentActivityIds,The following statement contains a magic number: using (SqlCommand command = new SqlCommand (commandText' connection)) {  	command.CommandTimeout = 120;  	command.Parameters.Add (new SqlParameter () {  		ParameterName = "LastDeleteDate"'  		DbType = System.Data.DbType.DateTime'  		Value = startTime  	});  	using (SqlDataReader reader = command.ExecuteReader ()) {  		while (reader.Read ()) {  			DateTime time = reader.GetDateTime (0);  			ids.IdList.Add (reader.GetInt64 (1));  			if (time > ids.MaxInsertDate)  				ids.MaxInsertDate = time;  		}  	}  }  
Magic Number,BIETLUtility.StudentActivityProgressDelete,StudentActivityDelete,C:\repos\TonyWu_DataImport2Vertica\BIETLUtility\StudentActivityProgressDelete\StudentActivityDelete.cs,LoadDeletedStudentActivityIds,The following statement contains a magic number: command.CommandTimeout = 120;  
