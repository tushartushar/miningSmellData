Implementation smell,Namespace,Class,File,Method,Description
Long Method,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The method has 184 lines of code.
Long Method,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The method has 103 lines of code.
Long Method,ObscurCore.Tests.Cryptography.Ciphers.Stream,XSalsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\XSalsa20.cs,XSalsa20,The method has 128 lines of code.
Long Method,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The method has 147 lines of code.
Long Method,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The method has 142 lines of code.
Complex Method,ObscurCore.Tests.Packaging,Payload,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Payload.cs,DoMux,Cyclomatic complexity of the method is 9
Long Parameter List,ObscurCore.Tests.Cryptography,DiscreteVectorDigestTestCase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\DigestTestBase.cs,DiscreteVectorDigestTestCase,The method has 5 parameters. Parameters: name' primitive' message' output' extra
Long Parameter List,ObscurCore.Tests.Cryptography,DiscreteVectorDigestTestCase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\DigestTestBase.cs,DiscreteVectorDigestTestCase,The method has 5 parameters. Parameters: name' primitive' message' output' extra
Long Parameter List,ObscurCore.Tests.Cryptography,MacTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACTestBase.cs,RunMacTest,The method has 5 parameters. Parameters: function' config' nonce' overrideKey' overrideSalt
Long Parameter List,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,DoTestHMacDetECDsa,The method has 5 parameters. Parameters: digest' data' privKey' r' s
Long Parameter List,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The method has 5 parameters. Parameters: testName' data' scheme' outputToFile' precomputed
Long Parameter List,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The method has 5 parameters. Parameters: testName' data' scheme' outputToFile' precomputed
Long Parameter List,ObscurCore.Tests.Cryptography.Ciphers,DiscreteVectorTestCase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,DiscreteVectorTestCase,The method has 6 parameters. Parameters: name' key' iv' plaintext' ciphertext' extra
Long Parameter List,ObscurCore.Tests.Cryptography.Ciphers,SegmentedVectorTestCase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,SegmentedVectorTestCase,The method has 5 parameters. Parameters: name' key' iv' segments' extra
Long Identifier,ObscurCore.Tests,IOTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\IOTestBase.cs,,The length of the parameter LargeBinaryFilesSourceDirectory is 31.
Long Identifier,ObscurCore.Tests,IOTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\IOTestBase.cs,,The length of the parameter SmallTextFilesDestinationDirectory is 34.
Long Identifier,ObscurCore.Tests,IOTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\IOTestBase.cs,,The length of the parameter LargeBinaryFilesDestinationDirectory is 36.
Long Statement,ObscurCore.Tests.Cryptography,MacTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACTestBase.cs,RunMacTest,The length of the statement  "				using (var macS = new MacStream(output' true' function' out outputMac' overrideKey ?? Key' overrideSalt ?? Salt' config' nonce' false)) { " is 137.
Long Statement,ObscurCore.Tests.Cryptography,MacTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACTestBase.cs,RunMacTest,The length of the statement  "            Assert.Pass("{0:N0} ms ({1:N2} MB/s)"' sw.ElapsedMilliseconds' ((double) LargeBinaryFile.Length / 1048576) / sw.Elapsed.TotalSeconds); " is 134.
Long Statement,ObscurCore.Tests.Cryptography.KeyAgreements,JPake,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\KeyAgreements\JPake.cs,TestEcJPake,The length of the statement  "			Assert.IsTrue(aliceKey.SequenceEqualShortCircuiting(bobKey)' "Keys produced ARE NOT equal! Protocol implementation is broken."); " is 128.
Long Statement,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricFrameshiftPackage,The length of the statement  "            SymmetricPackageTest("SymmetricFrameshiftPackage"' IOTestBase.LargeBinaryFileList' PayloadLayoutScheme.Frameshift' false); " is 122.
Long Statement,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The length of the statement  "            Assert.Pass("{0} ms / {1:N2} MB/s -> {2} ms / {3:N2} MB/s."' enc.Milliseconds' (1000.0 / (double)enc.Milliseconds) * megabytes' " is 127.
Long Statement,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1FrameshiftDirectoryPackage,The length of the statement  "            UM1PackageTest("UM1FrameshiftDirectoryPackage"' IOTestBase.LargeBinaryFilesSourceDirectory.EnumerateFiles("*"' SearchOption.AllDirectories).ToList()' PayloadLayoutScheme.Frameshift' false); " is 189.
Long Statement,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The length of the statement  "            Assert.Pass("{0} ms / {1:N2} MB/s -> {2} ms / {3:N2} MB/s. Used curve {4}"' enc.Milliseconds' (1000.0 / (double)enc.Milliseconds) * megabytes' " is 142.
Long Statement,ObscurCore.Tests.Packaging,Payload,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Payload.cs,DoMux,The length of the statement  "	            payloadItem.SetStreamBinding(() => new FileStream(demuxPath + Path.DirectorySeparatorChar + item.Path' FileMode.Create)); " is 121.
Long Statement,ObscurCore.Tests.Packaging,Utilities,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Utilities.cs,GetItemsStreamExample,The length of the statement  "					Authentication = AuthenticationConfigurationFactory.CreateAuthenticationConfiguration(MacFunction.Blake2B256' out authOutputSize) " is 129.
Long Statement,ObscurCore.Tests.Packaging,Utilities,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Utilities.cs,GetItemsBlockExample,The length of the statement  "					Authentication = AuthenticationConfigurationFactory.CreateAuthenticationConfiguration(MacFunction.Blake2B256' out authOutputSize) " is 129.
Long Statement,ObscurCore.Tests.Cryptography.Ciphers,BlockCipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\BlockCipherTestBase.cs,GetCipherConfiguration,The length of the statement  "				throw new InvalidOperationException ("Block cipher test cases require block & padding information (extra is null/empty)."); " is 123.
Long Statement,ObscurCore.Tests.Cryptography.Ciphers,CipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,Correctness,The length of the statement  "            Assume.That(DiscreteVectorTests != null && SegmentedVectorTests != null && DiscreteVectorTests.Count + SegmentedVectorTests.Count > 0' "No tests to run."); " is 155.
Long Statement,ObscurCore.Tests.Cryptography.Ciphers,CipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,RunPerformanceTest,The length of the statement  "            Assert.IsTrue(StreamsContentMatches(msInputPlaintext' msOutputPlaintext' (int) msInputPlaintext.Length' out failurePosition)' " is 125.
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV128] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE45AC137AE148AF16"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"425A5E6F68EC055F38383ADC5CA9C048" +  						"D6455C56A5ACED215E22665185E497EB" +  						"3A2F5C0D45057169965EA37FE19F5D83" +  						"C95C4BEE11E8FA89545A38DD9D18AD6D"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"EFFA27F50B0B4C4AB3C7855CD5DD9EFD" +  						"B61783161678C9728B9032C2CB09A0B2" +  						"D2578C53BF3C3E67D382BC89D824D63B" +  						"20E62F414E4AC36472A16F4992DF4496"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"0111EEC218892B446FDFDBA9D0C734DF" +  						"C209D35FA86C1BEAC0D266E5DC4B3243" +  						"68B4263BA7A3517805D1501B36450FFA" +  						"1544812EBC0B9DDED93F5D45C4D83FFC"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"D966650E1A27DF3CB71B1E64CD3E7EEC" +  						"2D3EEEA2953E2FC5571B4380EA3BAEB5" +  						"3F014B4EE071A426E4A518E1AF335BD3" +  						"76309236760E0DF6184B3E34BF861458"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV128] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE45AC137AE148AF16"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"425A5E6F68EC055F38383ADC5CA9C048" +  						"D6455C56A5ACED215E22665185E497EB" +  						"3A2F5C0D45057169965EA37FE19F5D83" +  						"C95C4BEE11E8FA89545A38DD9D18AD6D"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"EFFA27F50B0B4C4AB3C7855CD5DD9EFD" +  						"B61783161678C9728B9032C2CB09A0B2" +  						"D2578C53BF3C3E67D382BC89D824D63B" +  						"20E62F414E4AC36472A16F4992DF4496"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"0111EEC218892B446FDFDBA9D0C734DF" +  						"C209D35FA86C1BEAC0D266E5DC4B3243" +  						"68B4263BA7A3517805D1501B36450FFA" +  						"1544812EBC0B9DDED93F5D45C4D83FFC"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"D966650E1A27DF3CB71B1E64CD3E7EEC" +  						"2D3EEEA2953E2FC5571B4380EA3BAEB5" +  						"3F014B4EE071A426E4A518E1AF335BD3" +  						"76309236760E0DF6184B3E34BF861458"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV128] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE45AC137AE148AF16"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"425A5E6F68EC055F38383ADC5CA9C048" +  						"D6455C56A5ACED215E22665185E497EB" +  						"3A2F5C0D45057169965EA37FE19F5D83" +  						"C95C4BEE11E8FA89545A38DD9D18AD6D"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"EFFA27F50B0B4C4AB3C7855CD5DD9EFD" +  						"B61783161678C9728B9032C2CB09A0B2" +  						"D2578C53BF3C3E67D382BC89D824D63B" +  						"20E62F414E4AC36472A16F4992DF4496"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"0111EEC218892B446FDFDBA9D0C734DF" +  						"C209D35FA86C1BEAC0D266E5DC4B3243" +  						"68B4263BA7A3517805D1501B36450FFA" +  						"1544812EBC0B9DDED93F5D45C4D83FFC"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"D966650E1A27DF3CB71B1E64CD3E7EEC" +  						"2D3EEEA2953E2FC5571B4380EA3BAEB5" +  						"3F014B4EE071A426E4A518E1AF335BD3" +  						"76309236760E0DF6184B3E34BF861458"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV256] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE45AC137AE148AF16" +  				"7DE44BB21980E74EB51C83EA51B81F86"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"914AEBA9E4BE90FD07AA58B6E2536B59" +  						"0DD63BA810A2B96BAD5DAC1818722BEC" +  						"61725C75B9E6194F57D3D2BBFE795E73" +  						"90405CA97249262093234239E35ED9E4"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"346C1A7D71DBB8FB69EA78F07D60A9A7" +  						"20D0ED544149AF102C12678D4AE0C5DF" +  						"E3521B7344F91977799085008EA00432" +  						"772C0B4ABEC1DB2C47608F9A29CC76EA"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"6F3B93E808687BE8E37A635E15B13052" +  						"60ED65488A59125D84726219AEE62087" +  						"47C6672C585759BA60BFD7F55AB975D4" +  						"B61596A506F8763F715F27A36082DB51"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"C64CAD1578C28BF19F11B14F3D33C681" +  						"A85D28A4B2D547652A7179C31127C306" +  						"DC04BE79BC1DA0279C69F9418311E57C" +  						"0F13D9E993008796EA10607A63BDC772"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV256] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE45AC137AE148AF16" +  				"7DE44BB21980E74EB51C83EA51B81F86"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"914AEBA9E4BE90FD07AA58B6E2536B59" +  						"0DD63BA810A2B96BAD5DAC1818722BEC" +  						"61725C75B9E6194F57D3D2BBFE795E73" +  						"90405CA97249262093234239E35ED9E4"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"346C1A7D71DBB8FB69EA78F07D60A9A7" +  						"20D0ED544149AF102C12678D4AE0C5DF" +  						"E3521B7344F91977799085008EA00432" +  						"772C0B4ABEC1DB2C47608F9A29CC76EA"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"6F3B93E808687BE8E37A635E15B13052" +  						"60ED65488A59125D84726219AEE62087" +  						"47C6672C585759BA60BFD7F55AB975D4" +  						"B61596A506F8763F715F27A36082DB51"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"C64CAD1578C28BF19F11B14F3D33C681" +  						"A85D28A4B2D547652A7179C31127C306" +  						"DC04BE79BC1DA0279C69F9418311E57C" +  						"0F13D9E993008796EA10607A63BDC772"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV256] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE45AC137AE148AF16" +  				"7DE44BB21980E74EB51C83EA51B81F86"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"914AEBA9E4BE90FD07AA58B6E2536B59" +  						"0DD63BA810A2B96BAD5DAC1818722BEC" +  						"61725C75B9E6194F57D3D2BBFE795E73" +  						"90405CA97249262093234239E35ED9E4"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"346C1A7D71DBB8FB69EA78F07D60A9A7" +  						"20D0ED544149AF102C12678D4AE0C5DF" +  						"E3521B7344F91977799085008EA00432" +  						"772C0B4ABEC1DB2C47608F9A29CC76EA"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"6F3B93E808687BE8E37A635E15B13052" +  						"60ED65488A59125D84726219AEE62087" +  						"47C6672C585759BA60BFD7F55AB975D4" +  						"B61596A506F8763F715F27A36082DB51"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"C64CAD1578C28BF19F11B14F3D33C681" +  						"A85D28A4B2D547652A7179C31127C306" +  						"DC04BE79BC1DA0279C69F9418311E57C" +  						"0F13D9E993008796EA10607A63BDC772"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K256-IV256] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD" +  				"3083D6297CCF2275C81B6EC11467BA0D"'  				"0D74DB42A91077DE45AC137AE148AF16" +  				"7DE44BB21980E74EB51C83EA51B81F86"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"23D9E70A45EB0127884D66D9F6F23C01" +  						"D1F88AFD629270127247256C1FFF91E9" +  						"1A797BD98ADD23AE15BEE6EEA3CEFDBF" +  						"A3ED6D22D9C4F459DB10C40CDF4F4DFF"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"CFF0058C45807C1F4300D118FDFC3B21" +  						"370936B39391791C92A821E1C8E8F248" +  						"BBBF378679468218FF5F6560B79A6015" +  						"82B81315DC19D8583263958B068BEA48"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"871A09D393D8888EBEA453F518BD300D" +  						"8233E906A31631D29A4A1834E268C3E4" +  						"F65F4F65B1B9E55606BDF28A571CA4E7" +  						"59BDE4718E1E13731663F5CAF1CB0F1E"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"15360407DA7B389DF28C08B2221F5E0D" +  						"96B34839325795A70A3F65D9CBB3848D" +  						"8C0793A53E8C4D71D8B53B2923A90B37" +  						"FE412A4485F0CC741E65743C6F1ECB4A"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K256-IV256] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD" +  				"3083D6297CCF2275C81B6EC11467BA0D"'  				"0D74DB42A91077DE45AC137AE148AF16" +  				"7DE44BB21980E74EB51C83EA51B81F86"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"23D9E70A45EB0127884D66D9F6F23C01" +  						"D1F88AFD629270127247256C1FFF91E9" +  						"1A797BD98ADD23AE15BEE6EEA3CEFDBF" +  						"A3ED6D22D9C4F459DB10C40CDF4F4DFF"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"CFF0058C45807C1F4300D118FDFC3B21" +  						"370936B39391791C92A821E1C8E8F248" +  						"BBBF378679468218FF5F6560B79A6015" +  						"82B81315DC19D8583263958B068BEA48"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"871A09D393D8888EBEA453F518BD300D" +  						"8233E906A31631D29A4A1834E268C3E4" +  						"F65F4F65B1B9E55606BDF28A571CA4E7" +  						"59BDE4718E1E13731663F5CAF1CB0F1E"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"15360407DA7B389DF28C08B2221F5E0D" +  						"96B34839325795A70A3F65D9CBB3848D" +  						"8C0793A53E8C4D71D8B53B2923A90B37" +  						"FE412A4485F0CC741E65743C6F1ECB4A"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc256,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc256.cs,Hc256,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K256-IV256] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD" +  				"3083D6297CCF2275C81B6EC11467BA0D"'  				"0D74DB42A91077DE45AC137AE148AF16" +  				"7DE44BB21980E74EB51C83EA51B81F86"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"23D9E70A45EB0127884D66D9F6F23C01" +  						"D1F88AFD629270127247256C1FFF91E9" +  						"1A797BD98ADD23AE15BEE6EEA3CEFDBF" +  						"A3ED6D22D9C4F459DB10C40CDF4F4DFF"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"CFF0058C45807C1F4300D118FDFC3B21" +  						"370936B39391791C92A821E1C8E8F248" +  						"BBBF378679468218FF5F6560B79A6015" +  						"82B81315DC19D8583263958B068BEA48"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"871A09D393D8888EBEA453F518BD300D" +  						"8233E906A31631D29A4A1834E268C3E4" +  						"F65F4F65B1B9E55606BDF28A571CA4E7" +  						"59BDE4718E1E13731663F5CAF1CB0F1E"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"15360407DA7B389DF28C08B2221F5E0D" +  						"96B34839325795A70A3F65D9CBB3848D" +  						"8C0793A53E8C4D71D8B53B2923A90B37" +  						"FE412A4485F0CC741E65743C6F1ECB4A"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc128,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc128.cs,Hc128,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV128] Set 6' vector# 0"'  				"0F62B5085BAE0154A7FA4DA0F34699EC"'  				"288FF65DC42B92F960C72E95FC63CA31"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"1CD8AEDDFE52E217E835D0B7E84E2922" +  						"D04B1ADBCA53C4522B1AA604C42856A9" +  						"0AF83E2614BCE65C0AECABDD8975B557" +  						"00D6A26D52FFF0888DA38F1DE20B77B7"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"BB599F93F4F244D717CA9818212B06D5" +  						"6D99AD4CA1F78725DBA89EA1D1F05B27" +  						"093A17D745396D8CFD0256CD50674046" +  						"13108E2200A8F1C49075B376A7460515"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"996C074A7C7C524F539037A8A9F3D193" +  						"3BC311B548BD567F8AE1B4325C51C5F3" +  						"4B0DE1B4A4651829108CA92AE23D57C7" +  						"0EAFA766097DB0539BE77E6500703746"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"43EF1ADFE8265C46FF7FBA43B78F899F" +  						"22C3B9F069B786982145D601627CDC49" +  						"2D27BB8D70FF6DA908F2606A0C44690C" +  						"8502F9CFB3BD6CBFC9205470E3ABA387"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc128,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc128.cs,Hc128,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV128] Set 6' vector# 0"'  				"0F62B5085BAE0154A7FA4DA0F34699EC"'  				"288FF65DC42B92F960C72E95FC63CA31"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"1CD8AEDDFE52E217E835D0B7E84E2922" +  						"D04B1ADBCA53C4522B1AA604C42856A9" +  						"0AF83E2614BCE65C0AECABDD8975B557" +  						"00D6A26D52FFF0888DA38F1DE20B77B7"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"BB599F93F4F244D717CA9818212B06D5" +  						"6D99AD4CA1F78725DBA89EA1D1F05B27" +  						"093A17D745396D8CFD0256CD50674046" +  						"13108E2200A8F1C49075B376A7460515"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"996C074A7C7C524F539037A8A9F3D193" +  						"3BC311B548BD567F8AE1B4325C51C5F3" +  						"4B0DE1B4A4651829108CA92AE23D57C7" +  						"0EAFA766097DB0539BE77E6500703746"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"43EF1ADFE8265C46FF7FBA43B78F899F" +  						"22C3B9F069B786982145D601627CDC49" +  						"2D27BB8D70FF6DA908F2606A0C44690C" +  						"8502F9CFB3BD6CBFC9205470E3ABA387"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Hc128,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Hc128.cs,Hc128,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV128] Set 6' vector# 0"'  				"0F62B5085BAE0154A7FA4DA0F34699EC"'  				"288FF65DC42B92F960C72E95FC63CA31"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"1CD8AEDDFE52E217E835D0B7E84E2922" +  						"D04B1ADBCA53C4522B1AA604C42856A9" +  						"0AF83E2614BCE65C0AECABDD8975B557" +  						"00D6A26D52FFF0888DA38F1DE20B77B7"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"BB599F93F4F244D717CA9818212B06D5" +  						"6D99AD4CA1F78725DBA89EA1D1F05B27" +  						"093A17D745396D8CFD0256CD50674046" +  						"13108E2200A8F1C49075B376A7460515"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"996C074A7C7C524F539037A8A9F3D193" +  						"3BC311B548BD567F8AE1B4325C51C5F3" +  						"4B0DE1B4A4651829108CA92AE23D57C7" +  						"0EAFA766097DB0539BE77E6500703746"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"43EF1ADFE8265C46FF7FBA43B78F899F" +  						"22C3B9F069B786982145D601627CDC49" +  						"2D27BB8D70FF6DA908F2606A0C44690C" +  						"8502F9CFB3BD6CBFC9205470E3ABA387"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV64] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"05E1E7BEB697D999656BF37C1B978806" +  						"735D0B903A6007BD329927EFBE1B0E2A" +  						"8137C1AE291493AA83A821755BEE0B06" +  						"CD14855A67E46703EBF8F3114B584CBA"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"1A70A37B1C9CA11CD3BF988D3EE4612D" +  						"15F1A08D683FCCC6558ECF2089388B8E" +  						"555E7619BF82EE71348F4F8D0D2AE464" +  						"339D66BFC3A003BF229C0FC0AB6AE1C6"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"4ED220425F7DDB0C843232FB03A7B1C7" +  						"616A50076FB056D3580DB13D2C295973" +  						"D289CC335C8BC75DD87F121E85BB9981" +  						"66C2EF415F3F7A297E9E1BEE767F84E2"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"E121F8377E5146BFAE5AEC9F422F474F" +  						"D3E9C685D32744A76D8B307A682FCA1B" +  						"6BF790B5B51073E114732D3786B985FD" +  						"4F45162488FEEB04C8F26E27E0F6B5CD"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV64] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"05E1E7BEB697D999656BF37C1B978806" +  						"735D0B903A6007BD329927EFBE1B0E2A" +  						"8137C1AE291493AA83A821755BEE0B06" +  						"CD14855A67E46703EBF8F3114B584CBA"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"1A70A37B1C9CA11CD3BF988D3EE4612D" +  						"15F1A08D683FCCC6558ECF2089388B8E" +  						"555E7619BF82EE71348F4F8D0D2AE464" +  						"339D66BFC3A003BF229C0FC0AB6AE1C6"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"4ED220425F7DDB0C843232FB03A7B1C7" +  						"616A50076FB056D3580DB13D2C295973" +  						"D289CC335C8BC75DD87F121E85BB9981" +  						"66C2EF415F3F7A297E9E1BEE767F84E2"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"E121F8377E5146BFAE5AEC9F422F474F" +  						"D3E9C685D32744A76D8B307A682FCA1B" +  						"6BF790B5B51073E114732D3786B985FD" +  						"4F45162488FEEB04C8F26E27E0F6B5CD"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K128-IV64] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD"'  				"0D74DB42A91077DE"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"05E1E7BEB697D999656BF37C1B978806" +  						"735D0B903A6007BD329927EFBE1B0E2A" +  						"8137C1AE291493AA83A821755BEE0B06" +  						"CD14855A67E46703EBF8F3114B584CBA"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"1A70A37B1C9CA11CD3BF988D3EE4612D" +  						"15F1A08D683FCCC6558ECF2089388B8E" +  						"555E7619BF82EE71348F4F8D0D2AE464" +  						"339D66BFC3A003BF229C0FC0AB6AE1C6"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"4ED220425F7DDB0C843232FB03A7B1C7" +  						"616A50076FB056D3580DB13D2C295973" +  						"D289CC335C8BC75DD87F121E85BB9981" +  						"66C2EF415F3F7A297E9E1BEE767F84E2"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"E121F8377E5146BFAE5AEC9F422F474F" +  						"D3E9C685D32744A76D8B307A682FCA1B" +  						"6BF790B5B51073E114732D3786B985FD" +  						"4F45162488FEEB04C8F26E27E0F6B5CD"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K256-IV64] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD" +  				"3083D6297CCF2275C81B6EC11467BA0D"'  				"0D74DB42A91077DE"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"F5FAD53F79F9DF58C4AEA0D0ED9A9601" +  						"F278112CA7180D565B420A48019670EA" +  						"F24CE493A86263F677B46ACE1924773D" +  						"2BB25571E1AA8593758FC382B1280B71"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"B70C50139C63332EF6E77AC54338A407" +  						"9B82BEC9F9A403DFEA821B83F7860791" +  						"650EF1B2489D0590B1DE772EEDA4E3BC" +  						"D60FA7CE9CD623D9D2FD5758B8653E70"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"81582C65D7562B80AEC2F1A673A9D01C" +  						"9F892A23D4919F6AB47B9154E08E699B" +  						"4117D7C666477B60F8391481682F5D95" +  						"D96623DBC489D88DAA6956B9F0646B6E"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"A13FFA1208F8BF50900886FAAB40FD10" +  						"E8CAA306E63DF39536A1564FB760B242" +  						"A9D6A4628CDC878762834E27A541DA2A" +  						"5E3B3445989C76F611E0FEC6D91ACACC"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K256-IV64] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD" +  				"3083D6297CCF2275C81B6EC11467BA0D"'  				"0D74DB42A91077DE"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"F5FAD53F79F9DF58C4AEA0D0ED9A9601" +  						"F278112CA7180D565B420A48019670EA" +  						"F24CE493A86263F677B46ACE1924773D" +  						"2BB25571E1AA8593758FC382B1280B71"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"B70C50139C63332EF6E77AC54338A407" +  						"9B82BEC9F9A403DFEA821B83F7860791" +  						"650EF1B2489D0590B1DE772EEDA4E3BC" +  						"D60FA7CE9CD623D9D2FD5758B8653E70"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"81582C65D7562B80AEC2F1A673A9D01C" +  						"9F892A23D4919F6AB47B9154E08E699B" +  						"4117D7C666477B60F8391481682F5D95" +  						"D96623DBC489D88DAA6956B9F0646B6E"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"A13FFA1208F8BF50900886FAAB40FD10" +  						"E8CAA306E63DF39536A1564FB760B242" +  						"A9D6A4628CDC878762834E27A541DA2A" +  						"5E3B3445989C76F611E0FEC6D91ACACC"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Salsa20,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Salsa20.cs,Salsa20,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"[K256-IV64] Set 6' vector# 0"'  				"0053A6F94C9FF24598EB3E91E4378ADD" +  				"3083D6297CCF2275C81B6EC11467BA0D"'  				"0D74DB42A91077DE"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"F5FAD53F79F9DF58C4AEA0D0ED9A9601" +  						"F278112CA7180D565B420A48019670EA" +  						"F24CE493A86263F677B46ACE1924773D" +  						"2BB25571E1AA8593758FC382B1280B71"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"B70C50139C63332EF6E77AC54338A407" +  						"9B82BEC9F9A403DFEA821B83F7860791" +  						"650EF1B2489D0590B1DE772EEDA4E3BC" +  						"D60FA7CE9CD623D9D2FD5758B8653E70"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"81582C65D7562B80AEC2F1A673A9D01C" +  						"9F892A23D4919F6AB47B9154E08E699B" +  						"4117D7C666477B60F8391481682F5D95" +  						"D96623DBC489D88DAA6956B9F0646B6E"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"A13FFA1208F8BF50900886FAAB40FD10" +  						"E8CAA306E63DF39536A1564FB760B242" +  						"A9D6A4628CDC878762834E27A541DA2A" +  						"5E3B3445989C76F611E0FEC6D91ACACC"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"Set 4' vector# 0"'  				"0053A6F94C9FF24598EB"'  				"00000000000000000000"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"31DC3AB92FE285475993D3C89751303E" +  						"D0CFFF1EC11831B14AE5A9BD87D91C09" +  						"998739800A4FAA987CB15679703E8C89" +  						"F47EF436F24747DBD2C4800C91E34DA2"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"7099E13547B5BE4CC753D2D1C2BF6DFB" +  						"C96AACCC5BD513159B1F24AA62679DF0" +  						"92F1ADDC91D55ECF2A4D0B71FF2B41D8" +  						"D969E38334566B35D7DE3224854452C7"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"7DC4EB2C9F315486AD89DDA5F0C5059C" +  						"67D1312EA593D625A164CC12F6B57F4C" +  						"6A824EC7FF4A830DE5066A6F659D841C" +  						"D7F7A9180B716CA49C6DB5CBC947E438"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"4030D1E317EBF9F6356B65AEB792E0AF" +  						"CEA4E47DD37CEA8CF99DEC03C3325EB3" +  						"AD92FC7E5054FD9AA76E1014ED751418" +  						"6C9CE7AE27A231A5B6608FAE0535823E"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"Set 4' vector# 0"'  				"0053A6F94C9FF24598EB"'  				"00000000000000000000"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"31DC3AB92FE285475993D3C89751303E" +  						"D0CFFF1EC11831B14AE5A9BD87D91C09" +  						"998739800A4FAA987CB15679703E8C89" +  						"F47EF436F24747DBD2C4800C91E34DA2"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"7099E13547B5BE4CC753D2D1C2BF6DFB" +  						"C96AACCC5BD513159B1F24AA62679DF0" +  						"92F1ADDC91D55ECF2A4D0B71FF2B41D8" +  						"D969E38334566B35D7DE3224854452C7"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"7DC4EB2C9F315486AD89DDA5F0C5059C" +  						"67D1312EA593D625A164CC12F6B57F4C" +  						"6A824EC7FF4A830DE5066A6F659D841C" +  						"D7F7A9180B716CA49C6DB5CBC947E438"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"4030D1E317EBF9F6356B65AEB792E0AF" +  						"CEA4E47DD37CEA8CF99DEC03C3325EB3" +  						"AD92FC7E5054FD9AA76E1014ED751418" +  						"6C9CE7AE27A231A5B6608FAE0535823E"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"Set 4' vector# 0"'  				"0053A6F94C9FF24598EB"'  				"00000000000000000000"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"31DC3AB92FE285475993D3C89751303E" +  						"D0CFFF1EC11831B14AE5A9BD87D91C09" +  						"998739800A4FAA987CB15679703E8C89" +  						"F47EF436F24747DBD2C4800C91E34DA2"  					)'  					new TestVectorSegment (  						"stream[65472..65535]"'  						65472'  						"7099E13547B5BE4CC753D2D1C2BF6DFB" +  						"C96AACCC5BD513159B1F24AA62679DF0" +  						"92F1ADDC91D55ECF2A4D0B71FF2B41D8" +  						"D969E38334566B35D7DE3224854452C7"  					)'  					new TestVectorSegment (  						"stream[65536..65599]"'  						65536'  						"7DC4EB2C9F315486AD89DDA5F0C5059C" +  						"67D1312EA593D625A164CC12F6B57F4C" +  						"6A824EC7FF4A830DE5066A6F659D841C" +  						"D7F7A9180B716CA49C6DB5CBC947E438"  					)'  					new TestVectorSegment (  						"stream[131008..131071]"'  						131008'  						"4030D1E317EBF9F6356B65AEB792E0AF" +  						"CEA4E47DD37CEA8CF99DEC03C3325EB3" +  						"AD92FC7E5054FD9AA76E1014ED751418" +  						"6C9CE7AE27A231A5B6608FAE0535823E"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"Set 5' vector# 0"'  				"00000000000000000000000000000000" +  				"00000000000000000000000000000000"'  				"80000000000000000000000000000000"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"F847D7FF5426BEF5882BD2D0717494AF" +  						"A9B7BC922915808057581BA9E35E3B7B" +  						"DAC3FC878D278FE5D145DBB71B6B16A6" +  						"134475266239B99D04E512982B4113B8"  					)'  					new TestVectorSegment (  						"stream[192..255]"'  						192'  						"55325FF9CD42636F007F0AC8B024380C" +  						"1480FA84D633FCEB0569A42B754A74CE" +  						"22B0D3D9D0B12C365F919884CE41A478" +  						"D8AF818D6C48E3A6F6D27BF16577F587"  					)'  					new TestVectorSegment (  						"stream[256..319]"'  						256'  						"614100AA1578E378424FCA648612022A" +  						"4A38D0A60A934F48328B8F0999061533" +  						"3D80C7BDB76A2C9F52CE46AE5D35CA69" +  						"A7554632DD034C9184C158376C2612D3"  					)'  					new TestVectorSegment (  						"stream[448..511]"'  						448'  						"1EF32C44CD8D7ABD0CF6CECECCC2EBC5" +  						"C3D26EAEDE130C00EC3044127922B39F" +  						"375170D3F4835808F75188276EB3AE1F" +  						"93690F92FA6290D1D01A72840727CA0B"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"Set 5' vector# 0"'  				"00000000000000000000000000000000" +  				"00000000000000000000000000000000"'  				"80000000000000000000000000000000"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"F847D7FF5426BEF5882BD2D0717494AF" +  						"A9B7BC922915808057581BA9E35E3B7B" +  						"DAC3FC878D278FE5D145DBB71B6B16A6" +  						"134475266239B99D04E512982B4113B8"  					)'  					new TestVectorSegment (  						"stream[192..255]"'  						192'  						"55325FF9CD42636F007F0AC8B024380C" +  						"1480FA84D633FCEB0569A42B754A74CE" +  						"22B0D3D9D0B12C365F919884CE41A478" +  						"D8AF818D6C48E3A6F6D27BF16577F587"  					)'  					new TestVectorSegment (  						"stream[256..319]"'  						256'  						"614100AA1578E378424FCA648612022A" +  						"4A38D0A60A934F48328B8F0999061533" +  						"3D80C7BDB76A2C9F52CE46AE5D35CA69" +  						"A7554632DD034C9184C158376C2612D3"  					)'  					new TestVectorSegment (  						"stream[448..511]"'  						448'  						"1EF32C44CD8D7ABD0CF6CECECCC2EBC5" +  						"C3D26EAEDE130C00EC3044127922B39F" +  						"375170D3F4835808F75188276EB3AE1F" +  						"93690F92FA6290D1D01A72840727CA0B"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,Sosemanuk,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\Sosemanuk.cs,Sosemanuk,The following statement contains a magic number: SegmentedVectorTests.Add (new SegmentedVectorTestCase (  				"Set 5' vector# 0"'  				"00000000000000000000000000000000" +  				"00000000000000000000000000000000"'  				"80000000000000000000000000000000"'  				new TestVectorSegment[] {  					new TestVectorSegment (  						"stream[0..63]"'  						0'  						"F847D7FF5426BEF5882BD2D0717494AF" +  						"A9B7BC922915808057581BA9E35E3B7B" +  						"DAC3FC878D278FE5D145DBB71B6B16A6" +  						"134475266239B99D04E512982B4113B8"  					)'  					new TestVectorSegment (  						"stream[192..255]"'  						192'  						"55325FF9CD42636F007F0AC8B024380C" +  						"1480FA84D633FCEB0569A42B754A74CE" +  						"22B0D3D9D0B12C365F919884CE41A478" +  						"D8AF818D6C48E3A6F6D27BF16577F587"  					)'  					new TestVectorSegment (  						"stream[256..319]"'  						256'  						"614100AA1578E378424FCA648612022A" +  						"4A38D0A60A934F48328B8F0999061533" +  						"3D80C7BDB76A2C9F52CE46AE5D35CA69" +  						"A7554632DD034C9184C158376C2612D3"  					)'  					new TestVectorSegment (  						"stream[448..511]"'  						448'  						"1EF32C44CD8D7ABD0CF6CECECCC2EBC5" +  						"C3D26EAEDE130C00EC3044127922B39F" +  						"375170D3F4835808F75188276EB3AE1F" +  						"93690F92FA6290D1D01A72840727CA0B"  					)  				}  			));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K128-IV64] Set 1' vector# 0"'  		        "80000000000000000000000000000000"'  		        "0000000000000000"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "FBB87FBB8395E05DAA3B1D683C422046"  		                + "F913985C2AD9B23CFC06C1D8D04FF213"  		                + "D44A7A7CDB84929F915420A8A3DC58BF"  		                + "0F7ECB4B1F167BB1A5E6153FDAF4493D"  		                )'  		            new TestVectorSegment(  		                "stream[192..]"'  		                192'  		                "D9485D55B8B82D792ED1EEA8E93E9BC1"  		                + "E2834AD0D9B11F3477F6E106A2F6A5F2"  		                + "EA8244D5B925B8050EAB038F58D4DF57"  		                + "7FAFD1B89359DAE508B2B10CBD6B488E"  		                )'  		            new TestVectorSegment(  		                "stream[256..]"'  		                256'  		                "08661A35D6F02D3D9ACA8087F421F7C8"  		                + "A42579047D6955D937925BA21396DDD4"  		                + "74B1FC4ACCDCAA33025B4BCE817A4FBF"  		                + "3E5D07D151D7E6FE04934ED466BA4779"  		                )'  		            new TestVectorSegment(  		                "stream[448..]"'  		                448'  		                "A7E16DD38BA48CCB130E5BE9740CE359"  		                + "D631E91600F85C8A5D0785A612D1D987"  		                + "90780ACDDC26B69AB106CCF6D866411D"  		                + "10637483DBF08CC5591FD8B3C87A3AE0"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K128-IV64] Set 1' vector# 0"'  		        "80000000000000000000000000000000"'  		        "0000000000000000"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "FBB87FBB8395E05DAA3B1D683C422046"  		                + "F913985C2AD9B23CFC06C1D8D04FF213"  		                + "D44A7A7CDB84929F915420A8A3DC58BF"  		                + "0F7ECB4B1F167BB1A5E6153FDAF4493D"  		                )'  		            new TestVectorSegment(  		                "stream[192..]"'  		                192'  		                "D9485D55B8B82D792ED1EEA8E93E9BC1"  		                + "E2834AD0D9B11F3477F6E106A2F6A5F2"  		                + "EA8244D5B925B8050EAB038F58D4DF57"  		                + "7FAFD1B89359DAE508B2B10CBD6B488E"  		                )'  		            new TestVectorSegment(  		                "stream[256..]"'  		                256'  		                "08661A35D6F02D3D9ACA8087F421F7C8"  		                + "A42579047D6955D937925BA21396DDD4"  		                + "74B1FC4ACCDCAA33025B4BCE817A4FBF"  		                + "3E5D07D151D7E6FE04934ED466BA4779"  		                )'  		            new TestVectorSegment(  		                "stream[448..]"'  		                448'  		                "A7E16DD38BA48CCB130E5BE9740CE359"  		                + "D631E91600F85C8A5D0785A612D1D987"  		                + "90780ACDDC26B69AB106CCF6D866411D"  		                + "10637483DBF08CC5591FD8B3C87A3AE0"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K128-IV64] Set 1' vector# 0"'  		        "80000000000000000000000000000000"'  		        "0000000000000000"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "FBB87FBB8395E05DAA3B1D683C422046"  		                + "F913985C2AD9B23CFC06C1D8D04FF213"  		                + "D44A7A7CDB84929F915420A8A3DC58BF"  		                + "0F7ECB4B1F167BB1A5E6153FDAF4493D"  		                )'  		            new TestVectorSegment(  		                "stream[192..]"'  		                192'  		                "D9485D55B8B82D792ED1EEA8E93E9BC1"  		                + "E2834AD0D9B11F3477F6E106A2F6A5F2"  		                + "EA8244D5B925B8050EAB038F58D4DF57"  		                + "7FAFD1B89359DAE508B2B10CBD6B488E"  		                )'  		            new TestVectorSegment(  		                "stream[256..]"'  		                256'  		                "08661A35D6F02D3D9ACA8087F421F7C8"  		                + "A42579047D6955D937925BA21396DDD4"  		                + "74B1FC4ACCDCAA33025B4BCE817A4FBF"  		                + "3E5D07D151D7E6FE04934ED466BA4779"  		                )'  		            new TestVectorSegment(  		                "stream[448..]"'  		                448'  		                "A7E16DD38BA48CCB130E5BE9740CE359"  		                + "D631E91600F85C8A5D0785A612D1D987"  		                + "90780ACDDC26B69AB106CCF6D866411D"  		                + "10637483DBF08CC5591FD8B3C87A3AE0"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K128-IV64] Set 1' vector 9"'  		        "00400000000000000000000000000000"'  		        "0000000000000000"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "A276339F99316A913885A0A4BE870F06"  		                + "91E72B00F1B3F2239F714FE81E88E00C"  		                + "BBE52B4EBBE1EA15894E29658C4CB145"  		                + "E6F89EE4ABB045A78514482CE75AFB7C"  		                )'  		            new TestVectorSegment(  		                "stream[192..]"'  		                192'  		                "0DFB9BD4F87F68DE54FBC1C6428FDEB0"  		                + "63E997BE8490C9B7A4694025D6EBA2B1"  		                + "5FE429DB82A7CAE6AAB22918E8D00449"  		                + "6FB6291467B5AE81D4E85E81D8795EBB"  		                )'  		            new TestVectorSegment(  		                "stream[256..]"'  		                256'  		                "546F5BB315E7F71A46E56D4580F90889"  		                + "639A2BA528F757CF3B048738BA141AF3"  		                + "B31607CB21561BAD94721048930364F4"  		                + "B1227CFEB7CDECBA881FB44903550E68"  		                )'  		            new TestVectorSegment(  		                "stream[448..]"'  		                448'  		                "6F813586E76691305A0CF048C0D8586D"  		                + "C89460207D8B230CD172398AA33D19E9"  		                + "2D24883C3A9B0BB7CD8C6B2668DB142E"  		                + "37A97948A7A01498A21110297984CD20"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K128-IV64] Set 1' vector 9"'  		        "00400000000000000000000000000000"'  		        "0000000000000000"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "A276339F99316A913885A0A4BE870F06"  		                + "91E72B00F1B3F2239F714FE81E88E00C"  		                + "BBE52B4EBBE1EA15894E29658C4CB145"  		                + "E6F89EE4ABB045A78514482CE75AFB7C"  		                )'  		            new TestVectorSegment(  		                "stream[192..]"'  		                192'  		                "0DFB9BD4F87F68DE54FBC1C6428FDEB0"  		                + "63E997BE8490C9B7A4694025D6EBA2B1"  		                + "5FE429DB82A7CAE6AAB22918E8D00449"  		                + "6FB6291467B5AE81D4E85E81D8795EBB"  		                )'  		            new TestVectorSegment(  		                "stream[256..]"'  		                256'  		                "546F5BB315E7F71A46E56D4580F90889"  		                + "639A2BA528F757CF3B048738BA141AF3"  		                + "B31607CB21561BAD94721048930364F4"  		                + "B1227CFEB7CDECBA881FB44903550E68"  		                )'  		            new TestVectorSegment(  		                "stream[448..]"'  		                448'  		                "6F813586E76691305A0CF048C0D8586D"  		                + "C89460207D8B230CD172398AA33D19E9"  		                + "2D24883C3A9B0BB7CD8C6B2668DB142E"  		                + "37A97948A7A01498A21110297984CD20"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K128-IV64] Set 1' vector 9"'  		        "00400000000000000000000000000000"'  		        "0000000000000000"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "A276339F99316A913885A0A4BE870F06"  		                + "91E72B00F1B3F2239F714FE81E88E00C"  		                + "BBE52B4EBBE1EA15894E29658C4CB145"  		                + "E6F89EE4ABB045A78514482CE75AFB7C"  		                )'  		            new TestVectorSegment(  		                "stream[192..]"'  		                192'  		                "0DFB9BD4F87F68DE54FBC1C6428FDEB0"  		                + "63E997BE8490C9B7A4694025D6EBA2B1"  		                + "5FE429DB82A7CAE6AAB22918E8D00449"  		                + "6FB6291467B5AE81D4E85E81D8795EBB"  		                )'  		            new TestVectorSegment(  		                "stream[256..]"'  		                256'  		                "546F5BB315E7F71A46E56D4580F90889"  		                + "639A2BA528F757CF3B048738BA141AF3"  		                + "B31607CB21561BAD94721048930364F4"  		                + "B1227CFEB7CDECBA881FB44903550E68"  		                )'  		            new TestVectorSegment(  		                "stream[448..]"'  		                448'  		                "6F813586E76691305A0CF048C0D8586D"  		                + "C89460207D8B230CD172398AA33D19E9"  		                + "2D24883C3A9B0BB7CD8C6B2668DB142E"  		                + "37A97948A7A01498A21110297984CD20"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K256-IV64] Set 6' vector 0"'  		        "0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D"'  		        "0D74DB42A91077DE"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "57459975BC46799394788DE80B928387"  		                + "862985A269B9E8E77801DE9D874B3F51"  		                + "AC4610B9F9BEE8CF8CACD8B5AD0BF17D"  		                + "3DDF23FD7424887EB3F81405BD498CC3"  		                )'  		            new TestVectorSegment(  		                "stream[65472..]"'  		                65472'  		                "EF9AEC58ACE7DB427DF012B2B91A0C1E"  		                + "8E4759DCE9CDB00A2BD59207357BA06C"  		                + "E02D327C7719E83D6348A6104B081DB0"  		                + "3908E5186986AE41E3AE95298BB7B713"  		                )'  		            new TestVectorSegment(  		                "stream[65536..]"'  		                65536'  		                "17EF5FF454D85ABBBA280F3A94F1D26E"  		                + "950C7D5B05C4BB3A78326E0DC5731F83"  		                + "84205C32DB867D1B476CE121A0D7074B"  		                + "AA7EE90525D15300F48EC0A6624BD0AF"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K256-IV64] Set 6' vector 0"'  		        "0053A6F94C9FF24598EB3E91E4378ADD3083D6297CCF2275C81B6EC11467BA0D"'  		        "0D74DB42A91077DE"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "57459975BC46799394788DE80B928387"  		                + "862985A269B9E8E77801DE9D874B3F51"  		                + "AC4610B9F9BEE8CF8CACD8B5AD0BF17D"  		                + "3DDF23FD7424887EB3F81405BD498CC3"  		                )'  		            new TestVectorSegment(  		                "stream[65472..]"'  		                65472'  		                "EF9AEC58ACE7DB427DF012B2B91A0C1E"  		                + "8E4759DCE9CDB00A2BD59207357BA06C"  		                + "E02D327C7719E83D6348A6104B081DB0"  		                + "3908E5186986AE41E3AE95298BB7B713"  		                )'  		            new TestVectorSegment(  		                "stream[65536..]"'  		                65536'  		                "17EF5FF454D85ABBBA280F3A94F1D26E"  		                + "950C7D5B05C4BB3A78326E0DC5731F83"  		                + "84205C32DB867D1B476CE121A0D7074B"  		                + "AA7EE90525D15300F48EC0A6624BD0AF"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K256-IV64] Set 6' vector 1"'  		        "0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12"'  		        "167DE44BB21980E7"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "92A2508E2C4084567195F2A1005E552B"  		                + "4874EC0504A9CD5E4DAF739AB553D2E7"  		                + "83D79C5BA11E0653BEBB5C116651302E"  		                + "8D381CB728CA627B0B246E83942A2B99"  		                )'  		            new TestVectorSegment(  		                "stream[65472..]"'  		                65472'  		                "E1974EC3063F7BD0CBA58B1CE34BC874"  		                + "67AAF5759B05EA46682A5D4306E5A76B"  		                + "D99A448DB8DE73AF97A73F5FBAE2C776"  		                + "35040464524CF14D7F08D4CE1220FD84"  		                )'  		            new TestVectorSegment(  		                "stream[65536..]"'  		                65536'  		                "BE3436141CFD62D12FF7D852F80C1344"  		                + "81F152AD0235ECF8CA172C55CA8C031B"  		                + "2E785D773A988CA8D4BDA6FAE0E493AA"  		                + "71DCCC4C894D1F106CAC62A9FC0A9607"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers.Stream,ChaCha,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\Stream\ChaCha.cs,ChaCha,The following statement contains a magic number: SegmentedVectorTests.Add(new SegmentedVectorTestCase(  		        "[K256-IV64] Set 6' vector 1"'  		        "0558ABFE51A4F74A9DF04396E93C8FE23588DB2E81D4277ACD2073C6196CBF12"'  		        "167DE44BB21980E7"'  		        new TestVectorSegment[] {  		            new TestVectorSegment(  		                "stream[0..63]"'  		                0'  		                "92A2508E2C4084567195F2A1005E552B"  		                + "4874EC0504A9CD5E4DAF739AB553D2E7"  		                + "83D79C5BA11E0653BEBB5C116651302E"  		                + "8D381CB728CA627B0B246E83942A2B99"  		                )'  		            new TestVectorSegment(  		                "stream[65472..]"'  		                65472'  		                "E1974EC3063F7BD0CBA58B1CE34BC874"  		                + "67AAF5759B05EA46682A5D4306E5A76B"  		                + "D99A448DB8DE73AF97A73F5FBAE2C776"  		                + "35040464524CF14D7F08D4CE1220FD84"  		                )'  		            new TestVectorSegment(  		                "stream[65536..]"'  		                65536'  		                "BE3436141CFD62D12FF7D852F80C1344"  		                + "81F152AD0235ECF8CA172C55CA8C031B"  		                + "2E785D773A988CA8D4BDA6FAE0E493AA"  		                + "71DCCC4C894D1F106CAC62A9FC0A9607"  		                )  		        }  		        ));
Magic Number,ObscurCore.Tests.Cryptography,DigestTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\DigestTestBase.cs,RunPerformanceTest,The following statement contains a magic number: Assert.Pass("{0:N0} ms ({1:N2} MB/s)"' sw.ElapsedMilliseconds'                  ((double) LargeBinaryFile.Length / 1048576) / sw.Elapsed.TotalSeconds);
Magic Number,ObscurCore.Tests.Cryptography,MacTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACTestBase.cs,CreateRandomBytes,The following statement contains a magic number: var bytes = new byte[lengthBits / 8];
Magic Number,ObscurCore.Tests.Cryptography,MacTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACTestBase.cs,RunMacTest,The following statement contains a magic number: Assert.Pass("{0:N0} ms ({1:N2} MB/s)"' sw.ElapsedMilliseconds' ((double) LargeBinaryFile.Length / 1048576) / sw.Elapsed.TotalSeconds);
Magic Number,ObscurCore.Tests.Cryptography,KeyProvider,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\KeyProvider.cs,KeyProvider,The following statement contains a magic number: var newSymKey = new byte[128.BitsToBytes()];
Magic Number,ObscurCore.Tests.Cryptography,KeyProvider,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\KeyProvider.cs,KeyProvider,The following statement contains a magic number: var newSymCanary = new byte[128.BitsToBytes()];
Magic Number,ObscurCore.Tests.Cryptography,KeyProvider,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\KeyProvider.cs,KeyProvider,The following statement contains a magic number: EcKeypairs = other.EcKeypairs.Select(                  item => {                      ECKeypair newEcKeypair = KeypairFactory.GenerateECKeypair(item.CurveName);                      var newEcCanary = new byte[128.BitsToBytes()];                      StratCom.EntropySupplier.NextBytes(newEcCanary);                      newEcKeypair.ConfirmationCanary = newEcCanary;                      return newEcKeypair;                  }).ToList();
Magic Number,ObscurCore.Tests.Cryptography.Entropy,CsprngTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Entropy\CSPRNGTests.cs,DisplayResult,The following statement contains a magic number: Assert.Pass("<> {0:P4} @ {1:N2} {2}/sec."' Math.Abs(1 - ((decimal)(range / 2.0) / (decimal)average))'                   ((double)Iterations / timeSpan.Milliseconds) * 1000' type);
Magic Number,ObscurCore.Tests.Cryptography.Entropy,CsprngTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Entropy\CSPRNGTests.cs,DisplayResult,The following statement contains a magic number: Assert.Pass("<> {0:P4} @ {1:N2} {2}/sec."' Math.Abs(1 - ((decimal)(range / 2.0) / (decimal)average))'                   ((double)Iterations / timeSpan.Milliseconds) * 1000' type);
Magic Number,ObscurCore.Tests.Cryptography.MACs,CMACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\CMACTests.cs,CMACTests,The following statement contains a magic number: SetRandomFixtureParameters(128);
Magic Number,ObscurCore.Tests.Cryptography.MACs,CMACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\CMACTests.cs,CMAC_Camellia,The following statement contains a magic number: RunMacTest(function' Encoding.UTF8.GetBytes(BlockCipher.Camellia.ToString())' null' CreateRandomBytes(256));
Magic Number,ObscurCore.Tests.Cryptography.MACs,CMACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\CMACTests.cs,CMAC_RC6,The following statement contains a magic number: RunMacTest(function' Encoding.UTF8.GetBytes(BlockCipher.Rc6.ToString())' null' CreateRandomBytes(256));
Magic Number,ObscurCore.Tests.Cryptography.MACs,CMACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\CMACTests.cs,CMAC_Serpent,The following statement contains a magic number: RunMacTest(function' Encoding.UTF8.GetBytes(BlockCipher.Serpent.ToString())' null' CreateRandomBytes(256));
Magic Number,ObscurCore.Tests.Cryptography.MACs,CMACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\CMACTests.cs,CMAC_Twofish,The following statement contains a magic number: RunMacTest(function' Encoding.UTF8.GetBytes(BlockCipher.Twofish.ToString())' null' CreateRandomBytes(256));
Magic Number,ObscurCore.Tests.Cryptography.MACs,HMACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\HMACTests.cs,HMACTests,The following statement contains a magic number: SetRandomFixtureParameters(128);
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,MACTests,The following statement contains a magic number: SetRandomFixtureParameters(256);
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,BLAKE2B256,The following statement contains a magic number: RunMacTest(MacFunction.Blake2B256' null' null' null' CreateRandomBytes(128));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,BLAKE2B384,The following statement contains a magic number: RunMacTest(MacFunction.Blake2B384' null' null' CreateRandomBytes(384)' CreateRandomBytes(128));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,BLAKE2B384,The following statement contains a magic number: RunMacTest(MacFunction.Blake2B384' null' null' CreateRandomBytes(384)' CreateRandomBytes(128));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,BLAKE2B512,The following statement contains a magic number: RunMacTest(MacFunction.Blake2B512' null' null' CreateRandomBytes(512)' CreateRandomBytes(128));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,BLAKE2B512,The following statement contains a magic number: RunMacTest(MacFunction.Blake2B512' null' null' CreateRandomBytes(512)' CreateRandomBytes(128));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,Keccak384,The following statement contains a magic number: RunMacTest(MacFunction.Keccak384' null' null' CreateRandomBytes(384));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,Keccak512,The following statement contains a magic number: RunMacTest(MacFunction.Keccak512' null' null' CreateRandomBytes(512));
Magic Number,ObscurCore.Tests.Cryptography.MACs,MACTests,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\MACs\MACTests.cs,Poly1305_AES,The following statement contains a magic number: RunMacTest(MacFunction.Poly1305' Encoding.UTF8.GetBytes(BlockCipher.Aes.ToString())' CreateRandomBytes(128));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha1Digest()'                  privKey'                  new BigInteger("98C6BD12B23EAF5E2A2045132086BE3EB8EBD62ABF6698FF"' 16)'                  new BigInteger("57A22B07DEA9530F8DE9471B1DC6624472E8E2844BC25B64"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha1Digest()'                  privKey'                  new BigInteger("98C6BD12B23EAF5E2A2045132086BE3EB8EBD62ABF6698FF"' 16)'                  new BigInteger("57A22B07DEA9530F8DE9471B1DC6624472E8E2844BC25B64"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha1Digest()'                  privKey'                  new BigInteger("0F2141A0EBBC44D2E1AF90A50EBCFCE5E197B3B7D4DE036D"' 16)'                  new BigInteger("EB18BC9E1F3D7387500CB99CF5F7C157070A8961E38700B7"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha1Digest()'                  privKey'                  new BigInteger("0F2141A0EBBC44D2E1AF90A50EBCFCE5E197B3B7D4DE036D"' 16)'                  new BigInteger("EB18BC9E1F3D7387500CB99CF5F7C157070A8961E38700B7"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha256Digest()' privKey'                  new BigInteger("4B0B8CE98A92866A2820E20AA6B75B56382E0F9BFD5ECB55"' 16)'                  new BigInteger("CCDB006926EA9565CBADC840829D8C384E06DE1F1E381B85"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha256Digest()' privKey'                  new BigInteger("4B0B8CE98A92866A2820E20AA6B75B56382E0F9BFD5ECB55"' 16)'                  new BigInteger("CCDB006926EA9565CBADC840829D8C384E06DE1F1E381B85"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha256Digest()' privKey'                  new BigInteger("3A718BD8B4926C3B52EE6BBE67EF79B18CB6EB62B1AD97AE"' 16)'                  new BigInteger("5662E6848A4A19B1F1AE2F72ACD4B8BBE50F1EAC65D9124F"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha256Digest()' privKey'                  new BigInteger("3A718BD8B4926C3B52EE6BBE67EF79B18CB6EB62B1AD97AE"' 16)'                  new BigInteger("5662E6848A4A19B1F1AE2F72ACD4B8BBE50F1EAC65D9124F"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha1Digest()'                  privKey'                  new BigInteger("98C6BD12B23EAF5E2A2045132086BE3EB8EBD62ABF6698FF"' 16)'                  new BigInteger("57A22B07DEA9530F8DE9471B1DC6624472E8E2844BC25B64"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha1Digest()'                  privKey'                  new BigInteger("98C6BD12B23EAF5E2A2045132086BE3EB8EBD62ABF6698FF"' 16)'                  new BigInteger("57A22B07DEA9530F8DE9471B1DC6624472E8E2844BC25B64"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha1Digest()'                  privKey'                  new BigInteger("0F2141A0EBBC44D2E1AF90A50EBCFCE5E197B3B7D4DE036D"' 16)'                  new BigInteger("EB18BC9E1F3D7387500CB99CF5F7C157070A8961E38700B7"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P192_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha1Digest()'                  privKey'                  new BigInteger("0F2141A0EBBC44D2E1AF90A50EBCFCE5E197B3B7D4DE036D"' 16)'                  new BigInteger("EB18BC9E1F3D7387500CB99CF5F7C157070A8961E38700B7"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha1Digest()' privKey'                  new BigInteger("61340C88C3AAEBEB4F6D667F672CA9759A6CCAA9FA8811313039EE4A35471D32"' 16)'                  new BigInteger("6D7F147DAC089441BB2E2FE8F7A3FA264B9C475098FDCF6E00D7C996E1B8B7EB"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha1Digest()' privKey'                  new BigInteger("61340C88C3AAEBEB4F6D667F672CA9759A6CCAA9FA8811313039EE4A35471D32"' 16)'                  new BigInteger("6D7F147DAC089441BB2E2FE8F7A3FA264B9C475098FDCF6E00D7C996E1B8B7EB"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha1Digest()' privKey'                  new BigInteger("0CBCC86FD6ABD1D99E703E1EC50069EE5C0B4BA4B9AC60E409E8EC5910D81A89"' 16)'                  new BigInteger("01B9D7B73DFAA60D5651EC4591A0136F87653E0FD780C3B1BC872FFDEAE479B1"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha1Digest()' privKey'                  new BigInteger("0CBCC86FD6ABD1D99E703E1EC50069EE5C0B4BA4B9AC60E409E8EC5910D81A89"' 16)'                  new BigInteger("01B9D7B73DFAA60D5651EC4591A0136F87653E0FD780C3B1BC872FFDEAE479B1"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha256Digest()' privKey'                  new BigInteger("EFD48B2AACB6A8FD1140DD9CD45E81D69D2C877B56AAF991C34D0EA84EAF3716"' 16)'                  new BigInteger("F7CB1C942D657C41D436C7A1B6E29F65F3E900DBB9AFF4064DC4AB2F843ACDA8"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha256Digest()' privKey'                  new BigInteger("EFD48B2AACB6A8FD1140DD9CD45E81D69D2C877B56AAF991C34D0EA84EAF3716"' 16)'                  new BigInteger("F7CB1C942D657C41D436C7A1B6E29F65F3E900DBB9AFF4064DC4AB2F843ACDA8"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha256Digest()' privKey'                  new BigInteger("F1ABB023518351CD71D881567B1EA663ED3EFCF6C5132B354F28D3B0B7D38367"' 16)'                  new BigInteger("019F4113742A2B14BD25926B49C649155F267E60D3814B4C0CC84250E46F0083"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha256Digest()' privKey'                  new BigInteger("F1ABB023518351CD71D881567B1EA663ED3EFCF6C5132B354F28D3B0B7D38367"' 16)'                  new BigInteger("019F4113742A2B14BD25926B49C649155F267E60D3814B4C0CC84250E46F0083"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha512Digest()' privKey'                  new BigInteger("8496A60B5E9B47C825488827E0495B0E3FA109EC4568FD3F8D1097678EB97F00"' 16)'                  new BigInteger("2362AB1ADBE2B8ADF9CB9EDAB740EA6049C028114F2460F96554F61FAE3302FE"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha512Digest()' privKey'                  new BigInteger("8496A60B5E9B47C825488827E0495B0E3FA109EC4568FD3F8D1097678EB97F00"' 16)'                  new BigInteger("2362AB1ADBE2B8ADF9CB9EDAB740EA6049C028114F2460F96554F61FAE3302FE"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha512Digest()' privKey'                  new BigInteger("461D93F31B6540894788FD206C07CFA0CC35F46FA3C91816FFF1040AD1581A04"' 16)'                  new BigInteger("39AF9F15DE0DB8D97E72719C74820D304CE5226E32DEDAE67519E840D1194E55"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P256_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha512Digest()' privKey'                  new BigInteger("461D93F31B6540894788FD206C07CFA0CC35F46FA3C91816FFF1040AD1581A04"' 16)'                  new BigInteger("39AF9F15DE0DB8D97E72719C74820D304CE5226E32DEDAE67519E840D1194E55"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha1Digest()' privKey'                  new BigInteger("0343B6EC45728975EA5CBA6659BBB6062A5FF89EEA58BE3C80B619F322C87910" +                                 "FE092F7D45BB0F8EEE01ED3F20BABEC079D202AE677B243AB40B5431D497C55D" +                                 "75D"' 16)'                  new BigInteger("0E7B0E675A9B24413D448B8CC119D2BF7B2D2DF032741C096634D6D65D0DBE3D" +                                 "5694625FB9E8104D3B842C1B0E2D0B98BEA19341E8676AEF66AE4EBA3D5475D5" +                                 "D16"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha1Digest()' privKey'                  new BigInteger("0343B6EC45728975EA5CBA6659BBB6062A5FF89EEA58BE3C80B619F322C87910" +                                 "FE092F7D45BB0F8EEE01ED3F20BABEC079D202AE677B243AB40B5431D497C55D" +                                 "75D"' 16)'                  new BigInteger("0E7B0E675A9B24413D448B8CC119D2BF7B2D2DF032741C096634D6D65D0DBE3D" +                                 "5694625FB9E8104D3B842C1B0E2D0B98BEA19341E8676AEF66AE4EBA3D5475D5" +                                 "D16"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha1Digest()' privKey'                  new BigInteger("13BAD9F29ABE20DE37EBEB823C252CA0F63361284015A3BF430A46AAA80B87B0" +                                 "693F0694BD88AFE4E661FC33B094CD3B7963BED5A727ED8BD6A3A202ABE009D0" +                                 "367"' 16)'                  new BigInteger("1E9BB81FF7944CA409AD138DBBEE228E1AFCC0C890FC78EC8604639CB0DBDC90" +                                 "F717A99EAD9D272855D00162EE9527567DD6A92CBD629805C0445282BBC91679" +                                 "7FF"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha1Digest()' privKey'                  new BigInteger("13BAD9F29ABE20DE37EBEB823C252CA0F63361284015A3BF430A46AAA80B87B0" +                                 "693F0694BD88AFE4E661FC33B094CD3B7963BED5A727ED8BD6A3A202ABE009D0" +                                 "367"' 16)'                  new BigInteger("1E9BB81FF7944CA409AD138DBBEE228E1AFCC0C890FC78EC8604639CB0DBDC90" +                                 "F717A99EAD9D272855D00162EE9527567DD6A92CBD629805C0445282BBC91679" +                                 "7FF"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha256Digest()'                  privKey' new BigInteger("1511BB4D675114FE266FC4372B87682BAECC01D3CC62CF2303C92B3526012659" +                                          "D16876E25C7C1E57648F23B73564D67F61C6F14D527D54972810421E7D87589E" +                                          "1A7"' 16)'                  new BigInteger("04A171143A83163D6DF460AAF61522695F207A58B95C0644D87E52AA1A347916" +                                 "E4F7A72930B1BC06DBE22CE3F58264AFD23704CBB63B29B931F7DE6C9D949A7E" +                                 "CFC"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha256Digest()'                  privKey' new BigInteger("1511BB4D675114FE266FC4372B87682BAECC01D3CC62CF2303C92B3526012659" +                                          "D16876E25C7C1E57648F23B73564D67F61C6F14D527D54972810421E7D87589E" +                                          "1A7"' 16)'                  new BigInteger("04A171143A83163D6DF460AAF61522695F207A58B95C0644D87E52AA1A347916" +                                 "E4F7A72930B1BC06DBE22CE3F58264AFD23704CBB63B29B931F7DE6C9D949A7E" +                                 "CFC"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha256Digest()'                  privKey' new BigInteger("00E871C4A14F993C6C7369501900C4BC1E9C7B0B4BA44E04868B30B41D807104" +                                          "2EB28C4C250411D0CE08CD197E4188EA4876F279F90B3D8D74A3C76E6F1E4656" +                                          "AA8"' 16)'                  new BigInteger("0CD52DBAA33B063C3A6CD8058A1FB0A46A4754B034FCC644766CA14DA8CA5CA9" +                                 "FDE00E88C1AD60CCBA759025299079D7A427EC3CC5B619BFBC828E7769BCD694" +                                 "E86"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha256Digest()'                  privKey' new BigInteger("00E871C4A14F993C6C7369501900C4BC1E9C7B0B4BA44E04868B30B41D807104" +                                          "2EB28C4C250411D0CE08CD197E4188EA4876F279F90B3D8D74A3C76E6F1E4656" +                                          "AA8"' 16)'                  new BigInteger("0CD52DBAA33B063C3A6CD8058A1FB0A46A4754B034FCC644766CA14DA8CA5CA9" +                                 "FDE00E88C1AD60CCBA759025299079D7A427EC3CC5B619BFBC828E7769BCD694" +                                 "E86"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha512Digest()'                  privKey' new BigInteger("0C328FAFCBD79DD77850370C46325D987CB525569FB63C5D3BC53950E6D4C5F1" +                                          "74E25A1EE9017B5D450606ADD152B534931D7D4E8455CC91F9B15BF05EC36E37" +                                          "7FA"' 16)'                  new BigInteger("0617CCE7CF5064806C467F678D3B4080D6F1CC50AF26CA209417308281B68AF2" +                                 "82623EAA63E5B5C0723D8B8C37FF0777B1A20F8CCB1DCCC43997F1EE0E44DA4A" +                                 "67A"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha512Digest()'                  privKey' new BigInteger("0C328FAFCBD79DD77850370C46325D987CB525569FB63C5D3BC53950E6D4C5F1" +                                          "74E25A1EE9017B5D450606ADD152B534931D7D4E8455CC91F9B15BF05EC36E37" +                                          "7FA"' 16)'                  new BigInteger("0617CCE7CF5064806C467F678D3B4080D6F1CC50AF26CA209417308281B68AF2" +                                 "82623EAA63E5B5C0723D8B8C37FF0777B1A20F8CCB1DCCC43997F1EE0E44DA4A" +                                 "67A"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha512Digest()'                  privKey' new BigInteger("13E99020ABF5CEE7525D16B69B229652AB6BDF2AFFCAEF38773B4B7D08725F10" +                                          "CDB93482FDCC54EDCEE91ECA4166B2A7C6265EF0CE2BD7051B7CEF945BABD47E" +                                          "E6D"' 16)'                  new BigInteger("1FBD0013C674AA79CB39849527916CE301C66EA7CE8B80682786AD60F98F7E78" +                                 "A19CA69EFF5C57400E3B3A0AD66CE0978214D13BAF4E9AC60752F7B155E2DE4D" +                                 "CE3"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_P521_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha512Digest()'                  privKey' new BigInteger("13E99020ABF5CEE7525D16B69B229652AB6BDF2AFFCAEF38773B4B7D08725F10" +                                          "CDB93482FDCC54EDCEE91ECA4166B2A7C6265EF0CE2BD7051B7CEF945BABD47E" +                                          "E6D"' 16)'                  new BigInteger("1FBD0013C674AA79CB39849527916CE301C66EA7CE8B80682786AD60F98F7E78" +                                 "A19CA69EFF5C57400E3B3A0AD66CE0978214D13BAF4E9AC60752F7B155E2DE4D" +                                 "CE3"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha1Digest()' privKey'                  new BigInteger("147D3EB0EDA9F2152DFD014363D6A9CE816D7A1467D326A625FC4AB0C786E1B7" +                                 "4DDF7CD4D0E99541391B266C704BB6B6E8DCCD27B460802E0867143727AA4155" +                                 "55454321EFE5CB6"' 16)'                  new BigInteger("17319571CAF533D90D2E78A64060B9C53169AB7FC908947B3EDADC54C79CCF0A" +                                 "7920B4C64A4EAB6282AFE9A459677CDA37FD6DD50BEF18709590FE18B923BDF7" +                                 "4A66B189A850819"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha1Digest()' privKey'                  new BigInteger("147D3EB0EDA9F2152DFD014363D6A9CE816D7A1467D326A625FC4AB0C786E1B7" +                                 "4DDF7CD4D0E99541391B266C704BB6B6E8DCCD27B460802E0867143727AA4155" +                                 "55454321EFE5CB6"' 16)'                  new BigInteger("17319571CAF533D90D2E78A64060B9C53169AB7FC908947B3EDADC54C79CCF0A" +                                 "7920B4C64A4EAB6282AFE9A459677CDA37FD6DD50BEF18709590FE18B923BDF7" +                                 "4A66B189A850819"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha1Digest()' privKey'                  new BigInteger("133F5414F2A9BC41466D339B79376038A64D045E5B0F792A98E5A7AA87E0AD01" +                                 "6419E5F8D176007D5C9C10B5FD9E2E0AB8331B195797C0358BA05ECBF24ACE59" +                                 "C5F368A6C0997CC"' 16)'                  new BigInteger("3D16743AE9F00F0B1A500F738719C5582550FEB64689DA241665C4CE4F328BA0" +                                 "E34A7EF527ED13BFA5889FD2D1D214C11EB17D6BC338E05A56F41CAFF1AF7B8D" +                                 "574DB62EF0D0F21"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA1,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha1Digest()' privKey'                  new BigInteger("133F5414F2A9BC41466D339B79376038A64D045E5B0F792A98E5A7AA87E0AD01" +                                 "6419E5F8D176007D5C9C10B5FD9E2E0AB8331B195797C0358BA05ECBF24ACE59" +                                 "C5F368A6C0997CC"' 16)'                  new BigInteger("3D16743AE9F00F0B1A500F738719C5582550FEB64689DA241665C4CE4F328BA0" +                                 "E34A7EF527ED13BFA5889FD2D1D214C11EB17D6BC338E05A56F41CAFF1AF7B8D" +                                 "574DB62EF0D0F21"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha256Digest()' privKey'                  new BigInteger("213EF9F3B0CFC4BF996B8AF3A7E1F6CACD2B87C8C63820000800AC787F17EC99" +                                 "C04BCEDF29A8413CFF83142BB88A50EF8D9A086AF4EB03E97C567500C21D8657" +                                 "14D832E03C6D054"' 16)'                  new BigInteger("3D32322559B094E20D8935E250B6EC139AC4AAB77920812C119AF419FB62B332" +                                 "C8D226C6C9362AE3C1E4AABE19359B8428EA74EC8FBE83C8618C2BCCB6B43FBA" +                                 "A0F2CCB7D303945"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaSample(new Sha256Digest()' privKey'                  new BigInteger("213EF9F3B0CFC4BF996B8AF3A7E1F6CACD2B87C8C63820000800AC787F17EC99" +                                 "C04BCEDF29A8413CFF83142BB88A50EF8D9A086AF4EB03E97C567500C21D8657" +                                 "14D832E03C6D054"' 16)'                  new BigInteger("3D32322559B094E20D8935E250B6EC139AC4AAB77920812C119AF419FB62B332" +                                 "C8D226C6C9362AE3C1E4AABE19359B8428EA74EC8FBE83C8618C2BCCB6B43FBA" +                                 "A0F2CCB7D303945"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha256Digest()' privKey'                  new BigInteger("184BC808506E11A65D628B457FDA60952803C604CC7181B59BD25AEE1411A66D" +                                 "12A777F3A0DC99E1190C58D0037807A95E5080FA1B2E5CCAA37B50D401CFFC34" +                                 "17C005AEE963469"' 16)'                  new BigInteger("27280D45F81B19334DBDB07B7E63FE8F39AC7E9AE14DE1D2A6884D2101850289" +                                 "D70EE400F26ACA5E7D73F534A14568478E59D00594981ABE6A1BA18554C13EB5" +                                 "E03921E4DC98333"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA256,The following statement contains a magic number: DoTestHMacDetECDsaTest(new Sha256Digest()' privKey'                  new BigInteger("184BC808506E11A65D628B457FDA60952803C604CC7181B59BD25AEE1411A66D" +                                 "12A777F3A0DC99E1190C58D0037807A95E5080FA1B2E5CCAA37B50D401CFFC34" +                                 "17C005AEE963469"' 16)'                  new BigInteger("27280D45F81B19334DBDB07B7E63FE8F39AC7E9AE14DE1D2A6884D2101850289" +                                 "D70EE400F26ACA5E7D73F534A14568478E59D00594981ABE6A1BA18554C13EB5" +                                 "E03921E4DC98333"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha512Digest()'                  privKey'                  new BigInteger("1C26F40D940A7EAA0EB1E62991028057D91FEDA0366B606F6C434C361F04E545" +                                 "A6A51A435E26416F6838FFA260C617E798E946B57215284182BE55F29A355E60" +                                 "24FE32A47289CF0"' 16)'                  new BigInteger("3691DE4369D921FE94EDDA67CB71FBBEC9A436787478063EB1CC778B3DCDC1C4" +                                 "162662752D28DEEDF6F32A269C82D1DB80C87CE4D3B662E03AC347806E3F19D1" +                                 "8D6D4DE7358DF7E"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaSample(                  new Sha512Digest()'                  privKey'                  new BigInteger("1C26F40D940A7EAA0EB1E62991028057D91FEDA0366B606F6C434C361F04E545" +                                 "A6A51A435E26416F6838FFA260C617E798E946B57215284182BE55F29A355E60" +                                 "24FE32A47289CF0"' 16)'                  new BigInteger("3691DE4369D921FE94EDDA67CB71FBBEC9A436787478063EB1CC778B3DCDC1C4" +                                 "162662752D28DEEDF6F32A269C82D1DB80C87CE4D3B662E03AC347806E3F19D1" +                                 "8D6D4DE7358DF7E"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha512Digest()'                  privKey'                  new BigInteger("2AA1888EAB05F7B00B6A784C4F7081D2C833D50794D9FEAF6E22B8BE728A2A90" +                                 "BFCABDC803162020AA629718295A1489EE7ED0ECB8AAA197B9BDFC49D18DDD78" +                                 "FC85A48F9715544"' 16)'                  new BigInteger("0AA5371FE5CA671D6ED9665849C37F394FED85D51FEF72DA2B5F28EDFB2C6479" +                                 "CA63320C19596F5E1101988E2C619E302DD05112F47E8823040CE540CD3E90DC" +                                 "F41DBC461744EE9"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,NIST_B571_SHA512,The following statement contains a magic number: DoTestHMacDetECDsaTest(                  new Sha512Digest()'                  privKey'                  new BigInteger("2AA1888EAB05F7B00B6A784C4F7081D2C833D50794D9FEAF6E22B8BE728A2A90" +                                 "BFCABDC803162020AA629718295A1489EE7ED0ECB8AAA197B9BDFC49D18DDD78" +                                 "FC85A48F9715544"' 16)'                  new BigInteger("0AA5371FE5CA671D6ED9665849C37F394FED85D51FEF72DA2B5F28EDFB2C6479" +                                 "CA63320C19596F5E1101988E2C619E302DD05112F47E8823040CE540CD3E90DC" +                                 "F41DBC461744EE9"' 16));
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,DJB_Ed25519_Keccak256,The following statement contains a magic number: var digest = new KeccakDigest(256);
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,DJB_Ed25519_Blake2B256,The following statement contains a magic number: var digest = new Blake2BDigest(256);
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,DJB_Ed25519_Keccak512,The following statement contains a magic number: var digest = new KeccakDigest(512);
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,DJB_Ed25519_Blake2B512,The following statement contains a magic number: var digest = new Blake2BDigest(512);
Magic Number,ObscurCore.Tests.Cryptography.Signing,ECDsaTest,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Signing\ECDsaTest.cs,GetPrivKey,The following statement contains a magic number: var bi = new BigInteger(encodedKey' 16);
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The following statement contains a magic number: int expLen = (int)(totalLen * 1.1);
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The following statement contains a magic number: var megabytes = (double)totalLen / 1024 / 1024;
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The following statement contains a magic number: var megabytes = (double)totalLen / 1024 / 1024;
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The following statement contains a magic number: Assert.Pass("{0} ms / {1:N2} MB/s -> {2} ms / {3:N2} MB/s."' enc.Milliseconds' (1000.0 / (double)enc.Milliseconds) * megabytes'                  dec.Milliseconds' (1000.0 / (double)dec.Milliseconds) * megabytes);
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,SymmetricPackageTest,The following statement contains a magic number: Assert.Pass("{0} ms / {1:N2} MB/s -> {2} ms / {3:N2} MB/s."' enc.Milliseconds' (1000.0 / (double)enc.Milliseconds) * megabytes'                  dec.Milliseconds' (1000.0 / (double)dec.Milliseconds) * megabytes);
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The following statement contains a magic number: int expLen = (int)(totalLen * 1.1);
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The following statement contains a magic number: var megabytes = (double)totalLen / 1024 / 1024;
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The following statement contains a magic number: var megabytes = (double)totalLen / 1024 / 1024;
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The following statement contains a magic number: Assert.Pass("{0} ms / {1:N2} MB/s -> {2} ms / {3:N2} MB/s. Used curve {4}"' enc.Milliseconds' (1000.0 / (double)enc.Milliseconds) * megabytes'                  dec.Milliseconds' (1000.0 / (double)dec.Milliseconds) * megabytes' senderKeyEnumerated.CurveName);
Magic Number,ObscurCore.Tests.Packaging,Packages,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Packages.cs,UM1PackageTest,The following statement contains a magic number: Assert.Pass("{0} ms / {1:N2} MB/s -> {2} ms / {3:N2} MB/s. Used curve {4}"' enc.Milliseconds' (1000.0 / (double)enc.Milliseconds) * megabytes'                  dec.Milliseconds' (1000.0 / (double)dec.Milliseconds) * megabytes' senderKeyEnumerated.CurveName);
Magic Number,ObscurCore.Tests.Packaging,Utilities,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Utilities.cs,GetItemsStreamExample,The following statement contains a magic number: payloadItem.SymmetricCipherKey = new byte[payloadItem.SymmetricCipher.KeySizeBits / 8];
Magic Number,ObscurCore.Tests.Packaging,Utilities,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Utilities.cs,GetItemsStreamExample,The following statement contains a magic number: payloadItem.AuthenticationKey = new byte[payloadItem.Authentication.KeySizeBits.Value / 8];
Magic Number,ObscurCore.Tests.Packaging,Utilities,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Utilities.cs,GetItemsBlockExample,The following statement contains a magic number: payloadItem.SymmetricCipherKey = new byte[payloadItem.SymmetricCipher.KeySizeBits / 8];
Magic Number,ObscurCore.Tests.Packaging,Utilities,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Utilities.cs,GetItemsBlockExample,The following statement contains a magic number: payloadItem.AuthenticationKey = new byte[payloadItem.Authentication.KeySizeBits.Value / 8];
Magic Number,ObscurCore.Tests.Packaging.Serialisation,SymmetricCipherConfiguration,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Serialisation\SymmetricCipherConfiguration.cs,BlockCipherConfiguration,The following statement contains a magic number: var inputObj = new CipherConfiguration() {                  Type = CipherType.Block'                  CipherName = BlockCipher.Aes.ToString()'                  KeySizeBits = 128'                  InitialisationVector = new byte[] { 0x01' 0x02' 0x03 }'                  ModeName = BlockCipherMode.Ctr.ToString()'                  BlockSizeBits = 128'                  PaddingName = BlockCipherPadding.None.ToString()              };
Magic Number,ObscurCore.Tests.Packaging.Serialisation,SymmetricCipherConfiguration,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Serialisation\SymmetricCipherConfiguration.cs,BlockCipherConfiguration,The following statement contains a magic number: var inputObj = new CipherConfiguration() {                  Type = CipherType.Block'                  CipherName = BlockCipher.Aes.ToString()'                  KeySizeBits = 128'                  InitialisationVector = new byte[] { 0x01' 0x02' 0x03 }'                  ModeName = BlockCipherMode.Ctr.ToString()'                  BlockSizeBits = 128'                  PaddingName = BlockCipherPadding.None.ToString()              };
Magic Number,ObscurCore.Tests.Packaging.Serialisation,SymmetricCipherConfiguration,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Packaging\Serialisation\SymmetricCipherConfiguration.cs,StreamCipherConfiguration,The following statement contains a magic number: var inputObj = new CipherConfiguration() {                  Type = CipherType.Stream'                  CipherName = StreamCipher.Salsa20.ToString()'                  KeySizeBits = 256'                  InitialisationVector = new byte[] { 0x01' 0x02' 0x03 }              };
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,BlockCipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\BlockCipherTestBase.cs,GetCipherConfiguration,The following statement contains a magic number: extraDataSplit.Length != 2
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,BlockCipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\BlockCipherTestBase.cs,GetCipherConfiguration,The following statement contains a magic number: var config = CipherConfigurationFactory.CreateBlockCipherConfiguration (Cipher'  				extraDataSplit[0].ToEnum<BlockCipherMode>()' extraDataSplit[1].ToEnum<BlockCipherPadding>()'   				testCase.Key.Length * 8);
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,CipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,CreateRandomByteArray,The following statement contains a magic number: var key = new byte[lengthBits / 8];
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,CipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,RunPerformanceTest,The following statement contains a magic number: var msCiphertext = new MemoryStream((int) (msInputPlaintext.Length * 1.1));
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,CipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,RunPerformanceTest,The following statement contains a magic number: double encSpeed = ((double) msInputPlaintext.Length / 1048576) / encryptionElapsed.TotalSeconds'                     decSpeed =                         ((double) msInputPlaintext.Length / 1048576) / decryptionElapsed.TotalSeconds;
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,CipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\CipherTestBase.cs,RunPerformanceTest,The following statement contains a magic number: double encSpeed = ((double) msInputPlaintext.Length / 1048576) / encryptionElapsed.TotalSeconds'                     decSpeed =                         ((double) msInputPlaintext.Length / 1048576) / decryptionElapsed.TotalSeconds;
Magic Number,ObscurCore.Tests.Cryptography.Ciphers,StreamCipherTestBase,D:\research\architectureSmells\repos\zenith-nz_ObscurCore\Obscur.Core.Tests\Cryptography\Ciphers\StreamCipherTestBase.cs,GetCipherConfiguration,The following statement contains a magic number: var config = CipherConfigurationFactory.CreateStreamCipherConfiguration (Cipher' testCase.Key.Length * 8);
