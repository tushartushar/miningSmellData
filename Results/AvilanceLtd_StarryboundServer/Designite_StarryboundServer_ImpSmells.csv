Implementation smell,Namespace,Class,File,Method,Description
Long Method,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The method has 536 lines of code.
Long Method,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The method has 112 lines of code.
Long Method,com.avilance.Starrybound.Commands,GroupC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The method has 312 lines of code.
Long Method,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The method has 171 lines of code.
Long Method,com.avilance.Starrybound.Packets,Packet11ChatSend,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onReceive,The method has 152 lines of code.
Long Method,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The method has 113 lines of code.
Complex Method,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,Cyclomatic complexity of the method is 93
Complex Method,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,Cyclomatic complexity of the method is 8
Complex Method,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,Cyclomatic complexity of the method is 14
Complex Method,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,Cyclomatic complexity of the method is 12
Complex Method,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,Cyclomatic complexity of the method is 9
Complex Method,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,writeLog,Cyclomatic complexity of the method is 8
Complex Method,com.avilance.Starrybound.Commands,GroupC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,Cyclomatic complexity of the method is 45
Complex Method,com.avilance.Starrybound.Commands,Reload,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,Cyclomatic complexity of the method is 15
Complex Method,com.avilance.Starrybound.Commands,Help,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,Cyclomatic complexity of the method is 16
Complex Method,com.avilance.Starrybound.Commands,List,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\List.cs,doProcess,Cyclomatic complexity of the method is 11
Complex Method,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,Cyclomatic complexity of the method is 25
Complex Method,com.avilance.Starrybound.Commands,StarterItems,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\StarterItems.cs,doProcess,Cyclomatic complexity of the method is 8
Complex Method,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,Cyclomatic complexity of the method is 8
Complex Method,com.avilance.Starrybound.Packets,Packet11ChatSend,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onReceive,Cyclomatic complexity of the method is 37
Complex Method,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,Cyclomatic complexity of the method is 19
Complex Method,com.avilance.Starrybound.Permissions,Group,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,hasPermission,Cyclomatic complexity of the method is 8
Complex Method,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,Cyclomatic complexity of the method is 8
Long Parameter List,com.avilance.Starrybound,Ban,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,Ban,The method has 8 parameters. Parameters: banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason
Long Parameter List,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The method has 7 parameters. Parameters: username' uuid' ipaddress' timeBanned' admin' expiry' reason
Long Parameter List,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,sendChatMessage,The method has 5 parameters. Parameters: context' world' clientID' name' message
Long Parameter List,com.avilance.Starrybound.Extensions,WorldCoordinate,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\WorldCoordinate.cs,WorldCoordinate,The method has 6 parameters. Parameters: sector' x' y' z' planet' satellite
Long Parameter List,com.avilance.Starrybound.Packets,Packet11ChatSend,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,prepare,The method has 5 parameters. Parameters: context' world' entityID' name' message
Long Parameter List,com.avilance.Starrybound.Permissions,Group,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,Group,The method has 8 parameters. Parameters: name' nameColor' prefix' permissions' isDefault' isStaff' targetpower' parent
Long Parameter List,com.avilance.Starrybound.Permissions,User,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,User,The method has 12 parameters. Parameters: name' uuid' lastIp' groupName' isMuted' canBuild' lastOnline' freeFuel' starterItems' privateShip' shipWhitelist' shipBlacklist
Long Identifier,com.avilance.Starrybound,ConfigFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,,The length of the parameter projectileSpawnListIsWhitelist is 30.
Long Statement,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,ProcessBans,The length of the statement  "            StarryboundServer.logInfo(allBans.Count + " ban(s) have been loaded from file. " + removedCount + " ban(s) have expired and been removed."); " is 140.
Long Statement,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The length of the statement  "                IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null); " is 219.
Long Statement,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,banClient,The length of the statement  "            delayDisconnect("You have been banned from the server for " + reason + "."' this.playerData.name + " has been banned from the server for " + reason + "!"); " is 155.
Long Statement,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,kickClient,The length of the statement  "            delayDisconnect("You have been kicked from the server for " + reason + "."' this.playerData.name + " has been kicked from the server for " + reason + "!"); " is 155.
Long Statement,com.avilance.Starrybound,Config,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,SetupConfig,The length of the statement  "            CreateIfNot(MotdPath' "This server is running Starrybound Server v%versionNum%. Type /help for a list of commands. There are currently %players% player(s) online."); " is 165.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds); " is 167.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                            StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship."); " is 145.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip); " is 225.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                            else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires) " is 189.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist) " is 136.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                    if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip) " is 176.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster) " is 125.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist) " is 136.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                    if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip) " is 176.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster) " is 125.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]"); " is 224.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]"); " is 183.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                        StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]"); " is 138.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                                    StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]"); " is 187.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                                    StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]"); " is 144.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                        StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]"); " is 187.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                        StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]"); " is 144.
Long Statement,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString()); " is 152.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The length of the statement  "                StarryboundServer.logInfo("Proxy server has been started on " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort); " is 128.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runUdp,The length of the statement  "                StarryboundServer.logInfo("RCON listener has been started on UDP " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort); " is 133.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                        if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address."); " is 186.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                                //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected)); " is 258.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote); " is 135.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                            //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray())); " is 126.
Long Statement,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The length of the statement  "                StarryboundServer.logInfo(String.Format("RCON: Received non-source request of {0} bytes from {1}: {2}"' bytesRead' remote' text)); " is 130.
Long Statement,com.avilance.Starrybound,BootstrapConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\BootstrapConfig.cs,SetupConfig,The length of the statement  "                StarryboundServer.SavePath = StarryboundServer.bootstrapConfig.storageDirectory + Path.DirectorySeparatorChar + "starrybound"; " is 126.
Long Statement,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The length of the statement  "                    if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0); " is 232.
Long Statement,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The length of the statement  "                    else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5])); " is 238.
Long Statement,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,run,The length of the statement  "                process.ErrorDataReceived += (sender' e) => logStarboundError("ErrorDataReceived from starbound_server.exe: " + e.Data); " is 120.
Long Statement,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The length of the statement  "                else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError) " is 133.
Long Statement,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The length of the statement  "                        StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!"); " is 158.
Long Statement,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The length of the statement  "                logWarn("The logLevel in your config is currently set to DEBUG. This **WILL** flood your console and log file' if you do not want this please edit your config logLevel to INFO"); " is 178.
Long Statement,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The length of the statement  "                    Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")"; " is 161.
Long Statement,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doRestart,The length of the statement  "                if (IsMono) logWarn("Auto Restarter was unable to complete successfully via this version of Mono. Exception: " + e.ToString()); " is 127.
Long Statement,com.avilance.Starrybound.Commands,GroupC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor)); " is 262.
Long Statement,com.avilance.Starrybound.Commands,GroupC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The length of the statement  "                this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group."); " is 142.
Long Statement,com.avilance.Starrybound.Commands,Reload,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' a file is missing or the config.json is corrupt. Reload failed with errors."); " is 143.
Long Statement,com.avilance.Starrybound.Commands,Reload,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' the motd.txt file is missing. Reload failed with errors."); " is 124.
Long Statement,com.avilance.Starrybound.Commands,Reload,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' the rules.txt file is missing. Reload failed with errors."); " is 125.
Long Statement,com.avilance.Starrybound.Commands,Reload,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' the config.json file is missing or corrupt. Reload failed with errors."); " is 138.
Long Statement,com.avilance.Starrybound.Commands,Find,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Find.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage(player + " located at [" + playerData.loc.ToString() + "]" + (playerData.inPlayerShip ? "in a ship." : "")); " is 139.
Long Statement,com.avilance.Starrybound.Commands,Help,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,The length of the statement  "                            this.client.sendChatMessage(Util.ChatReceiveContext.CommandResult' ""' "You do not have permission to view this command."); " is 123.
Long Statement,com.avilance.Starrybound.Commands,List,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\List.cs,doProcess,The length of the statement  "            this.client.sendChatMessage("^#5dc4f4;There are " + noOfUsers + "/" + StarryboundServer.config.maxClients + " player(s) online."); " is 130.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it."); " is 127.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                            this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it."); " is 130.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it."); " is 137.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it."); " is 150.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist."); " is 121.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist."); " is 120.
Long Statement,com.avilance.Starrybound.Commands,Shutdown,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Shutdown.cs,doProcess,The length of the statement  "            StarryboundServer.changeState(ServerState.GracefulShutdown' "Command::Shutdown"' "Shutdown requested by " + this.player.name); " is 126.
Long Statement,com.avilance.Starrybound.Commands,Auth,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Auth.cs,doProcess,The length of the statement  "                StarryboundServer.logWarn(this.client.playerData.name + " (IP: " + this.client.playerData.ip + ") attempted to use /auth even though it was disabled."); " is 152.
Long Statement,com.avilance.Starrybound.Commands,Auth,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Auth.cs,doProcess,The length of the statement  "                StarryboundServer.logWarn(this.client.playerData.name + " (IP: " + this.client.playerData.ip + ") attempted to use /auth even though it was disabled."); " is 152.
Long Statement,com.avilance.Starrybound.Commands,Auth,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Auth.cs,doProcess,The length of the statement  "            if (File.Exists(Path.Combine(StarryboundServer.SavePath' "authcode.txt"))) File.Delete(Path.Combine(StarryboundServer.SavePath' "authcode.txt")); " is 145.
Long Statement,com.avilance.Starrybound.Commands,Uptime,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The length of the statement  "            this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60)); " is 179.
Long Statement,com.avilance.Starrybound.Commands,VersionC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\VersionC.cs,doProcess,The length of the statement  "            this.client.sendCommandMessage("This server is running Starrybound Server version " + StarryboundServer.VersionNum.ToString() + "."); " is 133.
Long Statement,com.avilance.Starrybound.Commands,VersionC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\VersionC.cs,doProcess,The length of the statement  "            this.client.sendCommandMessage("Running Starbound Server version " + StarryboundServer.starboundVersion.Name + " (" + StarryboundServer.ProtocolVersion + ")."); " is 160.
Long Statement,com.avilance.Starrybound.Packets,Packet11ChatSend,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onReceive,The length of the statement  "            StarryboundServer.logInfo("[" + ((ChatSendContext)context).ToString() + "] [" + this.client.playerData.name + "]: " + message); " is 127.
Long Statement,com.avilance.Starrybound.Packets,Packet2ConnectResponse,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet2ConnectResponse.cs,onReceive,The length of the statement  "                StarryboundServer.logError("[" + this.client.playerData.name + "] " + direction + ": The parent server reclaimed this clientId (" + clientID + ")"); " is 148.
Long Statement,com.avilance.Starrybound.Packets,Packet2ConnectResponse,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet2ConnectResponse.cs,onReceive,The length of the statement  "            StarryboundServer.logInfo(String.Format("[{0}][{1}] joined with UUID [{2}]{3}"' this.client.playerData.client' this.client.playerData.ip' player.uuid'  " is 150.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                if (!userPData.getGroup().hasPermission("admin.reservedlist") || StarryboundServer.clientCount == (StarryboundServer.serverConfig.maxPlayers - 1)) " is 146.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "            string[] reasonExpiry = Bans.checkForBan(new string[] { name' this.client.playerData.uuid' this.client.playerData.ip }); " is 120.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                this.client.rejectPreConnected("You are " + ((reasonExpiry[1] == "0") ? "permanently" : "temporarily") + " banned from this server.\nReason: " + reasonExpiry[0]); " is 162.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                    this.client.rejectPreConnected("Modded client detected: You cannot modify or add asset files or mods. Please delete your entire Starbound folder and reinstall Starbound to join."); " is 180.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                        this.client.rejectPreConnected("Your name contains a phrase that is banned on this server. (" + bannedUnamePhrase + ")"); " is 121.
Long Statement,com.avilance.Starrybound.Permissions,Groups,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ReloadGroups,The length of the statement  "                    StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!"); " is 130.
Long Statement,com.avilance.Starrybound.Permissions,Groups,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ReloadGroups,The length of the statement  "                        StarryboundServer.logInfo("Updating user " + client.playerData.name + " to default group (" + defaultGroup + ") as old group " + client.playerData.group.name + " has been deleted."); " is 182.
Long Statement,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The length of the statement  "                    StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!"); " is 130.
Long Statement,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The length of the statement  "                        if (!StarryboundServer.groups.ContainsKey(groupCheck.parent)) throw new RankException("Parent (" + groupCheck.parent + ") for group " + groupCheck.name + " does not exist!"); " is 174.
Long Statement,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The length of the statement  "                StarryboundServer.logFatal("A fatal exception occurred while processing the groups (Groups::ProcessGroups): " + e.ToString()); " is 126.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GenerateSAKey,The length of the statement  "            StarryboundServer.logWarn("Important notice: To become SuperAdmin' you need to join the game and type /auth " + StarryboundServer.authCode); " is 140.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GetUser,The length of the statement  "                    StarryboundServer.logError("Player data for user " + name.ToLower() + " with UUID " + uuid + " is corrupt. Re-generating user file"); " is 133.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GetUser,The length of the statement  "                    User user = new User(name' uuid' ip' StarryboundServer.defaultGroup' false' true' 0' true' true' false' new List<string>()' new List<string>()); " is 144.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GetUser,The length of the statement  "                User user = new User(name' uuid' ip' StarryboundServer.defaultGroup' false' true' 0' false' false' false' new List<string>()' new List<string>()); " is 146.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,SaveUser,The length of the statement  "                User user = new User(player.name' player.uuid' player.ip' player.group.name' player.isMuted' player.canBuild' Utils.getTimestamp()' player.freeFuel' player.receivedStarterKit' player.privateShip' player.shipWhitelist' player.shipBlacklist); " is 240.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,Read,The length of the statement  "                StarryboundServer.logException("Persistant user storage for " + data[0] + " is corrupt - Creating with default values"); " is 120.
Long Statement,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,Read,The length of the statement  "                return new User(data[0]' data[1]' data[2]' StarryboundServer.defaultGroup' false' true' Utils.getTimestamp()' false' false' false' new List<string>()' new List<string>()); " is 171.
Complex Conditional,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The conditional expression  "packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires"  is complex.
Complex Conditional,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The conditional expression  "type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster"  is complex.
Complex Conditional,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The conditional expression  "type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster"  is complex.
Complex Conditional,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The conditional expression  "(consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError"  is complex.
Complex Conditional,com.avilance.Starrybound.Commands,SetHome,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The conditional expression  "sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx""  is complex.
Empty Catch Block,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,doDisconnect,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,doDisconnect,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,doDisconnect,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,run,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: string[] args = new string[8];
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[2] = uuid;
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[3] = ipaddress;
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[4] = timeBanned.ToString();
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[5] = admin;
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[6] = expiry.ToString();
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[7] = reason;
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: args.Length != 8
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: string uuid = args[2];
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: string ipaddress = args[3];
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: int timeBanned = int.Parse(args[4]);
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: string admin = args[5];
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: int expiry = int.Parse(args[6]);
Magic Number,com.avilance.Starrybound,Bans,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: string reason = args[7];
Magic Number,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: (int)StarryboundServer.serverState < 3
Magic Number,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: sSocket.ReceiveTimeout = StarryboundServer.config.internalSocketTimeout * 1000;
Magic Number,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: sSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;
Magic Number,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: bool success = result.AsyncWaitHandle.WaitOne(3000' true);
Magic Number,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,delayDisconnect,The following statement contains a magic number: kickTargetTimestamp = Utils.getTimestamp() + 6;
Magic Number,com.avilance.Starrybound,Client,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Client.cs,delayDisconnect,The following statement contains a magic number: kickTargetTimestamp = Utils.getTimestamp() + 6;
Magic Number,com.avilance.Starrybound,SpamAction,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,checkTrigger,The following statement contains a magic number: switch (actionName)                  {                      case "mute":                          player.isMuted = true;                          StarryboundServer.sendGlobalMessage("^#f75d5d;" + player.name + " has been muted automatically for spamming.");                          break;                        case "kick":                          client.kickClient(reason);                          break;                        case "ban":                          if (length != 0) length = Utils.getTimestamp() + (length * 60);                            Bans.addNewBan(player.name' player.uuid' player.ip' Utils.getTimestamp()' "[SYSTEM]"' length' reason);                            client.banClient(reason);                          break;                  }
Magic Number,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: temp < 0 || temp > 48
Magic Number,com.avilance.Starrybound,ForwardThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: byte[] buffer = new byte[32768];
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The following statement contains a magic number: clientSocket.ReceiveTimeout = StarryboundServer.config.clientSocketTimeout * 1000;
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The following statement contains a magic number: clientSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: byte headerByte = data[4];
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The following statement contains a magic number: byte[] sourceCheck = new byte[] { data[0]' data[1]' data[2]' data[3] };
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The following statement contains a magic number: byte[] sourceCheck = new byte[] { data[0]' data[1]' data[2]' data[3] };
Magic Number,com.avilance.Starrybound,ListenerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The following statement contains a magic number: bytesRead > 4
Magic Number,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;
Magic Number,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);
Magic Number,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);
Magic Number,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);
Magic Number,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: spawnPlanet.Length == 5
Magic Number,com.avilance.Starrybound,ServerConfig,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,RemovePrivateConfig,The following statement contains a magic number: StarryboundServer.serverConfig.gamePort = 21025;
Magic Number,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: string[] perf = consoleLine.Remove(0' 12).Split(' ');
Magic Number,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: float millis = Convert.ToSingle(perf[2]);
Magic Number,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");
Magic Number,com.avilance.Starrybound,ServerThread,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: millis > 5000
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: Environment.Exit(3);
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: (int)serverState > 3
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: (int)serverState > 3
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doRestart,The following statement contains a magic number: Thread.Sleep(2500);
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The following statement contains a magic number: Utils.getTimestamp() > startWait + 10
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,com.avilance.Starrybound.Commands,CommandBase,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\CommandBase.cs,permissionError,The following statement contains a magic number: switch (errorCode)              {                  case 1:                      message = "You do not have permission to use this command.";                      break;                    case 2:                      message = "You do not have permission to target this player.";                      break;              }
Magic Number,com.avilance.Starrybound.Commands,BanC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\BanC.cs,doProcess,The following statement contains a magic number: args.Length < 3
Magic Number,com.avilance.Starrybound.Commands,BanC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\BanC.cs,doProcess,The following statement contains a magic number: string reason = string.Join(" "' args).Substring(remainStuff + 2).Trim();
Magic Number,com.avilance.Starrybound.Commands,BanC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\BanC.cs,doProcess,The following statement contains a magic number: bExpiry = timeNow + (bExpiry * 60);
Magic Number,com.avilance.Starrybound.Commands,GroupC,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));
Magic Number,com.avilance.Starrybound.Commands,Fuel,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Fuel.cs,doProcess,The following statement contains a magic number: packetWrite.WriteVarUInt32(31);
Magic Number,com.avilance.Starrybound.Commands,Item,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Item.cs,doProcess,The following statement contains a magic number: args.Length < 2
Magic Number,com.avilance.Starrybound.Commands,SetHome,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: int sysY = int.Parse(coords[2]);
Magic Number,com.avilance.Starrybound.Commands,SetHome,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: int sysZ = int.Parse(coords[3]);
Magic Number,com.avilance.Starrybound.Commands,SetHome,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: int planet = int.Parse(coords[4]);
Magic Number,com.avilance.Starrybound.Commands,SetHome,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: int satelite = int.Parse(coords[5]);
Magic Number,com.avilance.Starrybound.Commands,SetHome,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: coords.Length == 6
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));
Magic Number,com.avilance.Starrybound.Commands,Uptime,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,Uptime,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,Uptime,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,Uptime,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,WhosThere,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\WhosThere.cs,doProcess,The following statement contains a magic number: this.client.sendChatMessage("^#5dc4f4;Players in this world: " + list.Substring(0' list.Length -2));
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarUUID,The following statement contains a magic number: return read.ReadBytes(16);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarUUID,The following statement contains a magic number: return new byte[16];
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarWorldCoordinate,The following statement contains a magic number: planet < 0 || planet > 256
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarWorldCoordinate,The following statement contains a magic number: satellite < 0 || satellite > 256
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadInt16BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(2);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadInt32BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(4);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadUInt32BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(4);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadInt64BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(8);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadSingleBE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(4);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadDoubleBE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(8);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarByte,The following statement contains a magic number: var result = ToTarget(read' 8);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarInt16,The following statement contains a magic number: var result = ToTarget(read' 16);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarUInt16,The following statement contains a magic number: var result = ToTarget(read' 16);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarInt32,The following statement contains a magic number: var result = ToTarget(read' 32);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarUInt32,The following statement contains a magic number: var result = ToTarget(read' 32);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarInt64,The following statement contains a magic number: var result = ToTarget(read' 64);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarUInt64,The following statement contains a magic number: var result = ToTarget(read' 64);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,Decode,The following statement contains a magic number: bool negative = value % 2 == 1;
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,Decode,The following statement contains a magic number: value /= 2;
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ToTarget,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ToTarget,The following statement contains a magic number: result = (result << 7) | byteValue & 0x7f;
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ToTarget,The following statement contains a magic number: shift += 7;
Magic Number,com.avilance.Starrybound.Extensions,BinaryWriterEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryWriterEx.cs,Encode,The following statement contains a magic number: toWrite *= 2;
Magic Number,com.avilance.Starrybound.Extensions,BinaryWriterEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryWriterEx.cs,WriteVarUInt64,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,com.avilance.Starrybound.Extensions,BinaryWriterEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryWriterEx.cs,WriteVarUInt64,The following statement contains a magic number: value >>= 7;
Magic Number,com.avilance.Starrybound.Packets,Packet11ChatSend,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onSend,The following statement contains a magic number: tmpArray.Count < 5
Magic Number,com.avilance.Starrybound.Packets,Packet11ChatSend,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,getPacketID,The following statement contains a magic number: return 11;
Magic Number,com.avilance.Starrybound.Packets,Packet2ConnectResponse,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet2ConnectResponse.cs,getPacketID,The following statement contains a magic number: return 2;
Magic Number,com.avilance.Starrybound.Packets,Packet5ChatReceive,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet5ChatReceive.cs,getPacketID,The following statement contains a magic number: return 5;
Magic Number,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The following statement contains a magic number: reasonExpiry.Length == 2 && !userPData.getGroup().hasPermission("admin.bypassban")
Magic Number,com.avilance.Starrybound.Packets,Packet7ClientConnect,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,getPacketID,The following statement contains a magic number: return 5;
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The following statement contains a magic number: Thread.Sleep(5000);
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The following statement contains a magic number: Environment.Exit(5);
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,DefaultGroups,The following statement contains a magic number: Group superAdmin = new Group("superadmin"' "#9801ba"' "[SA]"' saPerms' false' true' 20);
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,DefaultGroups,The following statement contains a magic number: Group admin = new Group("admin"' "#ba0123"' "[A]"' aPerms' false' true' 10' "moderator");
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,DefaultGroups,The following statement contains a magic number: Group mod = new Group("moderator"' "#ea6207"' "[M]"' mPerms' false' true' 5' "player");
Magic Number,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GenerateSAKey,The following statement contains a magic number: StarryboundServer.authCode = r.Next(100000' 10000000).ToString();
Magic Number,com.avilance.Starrybound.Permissions,Users,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GenerateSAKey,The following statement contains a magic number: StarryboundServer.authCode = r.Next(100000' 10000000).ToString();
Magic Number,com.avilance.Starrybound.Util,Utils,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,ByteToBinaryString,The following statement contains a magic number: byte mask = 128;
Magic Number,com.avilance.Starrybound.Util,Utils,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,GenerateSecureSalt,The following statement contains a magic number: byte[] buffer = new byte[24];
Magic Number,com.avilance.Starrybound.Util,Utils,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,getTimestamp,The following statement contains a magic number: DateTime unixEpoch = new DateTime(1970' 1' 1);
Magic Number,com.avilance.Starrybound.Util,Utils,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,findGlobalCoords,The following statement contains a magic number: byte[] returnBytes = new byte[sector.Length + 21];
Magic Number,com.avilance.Starrybound.Util,Utils,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,findGlobalCoords,The following statement contains a magic number: Buffer.BlockCopy(input' i - 1' returnBytes' 0' sector.Length + 21);
Magic Number,com.avilance.Starrybound.Util,Utils,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,findGlobalCoords,The following statement contains a magic number: i < input.Length - 26
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindIndex,The following statement contains a magic number: return (int) FindCountryCode(0' AddressToLong(ip)' 31);
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: y += 256;
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: num += y << ((3 - i)*8);
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: num += y << ((3 - i)*8);
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: i < 4
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: byte[] buffer = new byte[6];
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: long[] x = new long[2];
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: _geodata.Seek(6*offset' SeekOrigin.Begin);
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: _geodata.Read(buffer' 0' 6);
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: int y = buffer[i*3 + j];
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: y += 256;
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: x[i] += (y << (j*8));
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: j < 3
Magic Number,MaxMind,GeoIPCountry,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: i < 2
Missing Default,com.avilance.Starrybound,SpamAction,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,checkTrigger,The following switch statement is missing a default case: switch (actionName)                  {                      case "mute":                          player.isMuted = true;                          StarryboundServer.sendGlobalMessage("^#f75d5d;" + player.name + " has been muted automatically for spamming.");                          break;                        case "kick":                          client.kickClient(reason);                          break;                        case "ban":                          if (length != 0) length = Utils.getTimestamp() + (length * 60);                            Bans.addNewBan(player.name' player.uuid' player.ip' Utils.getTimestamp()' "[SYSTEM]"' length' reason);                            client.banClient(reason);                          break;                  }
Missing Default,com.avilance.Starrybound,StarryboundServer,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,writeLog,The following switch statement is missing a default case: switch (logType)              {                  case LogType.Debug:                      message = "[DEBUG] " + message;                      break;                    case LogType.Info:                      message = "[INFO] " + message;                      break;                    case LogType.Warn:                      message = "[WARN] " + message;                      break;                    case LogType.Error:                      message = "[ERROR] " + message;                      break;                    case LogType.Exception:                      message = "[EXCEPTION] " + message;                      break;                    case LogType.Fatal:                      message = "[FATAL ERROR] " + message;                      break;              }
Missing Default,com.avilance.Starrybound.Commands,CommandBase,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Commands\CommandBase.cs,permissionError,The following switch statement is missing a default case: switch (errorCode)              {                  case 1:                      message = "You do not have permission to use this command.";                      break;                    case 2:                      message = "You do not have permission to target this player.";                      break;              }
Missing Default,com.avilance.Starrybound.Extensions,BinaryReaderEx,D:\research\architectureSmells\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following switch statement is missing a default case: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
