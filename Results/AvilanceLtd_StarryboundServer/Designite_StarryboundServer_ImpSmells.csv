Implementation smell,Namespace,Class,File,Method,Description
Long Method,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The method has 536 lines of code.
Long Method,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The method has 112 lines of code.
Long Method,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The method has 312 lines of code.
Long Method,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The method has 171 lines of code.
Long Method,com.avilance.Starrybound.Packets,Packet11ChatSend,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onReceive,The method has 152 lines of code.
Long Method,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The method has 113 lines of code.
Complex Method,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,Cyclomatic complexity of the method is 20
Complex Method,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,Cyclomatic complexity of the method is 8
Complex Method,com.avilance.Starrybound.Commands,Help,C:\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,Cyclomatic complexity of the method is 10
Complex Method,com.avilance.Starrybound.Commands,List,C:\repos\AvilanceLtd_StarryboundServer\Commands\List.cs,doProcess,Cyclomatic complexity of the method is 10
Complex Method,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,Cyclomatic complexity of the method is 10
Complex Method,com.avilance.Starrybound.Commands,StarterItems,C:\repos\AvilanceLtd_StarryboundServer\Commands\StarterItems.cs,doProcess,Cyclomatic complexity of the method is 8
Complex Method,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,Cyclomatic complexity of the method is 19
Long Parameter List,com.avilance.Starrybound,Ban,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,Ban,The method has 8 parameters. Parameters: banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason
Long Parameter List,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The method has 7 parameters. Parameters: username' uuid' ipaddress' timeBanned' admin' expiry' reason
Long Parameter List,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,sendChatMessage,The method has 5 parameters. Parameters: context' world' clientID' name' message
Long Parameter List,com.avilance.Starrybound.Extensions,WorldCoordinate,C:\repos\AvilanceLtd_StarryboundServer\Extensions\WorldCoordinate.cs,WorldCoordinate,The method has 6 parameters. Parameters: sector' x' y' z' planet' satellite
Long Parameter List,com.avilance.Starrybound.Packets,Packet11ChatSend,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,prepare,The method has 5 parameters. Parameters: context' world' entityID' name' message
Long Parameter List,com.avilance.Starrybound.Permissions,Group,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,Group,The method has 8 parameters. Parameters: name' nameColor' prefix' permissions' isDefault' isStaff' targetpower' parent
Long Parameter List,com.avilance.Starrybound.Permissions,User,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,User,The method has 12 parameters. Parameters: name' uuid' lastIp' groupName' isMuted' canBuild' lastOnline' freeFuel' starterItems' privateShip' shipWhitelist' shipBlacklist
Long Identifier,com.avilance.Starrybound,ConfigFile,C:\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,,The length of the parameter projectileSpawnListIsWhitelist is 30.
Long Statement,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,ProcessBans,The length of the statement  "            StarryboundServer.logInfo(allBans.Count + " ban(s) have been loaded from file. " + removedCount + " ban(s) have expired and been removed."); " is 140.
Long Statement,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The length of the statement  "                IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null); " is 219.
Long Statement,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,banClient,The length of the statement  "            delayDisconnect("You have been banned from the server for " + reason + "."' this.playerData.name + " has been banned from the server for " + reason + "!"); " is 155.
Long Statement,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,kickClient,The length of the statement  "            delayDisconnect("You have been kicked from the server for " + reason + "."' this.playerData.name + " has been kicked from the server for " + reason + "!"); " is 155.
Long Statement,com.avilance.Starrybound,Config,C:\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,SetupConfig,The length of the statement  "            CreateIfNot(MotdPath' "This server is running Starrybound Server v%versionNum%. Type /help for a list of commands. There are currently %players% player(s) online."); " is 165.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds); " is 167.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                            StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship."); " is 145.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip); " is 225.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                            else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires) " is 189.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist) " is 136.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                    if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip) " is 176.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster) " is 125.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist) " is 136.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                    if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip) " is 176.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster) " is 125.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]"); " is 224.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]"); " is 183.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                        StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]"); " is 138.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                                    StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]"); " is 187.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                                    StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]"); " is 144.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                        StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]"); " is 187.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                                        StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]"); " is 144.
Long Statement,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The length of the statement  "                                    StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString()); " is 152.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The length of the statement  "                StarryboundServer.logInfo("Proxy server has been started on " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort); " is 128.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runUdp,The length of the statement  "                StarryboundServer.logInfo("RCON listener has been started on UDP " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort); " is 133.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                        if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address."); " is 186.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                                //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected)); " is 258.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote); " is 135.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The length of the statement  "                            //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray())); " is 126.
Long Statement,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The length of the statement  "                StarryboundServer.logInfo(String.Format("RCON: Received non-source request of {0} bytes from {1}: {2}"' bytesRead' remote' text)); " is 130.
Long Statement,com.avilance.Starrybound,BootstrapConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\BootstrapConfig.cs,SetupConfig,The length of the statement  "                StarryboundServer.SavePath = StarryboundServer.bootstrapConfig.storageDirectory + Path.DirectorySeparatorChar + "starrybound"; " is 126.
Long Statement,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The length of the statement  "                    if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0); " is 232.
Long Statement,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The length of the statement  "                    else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5])); " is 238.
Long Statement,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,run,The length of the statement  "                process.ErrorDataReceived += (sender' e) => logStarboundError("ErrorDataReceived from starbound_server.exe: " + e.Data); " is 120.
Long Statement,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The length of the statement  "                else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError) " is 133.
Long Statement,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The length of the statement  "                        StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!"); " is 158.
Long Statement,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The length of the statement  "                logWarn("The logLevel in your config is currently set to DEBUG. This **WILL** flood your console and log file' if you do not want this please edit your config logLevel to INFO"); " is 178.
Long Statement,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The length of the statement  "                    Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")"; " is 161.
Long Statement,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doRestart,The length of the statement  "                if (IsMono) logWarn("Auto Restarter was unable to complete successfully via this version of Mono. Exception: " + e.ToString()); " is 127.
Long Statement,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor)); " is 262.
Long Statement,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The length of the statement  "                this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group."); " is 142.
Long Statement,com.avilance.Starrybound.Commands,Reload,C:\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' a file is missing or the config.json is corrupt. Reload failed with errors."); " is 143.
Long Statement,com.avilance.Starrybound.Commands,Reload,C:\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' the motd.txt file is missing. Reload failed with errors."); " is 124.
Long Statement,com.avilance.Starrybound.Commands,Reload,C:\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' the rules.txt file is missing. Reload failed with errors."); " is 125.
Long Statement,com.avilance.Starrybound.Commands,Reload,C:\repos\AvilanceLtd_StarryboundServer\Commands\Reload.cs,doProcess,The length of the statement  "                    else this.client.sendCommandMessage("^#f75d5d;Reload has failed' the config.json file is missing or corrupt. Reload failed with errors."); " is 138.
Long Statement,com.avilance.Starrybound.Commands,Find,C:\repos\AvilanceLtd_StarryboundServer\Commands\Find.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage(player + " located at [" + playerData.loc.ToString() + "]" + (playerData.inPlayerShip ? "in a ship." : "")); " is 139.
Long Statement,com.avilance.Starrybound.Commands,Help,C:\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,The length of the statement  "                            this.client.sendChatMessage(Util.ChatReceiveContext.CommandResult' ""' "You do not have permission to view this command."); " is 123.
Long Statement,com.avilance.Starrybound.Commands,List,C:\repos\AvilanceLtd_StarryboundServer\Commands\List.cs,doProcess,The length of the statement  "            this.client.sendChatMessage("^#5dc4f4;There are " + noOfUsers + "/" + StarryboundServer.config.maxClients + " player(s) online."); " is 130.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it."); " is 127.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                            this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it."); " is 130.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it."); " is 137.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it."); " is 150.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist."); " is 121.
Long Statement,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The length of the statement  "                    this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist."); " is 120.
Long Statement,com.avilance.Starrybound.Commands,Shutdown,C:\repos\AvilanceLtd_StarryboundServer\Commands\Shutdown.cs,doProcess,The length of the statement  "            StarryboundServer.changeState(ServerState.GracefulShutdown' "Command::Shutdown"' "Shutdown requested by " + this.player.name); " is 126.
Long Statement,com.avilance.Starrybound.Commands,Auth,C:\repos\AvilanceLtd_StarryboundServer\Commands\Auth.cs,doProcess,The length of the statement  "                StarryboundServer.logWarn(this.client.playerData.name + " (IP: " + this.client.playerData.ip + ") attempted to use /auth even though it was disabled."); " is 152.
Long Statement,com.avilance.Starrybound.Commands,Auth,C:\repos\AvilanceLtd_StarryboundServer\Commands\Auth.cs,doProcess,The length of the statement  "                StarryboundServer.logWarn(this.client.playerData.name + " (IP: " + this.client.playerData.ip + ") attempted to use /auth even though it was disabled."); " is 152.
Long Statement,com.avilance.Starrybound.Commands,Auth,C:\repos\AvilanceLtd_StarryboundServer\Commands\Auth.cs,doProcess,The length of the statement  "            if (File.Exists(Path.Combine(StarryboundServer.SavePath' "authcode.txt"))) File.Delete(Path.Combine(StarryboundServer.SavePath' "authcode.txt")); " is 145.
Long Statement,com.avilance.Starrybound.Commands,Uptime,C:\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The length of the statement  "            this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60)); " is 179.
Long Statement,com.avilance.Starrybound.Commands,VersionC,C:\repos\AvilanceLtd_StarryboundServer\Commands\VersionC.cs,doProcess,The length of the statement  "            this.client.sendCommandMessage("This server is running Starrybound Server version " + StarryboundServer.VersionNum.ToString() + "."); " is 133.
Long Statement,com.avilance.Starrybound.Commands,VersionC,C:\repos\AvilanceLtd_StarryboundServer\Commands\VersionC.cs,doProcess,The length of the statement  "            this.client.sendCommandMessage("Running Starbound Server version " + StarryboundServer.starboundVersion.Name + " (" + StarryboundServer.ProtocolVersion + ")."); " is 160.
Long Statement,com.avilance.Starrybound.Packets,Packet11ChatSend,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onReceive,The length of the statement  "            StarryboundServer.logInfo("[" + ((ChatSendContext)context).ToString() + "] [" + this.client.playerData.name + "]: " + message); " is 127.
Long Statement,com.avilance.Starrybound.Packets,Packet2ConnectResponse,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet2ConnectResponse.cs,onReceive,The length of the statement  "                StarryboundServer.logError("[" + this.client.playerData.name + "] " + direction + ": The parent server reclaimed this clientId (" + clientID + ")"); " is 148.
Long Statement,com.avilance.Starrybound.Packets,Packet2ConnectResponse,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet2ConnectResponse.cs,onReceive,The length of the statement  "            StarryboundServer.logInfo(String.Format("[{0}][{1}] joined with UUID [{2}]{3}"' this.client.playerData.client' this.client.playerData.ip' player.uuid'  " is 150.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                if (!userPData.getGroup().hasPermission("admin.reservedlist") || StarryboundServer.clientCount == (StarryboundServer.serverConfig.maxPlayers - 1)) " is 146.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "            string[] reasonExpiry = Bans.checkForBan(new string[] { name' this.client.playerData.uuid' this.client.playerData.ip }); " is 120.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                this.client.rejectPreConnected("You are " + ((reasonExpiry[1] == "0") ? "permanently" : "temporarily") + " banned from this server.\nReason: " + reasonExpiry[0]); " is 162.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                    this.client.rejectPreConnected("Modded client detected: You cannot modify or add asset files or mods. Please delete your entire Starbound folder and reinstall Starbound to join."); " is 180.
Long Statement,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The length of the statement  "                        this.client.rejectPreConnected("Your name contains a phrase that is banned on this server. (" + bannedUnamePhrase + ")"); " is 121.
Long Statement,com.avilance.Starrybound.Permissions,Groups,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ReloadGroups,The length of the statement  "                    StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!"); " is 130.
Long Statement,com.avilance.Starrybound.Permissions,Groups,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ReloadGroups,The length of the statement  "                        StarryboundServer.logInfo("Updating user " + client.playerData.name + " to default group (" + defaultGroup + ") as old group " + client.playerData.group.name + " has been deleted."); " is 182.
Long Statement,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The length of the statement  "                    StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!"); " is 130.
Long Statement,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The length of the statement  "                        if (!StarryboundServer.groups.ContainsKey(groupCheck.parent)) throw new RankException("Parent (" + groupCheck.parent + ") for group " + groupCheck.name + " does not exist!"); " is 174.
Long Statement,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The length of the statement  "                StarryboundServer.logFatal("A fatal exception occurred while processing the groups (Groups::ProcessGroups): " + e.ToString()); " is 126.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GenerateSAKey,The length of the statement  "            StarryboundServer.logWarn("Important notice: To become SuperAdmin' you need to join the game and type /auth " + StarryboundServer.authCode); " is 140.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GetUser,The length of the statement  "                    StarryboundServer.logError("Player data for user " + name.ToLower() + " with UUID " + uuid + " is corrupt. Re-generating user file"); " is 133.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GetUser,The length of the statement  "                    User user = new User(name' uuid' ip' StarryboundServer.defaultGroup' false' true' 0' true' true' false' new List<string>()' new List<string>()); " is 144.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GetUser,The length of the statement  "                User user = new User(name' uuid' ip' StarryboundServer.defaultGroup' false' true' 0' false' false' false' new List<string>()' new List<string>()); " is 146.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,SaveUser,The length of the statement  "                User user = new User(player.name' player.uuid' player.ip' player.group.name' player.isMuted' player.canBuild' Utils.getTimestamp()' player.freeFuel' player.receivedStarterKit' player.privateShip' player.shipWhitelist' player.shipBlacklist); " is 240.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,Read,The length of the statement  "                StarryboundServer.logException("Persistant user storage for " + data[0] + " is corrupt - Creating with default values"); " is 120.
Long Statement,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,Read,The length of the statement  "                return new User(data[0]' data[1]' data[2]' StarryboundServer.defaultGroup' false' true' Utils.getTimestamp()' false' false' false' new List<string>()' new List<string>()); " is 171.
Complex Conditional,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The conditional expression  "packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires"  is complex.
Complex Conditional,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The conditional expression  "type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster"  is complex.
Complex Conditional,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The conditional expression  "type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster"  is complex.
Complex Conditional,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The conditional expression  "(consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError"  is complex.
Complex Conditional,com.avilance.Starrybound.Commands,SetHome,C:\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The conditional expression  "sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx""  is complex.
Empty Catch Block,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,doDisconnect,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,doDisconnect,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,doDisconnect,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,run,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Empty Catch Block,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The method has an empty catch block.
Magic Number,com.avilance.Starrybound,Ban,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,doesMatch,The following statement contains a magic number: if (username.Equals(needle[0]) && !String.IsNullOrWhiteSpace(username)) return true;               else if (uuid.Equals(needle[1]) && !String.IsNullOrWhiteSpace(uuid)) return true;              else if (ipaddress.Equals(needle[2]) && !String.IsNullOrWhiteSpace(ipaddress)) return true;              else return false;
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: string[] args = new string[8];
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[2] = uuid;
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[3] = ipaddress;
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[4] = timeBanned.ToString();
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[5] = admin;
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[6] = expiry.ToString();
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,addNewBan,The following statement contains a magic number: args[7] = reason;
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Bans,C:\repos\AvilanceLtd_StarryboundServer\Bans.cs,readLegacyBans,The following statement contains a magic number: try              {                  StreamReader reader = File.OpenText(Path.Combine(StarryboundServer.SavePath' "banned-players.txt"));                  string line;                  int banCount = 0;                  while ((line = reader.ReadLine()) != null)                  {                      string[] args = line.Split('|');                      /*                       * Ban format:                       * int          ID                       * string       Username                       * string       UUID                       * string       IP Address                       * timestamp    UnixTimestamp (Time of Addition)                       * string       Admin                       * timestamp    Expiry                       * string       Reason                       *                        * Example:                       * 2|User|133bfef193364620513ea1980ba39dc3|127.0.0.1|1387767903|Crashdoom|0|Griefing the spawn                       *                        */                        if (args.Length != 8) continue;                        try                      {                          int banID = int.Parse(args[0]);                          string username = args[1];                          string uuid = args[2];                          string ipaddress = args[3];                          int timeBanned = int.Parse(args[4]);                          string admin = args[5];                          int expiry = int.Parse(args[6]);                          string reason = args[7];                            Ban ban = new Ban(banID' username' uuid' ipaddress' timeBanned' admin' expiry' reason);                            legacyBans.Add(banID' ban);                            nextBanID = banID + 1;                            banCount++;                      }                      catch (Exception) { banCount--; StarryboundServer.logWarn("Invalid ban detected in banned-players.txt"); }                  }                    reader.Close();              }              catch (Exception e)              {                  StarryboundServer.logWarn("Unable to read bans from legacy banned-players.txt: " + e.Message);              }
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: try              {                  this.cIn = new BinaryReader(this.cSocket.GetStream());                  this.cOut = new BinaryWriter(this.cSocket.GetStream());                    IPEndPoint ipep = (IPEndPoint)this.cSocket.Client.RemoteEndPoint;                  IPAddress ipa = ipep.Address;                    this.playerData.ip = ipep.Address.ToString();                    StarryboundServer.logInfo("[" + playerData.client + "] Accepting new connection.");                    if((int)StarryboundServer.serverState < 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is not ready yet.");                      return;                  }                  else if ((int)StarryboundServer.serverState > 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is shutting down.");                      return;                  }                  else if (StarryboundServer.restartTime != 0)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is restarting.");                      return;                  }                    sSocket = new TcpClient();                  sSocket.ReceiveTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  sSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null);                  bool success = result.AsyncWaitHandle.WaitOne(3000' true);                  if (!success || !sSocket.Connected)                  {                      StarryboundServer.failedConnections++;                      if (StarryboundServer.failedConnections >= StarryboundServer.config.maxFailedConnections)                      {                          StarryboundServer.logFatal(StarryboundServer.failedConnections + " clients failed to connect in a row. Restarting...");                          StarryboundServer.serverState = ServerState.Crashed;                      }                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                      rejectPreConnected("Connection Failed: Unable to connect to the parent server.");                      return;                  }                    this.sIn = new BinaryReader(this.sSocket.GetStream());                  this.sOut = new BinaryWriter(this.sSocket.GetStream());                    this.connectedTime = Utils.getTimestamp();                    // Forwarding for data from SERVER (sIn) to CLIENT (cOut)                  this.ServerForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.sIn' this.cOut' Direction.Server).run));                  ServerForwarder.Start();                    // Forwarding for data from CLIENT (cIn) to SERVER (sOut)                  this.ClientForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.cIn' this.sOut' Direction.Client).run));                  ClientForwarder.Start();                    StarryboundServer.failedConnections = 0;              }              catch (Exception e)              {                  StarryboundServer.logException("ClientThread Exception: " + e.ToString());                  StarryboundServer.failedConnections++;                  MemoryStream packet = new MemoryStream();                  BinaryWriter packetWrite = new BinaryWriter(packet);                  packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                  this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                  rejectPreConnected("Connection Failed: A internal server error occurred (1)");              }
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: try              {                  this.cIn = new BinaryReader(this.cSocket.GetStream());                  this.cOut = new BinaryWriter(this.cSocket.GetStream());                    IPEndPoint ipep = (IPEndPoint)this.cSocket.Client.RemoteEndPoint;                  IPAddress ipa = ipep.Address;                    this.playerData.ip = ipep.Address.ToString();                    StarryboundServer.logInfo("[" + playerData.client + "] Accepting new connection.");                    if((int)StarryboundServer.serverState < 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is not ready yet.");                      return;                  }                  else if ((int)StarryboundServer.serverState > 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is shutting down.");                      return;                  }                  else if (StarryboundServer.restartTime != 0)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is restarting.");                      return;                  }                    sSocket = new TcpClient();                  sSocket.ReceiveTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  sSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null);                  bool success = result.AsyncWaitHandle.WaitOne(3000' true);                  if (!success || !sSocket.Connected)                  {                      StarryboundServer.failedConnections++;                      if (StarryboundServer.failedConnections >= StarryboundServer.config.maxFailedConnections)                      {                          StarryboundServer.logFatal(StarryboundServer.failedConnections + " clients failed to connect in a row. Restarting...");                          StarryboundServer.serverState = ServerState.Crashed;                      }                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                      rejectPreConnected("Connection Failed: Unable to connect to the parent server.");                      return;                  }                    this.sIn = new BinaryReader(this.sSocket.GetStream());                  this.sOut = new BinaryWriter(this.sSocket.GetStream());                    this.connectedTime = Utils.getTimestamp();                    // Forwarding for data from SERVER (sIn) to CLIENT (cOut)                  this.ServerForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.sIn' this.cOut' Direction.Server).run));                  ServerForwarder.Start();                    // Forwarding for data from CLIENT (cIn) to SERVER (sOut)                  this.ClientForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.cIn' this.sOut' Direction.Client).run));                  ClientForwarder.Start();                    StarryboundServer.failedConnections = 0;              }              catch (Exception e)              {                  StarryboundServer.logException("ClientThread Exception: " + e.ToString());                  StarryboundServer.failedConnections++;                  MemoryStream packet = new MemoryStream();                  BinaryWriter packetWrite = new BinaryWriter(packet);                  packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                  this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                  rejectPreConnected("Connection Failed: A internal server error occurred (1)");              }
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: try              {                  this.cIn = new BinaryReader(this.cSocket.GetStream());                  this.cOut = new BinaryWriter(this.cSocket.GetStream());                    IPEndPoint ipep = (IPEndPoint)this.cSocket.Client.RemoteEndPoint;                  IPAddress ipa = ipep.Address;                    this.playerData.ip = ipep.Address.ToString();                    StarryboundServer.logInfo("[" + playerData.client + "] Accepting new connection.");                    if((int)StarryboundServer.serverState < 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is not ready yet.");                      return;                  }                  else if ((int)StarryboundServer.serverState > 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is shutting down.");                      return;                  }                  else if (StarryboundServer.restartTime != 0)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is restarting.");                      return;                  }                    sSocket = new TcpClient();                  sSocket.ReceiveTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  sSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null);                  bool success = result.AsyncWaitHandle.WaitOne(3000' true);                  if (!success || !sSocket.Connected)                  {                      StarryboundServer.failedConnections++;                      if (StarryboundServer.failedConnections >= StarryboundServer.config.maxFailedConnections)                      {                          StarryboundServer.logFatal(StarryboundServer.failedConnections + " clients failed to connect in a row. Restarting...");                          StarryboundServer.serverState = ServerState.Crashed;                      }                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                      rejectPreConnected("Connection Failed: Unable to connect to the parent server.");                      return;                  }                    this.sIn = new BinaryReader(this.sSocket.GetStream());                  this.sOut = new BinaryWriter(this.sSocket.GetStream());                    this.connectedTime = Utils.getTimestamp();                    // Forwarding for data from SERVER (sIn) to CLIENT (cOut)                  this.ServerForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.sIn' this.cOut' Direction.Server).run));                  ServerForwarder.Start();                    // Forwarding for data from CLIENT (cIn) to SERVER (sOut)                  this.ClientForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.cIn' this.sOut' Direction.Client).run));                  ClientForwarder.Start();                    StarryboundServer.failedConnections = 0;              }              catch (Exception e)              {                  StarryboundServer.logException("ClientThread Exception: " + e.ToString());                  StarryboundServer.failedConnections++;                  MemoryStream packet = new MemoryStream();                  BinaryWriter packetWrite = new BinaryWriter(packet);                  packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                  this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                  rejectPreConnected("Connection Failed: A internal server error occurred (1)");              }
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: try              {                  this.cIn = new BinaryReader(this.cSocket.GetStream());                  this.cOut = new BinaryWriter(this.cSocket.GetStream());                    IPEndPoint ipep = (IPEndPoint)this.cSocket.Client.RemoteEndPoint;                  IPAddress ipa = ipep.Address;                    this.playerData.ip = ipep.Address.ToString();                    StarryboundServer.logInfo("[" + playerData.client + "] Accepting new connection.");                    if((int)StarryboundServer.serverState < 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is not ready yet.");                      return;                  }                  else if ((int)StarryboundServer.serverState > 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is shutting down.");                      return;                  }                  else if (StarryboundServer.restartTime != 0)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is restarting.");                      return;                  }                    sSocket = new TcpClient();                  sSocket.ReceiveTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  sSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null);                  bool success = result.AsyncWaitHandle.WaitOne(3000' true);                  if (!success || !sSocket.Connected)                  {                      StarryboundServer.failedConnections++;                      if (StarryboundServer.failedConnections >= StarryboundServer.config.maxFailedConnections)                      {                          StarryboundServer.logFatal(StarryboundServer.failedConnections + " clients failed to connect in a row. Restarting...");                          StarryboundServer.serverState = ServerState.Crashed;                      }                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                      rejectPreConnected("Connection Failed: Unable to connect to the parent server.");                      return;                  }                    this.sIn = new BinaryReader(this.sSocket.GetStream());                  this.sOut = new BinaryWriter(this.sSocket.GetStream());                    this.connectedTime = Utils.getTimestamp();                    // Forwarding for data from SERVER (sIn) to CLIENT (cOut)                  this.ServerForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.sIn' this.cOut' Direction.Server).run));                  ServerForwarder.Start();                    // Forwarding for data from CLIENT (cIn) to SERVER (sOut)                  this.ClientForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.cIn' this.sOut' Direction.Client).run));                  ClientForwarder.Start();                    StarryboundServer.failedConnections = 0;              }              catch (Exception e)              {                  StarryboundServer.logException("ClientThread Exception: " + e.ToString());                  StarryboundServer.failedConnections++;                  MemoryStream packet = new MemoryStream();                  BinaryWriter packetWrite = new BinaryWriter(packet);                  packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                  this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                  rejectPreConnected("Connection Failed: A internal server error occurred (1)");              }
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,run,The following statement contains a magic number: try              {                  this.cIn = new BinaryReader(this.cSocket.GetStream());                  this.cOut = new BinaryWriter(this.cSocket.GetStream());                    IPEndPoint ipep = (IPEndPoint)this.cSocket.Client.RemoteEndPoint;                  IPAddress ipa = ipep.Address;                    this.playerData.ip = ipep.Address.ToString();                    StarryboundServer.logInfo("[" + playerData.client + "] Accepting new connection.");                    if((int)StarryboundServer.serverState < 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is not ready yet.");                      return;                  }                  else if ((int)StarryboundServer.serverState > 3)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is shutting down.");                      return;                  }                  else if (StarryboundServer.restartTime != 0)                  {                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                        rejectPreConnected("Connection Failed: The server is restarting.");                      return;                  }                    sSocket = new TcpClient();                  sSocket.ReceiveTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  sSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                  IAsyncResult result = sSocket.BeginConnect((StarryboundServer.config.proxyIP.Equals("0.0.0.0") ? IPAddress.Loopback : IPAddress.Parse(StarryboundServer.config.proxyIP))' StarryboundServer.config.serverPort' null' null);                  bool success = result.AsyncWaitHandle.WaitOne(3000' true);                  if (!success || !sSocket.Connected)                  {                      StarryboundServer.failedConnections++;                      if (StarryboundServer.failedConnections >= StarryboundServer.config.maxFailedConnections)                      {                          StarryboundServer.logFatal(StarryboundServer.failedConnections + " clients failed to connect in a row. Restarting...");                          StarryboundServer.serverState = ServerState.Crashed;                      }                      MemoryStream packet = new MemoryStream();                      BinaryWriter packetWrite = new BinaryWriter(packet);                      packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                      this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                      rejectPreConnected("Connection Failed: Unable to connect to the parent server.");                      return;                  }                    this.sIn = new BinaryReader(this.sSocket.GetStream());                  this.sOut = new BinaryWriter(this.sSocket.GetStream());                    this.connectedTime = Utils.getTimestamp();                    // Forwarding for data from SERVER (sIn) to CLIENT (cOut)                  this.ServerForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.sIn' this.cOut' Direction.Server).run));                  ServerForwarder.Start();                    // Forwarding for data from CLIENT (cIn) to SERVER (sOut)                  this.ClientForwarder = new Thread(new ThreadStart(new ForwardThread(this' this.cIn' this.sOut' Direction.Client).run));                  ClientForwarder.Start();                    StarryboundServer.failedConnections = 0;              }              catch (Exception e)              {                  StarryboundServer.logException("ClientThread Exception: " + e.ToString());                  StarryboundServer.failedConnections++;                  MemoryStream packet = new MemoryStream();                  BinaryWriter packetWrite = new BinaryWriter(packet);                  packetWrite.WriteBE(StarryboundServer.ProtocolVersion);                  this.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                  rejectPreConnected("Connection Failed: A internal server error occurred (1)");              }
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,delayDisconnect,The following statement contains a magic number: kickTargetTimestamp = Utils.getTimestamp() + 6;
Magic Number,com.avilance.Starrybound,Client,C:\repos\AvilanceLtd_StarryboundServer\Client.cs,delayDisconnect,The following statement contains a magic number: kickTargetTimestamp = Utils.getTimestamp() + 6;
Magic Number,com.avilance.Starrybound,SpamAction,C:\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,checkTrigger,The following statement contains a magic number: if (count == countToTrigger)              {                  PlayerData player = client.playerData;                    switch (actionName)                  {                      case "mute":                          player.isMuted = true;                          StarryboundServer.sendGlobalMessage("^#f75d5d;" + player.name + " has been muted automatically for spamming.");                          break;                        case "kick":                          client.kickClient(reason);                          break;                        case "ban":                          if (length != 0) length = Utils.getTimestamp() + (length * 60);                            Bans.addNewBan(player.name' player.uuid' player.ip' Utils.getTimestamp()' "[SYSTEM]"' length' reason);                            client.banClient(reason);                          break;                  }                    return true;              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ForwardThread,C:\repos\AvilanceLtd_StarryboundServer\ForwardThread.cs,run,The following statement contains a magic number: try              {                  for (;;)                  {                      if (!this.client.connectionAlive)                      {                          this.client.forceDisconnect(direction' "Connection no longer alive");                          return;                      }                          if (this.client.kickTargetTimestamp != 0)                      {                          if (this.client.kickTargetTimestamp < Utils.getTimestamp())                          {                              this.client.closeConnection();                              return;                          }                          continue;                      }                        #region Process Packet                      //Packet ID and Vaildity Check.                      uint temp = this.incoming.ReadVarUInt32();                      if (temp < 0 || temp > 48)                      {                          this.client.forceDisconnect(direction' "Sent invalid packet ID [" + temp + "].");                          return;                      }                      Packet packetID = (Packet)temp;                        //Packet Size and Compression Check.                      bool compressed = false;                      int packetSize = this.incoming.ReadVarInt32();                      if (packetSize < 0)                      {                          packetSize = -packetSize;                          compressed = true;                      }                        //Create buffer for forwarding                      byte[] dataBuffer = this.incoming.ReadFully(packetSize);                        //Do decompression                      MemoryStream ms = new MemoryStream();                      if (compressed)                      {                          ZlibStream compressedStream = new ZlibStream(new MemoryStream(dataBuffer)' CompressionMode.Decompress);                          byte[] buffer = new byte[32768];                          for (;;)                          {                              int read = compressedStream.Read(buffer' 0' buffer.Length);                              if (read <= 0)                                  break;                              ms.Write(buffer' 0' read);                          }                          ms.Seek(0' SeekOrigin.Begin);                      }                      else                      {                          ms = new MemoryStream(dataBuffer);                      }                        //Create packet parser                      BinaryReader packetData = new BinaryReader(ms);                      #endregion                        //Return data for packet processor                      object returnData = true;                        if (packetID != Packet.Heartbeat && packetID != Packet.UniverseTimeUpdate)                      {                          if (direction == Direction.Client)                          #region Handle Client Packets                          {                              #region Protocol State Security                              ClientState curState = this.client.state;                              if (curState != ClientState.Connected)                              {                                  if (curState == ClientState.PendingConnect && packetID != Packet.ClientConnect)                                  {                                      this.client.rejectPreConnected("Violated PendingConnect protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingAuthentication && packetID != Packet.HandshakeResponse)                                  {                                      this.client.rejectPreConnected("Violated PendingAuthentication protocol state with " + packetID);                                      return;                                  }                                  else if (curState == ClientState.PendingConnectResponse)                                  {                                      int startTime = Utils.getTimestamp();                                      while (true)                                      {                                          if (this.client.state == ClientState.Connected) break;                                          if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                          {                                              this.client.rejectPreConnected("Connection Failed: Server did not respond in time.");                                              return;                                          }                                      }                                  }                              }                              #endregion                                if (packetID == Packet.ChatSend)                              {                                  returnData = new Packet11ChatSend(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ClientConnect)                              {                                  this.client.state = ClientState.PendingAuthentication;                                  returnData = new Packet7ClientConnect(this.client' packetData' this.direction).onReceive();                                  MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                    passwordSalt = Utils.GenerateSecureSalt();                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordSalt);                                  packetWrite.WriteBE(StarryboundServer.config.passwordRounds);                                  this.client.sendClientPacket(Packet.HandshakeChallenge' packet.ToArray());                              }                              else if (packetID == Packet.HandshakeResponse)                              {                                  string claimResponse = packetData.ReadStarString();                                  string passwordHash = packetData.ReadStarString();                                    string verifyHash = Utils.StarHashPassword(StarryboundServer.config.proxyPass' this.client.playerData.account + passwordSalt' StarryboundServer.config.passwordRounds);                                  if (passwordHash != verifyHash)                                  {                                      this.client.rejectPreConnected("Your password was incorrect.");                                      return;                                  }                                    this.client.state = ClientState.PendingConnectResponse;                                  returnData = false;                              }                              else if (packetID == Packet.WarpCommand)                              {                                  WarpType cmd = (WarpType)packetData.ReadUInt32BE();                                  WorldCoordinate coord = packetData.ReadStarWorldCoordinate();                                  string player = packetData.ReadStarString();                                  if (cmd == WarpType.WarpToPlayerShip)                                  {                                      Client target = StarryboundServer.getClient(player);                                      if (target != null)                                      {                                          if (!this.client.playerData.canAccessShip(target.playerData))                                          {                                              this.client.sendChatMessage("^#5dc4f4;You cannot access this player's ship due to their ship access settings.");                                              StarryboundServer.logDebug("ShipAccess"' "Preventing " + this.client.playerData.name + " from accessing " + target.playerData.name + "'s ship.");                                              MemoryStream packetWarp = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packetWarp);                                              packetWrite.WriteBE((uint)WarpType.WarpToOwnShip);                                              packetWrite.Write(new WorldCoordinate());                                              packetWrite.WriteStarString("");                                              client.sendServerPacket(Packet.WarpCommand' packetWarp.ToArray());                                              returnData = false;                                          }                                          else this.client.playerData.inPlayerShip = true;                                      }                                  }                                  else if (cmd == WarpType.WarpToOwnShip) this.client.playerData.inPlayerShip = true;                                  else this.client.playerData.inPlayerShip = false;                                  StarryboundServer.logDebug("WarpCommand"' "[" + this.client.playerData.client + "][" + cmd + "]" + (coord != null ? "[" + coord.ToString() + "]" : "") + "[" + player + "] inPlayerShip:" + this.client.playerData.inPlayerShip);                              }                              else if (packetID == Packet.ModifyTileList || packetID == Packet.DamageTileGroup || packetID == Packet.DamageTile || packetID == Packet.ConnectWire || packetID == Packet.DisconnectAllWires)                              {                                  if(!this.client.playerData.canIBuild()) returnData = false;                              }                              else if (packetID == Packet.EntityCreate)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if(type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if(type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          MemoryStream packet = new MemoryStream();                                                          BinaryWriter packetWrite = new BinaryWriter(packet);                                                          packetWrite.WriteVarInt32(entityId);                                                          packetWrite.Write(false);                                                          this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  MemoryStream packet = new MemoryStream();                                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                                  packetWrite.WriteVarInt32(entityId);                                                  packetWrite.Write(false);                                                  this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild())                                          {                                              MemoryStream packet = new MemoryStream();                                              BinaryWriter packetWrite = new BinaryWriter(packet);                                              packetWrite.WriteVarInt32(entityId);                                              packetWrite.Write(false);                                              this.client.sendClientPacket(Packet.EntityDestroy' packet.ToArray());                                              returnData = false;                                          }                                      }                                  }                              }                              else if (packetID == Packet.SpawnEntity)                              {                                  while(true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      if (type == EntityType.Projectile)                                      {                                          BinaryReader entity = new BinaryReader(new MemoryStream(entityData));                                          string projectileKey = entity.ReadStarString();                                          object projParams = entity.ReadStarVariant();                                          if (StarryboundServer.config.projectileBlacklist.Contains(projectileKey))                                          {                                              returnData = false;                                          }                                          if (StarryboundServer.serverConfig.useDefaultWorldCoordinate && StarryboundServer.config.spawnWorldProtection)                                          {                                              if (this.client.playerData.loc != null)                                              {                                                  if (StarryboundServer.config.projectileBlacklistSpawn.Contains(projectileKey) ^ StarryboundServer.config.projectileSpawnListIsWhitelist)                                                  {                                                      if (StarryboundServer.spawnPlanet.Equals(this.client.playerData.loc) && !this.client.playerData.group.hasPermission("admin.spawnbuild") && !this.client.playerData.inPlayerShip)                                                      {                                                          returnData = false;                                                      }                                                  }                                              }                                              else                                              {                                                  returnData = false;                                              }                                          }                                      }                                      else if (type == EntityType.Object || type == EntityType.Plant || type == EntityType.PlantDrop || type == EntityType.Monster)                                      {                                          if (!this.client.playerData.canIBuild()) returnData = false;                                      }                                  }                              }                          }                          #endregion                          else                          #region Handle Server Packets                          {                              if (packetID == Packet.ChatReceive)                              {                                  returnData = new Packet5ChatReceive(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.ProtocolVersion)                              {                                  uint protocolVersion = packetData.ReadUInt32BE();                                  if (protocolVersion != StarryboundServer.ProtocolVersion)                                  {                                      MemoryStream packet = new MemoryStream();                                      BinaryWriter packetWrite = new BinaryWriter(packet);                                      packetWrite.WriteBE(protocolVersion);                                      this.client.sendClientPacket(Packet.ProtocolVersion' packet.ToArray());                                        this.client.rejectPreConnected("Connection Failed: Unable to handle parent server protocol version.");                                      return;                                  }                              }                              else if (packetID == Packet.HandshakeChallenge)                              {                                  string claimMessage = packetData.ReadString();                                  string passwordSalt = packetData.ReadStarString();                                  int passwordRounds = packetData.ReadInt32BE();                                    MemoryStream packet = new MemoryStream();                                  BinaryWriter packetWrite = new BinaryWriter(packet);                                  string passwordHash = Utils.StarHashPassword(StarryboundServer.privatePassword' passwordSalt' passwordRounds);                                  packetWrite.WriteStarString("");                                  packetWrite.WriteStarString(passwordHash);                                  this.client.sendServerPacket(Packet.HandshakeResponse' packet.ToArray());                                    returnData = false;                              }                              else if (packetID == Packet.ConnectResponse)                              {                                  int startTime = Utils.getTimestamp();                                  while (true)                                   {                                      if (this.client.state == ClientState.PendingConnectResponse) break;                                      if (Utils.getTimestamp() > startTime + StarryboundServer.config.connectTimeout)                                      {                                          this.client.rejectPreConnected("Connection Failed: Client did not respond with handshake.");                                          return;                                      }                                  }                                  returnData = new Packet2ConnectResponse(this.client' packetData' this.direction).onReceive();                              }                              else if (packetID == Packet.WorldStart)                              {                                  if (!this.client.playerData.sentMotd)                                  {                                      this.client.sendChatMessage(Config.GetMotd());                                        if (!this.client.playerData.group.hasPermission("world.build"))                                          this.client.sendChatMessage("^#f75d5d;" + StarryboundServer.config.buildErrorMessage);                                        this.client.playerData.sentMotd = true;                                  }                                    var unk4 = packetData.ReadStarVariant();                                  var unk3 = packetData.ReadStarVariant();                                  byte[] unk1 = packetData.ReadStarByteArray();                                  byte[] unk2 = packetData.ReadStarByteArray();                                  float spawnX = packetData.ReadSingleBE();                                  float spawnY = packetData.ReadSingleBE();                                  var mapParamsSize = packetData.ReadStarVariant();                                  /*                                  for (int i = 0; i < mapParamsSize; i++)                                  {                                      string key = packetData.ReadStarString();                                      var value = packetData.ReadStarVariant();                                      mapParams.Add(key' value);                                      if(key == "fuel.level")                                      {                                          isPlayerShip++;                                      }                                      else if(key == "fuel.max")                                      {                                          isPlayerShip++;                                      }                                  }                                  this.client.playerData.inPlayerShip = (isPlayerShip == 2);                                  */                                  uint clientID = packetData.ReadUInt32BE();                                  bool interpolation = packetData.ReadBoolean();                                  WorldCoordinate coords = Utils.findGlobalCoords(unk1);                                  if (coords != null)                                  {                                      this.client.playerData.loc = coords;                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                  }                                  else                                      StarryboundServer.logDebug("WorldStart"' "[" + this.client.playerData.client + "][" + interpolation + ":" + clientID + "] InPlayerShip:[" + this.client.playerData.inPlayerShip + "]");                              }                              else if (packetID == Packet.WorldStop)                              {                                  string status = packetData.ReadStarString();                              }                              else if (packetID == Packet.GiveItem)                              {                                  string name = packetData.ReadStarString();                                  uint count = packetData.ReadVarUInt32();                                  var itemDesc = packetData.ReadStarVariant();                              }                              else if (packetID == Packet.EnvironmentUpdate)                              {                                  byte[] sky = packetData.ReadStarByteArray();                                  byte[] serverWeather = packetData.ReadStarByteArray();                                  if (this.client.playerData.loc == null)                                  {                                      WorldCoordinate coords = Utils.findGlobalCoords(sky);                                      if (coords != null)                                      {                                          this.client.playerData.loc = coords;                                          StarryboundServer.logDebug("EnvUpdate"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "]");                                      }                                  }                              }                              else if (packetID == Packet.ClientContextUpdate)                              {                                  try                                  {                                      byte[] clientContextData = packetData.ReadStarByteArray();                                      if (clientContextData.Length != 0)                                      {                                          BinaryReader clientContextReader = new BinaryReader(new MemoryStream(clientContextData));                                          byte[] data = clientContextReader.ReadStarByteArray();                                          if (data.Length > 8) //Should at least be more than 8 bytes for it to contain the data we want.                                          {                                              BinaryReader dataReader = new BinaryReader(new MemoryStream(data));                                              byte dataBufferLength = dataReader.ReadByte();                                              if (dataBufferLength == 2)                                              {                                                  byte arrayLength = dataReader.ReadByte();                                                  if (arrayLength == 2 || arrayLength == 4) //Only observed these being used so far for what we want.                                                  {                                                      byte dataType = dataReader.ReadByte(); //04 = String' 0E = CelestialLog                                                      if (dataType == 4)                                                      {                                                          string string1 = dataReader.ReadStarString();                                                          if (dataReader.BaseStream.Position != dataReader.BaseStream.Length)                                                          {                                                              if (string1 == "null")                                                              {                                                                  byte[] worldHeader = dataReader.ReadStarByteArray(); //0008020A000C                                                                  byte[] worldData = dataReader.ReadStarByteArray();                                                                  byte typeByte = dataReader.ReadByte(); //0E = CelestialLog                                                                  if (typeByte == 14)                                                                  {                                                                      Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                                      log.TryGetValue("loc"' out this.client.playerData.loc);                                                                      if (!log.TryGetValue("home"' out this.client.playerData.home))                                                                          this.client.playerData.home = this.client.playerData.loc;                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                                  }                                                              }                                                          }                                                      }                                                      else if (dataType == 14)                                                      {                                                          Dictionary<string' WorldCoordinate> log = dataReader.ReadStarCelestialLog();                                                          log.TryGetValue("loc"' out this.client.playerData.loc);                                                          if (!log.TryGetValue("home"' out this.client.playerData.home))                                                              this.client.playerData.home = this.client.playerData.loc;                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurLoc:[" + this.client.playerData.loc.ToString() + "][" + this.client.playerData.inPlayerShip + "]");                                                          StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] CurHome:[" + this.client.playerData.home.ToString() + "]");                                                      }                                                  }                                              }                                          }                                      }                                  }                                  catch (Exception e)                                  {                                      StarryboundServer.logDebug("ClientContext"' "[" + this.client.playerData.client + "] Failed to parse ClientContextUpdate from Server: " + e.ToString());                                  }                              }                              else if (packetID == Packet.EntityCreate)                              {                                  MemoryStream sendStream = new MemoryStream();                                  BinaryWriter sendWriter = new BinaryWriter(sendStream);                                  bool test = true;                                  while (true)                                  {                                      EntityType type = (EntityType)packetData.Read();                                      if (type == EntityType.EOF) break;                                      byte[] entityData = packetData.ReadStarByteArray();                                      int entityId = packetData.ReadVarInt32();                                      if (type == EntityType.Player)                                      {                                          byte[] buffer = new byte[16];                                          Buffer.BlockCopy(entityData' 0' buffer' 0' 16);                                          buffer = Utils.HashUUID(buffer);                                          Buffer.BlockCopy(buffer' 0' entityData' 0' 16);                                          returnData = test = false;                                      }                                      sendWriter.Write((byte)type);                                      sendWriter.WriteVarUInt64((ulong)entityData.Length);                                      sendWriter.Write(entityData);                                      sendWriter.WriteVarInt32(entityId);                                  }                                  if(test == false)                                  {                                      this.outgoing.WriteVarUInt32((uint)packetID);                                      this.outgoing.WriteVarInt32((int)sendStream.Length);                                      this.outgoing.Write(sendStream.ToArray());                                      this.outgoing.Flush();                                  }                              }                          }                          #endregion                      }                        //Check return data                      if (returnData is Boolean)                      {                          if ((Boolean)returnData == false) continue;                      }                      else if (returnData is int)                      {                          if ((int)returnData == -1)                          {                              this.client.forceDisconnect(direction' "Command processor requested to drop client");                              return;                          }                      }                        #region Forward Packet                      //Write data to dest                      this.outgoing.WriteVarUInt32((uint)packetID);                      if (compressed)                      {                          this.outgoing.WriteVarInt32(-packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      else                      {                          this.outgoing.WriteVarInt32(packetSize);                          this.outgoing.Write(dataBuffer' 0' packetSize);                      }                      this.outgoing.Flush();                      #endregion                        #region Inject from Packet Queue                      var chatbuffer = this.client.packetQueue;                      foreach (Packet11ChatSend chatPacket in chatbuffer)                      {                          chatPacket.onSend();                      }                        this.client.packetQueue = new List<Packet11ChatSend>();                      #endregion                        //If disconnect was forwarded to client' lets disconnect.                      if(packetID == Packet.ServerDisconnect && direction == Direction.Server)                      {                          this.client.closeConnection();                      }                  }              }              catch (ThreadAbortException) { }              catch (EndOfStreamException)               {                  this.client.forceDisconnect(direction' "End of stream");              }              catch (Exception e)              {                  if(e.InnerException != null)                  {                      if(e.InnerException is System.Net.Sockets.SocketException)                      {                          this.client.forceDisconnect(direction' e.InnerException.Message);                          return;                      }                    }                  this.client.forceDisconnect(direction' "ForwardThread Exception: " + e.ToString());              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The following statement contains a magic number: try              {                  IPAddress localAdd = IPAddress.Parse(StarryboundServer.config.proxyIP);                  tcpSocket = new TcpListener(localAdd' StarryboundServer.config.proxyPort);                  tcpSocket.Start();                    StarryboundServer.logInfo("Proxy server has been started on " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort);                  StarryboundServer.changeState(ServerState.ListenerReady' "ListenerThread::runTcp");                    try                  {                      while (true)                      {                          TcpClient clientSocket = tcpSocket.AcceptTcpClient();                          clientSocket.ReceiveTimeout = StarryboundServer.config.clientSocketTimeout * 1000;                          clientSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                          new Thread(new ThreadStart(new Client(clientSocket).run)).Start();                      }                  }                  catch (ThreadAbortException)                   {                      StarryboundServer.changeState(ServerState.Crashed' "ListenerThread::runTcp"' "Thread has been aborted");                  }                  catch (Exception e)                  {                      if ((int)StarryboundServer.serverState > 3) return;                      StarryboundServer.logException("ListenerThread Exception: " + e.ToString());                      StarryboundServer.changeState(ServerState.Crashed' "ListenerThread::runTcp"' e.ToString());                  }                    tcpSocket.Stop();                  StarryboundServer.logFatal("ListenerThread has failed - No new connections will be possible.");              }              catch (ThreadAbortException) { }              catch(SocketException e)              {                  StarryboundServer.logFatal("TcpListener has failed to start: " + e.Message);                  StarryboundServer.serverState = ServerState.Crashed;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The following statement contains a magic number: try              {                  IPAddress localAdd = IPAddress.Parse(StarryboundServer.config.proxyIP);                  tcpSocket = new TcpListener(localAdd' StarryboundServer.config.proxyPort);                  tcpSocket.Start();                    StarryboundServer.logInfo("Proxy server has been started on " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort);                  StarryboundServer.changeState(ServerState.ListenerReady' "ListenerThread::runTcp");                    try                  {                      while (true)                      {                          TcpClient clientSocket = tcpSocket.AcceptTcpClient();                          clientSocket.ReceiveTimeout = StarryboundServer.config.clientSocketTimeout * 1000;                          clientSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                          new Thread(new ThreadStart(new Client(clientSocket).run)).Start();                      }                  }                  catch (ThreadAbortException)                   {                      StarryboundServer.changeState(ServerState.Crashed' "ListenerThread::runTcp"' "Thread has been aborted");                  }                  catch (Exception e)                  {                      if ((int)StarryboundServer.serverState > 3) return;                      StarryboundServer.logException("ListenerThread Exception: " + e.ToString());                      StarryboundServer.changeState(ServerState.Crashed' "ListenerThread::runTcp"' e.ToString());                  }                    tcpSocket.Stop();                  StarryboundServer.logFatal("ListenerThread has failed - No new connections will be possible.");              }              catch (ThreadAbortException) { }              catch(SocketException e)              {                  StarryboundServer.logFatal("TcpListener has failed to start: " + e.Message);                  StarryboundServer.serverState = ServerState.Crashed;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,runTcp,The following statement contains a magic number: try              {                  IPAddress localAdd = IPAddress.Parse(StarryboundServer.config.proxyIP);                  tcpSocket = new TcpListener(localAdd' StarryboundServer.config.proxyPort);                  tcpSocket.Start();                    StarryboundServer.logInfo("Proxy server has been started on " + localAdd.ToString() + ":" + StarryboundServer.config.proxyPort);                  StarryboundServer.changeState(ServerState.ListenerReady' "ListenerThread::runTcp");                    try                  {                      while (true)                      {                          TcpClient clientSocket = tcpSocket.AcceptTcpClient();                          clientSocket.ReceiveTimeout = StarryboundServer.config.clientSocketTimeout * 1000;                          clientSocket.SendTimeout = StarryboundServer.config.internalSocketTimeout * 1000;                          new Thread(new ThreadStart(new Client(clientSocket).run)).Start();                      }                  }                  catch (ThreadAbortException)                   {                      StarryboundServer.changeState(ServerState.Crashed' "ListenerThread::runTcp"' "Thread has been aborted");                  }                  catch (Exception e)                  {                      if ((int)StarryboundServer.serverState > 3) return;                      StarryboundServer.logException("ListenerThread Exception: " + e.ToString());                      StarryboundServer.changeState(ServerState.Crashed' "ListenerThread::runTcp"' e.ToString());                  }                    tcpSocket.Stop();                  StarryboundServer.logFatal("ListenerThread has failed - No new connections will be possible.");              }              catch (ThreadAbortException) { }              catch(SocketException e)              {                  StarryboundServer.logFatal("TcpListener has failed to start: " + e.Message);                  StarryboundServer.serverState = ServerState.Crashed;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: byte headerByte = data[4];
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,SourceRequest,The following statement contains a magic number: switch (headerByte)              {                  case 0x54:                      dataArray = new byte[data.Length - 6];                        Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        string text = Encoding.UTF8.GetString(dataArray);                      string needle = "Source Engine Query";                        if (text != needle)                      {                          StarryboundServer.logError("RCON: Received invalid A2S_INFO request: " + text + " is invalid.");                          return;                      }                      else StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Matched A2S_INFO request!");                        try                      {                          byte header = 0x49;                          byte protocol = 0x02;                          byte[] name = encodeString(StarryboundServer.config.serverName);                          byte[] map = encodeString("Starbound");                          byte[] folder = encodeString("na");                          byte[] game = encodeString("Starbound");                          byte[] appID = BitConverter.GetBytes(Convert.ToUInt16(1337));                          byte players = Convert.ToByte((uint)StarryboundServer.clientCount);                          byte maxplayers = Convert.ToByte((uint)StarryboundServer.config.maxClients);                          byte bots = Convert.ToByte((uint)0);                          byte servertype = Convert.ToByte('d');                          byte environment = Convert.ToByte((StarryboundServer.IsMono ? 'l' : 'w'));                          byte visibility = Convert.ToByte((uint)(StarryboundServer.config.proxyPass == "" ? 0 : 1));                          byte vac = Convert.ToByte((uint)0);                          byte[] version = encodeString(StarryboundServer.starboundVersion.Name);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(header);                          s.WriteByte(protocol);                          s.Write(name' 0' name.Length);                          s.Write(map' 0' map.Length);                          s.Write(folder' 0' folder.Length);                          s.Write(game' 0' game.Length);                          s.Write(appID' 0' appID.Length);                          s.WriteByte(players);                          s.WriteByte(maxplayers);                          s.WriteByte(bots);                          s.WriteByte(servertype);                          s.WriteByte(environment);                          s.WriteByte(visibility);                          s.WriteByte(vac);                          s.Write(version' 0' version.Length);                            StarryboundServer.logInfo("RCON: Sending A2S_INFO Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      catch (Exception e)                      {                          StarryboundServer.logError("RCON: Unable to send data to stream! An error occurred.");                          StarryboundServer.logError("RCON: " + e.ToString());                      }                      break;                    case 0x55:                      StarryboundServer.logDebug("ListenerThread::SourceRequest"' "RCON: Received A2S_PLAYER request from " + remote);                        dataArray = new byte[4];                      Buffer.BlockCopy(data' 5' dataArray' 0' dataArray.Length);                        if (dataArray.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          var buffer = new byte[4];                          new Random().NextBytes(buffer);                            if (challengeData.ContainsKey(remote)) challengeData.Remove(remote);                          challengeData.Add(remote' buffer);                            var s = new MemoryStream();                          s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                          s.WriteByte(0x41);                          s.Write(buffer' 0' 4);                            StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Challenge Response packet to " + remote);                          udpSocket.SendTo(s.ToArray()' remote);                      }                      else                      {                          if (!challengeData.ContainsKey(remote)) StarryboundServer.logError("RCON: Illegal A2S_PLAYER request received from " + remote + ". No challenge number has been issued to this address.");                          else                          {                              var s = new MemoryStream();                              s.Write(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }' 0' 4);                              s.WriteByte(0x44);                                s.WriteByte(Convert.ToByte((uint)StarryboundServer.clientCount));                                List<Client> clientList = StarryboundServer.getClients();                                for (var i = 0; i < clientList.Count; i++)                              {                                  Client client = clientList[i];                                  s.WriteByte(Convert.ToByte((uint)i));                                    byte[] name = encodeString(client.playerData.name);                                  s.Write(name' 0' name.Length);                                    byte[] score = new byte[4];                                  score = BitConverter.GetBytes((int)0);                                  s.Write(score' 0' score.Length);                                    float seconds = Utils.getTimestamp() - client.connectedTime;                                  byte[] connected = new byte[4];                                  connected = BitConverter.GetBytes(seconds);                                  s.Write(connected' 0' connected.Length);                                    //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "Client ID #" + i + ": " + Utils.ByteArrayToString(new byte[] { Convert.ToByte((uint)i) }) + Utils.ByteArrayToString(name) + Utils.ByteArrayToString(score) + Utils.ByteArrayToString(connected));                              }                                StarryboundServer.logInfo("RCON: Sending A2S_PLAYER Response packet for " + StarryboundServer.clientCount + " player(s) to " + remote);                              //StarryboundServer.logDebug("ListenerThread::SourceA2SPlayer"' "RCON: Dump packet: " + Utils.ByteArrayToString(s.ToArray()));                              udpSocket.SendTo(s.ToArray()' remote);                          }                      }                      break;                    default:                      StarryboundServer.logError("RCON: Received unknown or unsupported header byte - " + headerByte);                      break;              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The following statement contains a magic number: try              {                  Buffer.BlockCopy(dataBuffer' 0' data' 0' bytesRead);                    /*                   * Source Query packets begin with 0xFF (x4)                   */                    if (bytesRead > 4)                  {                      byte[] sourceCheck = new byte[] { data[0]' data[1]' data[2]' data[3] };                        if (sourceCheck.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          SourceRequest(data' remote);                          return;                      }                  }                    string text = Encoding.UTF8.GetString(data' 0' bytesRead);                    StarryboundServer.logInfo(String.Format("RCON: Received non-source request of {0} bytes from {1}: {2}"' bytesRead' remote' text));              }              catch (Exception e)              {                  StarryboundServer.logError("Bad RCON request received. " + e.ToString());                  StarryboundServer.logError("RCON: Binary data: " + Utils.ByteArrayToString(data));              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The following statement contains a magic number: try              {                  Buffer.BlockCopy(dataBuffer' 0' data' 0' bytesRead);                    /*                   * Source Query packets begin with 0xFF (x4)                   */                    if (bytesRead > 4)                  {                      byte[] sourceCheck = new byte[] { data[0]' data[1]' data[2]' data[3] };                        if (sourceCheck.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          SourceRequest(data' remote);                          return;                      }                  }                    string text = Encoding.UTF8.GetString(data' 0' bytesRead);                    StarryboundServer.logInfo(String.Format("RCON: Received non-source request of {0} bytes from {1}: {2}"' bytesRead' remote' text));              }              catch (Exception e)              {                  StarryboundServer.logError("Bad RCON request received. " + e.ToString());                  StarryboundServer.logError("RCON: Binary data: " + Utils.ByteArrayToString(data));              }
Magic Number,com.avilance.Starrybound,ListenerThread,C:\repos\AvilanceLtd_StarryboundServer\ListenerThread.cs,OnReceive,The following statement contains a magic number: try              {                  Buffer.BlockCopy(dataBuffer' 0' data' 0' bytesRead);                    /*                   * Source Query packets begin with 0xFF (x4)                   */                    if (bytesRead > 4)                  {                      byte[] sourceCheck = new byte[] { data[0]' data[1]' data[2]' data[3] };                        if (sourceCheck.SequenceEqual(new byte[] { 0xFF' 0xFF' 0xFF' 0xFF }))                      {                          SourceRequest(data' remote);                          return;                      }                  }                    string text = Encoding.UTF8.GetString(data' 0' bytesRead);                    StarryboundServer.logInfo(String.Format("RCON: Received non-source request of {0} bytes from {1}: {2}"' bytesRead' remote' text));              }              catch (Exception e)              {                  StarryboundServer.logError("Bad RCON request received. " + e.ToString());                  StarryboundServer.logError("RCON: Binary data: " + Utils.ByteArrayToString(data));              }
Magic Number,com.avilance.Starrybound,BootstrapConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\BootstrapConfig.cs,SetupConfig,The following statement contains a magic number: if (File.Exists(BootstrapPath))              {                  StarryboundServer.bootstrapConfig = BootstrapFile.Read(BootstrapPath);                  StarryboundServer.SavePath = StarryboundServer.bootstrapConfig.storageDirectory + Path.DirectorySeparatorChar + "starrybound";              }              else              {                  Console.WriteLine("[FATAL ERROR] bootstrap.config file could not be detected!");                  Thread.Sleep(5000);                  Environment.Exit(7);              }
Magic Number,com.avilance.Starrybound,BootstrapConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\BootstrapConfig.cs,SetupConfig,The following statement contains a magic number: if (File.Exists(BootstrapPath))              {                  StarryboundServer.bootstrapConfig = BootstrapFile.Read(BootstrapPath);                  StarryboundServer.SavePath = StarryboundServer.bootstrapConfig.storageDirectory + Path.DirectorySeparatorChar + "starrybound";              }              else              {                  Console.WriteLine("[FATAL ERROR] bootstrap.config file could not be detected!");                  Thread.Sleep(5000);                  Environment.Exit(7);              }
Magic Number,com.avilance.Starrybound,BootstrapFile,C:\repos\AvilanceLtd_StarryboundServer\Config\BootstrapConfig.cs,Read,The following statement contains a magic number: try              {                  using (var sr = new StreamReader(stream))                  {                      return JsonConvert.DeserializeObject<BootstrapFile>(sr.ReadToEnd());                  }              }              catch (Exception)              {                  StarryboundServer.logFatal("bootstrap.config file is unreadable. The server start cannot continue.");                  Thread.Sleep(5000);                  Environment.Exit(6);              }
Magic Number,com.avilance.Starrybound,BootstrapFile,C:\repos\AvilanceLtd_StarryboundServer\Config\BootstrapConfig.cs,Read,The following statement contains a magic number: try              {                  using (var sr = new StreamReader(stream))                  {                      return JsonConvert.DeserializeObject<BootstrapFile>(sr.ReadToEnd());                  }              }              catch (Exception)              {                  StarryboundServer.logFatal("bootstrap.config file is unreadable. The server start cannot continue.");                  Thread.Sleep(5000);                  Environment.Exit(6);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,SetupConfig,The following statement contains a magic number: try              {                  if (File.Exists(ConfigPath))                  {                      StarryboundServer.serverConfig = ServerFile.Read(ConfigPath);                  }                  StarryboundServer.serverConfig.gamePort = StarryboundServer.config.serverPort;                  StarryboundServer.privatePassword = Utils.GenerateSecureSalt();                  StarryboundServer.serverConfig.serverPasswords = new string[] { StarryboundServer.privatePassword };                  StarryboundServer.serverConfig.maxPlayers = StarryboundServer.config.maxClients + 10;                  StarryboundServer.serverConfig.bind = StarryboundServer.config.proxyIP;                  if (StarryboundServer.serverConfig.useDefaultWorldCoordinate)                  {                      string[] spawnPlanet = StarryboundServer.serverConfig.defaultWorldCoordinate.Split(':');                      if (spawnPlanet.Length == 5) StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' 0);                      else StarryboundServer.spawnPlanet = new WorldCoordinate(spawnPlanet[0]' Convert.ToInt32(spawnPlanet[1])' Convert.ToInt32(spawnPlanet[2])' Convert.ToInt32(spawnPlanet[3])' Convert.ToInt32(spawnPlanet[4])' Convert.ToInt32(spawnPlanet[5]));                  }                  StarryboundServer.serverConfig.Write(ConfigPath);              }              catch(Exception e)              {                  StarryboundServer.logFatal("Failed to parse starbound.config: " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(8);              }
Magic Number,com.avilance.Starrybound,ServerConfig,C:\repos\AvilanceLtd_StarryboundServer\Config\ServerConfig.cs,RemovePrivateConfig,The following statement contains a magic number: StarryboundServer.serverConfig.gamePort = 21025;
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,ServerThread,C:\repos\AvilanceLtd_StarryboundServer\ServerThread.cs,parseOutput,The following statement contains a magic number: try              {                  foreach (string line in filterConsole)                  {                      if (consoleLine.Contains(line)) return;                  }                    if (consoleLine.StartsWith("Error: ") || consoleLine.StartsWith("AssetException:"))                  {                      this.parseError = true;                  }                  else if ((consoleLine.StartsWith("Warn:") || consoleLine.StartsWith("Info:") || consoleLine.StartsWith("Debug:")) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                  }                  else if (String.IsNullOrWhiteSpace(consoleLine) && this.parseError)                  {                      logStarboundError(" ");                      this.parseError = false;                      return;                  }                    if (consoleLine.StartsWith("Warn: Perf: "))                  {                      string[] perf = consoleLine.Remove(0' 12).Split(' ');                      string function = perf[0];                      float millis = Convert.ToSingle(perf[2]);                      if (millis > 5000)                      {                          StarryboundServer.logWarn("Parent Server [" + function + "] lagged for " + (millis / 1000) + " seconds");                      }                      return;                  }                  else if (consoleLine.Contains("Info: Server version"))                  {                      string[] versionString = consoleLine.Split('\'');                      string versionName = versionString[1];                      int protocolVersion = int.Parse(versionString[3]);                      StarryboundServer.starboundVersion.Protocol = protocolVersion;                      StarryboundServer.starboundVersion.Name = versionName;                      if (protocolVersion != StarryboundServer.ProtocolVersion)                      {                          StarryboundServer.logFatal("Detected protcol version [" + protocolVersion + "] != [" + StarryboundServer.ProtocolVersion + "] to expected protocol version!");                          Thread.Sleep(5000);                          Environment.Exit(4);                      }                      StarryboundServer.logInfo("Parent Server Version: [" + versionName + "] Protocol: [" + protocolVersion + "]");                      return;                  }                  else if (consoleLine.Contains("TcpServer will close' listener thread caught exception"))                  {                      StarryboundServer.logFatal("Parent Server TcpServer listener thread caught exception' Forcing a restart.");                      StarryboundServer.changeState(ServerState.Crashed' "ServerThread::parseOutput"' "Starbound Tcp listener has crashed");                  }                  else if (consoleLine.Contains("TcpServer listening on: "))                  {                      StarryboundServer.changeState(ServerState.StarboundReady' "ServerThread::parseOutput");                      ServerConfig.RemovePrivateConfig();                  }                  else if (consoleLine.StartsWith("Info: Kicking client "))                  {                      string[] kick = consoleLine.Remove(0' 21).Split(' ');                      string user = kick[0];                      string id = kick[1];                      string ip = kick[2];                      StarryboundServer.logWarn("Parent Server disconnected " + user + " " + ip + " for inactivity.");                      return;                  }                    if (!this.parseError) Console.WriteLine("[STAR] " + consoleLine);                  else logStarboundError(consoleLine);              }              catch (Exception) { }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: if(config.proxyPort == config.serverPort)              {                  logFatal("You cannot have the serverPort and proxyPort on the same port!");                  Thread.Sleep(5000);                  Environment.Exit(3);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: if(config.proxyPort == config.serverPort)              {                  logFatal("You cannot have the serverPort and proxyPort on the same port!");                  Thread.Sleep(5000);                  Environment.Exit(3);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: if ((int)serverState > 3) return;
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,Main,The following statement contains a magic number: if ((int)serverState > 3) return;
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: while (true)              {                  if (lastCount != clientCount && serverState == ServerState.Running)                      Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")";                    if (logWriteBuffer.Count > 0)                  {                      try                      {                          using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                          {                              for (int i = 0; i < logWriteBuffer.Count; i++)                              {                                  w.WriteLine(logWriteBuffer[i]);                                  logWriteBuffer.RemoveAt(i);                              }                          }                      }                      catch (Exception e)                      {                          if (config.logLevel == LogType.Debug) Console.WriteLine("[DEBUG] Logger Exception: " + e.ToString());                      }                  }                    if (restartTime != 0)                  {                      int remaining = restartTime - Utils.getTimestamp();                      if (remaining < 0)                           doRestart();                      else if ((remaining % 5 == 0 || remaining < 5) && remaining != 0)                      {                          logWarn("The server will restart in " + remaining + " seconds.");                          sendGlobalMessage("^#f75d5d;The server will restart in " + remaining + " seconds.");                      }                  }                    if (serverState == ServerState.Crashed)                  {                      logFatal("The server has encountered a fatal error and cannot continue. Restarting in 5 seconds.");                      Thread.Sleep(5000);                      doRestart();                      return;                  }                  else if(serverState == ServerState.Shutdown)                  {                      logFatal("OS' or Unhandled Exception requested immediate shutdown.");                      doShutdown(true);                      Environment.Exit(0);                  }                  else if(serverState == ServerState.GracefulShutdown)                  {                      logWarn("User or Console requested graceful shutdown.");                      doShutdown(false);                      Environment.Exit(0);                  }                    if (restartTime != 0)                      Thread.Sleep(1000);                  else                      Thread.Sleep(2000);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: while (true)              {                  if (lastCount != clientCount && serverState == ServerState.Running)                      Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")";                    if (logWriteBuffer.Count > 0)                  {                      try                      {                          using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                          {                              for (int i = 0; i < logWriteBuffer.Count; i++)                              {                                  w.WriteLine(logWriteBuffer[i]);                                  logWriteBuffer.RemoveAt(i);                              }                          }                      }                      catch (Exception e)                      {                          if (config.logLevel == LogType.Debug) Console.WriteLine("[DEBUG] Logger Exception: " + e.ToString());                      }                  }                    if (restartTime != 0)                  {                      int remaining = restartTime - Utils.getTimestamp();                      if (remaining < 0)                           doRestart();                      else if ((remaining % 5 == 0 || remaining < 5) && remaining != 0)                      {                          logWarn("The server will restart in " + remaining + " seconds.");                          sendGlobalMessage("^#f75d5d;The server will restart in " + remaining + " seconds.");                      }                  }                    if (serverState == ServerState.Crashed)                  {                      logFatal("The server has encountered a fatal error and cannot continue. Restarting in 5 seconds.");                      Thread.Sleep(5000);                      doRestart();                      return;                  }                  else if(serverState == ServerState.Shutdown)                  {                      logFatal("OS' or Unhandled Exception requested immediate shutdown.");                      doShutdown(true);                      Environment.Exit(0);                  }                  else if(serverState == ServerState.GracefulShutdown)                  {                      logWarn("User or Console requested graceful shutdown.");                      doShutdown(false);                      Environment.Exit(0);                  }                    if (restartTime != 0)                      Thread.Sleep(1000);                  else                      Thread.Sleep(2000);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: while (true)              {                  if (lastCount != clientCount && serverState == ServerState.Running)                      Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")";                    if (logWriteBuffer.Count > 0)                  {                      try                      {                          using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                          {                              for (int i = 0; i < logWriteBuffer.Count; i++)                              {                                  w.WriteLine(logWriteBuffer[i]);                                  logWriteBuffer.RemoveAt(i);                              }                          }                      }                      catch (Exception e)                      {                          if (config.logLevel == LogType.Debug) Console.WriteLine("[DEBUG] Logger Exception: " + e.ToString());                      }                  }                    if (restartTime != 0)                  {                      int remaining = restartTime - Utils.getTimestamp();                      if (remaining < 0)                           doRestart();                      else if ((remaining % 5 == 0 || remaining < 5) && remaining != 0)                      {                          logWarn("The server will restart in " + remaining + " seconds.");                          sendGlobalMessage("^#f75d5d;The server will restart in " + remaining + " seconds.");                      }                  }                    if (serverState == ServerState.Crashed)                  {                      logFatal("The server has encountered a fatal error and cannot continue. Restarting in 5 seconds.");                      Thread.Sleep(5000);                      doRestart();                      return;                  }                  else if(serverState == ServerState.Shutdown)                  {                      logFatal("OS' or Unhandled Exception requested immediate shutdown.");                      doShutdown(true);                      Environment.Exit(0);                  }                  else if(serverState == ServerState.GracefulShutdown)                  {                      logWarn("User or Console requested graceful shutdown.");                      doShutdown(false);                      Environment.Exit(0);                  }                    if (restartTime != 0)                      Thread.Sleep(1000);                  else                      Thread.Sleep(2000);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: while (true)              {                  if (lastCount != clientCount && serverState == ServerState.Running)                      Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")";                    if (logWriteBuffer.Count > 0)                  {                      try                      {                          using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                          {                              for (int i = 0; i < logWriteBuffer.Count; i++)                              {                                  w.WriteLine(logWriteBuffer[i]);                                  logWriteBuffer.RemoveAt(i);                              }                          }                      }                      catch (Exception e)                      {                          if (config.logLevel == LogType.Debug) Console.WriteLine("[DEBUG] Logger Exception: " + e.ToString());                      }                  }                    if (restartTime != 0)                  {                      int remaining = restartTime - Utils.getTimestamp();                      if (remaining < 0)                           doRestart();                      else if ((remaining % 5 == 0 || remaining < 5) && remaining != 0)                      {                          logWarn("The server will restart in " + remaining + " seconds.");                          sendGlobalMessage("^#f75d5d;The server will restart in " + remaining + " seconds.");                      }                  }                    if (serverState == ServerState.Crashed)                  {                      logFatal("The server has encountered a fatal error and cannot continue. Restarting in 5 seconds.");                      Thread.Sleep(5000);                      doRestart();                      return;                  }                  else if(serverState == ServerState.Shutdown)                  {                      logFatal("OS' or Unhandled Exception requested immediate shutdown.");                      doShutdown(true);                      Environment.Exit(0);                  }                  else if(serverState == ServerState.GracefulShutdown)                  {                      logWarn("User or Console requested graceful shutdown.");                      doShutdown(false);                      Environment.Exit(0);                  }                    if (restartTime != 0)                      Thread.Sleep(1000);                  else                      Thread.Sleep(2000);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,crashMonitor,The following statement contains a magic number: while (true)              {                  if (lastCount != clientCount && serverState == ServerState.Running)                      Console.Title = serverConfig.serverName + " (" + clientCount + "/" + config.maxClients + ") - Starrybound Server (" + VersionNum + ") (" + ProtocolVersion + ")";                    if (logWriteBuffer.Count > 0)                  {                      try                      {                          using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                          {                              for (int i = 0; i < logWriteBuffer.Count; i++)                              {                                  w.WriteLine(logWriteBuffer[i]);                                  logWriteBuffer.RemoveAt(i);                              }                          }                      }                      catch (Exception e)                      {                          if (config.logLevel == LogType.Debug) Console.WriteLine("[DEBUG] Logger Exception: " + e.ToString());                      }                  }                    if (restartTime != 0)                  {                      int remaining = restartTime - Utils.getTimestamp();                      if (remaining < 0)                           doRestart();                      else if ((remaining % 5 == 0 || remaining < 5) && remaining != 0)                      {                          logWarn("The server will restart in " + remaining + " seconds.");                          sendGlobalMessage("^#f75d5d;The server will restart in " + remaining + " seconds.");                      }                  }                    if (serverState == ServerState.Crashed)                  {                      logFatal("The server has encountered a fatal error and cannot continue. Restarting in 5 seconds.");                      Thread.Sleep(5000);                      doRestart();                      return;                  }                  else if(serverState == ServerState.Shutdown)                  {                      logFatal("OS' or Unhandled Exception requested immediate shutdown.");                      doShutdown(true);                      Environment.Exit(0);                  }                  else if(serverState == ServerState.GracefulShutdown)                  {                      logWarn("User or Console requested graceful shutdown.");                      doShutdown(false);                      Environment.Exit(0);                  }                    if (restartTime != 0)                      Thread.Sleep(1000);                  else                      Thread.Sleep(2000);              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doRestart,The following statement contains a magic number: Thread.Sleep(2500);
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The following statement contains a magic number: try              {                  try { Geo.Dispose(); }                  catch (Exception) { }                    try                  {                      if (!quick)                      {                          logDebug("Shutdown"' "Disconnect all clients.");                          foreach (Client client in clients.Values.ToList())                          {                              client.delayDisconnect("You have been disconnected. The server is being shut down.");                          }                            logInfo("Waiting 10 seconds for all clients to leave.");                          int startWait = Utils.getTimestamp();                          while (clientCount > 0)                          {                              if (Utils.getTimestamp() > startWait + 10)                              {                                  logDebug("Shutdown"' "Forcefully disconnecting all clients. Timeout exceeded.");                                  foreach (Client client in clients.Values.ToList())                                  {                                      client.closeConnection();                                  }                                  break;                              }                              Thread.Sleep(500);                          }                      }                      else                      {                          logDebug("Shutdown"' "Quick' Disconnect all clients.");                          foreach (Client client in clients.Values.ToList())                          {                              client.closeConnection();                          }                      }                  }                  catch (Exception) { }                    logDebug("Shutdown"' "Requesting starbound_server close.");                    try { sbServer.process.CloseMainWindow(); }                  catch (Exception) { }                    logDebug("Shutdown"' "Waiting for starbound_server to close.");                    Thread.Sleep(2000);                    logDebug("Shutdown"' "Aborting server thread.");                    try { sbServerThread.Abort(); }                  catch (Exception) { }                    logDebug("Shutdown"' "Killing starbound_server process.");                    try                  {                      Process proc = Process.GetProcessById(parentProcessId);                      proc.Kill();                      File.Delete("starbound_server.pid");                  }                  catch (Exception) { }                    logDebug("Shutdown"' "Aborting TCP listener.");                  try                   {                      lock (listener.tcpSocket)                      {                          listener.tcpSocket.Stop();                      }                        lock (listener.udpSocket)                      {                          listener.udpSocket.Close();                          listenerThread.Abort();                      }                  }                  catch (Exception) { }                    logInfo("Graceful shutdown complete.");                    logDebug("Shutdown"' "Flushing all pending log data to file (If any)");                  using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                  {                      for (int i = 0; i < logWriteBuffer.Count; i++)                      {                          w.WriteLine(logWriteBuffer[i]);                          logWriteBuffer.RemoveAt(i);                      }                  }              }              catch(Exception e)              {                  try                  {                      logException("Graceful shutdown failed: " + e.ToString());                      Process proc = Process.GetProcessById(parentProcessId);                      proc.Kill();                      File.Delete("starbound_server.pid");                  }                  catch (Exception) { }              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The following statement contains a magic number: try              {                  try { Geo.Dispose(); }                  catch (Exception) { }                    try                  {                      if (!quick)                      {                          logDebug("Shutdown"' "Disconnect all clients.");                          foreach (Client client in clients.Values.ToList())                          {                              client.delayDisconnect("You have been disconnected. The server is being shut down.");                          }                            logInfo("Waiting 10 seconds for all clients to leave.");                          int startWait = Utils.getTimestamp();                          while (clientCount > 0)                          {                              if (Utils.getTimestamp() > startWait + 10)                              {                                  logDebug("Shutdown"' "Forcefully disconnecting all clients. Timeout exceeded.");                                  foreach (Client client in clients.Values.ToList())                                  {                                      client.closeConnection();                                  }                                  break;                              }                              Thread.Sleep(500);                          }                      }                      else                      {                          logDebug("Shutdown"' "Quick' Disconnect all clients.");                          foreach (Client client in clients.Values.ToList())                          {                              client.closeConnection();                          }                      }                  }                  catch (Exception) { }                    logDebug("Shutdown"' "Requesting starbound_server close.");                    try { sbServer.process.CloseMainWindow(); }                  catch (Exception) { }                    logDebug("Shutdown"' "Waiting for starbound_server to close.");                    Thread.Sleep(2000);                    logDebug("Shutdown"' "Aborting server thread.");                    try { sbServerThread.Abort(); }                  catch (Exception) { }                    logDebug("Shutdown"' "Killing starbound_server process.");                    try                  {                      Process proc = Process.GetProcessById(parentProcessId);                      proc.Kill();                      File.Delete("starbound_server.pid");                  }                  catch (Exception) { }                    logDebug("Shutdown"' "Aborting TCP listener.");                  try                   {                      lock (listener.tcpSocket)                      {                          listener.tcpSocket.Stop();                      }                        lock (listener.udpSocket)                      {                          listener.udpSocket.Close();                          listenerThread.Abort();                      }                  }                  catch (Exception) { }                    logInfo("Graceful shutdown complete.");                    logDebug("Shutdown"' "Flushing all pending log data to file (If any)");                  using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                  {                      for (int i = 0; i < logWriteBuffer.Count; i++)                      {                          w.WriteLine(logWriteBuffer[i]);                          logWriteBuffer.RemoveAt(i);                      }                  }              }              catch(Exception e)              {                  try                  {                      logException("Graceful shutdown failed: " + e.ToString());                      Process proc = Process.GetProcessById(parentProcessId);                      proc.Kill();                      File.Delete("starbound_server.pid");                  }                  catch (Exception) { }              }
Magic Number,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,doShutdown,The following statement contains a magic number: try              {                  try { Geo.Dispose(); }                  catch (Exception) { }                    try                  {                      if (!quick)                      {                          logDebug("Shutdown"' "Disconnect all clients.");                          foreach (Client client in clients.Values.ToList())                          {                              client.delayDisconnect("You have been disconnected. The server is being shut down.");                          }                            logInfo("Waiting 10 seconds for all clients to leave.");                          int startWait = Utils.getTimestamp();                          while (clientCount > 0)                          {                              if (Utils.getTimestamp() > startWait + 10)                              {                                  logDebug("Shutdown"' "Forcefully disconnecting all clients. Timeout exceeded.");                                  foreach (Client client in clients.Values.ToList())                                  {                                      client.closeConnection();                                  }                                  break;                              }                              Thread.Sleep(500);                          }                      }                      else                      {                          logDebug("Shutdown"' "Quick' Disconnect all clients.");                          foreach (Client client in clients.Values.ToList())                          {                              client.closeConnection();                          }                      }                  }                  catch (Exception) { }                    logDebug("Shutdown"' "Requesting starbound_server close.");                    try { sbServer.process.CloseMainWindow(); }                  catch (Exception) { }                    logDebug("Shutdown"' "Waiting for starbound_server to close.");                    Thread.Sleep(2000);                    logDebug("Shutdown"' "Aborting server thread.");                    try { sbServerThread.Abort(); }                  catch (Exception) { }                    logDebug("Shutdown"' "Killing starbound_server process.");                    try                  {                      Process proc = Process.GetProcessById(parentProcessId);                      proc.Kill();                      File.Delete("starbound_server.pid");                  }                  catch (Exception) { }                    logDebug("Shutdown"' "Aborting TCP listener.");                  try                   {                      lock (listener.tcpSocket)                      {                          listener.tcpSocket.Stop();                      }                        lock (listener.udpSocket)                      {                          listener.udpSocket.Close();                          listenerThread.Abort();                      }                  }                  catch (Exception) { }                    logInfo("Graceful shutdown complete.");                    logDebug("Shutdown"' "Flushing all pending log data to file (If any)");                  using (StreamWriter w = File.AppendText(Path.Combine(SavePath' "log.txt")))                  {                      for (int i = 0; i < logWriteBuffer.Count; i++)                      {                          w.WriteLine(logWriteBuffer[i]);                          logWriteBuffer.RemoveAt(i);                      }                  }              }              catch(Exception e)              {                  try                  {                      logException("Graceful shutdown failed: " + e.ToString());                      Process proc = Process.GetProcessById(parentProcessId);                      proc.Kill();                      File.Delete("starbound_server.pid");                  }                  catch (Exception) { }              }
Magic Number,com.avilance.Starrybound.Commands,CommandBase,C:\repos\AvilanceLtd_StarryboundServer\Commands\CommandBase.cs,permissionError,The following statement contains a magic number: switch (errorCode)              {                  case 1:                      message = "You do not have permission to use this command.";                      break;                    case 2:                      message = "You do not have permission to target this player.";                      break;              }
Magic Number,com.avilance.Starrybound.Commands,BanC,C:\repos\AvilanceLtd_StarryboundServer\Commands\BanC.cs,doProcess,The following statement contains a magic number: if (args.Length < 3) { showHelpText(); return false; }
Magic Number,com.avilance.Starrybound.Commands,BanC,C:\repos\AvilanceLtd_StarryboundServer\Commands\BanC.cs,doProcess,The following statement contains a magic number: string reason = string.Join(" "' args).Substring(remainStuff + 2).Trim();
Magic Number,com.avilance.Starrybound.Commands,BanC,C:\repos\AvilanceLtd_StarryboundServer\Commands\BanC.cs,doProcess,The following statement contains a magic number: if (target != null)              {                  if (!this.player.group.canTarget(target.playerData.group))                  {                      this.client.sendCommandMessage("^#f75d5d;You do not have permission to target this user.");                      return false;                  }                    string uuid = target.playerData.uuid;                  string name = target.playerData.name;                  string ip = target.playerData.ip;                    int timeNow = Utils.getTimestamp();                    try                  {                      int bExpiry = int.Parse(expiry);                        if (bExpiry != 0) bExpiry = timeNow + (bExpiry * 60);                        Bans.addNewBan(name' uuid' ip' timeNow' this.player.name' bExpiry' reason);                        target.banClient(reason);                        return true;                  }                  catch (Exception e)                  {                      this.client.sendCommandMessage("An exception occured while attempting to ban " + player);                      StarryboundServer.logException("Error occured while banning player " + player + ": " + e.Message);                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Player '" + player + "' not found.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,GroupC,C:\repos\AvilanceLtd_StarryboundServer\Commands\GroupC.cs,doProcess,The following statement contains a magic number: if (command == "list") // List all groups start              {                  string groupList = "";                  foreach (Group group in StarryboundServer.groups.Values)                  {                      groupList += group.name + "' ";                  }                  // TODO: Remove last comma                  this.client.sendChatMessage("^#5dc4f4;Group list: " + groupList.Substring(0' groupList.Length - 2));                  return true;              } // List all groups end              else if (command == "add") // Add new group start              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Dictionary<string' bool> pPerms = new Dictionary<string' bool>();                  pPerms.Add("client.*"' true);                  pPerms.Add("chat.*"' true);                  Group newGroup = new Group(groupName' null' null' pPerms);                  StarryboundServer.groups.Add(newGroup.name' newGroup);                  Groups.SaveGroups();                  this.client.sendCommandMessage("New group " + newGroup.name + " has been added.");                  return true;              } // Add new group end              else if (command == "adduser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  string groupName = args[2].Trim();                  if (String.IsNullOrWhiteSpace(playerName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      if (StarryboundServer.groups.ContainsKey(groupName))                      {                          PlayerData playerData = target.playerData;                          playerData.group = StarryboundServer.groups[groupName];                          this.client.sendCommandMessage("Player " + playerName + " has been added to group " + groupName + ".");                          StarryboundServer.sendGlobalMessage(playerName + " has been assigned the group " + groupName);                          Users.SaveUser(playerData);                          return true;                      }                      else                      {                          this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "deluser")              {                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string playerName = args[1].Trim();                  if (String.IsNullOrWhiteSpace(playerName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    Client target = StarryboundServer.getClient(playerName);                  if (target != null)                  {                      PlayerData playerData = target.playerData;                      playerData.group = StarryboundServer.groups[StarryboundServer.defaultGroup];                      this.client.sendCommandMessage("Player " + playerName + " has had their access revoked.");                      StarryboundServer.sendGlobalMessage(playerName + " has been demoted to " + StarryboundServer.defaultGroup);                      Users.SaveUser(playerData);                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + playerName + "' not found.");                      return false;                  }              }              else if (command == "del")              { // Delete a group start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      StarryboundServer.groups.Remove(groupName);                      Groups.SaveGroups();                      this.client.sendCommandMessage("Group " + groupName + " has been removed.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Delete a group end              else if (command == "info")              { // Group info start                  if (args.Length <= 1)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  if (String.IsNullOrEmpty(groupName) || String.IsNullOrWhiteSpace(groupName))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      this.client.sendCommandMessage("Group info: Name: " + targetGroup.name + "; Prefix: " + (String.IsNullOrEmpty(targetGroup.prefix) ? "None" : targetGroup.prefix) + "; Name color: " + (String.IsNullOrEmpty(targetGroup.nameColor) ? "None" : targetGroup.nameColor));                      return true;                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group info end              else if (command == "mod")              { // Group mod start                  if (args.Length <= 3)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string modCommand = args[2].Trim().ToLower();                  string modValue = args[3].Trim();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(modCommand) || String.IsNullOrEmpty(modValue))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                      if (modCommand == "prefix")                      {                          targetGroup.prefix = modValue;                          Groups.SaveGroups();                          this.client.sendCommandMessage("Group " + targetGroup.name + "'s prefix is now set to " + modValue);                          return true;                      }                      else if (modCommand == "color")                      {                          if (modValue.Length == 7 && modValue[0] == '#')                          {                              targetGroup.nameColor = modValue;                              Groups.SaveGroups();                              this.client.sendCommandMessage("Group " + targetGroup.name + "'s name color is now set to " + modValue);                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Invalid color. Must be a hex color starting with #");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid modification parameter. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              } // Group mod end              else if (command == "permissions")              { // Group permissions start                  if (args.Length <= 2)                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    string groupName = args[1].Trim();                  string prmCommand = args[2].Trim().ToLower();                    if (String.IsNullOrEmpty(groupName) || String.IsNullOrEmpty(prmCommand))                  {                      this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                      return false;                  }                    if (StarryboundServer.groups.ContainsKey(groupName))                  {                      Group targetGroup = StarryboundServer.groups[groupName];                        if (prmCommand == "list")                      {                          string permissionList = "";                          foreach (string prm in targetGroup.permissions.Keys)                          {                              permissionList += prm + "; ";                          }                          this.client.sendChatMessage("^#5dc4f4;Group permissions: " + permissionList.Substring(0' permissionList.Length -2));                          return true;                      }                      else if (prmCommand == "add")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.givePermission(prmValue))                          {                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully added.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to add permission " + prmValue + ". Make sure it is valid.");                              return false;                          }                      }                      else if (prmCommand == "del")                      {                          if (args.Length <= 3)                          {                              this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                              return false;                          }                            string prmValue = args[3].Trim();                          if (targetGroup.permissions.ContainsKey(prmValue))                          {                              targetGroup.permissions.Remove(prmValue);                              Groups.SaveGroups();                              this.client.sendCommandMessage("Permission " + prmValue + " was successfully removed.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Failed to remove permission " + prmValue + ". Make sure the group has it.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("A Group with the name " + groupName + " does not exist.");                      return false;                  }              }              else if (command == "help")              {                  this.client.sendChatMessage("^#5dc4f4;Group command help:");                  this.client.sendChatMessage("^#5dc4f4;/group list - shows a list of all groups.");                  this.client.sendChatMessage("^#5dc4f4;/group add <group name> - adds a new group.");                  this.client.sendChatMessage("^#5dc4f4;/group del <group name> - deletes a group.");                  this.client.sendChatMessage("^#5dc4f4;/group adduser <player> <group name> - adds user to a group.");                  this.client.sendChatMessage("^#5dc4f4;/group deluser <player> <group name> - demotes user to default group.");                  this.client.sendChatMessage("^#5dc4f4;/group info <group name> - shows information about a group.");                  this.client.sendChatMessage("^#5dc4f4;/group mod <group name> <prefix/color> <value> - changes a group parameter.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> list - lists the permissions of a group.");                  this.client.sendChatMessage("^#5dc4f4;/group permissions <group name> <add/del> <permission> - adds or removes a permission from the group.");                  return true;              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use /group help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,Fuel,C:\repos\AvilanceLtd_StarryboundServer\Commands\Fuel.cs,doProcess,The following statement contains a magic number: packetWrite.WriteVarUInt32(31);
Magic Number,com.avilance.Starrybound.Commands,Help,C:\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string commandToFind = args[0];                  foreach (CommandBase command in commands)                  {                      if (command.name.ToLower().Equals(commandToFind.ToLower()))                      {                          bool hasPermission = true;                          if (command.Permission != null && command.Permission.Count > 0)                          {                              foreach (string permission in command.Permission)                              {                                  if (!this.player.hasPermission(permission))                                  {                                      hasPermission = false;                                  }                              }                          }                          if (hasPermission)                          {                              this.client.sendCommandMessage("/" + command.name + command.HelpText);                              if (command.aliases != null && command.aliases.Length > 0)                              {                                  string aliasesMessage = "Aliases: ";                                  for (int i = 0; i < command.aliases.Length; i++)                                  {                                      aliasesMessage += "/" + command.aliases[i] + " ";                                  }                                  this.client.sendCommandMessage(aliasesMessage);                              }                              return true;                          }                          else                          {                              this.client.sendChatMessage(Util.ChatReceiveContext.CommandResult' ""' "You do not have permission to view this command.");                              return true;                          }                      }                  }                  this.client.sendChatMessage("Command "+commandToFind+" not found.");                  return true;              }              else              {                  this.client.sendChatMessage("^#5dc4f4;Command list:");                  StringBuilder sb = new StringBuilder();                  foreach (CommandBase command in commands)                  {                      bool hasPermission = true;                      if (command.Permission != null)                      {                          foreach (string permission in command.Permission)                          {                              if (!this.player.hasPermission(permission))                              {                                  hasPermission = false;                              }                          }                      }                      if (hasPermission)                      {                          if (sb.Length + command.name.Length < 58)                          {                              sb.Append("/").Append(command.name).Append("' ");                          }                          else                          {                              this.client.sendChatMessage("^#5dc4f4;" + sb.ToString());                              sb.Clear();                              sb.Append("/").Append(command.name).Append("' ");                          }                      }                  }                  this.client.sendChatMessage("^#5dc4f4;" + sb.Remove(sb.Length - 2' 2).ToString());                  this.client.sendChatMessage("^#5dc4f4;Use /help <command> for help with a specific command.");                  return true;              }
Magic Number,com.avilance.Starrybound.Commands,Help,C:\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string commandToFind = args[0];                  foreach (CommandBase command in commands)                  {                      if (command.name.ToLower().Equals(commandToFind.ToLower()))                      {                          bool hasPermission = true;                          if (command.Permission != null && command.Permission.Count > 0)                          {                              foreach (string permission in command.Permission)                              {                                  if (!this.player.hasPermission(permission))                                  {                                      hasPermission = false;                                  }                              }                          }                          if (hasPermission)                          {                              this.client.sendCommandMessage("/" + command.name + command.HelpText);                              if (command.aliases != null && command.aliases.Length > 0)                              {                                  string aliasesMessage = "Aliases: ";                                  for (int i = 0; i < command.aliases.Length; i++)                                  {                                      aliasesMessage += "/" + command.aliases[i] + " ";                                  }                                  this.client.sendCommandMessage(aliasesMessage);                              }                              return true;                          }                          else                          {                              this.client.sendChatMessage(Util.ChatReceiveContext.CommandResult' ""' "You do not have permission to view this command.");                              return true;                          }                      }                  }                  this.client.sendChatMessage("Command "+commandToFind+" not found.");                  return true;              }              else              {                  this.client.sendChatMessage("^#5dc4f4;Command list:");                  StringBuilder sb = new StringBuilder();                  foreach (CommandBase command in commands)                  {                      bool hasPermission = true;                      if (command.Permission != null)                      {                          foreach (string permission in command.Permission)                          {                              if (!this.player.hasPermission(permission))                              {                                  hasPermission = false;                              }                          }                      }                      if (hasPermission)                      {                          if (sb.Length + command.name.Length < 58)                          {                              sb.Append("/").Append(command.name).Append("' ");                          }                          else                          {                              this.client.sendChatMessage("^#5dc4f4;" + sb.ToString());                              sb.Clear();                              sb.Append("/").Append(command.name).Append("' ");                          }                      }                  }                  this.client.sendChatMessage("^#5dc4f4;" + sb.Remove(sb.Length - 2' 2).ToString());                  this.client.sendChatMessage("^#5dc4f4;Use /help <command> for help with a specific command.");                  return true;              }
Magic Number,com.avilance.Starrybound.Commands,Help,C:\repos\AvilanceLtd_StarryboundServer\Commands\Help.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string commandToFind = args[0];                  foreach (CommandBase command in commands)                  {                      if (command.name.ToLower().Equals(commandToFind.ToLower()))                      {                          bool hasPermission = true;                          if (command.Permission != null && command.Permission.Count > 0)                          {                              foreach (string permission in command.Permission)                              {                                  if (!this.player.hasPermission(permission))                                  {                                      hasPermission = false;                                  }                              }                          }                          if (hasPermission)                          {                              this.client.sendCommandMessage("/" + command.name + command.HelpText);                              if (command.aliases != null && command.aliases.Length > 0)                              {                                  string aliasesMessage = "Aliases: ";                                  for (int i = 0; i < command.aliases.Length; i++)                                  {                                      aliasesMessage += "/" + command.aliases[i] + " ";                                  }                                  this.client.sendCommandMessage(aliasesMessage);                              }                              return true;                          }                          else                          {                              this.client.sendChatMessage(Util.ChatReceiveContext.CommandResult' ""' "You do not have permission to view this command.");                              return true;                          }                      }                  }                  this.client.sendChatMessage("Command "+commandToFind+" not found.");                  return true;              }              else              {                  this.client.sendChatMessage("^#5dc4f4;Command list:");                  StringBuilder sb = new StringBuilder();                  foreach (CommandBase command in commands)                  {                      bool hasPermission = true;                      if (command.Permission != null)                      {                          foreach (string permission in command.Permission)                          {                              if (!this.player.hasPermission(permission))                              {                                  hasPermission = false;                              }                          }                      }                      if (hasPermission)                      {                          if (sb.Length + command.name.Length < 58)                          {                              sb.Append("/").Append(command.name).Append("' ");                          }                          else                          {                              this.client.sendChatMessage("^#5dc4f4;" + sb.ToString());                              sb.Clear();                              sb.Append("/").Append(command.name).Append("' ");                          }                      }                  }                  this.client.sendChatMessage("^#5dc4f4;" + sb.Remove(sb.Length - 2' 2).ToString());                  this.client.sendChatMessage("^#5dc4f4;Use /help <command> for help with a specific command.");                  return true;              }
Magic Number,com.avilance.Starrybound.Commands,Item,C:\repos\AvilanceLtd_StarryboundServer\Commands\Item.cs,doProcess,The following statement contains a magic number: if (args.Length < 2) { showHelpText(); return false; }
Magic Number,com.avilance.Starrybound.Commands,SetHome,C:\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string[] coords = args[0].Split(':');                  if (coords.Length == 6)                  {                      string sector = coords[0].ToLower().Trim();                      if (sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx")                      {                          int sysX = int.Parse(coords[1]);                          int sysY = int.Parse(coords[2]);                          int sysZ = int.Parse(coords[3]);                          int planet = int.Parse(coords[4]);                          int satelite = int.Parse(coords[5]);                          if (planet >= 0 && satelite >= 0)                          {                              Extensions.WorldCoordinate newHome = new Extensions.WorldCoordinate(sector' sysX' sysY' sysZ' planet' satelite);                              if (!newHome.Equals(this.client.playerData.home))                              {                                  this.client.playerData.home = newHome;                                  this.client.sendCommandMessage("Your home is now set to " + newHome.ToString());                                  return true;                              }                              else                              {                                  this.client.sendCommandMessage("Your home is already set to this location.");                                  return false;                              }                          }                          else                          {                              this.client.sendCommandMessage("Invalid planet/satellite. Must be positive or 0.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid sector name. Must be either alpha' beta' gamma' delta or sectorx");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Coords must be in this format: sector:x:y:z:planet:satellite");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use: /sethome <coords>");                  this.client.sendCommandMessage("You can find the coords of the current world using /find.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,SetHome,C:\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string[] coords = args[0].Split(':');                  if (coords.Length == 6)                  {                      string sector = coords[0].ToLower().Trim();                      if (sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx")                      {                          int sysX = int.Parse(coords[1]);                          int sysY = int.Parse(coords[2]);                          int sysZ = int.Parse(coords[3]);                          int planet = int.Parse(coords[4]);                          int satelite = int.Parse(coords[5]);                          if (planet >= 0 && satelite >= 0)                          {                              Extensions.WorldCoordinate newHome = new Extensions.WorldCoordinate(sector' sysX' sysY' sysZ' planet' satelite);                              if (!newHome.Equals(this.client.playerData.home))                              {                                  this.client.playerData.home = newHome;                                  this.client.sendCommandMessage("Your home is now set to " + newHome.ToString());                                  return true;                              }                              else                              {                                  this.client.sendCommandMessage("Your home is already set to this location.");                                  return false;                              }                          }                          else                          {                              this.client.sendCommandMessage("Invalid planet/satellite. Must be positive or 0.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid sector name. Must be either alpha' beta' gamma' delta or sectorx");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Coords must be in this format: sector:x:y:z:planet:satellite");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use: /sethome <coords>");                  this.client.sendCommandMessage("You can find the coords of the current world using /find.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,SetHome,C:\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string[] coords = args[0].Split(':');                  if (coords.Length == 6)                  {                      string sector = coords[0].ToLower().Trim();                      if (sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx")                      {                          int sysX = int.Parse(coords[1]);                          int sysY = int.Parse(coords[2]);                          int sysZ = int.Parse(coords[3]);                          int planet = int.Parse(coords[4]);                          int satelite = int.Parse(coords[5]);                          if (planet >= 0 && satelite >= 0)                          {                              Extensions.WorldCoordinate newHome = new Extensions.WorldCoordinate(sector' sysX' sysY' sysZ' planet' satelite);                              if (!newHome.Equals(this.client.playerData.home))                              {                                  this.client.playerData.home = newHome;                                  this.client.sendCommandMessage("Your home is now set to " + newHome.ToString());                                  return true;                              }                              else                              {                                  this.client.sendCommandMessage("Your home is already set to this location.");                                  return false;                              }                          }                          else                          {                              this.client.sendCommandMessage("Invalid planet/satellite. Must be positive or 0.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid sector name. Must be either alpha' beta' gamma' delta or sectorx");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Coords must be in this format: sector:x:y:z:planet:satellite");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use: /sethome <coords>");                  this.client.sendCommandMessage("You can find the coords of the current world using /find.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,SetHome,C:\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string[] coords = args[0].Split(':');                  if (coords.Length == 6)                  {                      string sector = coords[0].ToLower().Trim();                      if (sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx")                      {                          int sysX = int.Parse(coords[1]);                          int sysY = int.Parse(coords[2]);                          int sysZ = int.Parse(coords[3]);                          int planet = int.Parse(coords[4]);                          int satelite = int.Parse(coords[5]);                          if (planet >= 0 && satelite >= 0)                          {                              Extensions.WorldCoordinate newHome = new Extensions.WorldCoordinate(sector' sysX' sysY' sysZ' planet' satelite);                              if (!newHome.Equals(this.client.playerData.home))                              {                                  this.client.playerData.home = newHome;                                  this.client.sendCommandMessage("Your home is now set to " + newHome.ToString());                                  return true;                              }                              else                              {                                  this.client.sendCommandMessage("Your home is already set to this location.");                                  return false;                              }                          }                          else                          {                              this.client.sendCommandMessage("Invalid planet/satellite. Must be positive or 0.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid sector name. Must be either alpha' beta' gamma' delta or sectorx");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Coords must be in this format: sector:x:y:z:planet:satellite");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use: /sethome <coords>");                  this.client.sendCommandMessage("You can find the coords of the current world using /find.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,SetHome,C:\repos\AvilanceLtd_StarryboundServer\Commands\SetHome.cs,doProcess,The following statement contains a magic number: if (args.Length == 1)              {                  string[] coords = args[0].Split(':');                  if (coords.Length == 6)                  {                      string sector = coords[0].ToLower().Trim();                      if (sector == "alpha" || sector == "beta" || sector == "gamma" || sector == "delta" || sector == "sectorx")                      {                          int sysX = int.Parse(coords[1]);                          int sysY = int.Parse(coords[2]);                          int sysZ = int.Parse(coords[3]);                          int planet = int.Parse(coords[4]);                          int satelite = int.Parse(coords[5]);                          if (planet >= 0 && satelite >= 0)                          {                              Extensions.WorldCoordinate newHome = new Extensions.WorldCoordinate(sector' sysX' sysY' sysZ' planet' satelite);                              if (!newHome.Equals(this.client.playerData.home))                              {                                  this.client.playerData.home = newHome;                                  this.client.sendCommandMessage("Your home is now set to " + newHome.ToString());                                  return true;                              }                              else                              {                                  this.client.sendCommandMessage("Your home is already set to this location.");                                  return false;                              }                          }                          else                          {                              this.client.sendCommandMessage("Invalid planet/satellite. Must be positive or 0.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid sector name. Must be either alpha' beta' gamma' delta or sectorx");                          return false;                      }                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Coords must be in this format: sector:x:y:z:planet:satellite");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Use: /sethome <coords>");                  this.client.sendCommandMessage("You can find the coords of the current world using /find.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,Ship,C:\repos\AvilanceLtd_StarryboundServer\Commands\Ship.cs,doProcess,The following statement contains a magic number: if (player == null || player.Length < 1)              {                  this.client.sendCommandMessage("Teleporting to your ship.");                    player = "";                  warp = (uint)WarpType.WarpToOwnShip;              }              else              {                  if (!hasPermission(true)) { permissionError(2); return false; }                    Client target = StarryboundServer.getClient(player);                  if (target != null)                  {                      PlayerData targetPlayer = target.playerData;                      if (!this.player.canAccessShip(targetPlayer))                      {                          this.client.sendCommandMessage("You cannot access this player's ship due to their ship's access settings.");                          return false;                      }                      this.client.sendCommandMessage("Teleporting to " + player + " ship!");                        warp = (uint)WarpType.WarpToPlayerShip;                  }                  else                  {                      this.client.sendCommandMessage("Player '" + player + "' not found.");                      return false;                  }              }
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: if (args.Length > 0)              {                  string command = args[0].ToLower().Trim();                  if (command == "status")                  {                      this.client.sendCommandMessage("Ship access status:");                      this.client.sendCommandMessage("Access type: " + (this.player.privateShip ? "Private" : "Public"));                      if (this.player.shipWhitelist != null && this.player.shipWhitelist.Count > 0)                      {                          string whitelist = "Whitelist: ";                          foreach (string name in this.player.shipWhitelist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  whitelist += name + "' ";                              }                          }                          this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Whitelist: Empty.");                      }                        if (this.player.shipBlacklist != null && this.player.shipBlacklist.Count > 0)                      {                          string blacklist = "Blacklist: ";                          foreach (string name in this.player.shipBlacklist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  blacklist += name + "' ";                              }                          }                          this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Blacklist: Empty.");                      }                        return true;                  }                  else if (command == "public")                  {                      this.client.playerData.privateShip = false;                      this.client.sendCommandMessage("Your ship access is now set to public. Anyone who can reach it can now access it.");                      return true;                  }                  else if (command == "private")                  {                      this.client.playerData.privateShip = true;                      this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it.");                      return true;                  }                  else if (command == "allow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "disallow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "block")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "unblock")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's blacklist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "help")                  {                      this.client.sendCommandMessage("Ship access command help:");                      this.client.sendCommandMessage("/shipaccess status - shows your ship access status.");                      this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it.");                      this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it.");                      this.client.sendCommandMessage("/shipaccess allow <player name> - adds <player name> to your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess block <player name> - adds <player name> to your ship's blacklist.");                      this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: if (args.Length > 0)              {                  string command = args[0].ToLower().Trim();                  if (command == "status")                  {                      this.client.sendCommandMessage("Ship access status:");                      this.client.sendCommandMessage("Access type: " + (this.player.privateShip ? "Private" : "Public"));                      if (this.player.shipWhitelist != null && this.player.shipWhitelist.Count > 0)                      {                          string whitelist = "Whitelist: ";                          foreach (string name in this.player.shipWhitelist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  whitelist += name + "' ";                              }                          }                          this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Whitelist: Empty.");                      }                        if (this.player.shipBlacklist != null && this.player.shipBlacklist.Count > 0)                      {                          string blacklist = "Blacklist: ";                          foreach (string name in this.player.shipBlacklist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  blacklist += name + "' ";                              }                          }                          this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Blacklist: Empty.");                      }                        return true;                  }                  else if (command == "public")                  {                      this.client.playerData.privateShip = false;                      this.client.sendCommandMessage("Your ship access is now set to public. Anyone who can reach it can now access it.");                      return true;                  }                  else if (command == "private")                  {                      this.client.playerData.privateShip = true;                      this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it.");                      return true;                  }                  else if (command == "allow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "disallow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "block")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "unblock")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's blacklist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "help")                  {                      this.client.sendCommandMessage("Ship access command help:");                      this.client.sendCommandMessage("/shipaccess status - shows your ship access status.");                      this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it.");                      this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it.");                      this.client.sendCommandMessage("/shipaccess allow <player name> - adds <player name> to your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess block <player name> - adds <player name> to your ship's blacklist.");                      this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: if (args.Length > 0)              {                  string command = args[0].ToLower().Trim();                  if (command == "status")                  {                      this.client.sendCommandMessage("Ship access status:");                      this.client.sendCommandMessage("Access type: " + (this.player.privateShip ? "Private" : "Public"));                      if (this.player.shipWhitelist != null && this.player.shipWhitelist.Count > 0)                      {                          string whitelist = "Whitelist: ";                          foreach (string name in this.player.shipWhitelist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  whitelist += name + "' ";                              }                          }                          this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Whitelist: Empty.");                      }                        if (this.player.shipBlacklist != null && this.player.shipBlacklist.Count > 0)                      {                          string blacklist = "Blacklist: ";                          foreach (string name in this.player.shipBlacklist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  blacklist += name + "' ";                              }                          }                          this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Blacklist: Empty.");                      }                        return true;                  }                  else if (command == "public")                  {                      this.client.playerData.privateShip = false;                      this.client.sendCommandMessage("Your ship access is now set to public. Anyone who can reach it can now access it.");                      return true;                  }                  else if (command == "private")                  {                      this.client.playerData.privateShip = true;                      this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it.");                      return true;                  }                  else if (command == "allow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "disallow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "block")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "unblock")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's blacklist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "help")                  {                      this.client.sendCommandMessage("Ship access command help:");                      this.client.sendCommandMessage("/shipaccess status - shows your ship access status.");                      this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it.");                      this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it.");                      this.client.sendCommandMessage("/shipaccess allow <player name> - adds <player name> to your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess block <player name> - adds <player name> to your ship's blacklist.");                      this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: if (args.Length > 0)              {                  string command = args[0].ToLower().Trim();                  if (command == "status")                  {                      this.client.sendCommandMessage("Ship access status:");                      this.client.sendCommandMessage("Access type: " + (this.player.privateShip ? "Private" : "Public"));                      if (this.player.shipWhitelist != null && this.player.shipWhitelist.Count > 0)                      {                          string whitelist = "Whitelist: ";                          foreach (string name in this.player.shipWhitelist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  whitelist += name + "' ";                              }                          }                          this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Whitelist: Empty.");                      }                        if (this.player.shipBlacklist != null && this.player.shipBlacklist.Count > 0)                      {                          string blacklist = "Blacklist: ";                          foreach (string name in this.player.shipBlacklist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  blacklist += name + "' ";                              }                          }                          this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Blacklist: Empty.");                      }                        return true;                  }                  else if (command == "public")                  {                      this.client.playerData.privateShip = false;                      this.client.sendCommandMessage("Your ship access is now set to public. Anyone who can reach it can now access it.");                      return true;                  }                  else if (command == "private")                  {                      this.client.playerData.privateShip = true;                      this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it.");                      return true;                  }                  else if (command == "allow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "disallow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "block")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "unblock")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's blacklist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "help")                  {                      this.client.sendCommandMessage("Ship access command help:");                      this.client.sendCommandMessage("/shipaccess status - shows your ship access status.");                      this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it.");                      this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it.");                      this.client.sendCommandMessage("/shipaccess allow <player name> - adds <player name> to your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess block <player name> - adds <player name> to your ship's blacklist.");                      this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: if (args.Length > 0)              {                  string command = args[0].ToLower().Trim();                  if (command == "status")                  {                      this.client.sendCommandMessage("Ship access status:");                      this.client.sendCommandMessage("Access type: " + (this.player.privateShip ? "Private" : "Public"));                      if (this.player.shipWhitelist != null && this.player.shipWhitelist.Count > 0)                      {                          string whitelist = "Whitelist: ";                          foreach (string name in this.player.shipWhitelist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  whitelist += name + "' ";                              }                          }                          this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Whitelist: Empty.");                      }                        if (this.player.shipBlacklist != null && this.player.shipBlacklist.Count > 0)                      {                          string blacklist = "Blacklist: ";                          foreach (string name in this.player.shipBlacklist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  blacklist += name + "' ";                              }                          }                          this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Blacklist: Empty.");                      }                        return true;                  }                  else if (command == "public")                  {                      this.client.playerData.privateShip = false;                      this.client.sendCommandMessage("Your ship access is now set to public. Anyone who can reach it can now access it.");                      return true;                  }                  else if (command == "private")                  {                      this.client.playerData.privateShip = true;                      this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it.");                      return true;                  }                  else if (command == "allow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "disallow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "block")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "unblock")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's blacklist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "help")                  {                      this.client.sendCommandMessage("Ship access command help:");                      this.client.sendCommandMessage("/shipaccess status - shows your ship access status.");                      this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it.");                      this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it.");                      this.client.sendCommandMessage("/shipaccess allow <player name> - adds <player name> to your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess block <player name> - adds <player name> to your ship's blacklist.");                      this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,ShipAccess,C:\repos\AvilanceLtd_StarryboundServer\Commands\ShipAccess.cs,doProcess,The following statement contains a magic number: if (args.Length > 0)              {                  string command = args[0].ToLower().Trim();                  if (command == "status")                  {                      this.client.sendCommandMessage("Ship access status:");                      this.client.sendCommandMessage("Access type: " + (this.player.privateShip ? "Private" : "Public"));                      if (this.player.shipWhitelist != null && this.player.shipWhitelist.Count > 0)                      {                          string whitelist = "Whitelist: ";                          foreach (string name in this.player.shipWhitelist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  whitelist += name + "' ";                              }                          }                          this.client.sendCommandMessage(whitelist.Substring(0' whitelist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Whitelist: Empty.");                      }                        if (this.player.shipBlacklist != null && this.player.shipBlacklist.Count > 0)                      {                          string blacklist = "Blacklist: ";                          foreach (string name in this.player.shipBlacklist)                          {                              if (!String.IsNullOrEmpty(name)) // Who knows...                              {                                  blacklist += name + "' ";                              }                          }                          this.client.sendCommandMessage(blacklist.Substring(0' blacklist.Length - 2));                      }                      else                      {                          this.client.sendCommandMessage("Blacklist: Empty.");                      }                        return true;                  }                  else if (command == "public")                  {                      this.client.playerData.privateShip = false;                      this.client.sendCommandMessage("Your ship access is now set to public. Anyone who can reach it can now access it.");                      return true;                  }                  else if (command == "private")                  {                      this.client.playerData.privateShip = true;                      this.client.sendCommandMessage("Your ship access is now set to private. Only players in your ship's whitelist can access it.");                      return true;                  }                  else if (command == "allow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "disallow")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipWhitelist.Contains(targetName))                          {                              this.player.shipWhitelist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's whitelist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's whitelist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "block")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (!this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Add(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been added to your ship's blacklist' and can no longer access it.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is already in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "unblock")                  {                      if (args.Length == 2)                      {                          string targetName = args[1];                          if (this.client.playerData.shipBlacklist.Contains(targetName))                          {                              this.player.shipBlacklist.Remove(targetName);                              this.client.sendCommandMessage("Player " + targetName + " has been removed from your ship's blacklist.");                              return true;                          }                          else                          {                              this.client.sendCommandMessage("Player " + targetName + " is not in your ship's blacklist.");                              return false;                          }                      }                      else                      {                          this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                          return false;                      }                  }                  else if (command == "help")                  {                      this.client.sendCommandMessage("Ship access command help:");                      this.client.sendCommandMessage("/shipaccess status - shows your ship access status.");                      this.client.sendCommandMessage("/shipaccess public - sets your ship access to public' allowing everyone who can reach it to access it.");                      this.client.sendCommandMessage("/shipaccess private - sets your ship access to private' allowing only players in the ship's whitelist to access it.");                      this.client.sendCommandMessage("/shipaccess allow <player name> - adds <player name> to your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess disallow <player name> - removes <player name> from your ship's whitelist.");                      this.client.sendCommandMessage("/shipaccess block <player name> - adds <player name> to your ship's blacklist.");                      this.client.sendCommandMessage("/shipaccess unblock <player name> - removes <player name> from your ship's blacklist.");                      return true;                  }                  else                  {                      this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                      return false;                  }              }              else              {                  this.client.sendCommandMessage("Invalid syntax. Type /shipaccess help for instructions.");                  return false;              }
Magic Number,com.avilance.Starrybound.Commands,Restart,C:\repos\AvilanceLtd_StarryboundServer\Commands\Shutdown.cs,doProcess,The following statement contains a magic number: if (StarryboundServer.restartTime != 0)              {                  StarryboundServer.sendGlobalMessage("^#f75d5d;The server restart has been aborted by " + this.player.name);                  StarryboundServer.logWarn("The server restart has been aborted.");                  StarryboundServer.changeState(ServerState.Running' "Command::Restart");                  StarryboundServer.restartTime = 0;              }              else              {                  StarryboundServer.sendGlobalMessage("^#f75d5d;The server will restart in 30 seconds. We will be back shortly.");                  StarryboundServer.logWarn("The server will restart in 30 seconds.");                  StarryboundServer.restartTime = Utils.getTimestamp() + 30;              }
Magic Number,com.avilance.Starrybound.Commands,Uptime,C:\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,Uptime,C:\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,Uptime,C:\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,Uptime,C:\repos\AvilanceLtd_StarryboundServer\Commands\Uptime.cs,doProcess,The following statement contains a magic number: this.client.sendCommandMessage("I have been online for " + string.Format("{0:0} hour(s) {1:0} minute(s) and {2:0} second(s)."' seconds / 3600' (seconds / 60) % 60' seconds % 60));
Magic Number,com.avilance.Starrybound.Commands,WhosThere,C:\repos\AvilanceLtd_StarryboundServer\Commands\WhosThere.cs,doProcess,The following statement contains a magic number: if (list.Length != 0)              {                  this.client.sendChatMessage("^#5dc4f4;Players in this world: " + list.Substring(0' list.Length -2));              }              else              {                  this.client.sendChatMessage("^#5dc4f4;There are no other players in this world.");              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarUUID,The following statement contains a magic number: if(exists)                  return read.ReadBytes(16);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarUUID,The following statement contains a magic number: return new byte[16];
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarWorldCoordinate,The following statement contains a magic number: if (StarryboundServer.config.sectors.Contains(sector))              {                  if (planet < 0 || planet > 256)                      throw new IndexOutOfRangeException("WorldCoordinate Planet out of range: " + planet);                  if (satellite < 0 || satellite > 256)                      throw new IndexOutOfRangeException("WorldCoordinate Satellite out of range: " + satellite);                  return new WorldCoordinate(sector' x' y' z' planet' satellite);              }              else if (String.IsNullOrEmpty(sector))                  return new WorldCoordinate();              else                  throw new IndexOutOfRangeException("WorldCoordinate Sector out of range: " + sector);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarWorldCoordinate,The following statement contains a magic number: if (StarryboundServer.config.sectors.Contains(sector))              {                  if (planet < 0 || planet > 256)                      throw new IndexOutOfRangeException("WorldCoordinate Planet out of range: " + planet);                  if (satellite < 0 || satellite > 256)                      throw new IndexOutOfRangeException("WorldCoordinate Satellite out of range: " + satellite);                  return new WorldCoordinate(sector' x' y' z' planet' satellite);              }              else if (String.IsNullOrEmpty(sector))                  return new WorldCoordinate();              else                  throw new IndexOutOfRangeException("WorldCoordinate Sector out of range: " + sector);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following statement contains a magic number: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadInt16BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(2);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadInt32BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(4);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadUInt32BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(4);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadInt64BE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(8);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadSingleBE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(4);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadDoubleBE,The following statement contains a magic number: byte[] buffer = read.ReadBytes(8);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarByte,The following statement contains a magic number: var result = ToTarget(read' 8);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarInt16,The following statement contains a magic number: var result = ToTarget(read' 16);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarUInt16,The following statement contains a magic number: var result = ToTarget(read' 16);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarInt32,The following statement contains a magic number: var result = ToTarget(read' 32);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarUInt32,The following statement contains a magic number: var result = ToTarget(read' 32);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarInt64,The following statement contains a magic number: var result = ToTarget(read' 64);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadVarUInt64,The following statement contains a magic number: var result = ToTarget(read' 64);
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,Decode,The following statement contains a magic number: bool negative = value % 2 == 1;
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,Decode,The following statement contains a magic number: value /= 2;
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ToTarget,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ToTarget,The following statement contains a magic number: for (;;)              {                  ulong byteValue = read.ReadByte();                  buffer[pos++] = (byte)byteValue;                    result = (result << 7) | byteValue & 0x7f;                    if (shift > sizeBites)                      throw new OverflowException("Variable length quantity is too long. (must be " + sizeBites + ")");                    if ((byteValue & 0x80) == 0x00)                  {                      var bytes = new byte[pos];                      Buffer.BlockCopy(buffer' 0' bytes' 0' pos);                      return result;                  }                    shift += 7;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ToTarget,The following statement contains a magic number: for (;;)              {                  ulong byteValue = read.ReadByte();                  buffer[pos++] = (byte)byteValue;                    result = (result << 7) | byteValue & 0x7f;                    if (shift > sizeBites)                      throw new OverflowException("Variable length quantity is too long. (must be " + sizeBites + ")");                    if ((byteValue & 0x80) == 0x00)                  {                      var bytes = new byte[pos];                      Buffer.BlockCopy(buffer' 0' bytes' 0' pos);                      return result;                  }                    shift += 7;              }
Magic Number,com.avilance.Starrybound.Extensions,BinaryWriterEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryWriterEx.cs,Encode,The following statement contains a magic number: toWrite *= 2;
Magic Number,com.avilance.Starrybound.Extensions,BinaryWriterEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryWriterEx.cs,WriteVarUInt64,The following statement contains a magic number: var buffer = new byte[10];
Magic Number,com.avilance.Starrybound.Extensions,BinaryWriterEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryWriterEx.cs,WriteVarUInt64,The following statement contains a magic number: do              {                  var byteVal = value & 0x7f;                  value >>= 7;                    if (value != 0)                  {                      byteVal |= 0x80;                  }                    buffer[pos++] = (byte)byteVal;                } while (value != 0);
Magic Number,com.avilance.Starrybound.Packets,Packet11ChatSend,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,onSend,The following statement contains a magic number: if (tmpArray.Count < 5) return;
Magic Number,com.avilance.Starrybound.Packets,Packet11ChatSend,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet11ChatSend.cs,getPacketID,The following statement contains a magic number: return 11;
Magic Number,com.avilance.Starrybound.Packets,Packet2ConnectResponse,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet2ConnectResponse.cs,getPacketID,The following statement contains a magic number: return 2;
Magic Number,com.avilance.Starrybound.Packets,Packet5ChatReceive,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet5ChatReceive.cs,getPacketID,The following statement contains a magic number: return 5;
Magic Number,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,onReceive,The following statement contains a magic number: if (reasonExpiry.Length == 2 && !userPData.getGroup().hasPermission("admin.bypassban"))              {                  this.client.rejectPreConnected("You are " + ((reasonExpiry[1] == "0") ? "permanently" : "temporarily") + " banned from this server.\nReason: " + reasonExpiry[0]);                  return false;              }
Magic Number,com.avilance.Starrybound.Packets,Packet7ClientConnect,C:\repos\AvilanceLtd_StarryboundServer\Packets\Packet7ClientConnect.cs,getPacketID,The following statement contains a magic number: return 5;
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The following statement contains a magic number: try              {                  string defaultGroup = null;                    foreach (Group group in groupList)                  {                      StarryboundServer.groups.Add(group.name' group);                      if (group.isDefault) defaultGroup = group.name;                  }                    if (String.IsNullOrWhiteSpace(defaultGroup))                  {                      StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!");                      Thread.Sleep(5000);                      Environment.Exit(5);                  }                    foreach (Group groupCheck in StarryboundServer.groups.Values)                  {                      if (!String.IsNullOrWhiteSpace(groupCheck.parent))                      {                          if (!StarryboundServer.groups.ContainsKey(groupCheck.parent)) throw new RankException("Parent (" + groupCheck.parent + ") for group " + groupCheck.name + " does not exist!");                      }                  }                    StarryboundServer.defaultGroup = defaultGroup;                    StarryboundServer.logInfo("Loaded " + StarryboundServer.groups.Count + " group(s). Default group is " + defaultGroup);              }              catch (RankException e)              {                  StarryboundServer.logFatal("A fatal exception occurred while processing the groups (Groups::ProcessGroups): " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(5);              }
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The following statement contains a magic number: try              {                  string defaultGroup = null;                    foreach (Group group in groupList)                  {                      StarryboundServer.groups.Add(group.name' group);                      if (group.isDefault) defaultGroup = group.name;                  }                    if (String.IsNullOrWhiteSpace(defaultGroup))                  {                      StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!");                      Thread.Sleep(5000);                      Environment.Exit(5);                  }                    foreach (Group groupCheck in StarryboundServer.groups.Values)                  {                      if (!String.IsNullOrWhiteSpace(groupCheck.parent))                      {                          if (!StarryboundServer.groups.ContainsKey(groupCheck.parent)) throw new RankException("Parent (" + groupCheck.parent + ") for group " + groupCheck.name + " does not exist!");                      }                  }                    StarryboundServer.defaultGroup = defaultGroup;                    StarryboundServer.logInfo("Loaded " + StarryboundServer.groups.Count + " group(s). Default group is " + defaultGroup);              }              catch (RankException e)              {                  StarryboundServer.logFatal("A fatal exception occurred while processing the groups (Groups::ProcessGroups): " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(5);              }
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The following statement contains a magic number: try              {                  string defaultGroup = null;                    foreach (Group group in groupList)                  {                      StarryboundServer.groups.Add(group.name' group);                      if (group.isDefault) defaultGroup = group.name;                  }                    if (String.IsNullOrWhiteSpace(defaultGroup))                  {                      StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!");                      Thread.Sleep(5000);                      Environment.Exit(5);                  }                    foreach (Group groupCheck in StarryboundServer.groups.Values)                  {                      if (!String.IsNullOrWhiteSpace(groupCheck.parent))                      {                          if (!StarryboundServer.groups.ContainsKey(groupCheck.parent)) throw new RankException("Parent (" + groupCheck.parent + ") for group " + groupCheck.name + " does not exist!");                      }                  }                    StarryboundServer.defaultGroup = defaultGroup;                    StarryboundServer.logInfo("Loaded " + StarryboundServer.groups.Count + " group(s). Default group is " + defaultGroup);              }              catch (RankException e)              {                  StarryboundServer.logFatal("A fatal exception occurred while processing the groups (Groups::ProcessGroups): " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(5);              }
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,ProcessGroups,The following statement contains a magic number: try              {                  string defaultGroup = null;                    foreach (Group group in groupList)                  {                      StarryboundServer.groups.Add(group.name' group);                      if (group.isDefault) defaultGroup = group.name;                  }                    if (String.IsNullOrWhiteSpace(defaultGroup))                  {                      StarryboundServer.logFatal("Default user group flag (isDefault) is not set for any groups - Please set this in the groups.json!");                      Thread.Sleep(5000);                      Environment.Exit(5);                  }                    foreach (Group groupCheck in StarryboundServer.groups.Values)                  {                      if (!String.IsNullOrWhiteSpace(groupCheck.parent))                      {                          if (!StarryboundServer.groups.ContainsKey(groupCheck.parent)) throw new RankException("Parent (" + groupCheck.parent + ") for group " + groupCheck.name + " does not exist!");                      }                  }                    StarryboundServer.defaultGroup = defaultGroup;                    StarryboundServer.logInfo("Loaded " + StarryboundServer.groups.Count + " group(s). Default group is " + defaultGroup);              }              catch (RankException e)              {                  StarryboundServer.logFatal("A fatal exception occurred while processing the groups (Groups::ProcessGroups): " + e.ToString());                  Thread.Sleep(5000);                  Environment.Exit(5);              }
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,DefaultGroups,The following statement contains a magic number: Group superAdmin = new Group("superadmin"' "#9801ba"' "[SA]"' saPerms' false' true' 20);
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,DefaultGroups,The following statement contains a magic number: Group admin = new Group("admin"' "#ba0123"' "[A]"' aPerms' false' true' 10' "moderator");
Magic Number,com.avilance.Starrybound.Permissions,GroupFile,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Groups.cs,DefaultGroups,The following statement contains a magic number: Group mod = new Group("moderator"' "#ea6207"' "[M]"' mPerms' false' true' 5' "player");
Magic Number,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GenerateSAKey,The following statement contains a magic number: if (!File.Exists(Path.Combine(StarryboundServer.SavePath' "authcode.txt")))              {                  var r = new Random((int)DateTime.Now.ToBinary());                  StarryboundServer.authCode = r.Next(100000' 10000000).ToString();                    using (var tw = new StreamWriter(Path.Combine(StarryboundServer.SavePath' "authcode.txt")))                  {                      tw.WriteLine(StarryboundServer.authCode);                  }              }              else              {                  using (var tr = new StreamReader(Path.Combine(StarryboundServer.SavePath' "authcode.txt")))                  {                      StarryboundServer.authCode = tr.ReadLine();                  }              }
Magic Number,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,GenerateSAKey,The following statement contains a magic number: if (!File.Exists(Path.Combine(StarryboundServer.SavePath' "authcode.txt")))              {                  var r = new Random((int)DateTime.Now.ToBinary());                  StarryboundServer.authCode = r.Next(100000' 10000000).ToString();                    using (var tw = new StreamWriter(Path.Combine(StarryboundServer.SavePath' "authcode.txt")))                  {                      tw.WriteLine(StarryboundServer.authCode);                  }              }              else              {                  using (var tr = new StreamReader(Path.Combine(StarryboundServer.SavePath' "authcode.txt")))                  {                      StarryboundServer.authCode = tr.ReadLine();                  }              }
Magic Number,com.avilance.Starrybound.Permissions,Users,C:\repos\AvilanceLtd_StarryboundServer\Permissions\Users.cs,Read,The following statement contains a magic number: try              {                  using (var sr = new StreamReader(stream))                  {                      return JsonConvert.DeserializeObject<User>(sr.ReadToEnd());                  }              }              catch (Exception)              {                  StarryboundServer.logException("Persistant user storage for " + data[0] + " is corrupt - Creating with default values");                  return new User(data[0]' data[1]' data[2]' StarryboundServer.defaultGroup' false' true' Utils.getTimestamp()' false' false' false' new List<string>()' new List<string>());              }
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,ByteToBinaryString,The following statement contains a magic number: byte mask = 128;
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,ByteToBinaryString,The following statement contains a magic number: for (int i = 7; i >= 0; --i)              {                  out_string.Append((byteIn & mask) != 0 ? "1" : "0");                  mask >>= 1;              }
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,GenerateSecureSalt,The following statement contains a magic number: byte[] buffer = new byte[24];
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,getTimestamp,The following statement contains a magic number: DateTime unixEpoch = new DateTime(1970' 1' 1);
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,findGlobalCoords,The following statement contains a magic number: try              {                  for (int i = 0; i < input.Length - 26; i++)                  {                      foreach (byte[] sector in StarryboundServer.sectors)                      {                          byte[] buffer = new byte[sector.Length];                          Buffer.BlockCopy(input' i' buffer' 0' sector.Length);                          if (sector.SequenceEqual(buffer))                          {                              byte[] returnBytes = new byte[sector.Length + 21];                              Buffer.BlockCopy(input' i - 1' returnBytes' 0' sector.Length + 21);                              BinaryReader coords = new BinaryReader(new MemoryStream(returnBytes));                              WorldCoordinate rCoords = coords.ReadStarWorldCoordinate();                              if (String.IsNullOrEmpty(rCoords._syscoord._sector)) rCoords = null;                              return rCoords;                          }                      }                  }                  return null;              }              catch(Exception e)              {                  StarryboundServer.logDebug("findGlobalCoords"' "Exception: " + e.ToString());                  return null;              }
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,findGlobalCoords,The following statement contains a magic number: try              {                  for (int i = 0; i < input.Length - 26; i++)                  {                      foreach (byte[] sector in StarryboundServer.sectors)                      {                          byte[] buffer = new byte[sector.Length];                          Buffer.BlockCopy(input' i' buffer' 0' sector.Length);                          if (sector.SequenceEqual(buffer))                          {                              byte[] returnBytes = new byte[sector.Length + 21];                              Buffer.BlockCopy(input' i - 1' returnBytes' 0' sector.Length + 21);                              BinaryReader coords = new BinaryReader(new MemoryStream(returnBytes));                              WorldCoordinate rCoords = coords.ReadStarWorldCoordinate();                              if (String.IsNullOrEmpty(rCoords._syscoord._sector)) rCoords = null;                              return rCoords;                          }                      }                  }                  return null;              }              catch(Exception e)              {                  StarryboundServer.logDebug("findGlobalCoords"' "Exception: " + e.ToString());                  return null;              }
Magic Number,com.avilance.Starrybound.Util,Utils,C:\repos\AvilanceLtd_StarryboundServer\Utils\Utils.cs,findGlobalCoords,The following statement contains a magic number: try              {                  for (int i = 0; i < input.Length - 26; i++)                  {                      foreach (byte[] sector in StarryboundServer.sectors)                      {                          byte[] buffer = new byte[sector.Length];                          Buffer.BlockCopy(input' i' buffer' 0' sector.Length);                          if (sector.SequenceEqual(buffer))                          {                              byte[] returnBytes = new byte[sector.Length + 21];                              Buffer.BlockCopy(input' i - 1' returnBytes' 0' sector.Length + 21);                              BinaryReader coords = new BinaryReader(new MemoryStream(returnBytes));                              WorldCoordinate rCoords = coords.ReadStarWorldCoordinate();                              if (String.IsNullOrEmpty(rCoords._syscoord._sector)) rCoords = null;                              return rCoords;                          }                      }                  }                  return null;              }              catch(Exception e)              {                  StarryboundServer.logDebug("findGlobalCoords"' "Exception: " + e.ToString());                  return null;              }
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindIndex,The following statement contains a magic number: return (int) FindCountryCode(0' AddressToLong(ip)' 31);
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  			{  				long y = bytes[i];  				if (y < 0)  					y += 256;  				num += y << ((3 - i)*8);  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  			{  				long y = bytes[i];  				if (y < 0)  					y += 256;  				num += y << ((3 - i)*8);  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  			{  				long y = bytes[i];  				if (y < 0)  					y += 256;  				num += y << ((3 - i)*8);  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,AddressToLong,The following statement contains a magic number: for (int i = 0; i < 4; ++i)  			{  				long y = bytes[i];  				if (y < 0)  					y += 256;  				num += y << ((3 - i)*8);  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: byte[] buffer = new byte[6];
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: long[] x = new long[2];
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: _geodata.Seek(6*offset' SeekOrigin.Begin);
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: _geodata.Read(buffer' 0' 6);
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: for (int i = 0; i < 2; i++)  			{  				x[i] = 0;  				for (int j = 0; j < 3; j++)  				{  					int y = buffer[i*3 + j];  					if (y < 0)  						y += 256;  					x[i] += (y << (j*8));  				}  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: for (int i = 0; i < 2; i++)  			{  				x[i] = 0;  				for (int j = 0; j < 3; j++)  				{  					int y = buffer[i*3 + j];  					if (y < 0)  						y += 256;  					x[i] += (y << (j*8));  				}  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: for (int i = 0; i < 2; i++)  			{  				x[i] = 0;  				for (int j = 0; j < 3; j++)  				{  					int y = buffer[i*3 + j];  					if (y < 0)  						y += 256;  					x[i] += (y << (j*8));  				}  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: for (int i = 0; i < 2; i++)  			{  				x[i] = 0;  				for (int j = 0; j < 3; j++)  				{  					int y = buffer[i*3 + j];  					if (y < 0)  						y += 256;  					x[i] += (y << (j*8));  				}  			}
Magic Number,MaxMind,GeoIPCountry,C:\repos\AvilanceLtd_StarryboundServer\Utils\GeoIPCountry.cs,FindCountryCode,The following statement contains a magic number: for (int i = 0; i < 2; i++)  			{  				x[i] = 0;  				for (int j = 0; j < 3; j++)  				{  					int y = buffer[i*3 + j];  					if (y < 0)  						y += 256;  					x[i] += (y << (j*8));  				}  			}
Missing Default,com.avilance.Starrybound,SpamAction,C:\repos\AvilanceLtd_StarryboundServer\Config\Config.cs,checkTrigger,The following switch statement is missing a default case: switch (actionName)                  {                      case "mute":                          player.isMuted = true;                          StarryboundServer.sendGlobalMessage("^#f75d5d;" + player.name + " has been muted automatically for spamming.");                          break;                        case "kick":                          client.kickClient(reason);                          break;                        case "ban":                          if (length != 0) length = Utils.getTimestamp() + (length * 60);                            Bans.addNewBan(player.name' player.uuid' player.ip' Utils.getTimestamp()' "[SYSTEM]"' length' reason);                            client.banClient(reason);                          break;                  }
Missing Default,com.avilance.Starrybound,StarryboundServer,C:\repos\AvilanceLtd_StarryboundServer\StarryboundServer.cs,writeLog,The following switch statement is missing a default case: switch (logType)              {                  case LogType.Debug:                      message = "[DEBUG] " + message;                      break;                    case LogType.Info:                      message = "[INFO] " + message;                      break;                    case LogType.Warn:                      message = "[WARN] " + message;                      break;                    case LogType.Error:                      message = "[ERROR] " + message;                      break;                    case LogType.Exception:                      message = "[EXCEPTION] " + message;                      break;                    case LogType.Fatal:                      message = "[FATAL ERROR] " + message;                      break;              }
Missing Default,com.avilance.Starrybound.Commands,CommandBase,C:\repos\AvilanceLtd_StarryboundServer\Commands\CommandBase.cs,permissionError,The following switch statement is missing a default case: switch (errorCode)              {                  case 1:                      message = "You do not have permission to use this command.";                      break;                    case 2:                      message = "You do not have permission to target this player.";                      break;              }
Missing Default,com.avilance.Starrybound.Extensions,BinaryReaderEx,C:\repos\AvilanceLtd_StarryboundServer\Extensions\BinaryReaderEx.cs,ReadStarVariant,The following switch statement is missing a default case: switch (type)              {                  case 2:                      return read.ReadDoubleBE();                  case 3:                      return read.ReadBoolean();                  case 4:                      return read.ReadVarInt64();                  case 5:                      return read.ReadStarString();                  case 6:                      uint size = read.ReadVarUInt32();                      List<object> Variant = new List<object>();                      for(int i=0; i < size; i++)                      {                          Variant.Add(read.ReadStarVariant());                      }                      return Variant;                  case 7:                      uint size2 = read.ReadVarUInt32();                      Dictionary<string' object> VariantMap = new Dictionary<string' object>();                      for(int i=0; i < size2; i++)                      {                          VariantMap.Add(read.ReadStarString()' read.ReadStarVariant());                      }                      return VariantMap;              }
