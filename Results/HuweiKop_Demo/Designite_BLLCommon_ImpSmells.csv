Implementation smell,Namespace,Class,File,Method,Description
Long Method,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,The method has 143 lines of code.
Long Method,BLLCommon,Import3,C:\repos\HuweiKop_Demo\BLLCommon\Import3.cs,ImporttoExcel,The method has 144 lines of code.
Complex Method,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetDataSet,Cyclomatic complexity of the method is 8
Complex Method,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetDataSet,Cyclomatic complexity of the method is 10
Complex Method,BLLCommon,Import,C:\repos\HuweiKop_Demo\BLLCommon\Import.cs,ImporttoExcel,Cyclomatic complexity of the method is 15
Complex Method,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,Cyclomatic complexity of the method is 28
Complex Method,BLLCommon,Import3,C:\repos\HuweiKop_Demo\BLLCommon\Import3.cs,ImporttoExcel,Cyclomatic complexity of the method is 25
Long Statement,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,SaveMemoryStream,The length of the statement  "			fileName = string.Format ("{0}_{1}{2}"' Path.GetFileNameWithoutExtension (fullPath)' Guid.NewGuid ().ToString ()' Path.GetExtension (fullPath)); " is 144.
Long Statement,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,SaveMemoryStream,The length of the statement  "			fileName = string.Format ("{0}_{1}{2}"' Path.GetFileNameWithoutExtension (fullPath)' Guid.NewGuid ().ToString ()' Path.GetExtension (fullPath)); " is 144.
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetStream,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (stream)) {  	for (int table = 0; table < listTable.Count; table++) {  		DataTable dt = listTable [table];  		ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dt.TableName);  		for (int i = 0; i < dt.Columns.Count; i++) {  			worksheet.Cells [1' i + 1].Value = dt.Columns [i].ColumnName;  		}  		for (int i = 0; i < dt.Rows.Count; i++) {  			for (int j = 0; j < dt.Columns.Count; j++) {  				worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  			}  		}  	}  	package.Save ();  	return stream;  }  
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetStream,The following statement contains a magic number: for (int table = 0; table < listTable.Count; table++) {  	DataTable dt = listTable [table];  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dt.TableName);  	for (int i = 0; i < dt.Columns.Count; i++) {  		worksheet.Cells [1' i + 1].Value = dt.Columns [i].ColumnName;  	}  	for (int i = 0; i < dt.Rows.Count; i++) {  		for (int j = 0; j < dt.Columns.Count; j++) {  			worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  		}  	}  }  
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetStream,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	for (int j = 0; j < dt.Columns.Count; j++) {  		worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  	}  }  
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetStream,The following statement contains a magic number: for (int j = 0; j < dt.Columns.Count; j++) {  	worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  }  
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetStream,The following statement contains a magic number: worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetDataSet,The following statement contains a magic number: try {  	SqlService sqlService = SqlServiceFactory.GetSQLService ();  	XmlDocument dom = new XmlDocument ();  	List<DataTable> listTable = new List<DataTable> ();  	string path = AppDomain.CurrentDomain.BaseDirectory;  	string[] arr = path.Split ('\\');  	path = "";  	for (int i = 0; i < arr.Length - 2; i++) {  		path += arr [i] + "\\";  	}  	dom.Load (path + "ExportExcel2.xml");  	//装载XML文档   	foreach (XmlElement sheet in dom.DocumentElement.ChildNodes) {  		StringBuilder fields = new StringBuilder ();  		StringBuilder joinTables = new StringBuilder ();  		string tableName = sheet.SelectSingleNode ("table").InnerText;  		string sheetName = sheet.SelectSingleNode ("name").InnerText;  		XmlNode columns = sheet.SelectSingleNode ("columns");  		foreach (XmlElement column in columns) {  			string field = column.SelectSingleNode ("field").InnerText;  			string showColumn = column.SelectSingleNode ("name").InnerText;  			if ("yes".Equals (column.GetAttribute ("fk"))) {  				joinTables.Append (" left join ");  				joinTables.Append (column.GetAttribute ("referenceTable"));  				joinTables.Append (" on ");  				if (column.SelectSingleNode ("joinTable") == null) {  					joinTables.Append (tableName);  				}  				else {  					joinTables.Append (column.SelectSingleNode ("joinTable").InnerText);  				}  				joinTables.Append (".");  				joinTables.Append (field);  				joinTables.Append ("=");  				joinTables.Append (column.GetAttribute ("referenceTable"));  				joinTables.Append (".");  				joinTables.Append (column.GetAttribute ("referenceColumn"));  				fields.Append (column.GetAttribute ("referenceTable"));  				fields.Append (".");  				fields.Append (column.GetAttribute ("showColumn"));  				fields.Append (" as '");  				fields.Append (showColumn);  				fields.Append ("''");  			}  			else {  				fields.Append (field);  				fields.Append (" as '");  				fields.Append (showColumn);  				fields.Append ("''");  			}  		}  		if (fields.Length > 0) {  			fields.Remove (fields.Length - 1' 1);  			string sql = "select " + fields + " from " + tableName + " " + joinTables;  			DataTable dt = sqlService.QueryDataTable (sql);  			dt.TableName = sheetName;  			listTable.Add (dt);  		}  	}  	return listTable;  }  catch {  	throw;  }  
Magic Number,BLLCommon,Export,C:\repos\HuweiKop_Demo\BLLCommon\Export.cs,GetDataSet,The following statement contains a magic number: for (int i = 0; i < arr.Length - 2; i++) {  	path += arr [i] + "\\";  }  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetStream,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (stream)) {  	for (int table = 0; table < listTable.Count; table++) {  		DataTable dt = listTable [table];  		ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dt.TableName);  		for (int i = 0; i < dt.Columns.Count; i++) {  			worksheet.Cells [1' i + 1].Value = dt.Columns [i].ColumnName;  		}  		for (int i = 0; i < dt.Rows.Count; i++) {  			for (int j = 0; j < dt.Columns.Count; j++) {  				worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  			}  		}  	}  	package.Save ();  	return stream;  }  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetStream,The following statement contains a magic number: for (int table = 0; table < listTable.Count; table++) {  	DataTable dt = listTable [table];  	ExcelWorksheet worksheet = package.Workbook.Worksheets.Add (dt.TableName);  	for (int i = 0; i < dt.Columns.Count; i++) {  		worksheet.Cells [1' i + 1].Value = dt.Columns [i].ColumnName;  	}  	for (int i = 0; i < dt.Rows.Count; i++) {  		for (int j = 0; j < dt.Columns.Count; j++) {  			worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  		}  	}  }  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetStream,The following statement contains a magic number: for (int i = 0; i < dt.Rows.Count; i++) {  	for (int j = 0; j < dt.Columns.Count; j++) {  		worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  	}  }  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetStream,The following statement contains a magic number: for (int j = 0; j < dt.Columns.Count; j++) {  	worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  }  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetStream,The following statement contains a magic number: worksheet.Cells [i + 2' j + 1].Value = dt.Rows [i] [j];  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetDataSet,The following statement contains a magic number: try {  	SqlService sqlService = SqlServiceFactory.GetSQLService ();  	XmlDocument dom = new XmlDocument ();  	List<DataTable> listTable = new List<DataTable> ();  	string path = AppDomain.CurrentDomain.BaseDirectory;  	string[] arr = path.Split ('\\');  	path = "";  	for (int i = 0; i < arr.Length - 2; i++) {  		path += arr [i] + "\\";  	}  	dom.Load (path + "ExportExcel2.xml");  	//装载XML文档   	foreach (XmlElement sheet in dom.DocumentElement.ChildNodes) {  		StringBuilder fields = new StringBuilder ();  		StringBuilder joinTables = new StringBuilder ();  		string tableName = sheet.SelectSingleNode ("table").InnerText;  		string sheetName = sheet.SelectSingleNode ("name").InnerText;  		XmlNode columns = sheet.SelectSingleNode ("columns");  		foreach (XmlElement column in columns) {  			string field = column.SelectSingleNode ("field").InnerText;  			if ("yes".Equals (column.GetAttribute ("fk"))) {  				joinTables.Append (" left join ");  				joinTables.Append (column.GetAttribute ("referenceTable"));  				joinTables.Append (" on ");  				if (column.SelectSingleNode ("joinTable") == null) {  					joinTables.Append (tableName);  				}  				else {  					joinTables.Append (column.SelectSingleNode ("joinTable").InnerText);  				}  				joinTables.Append (".");  				joinTables.Append (field);  				joinTables.Append ("=");  				joinTables.Append (column.GetAttribute ("referenceTable"));  				joinTables.Append (".");  				joinTables.Append (column.GetAttribute ("referenceColumn"));  				string manyColumn = column.GetAttribute ("manyColumn");  				string referenceTable = column.GetAttribute ("referenceTable");  				if ("yes".Equals (manyColumn)) {  					XmlNode names = column.SelectSingleNode ("names");  					foreach (XmlElement name in names) {  						fields.Append (referenceTable);  						fields.Append (".");  						fields.Append (name.GetAttribute ("show"));  						fields.Append (" as '");  						fields.Append (name.InnerText);  						fields.Append ("''");  					}  				}  				else {  					string showColumn = column.SelectSingleNode ("name").InnerText;  					fields.Append (referenceTable);  					fields.Append (".");  					fields.Append (column.GetAttribute ("showColumn"));  					fields.Append (" as '");  					fields.Append (showColumn);  					fields.Append ("''");  				}  			}  			else {  				string showColumn = column.SelectSingleNode ("name").InnerText;  				fields.Append (tableName);  				fields.Append (".");  				fields.Append (field);  				fields.Append (" as '");  				fields.Append (showColumn);  				fields.Append ("''");  			}  		}  		if (fields.Length > 0) {  			fields.Remove (fields.Length - 1' 1);  			string sql = "select " + fields + " from " + tableName + " " + joinTables;  			DataTable dt = sqlService.QueryDataTable (sql);  			dt.TableName = sheetName;  			listTable.Add (dt);  		}  	}  	return listTable;  }  catch {  	throw;  }  
Magic Number,BLLCommon,Export2,C:\repos\HuweiKop_Demo\BLLCommon\Export2.cs,GetDataSet,The following statement contains a magic number: for (int i = 0; i < arr.Length - 2; i++) {  	path += arr [i] + "\\";  }  
Magic Number,BLLCommon,Import,C:\repos\HuweiKop_Demo\BLLCommon\Import.cs,ImporttoExcel,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	SqlService sqlService = SqlServiceFactory.GetSQLService ();  	XmlDocument dom = new XmlDocument ();  	hashTables = new Hashtable ();  	Hashtable hash = null;  	string path = AppDomain.CurrentDomain.BaseDirectory;  	string[] arr = path.Split ('\\');  	path = "";  	for (int i = 0; i < arr.Length - 2; i++) {  		path += arr [i] + "\\";  	}  	dom.Load (path + "ImportExcel4.xml");  	//装载XML文档   	foreach (XmlElement model in dom.DocumentElement.ChildNodes) {  		//读取数据   		string tableName = model.SelectSingleNode ("name").InnerText;  		string sheetName = model.SelectSingleNode ("sheetName").InnerText;  		var workbook = package.Workbook;  		var worksheets = workbook.Worksheets;  		ExcelWorksheet worksheet = worksheets [sheetName];  		List<string> listSql = new List<string> ();  		int colStart = worksheet.Dimension.Start.Column;  		//工作区开始列  		int colEnd = worksheet.Dimension.End.Column;  		//工作区结束列  		int rowStart = worksheet.Dimension.Start.Row;  		//工作区开始行号  		int rowEnd = worksheet.Dimension.End.Row;  		//工作区结束行号  		dictHeader = new Dictionary<string' int> ();  		//将每列标题添加到字典中  		for (int i = colStart; i <= colEnd; i++) {  			dictHeader [worksheet.Cells [rowStart' i].Value + ""] = i;  		}  		hash = new Hashtable ();  		XmlNode keys = model.SelectSingleNode ("tableUniques");  		if (keys != null) {  			hash = GetDataBaseUnique (tableName' keys);  		}  		hashTables.Add (tableName' hash);  		for (int i = rowStart + 1; i <= rowEnd; i++) {  			string sql = "";  			string fields = "";  			string values = "";  			XmlNode xmlFields = model.SelectSingleNode ("fields");  			string unique = "";  			foreach (XmlElement field in xmlFields.ChildNodes) {  				string fieldName = field.SelectSingleNode ("name").InnerText;  				string columnName = "";  				object fieldValue = null;  				if (field.SelectSingleNode ("columns") != null) {  					XmlNode columns = field.SelectSingleNode ("columns");  					foreach (XmlElement column in columns) {  						columnName = column.InnerText;  						fieldValue += worksheet.Cells [i' dictHeader [columnName]].Value + "";  					}  				}  				else {  					columnName = field.SelectSingleNode ("column").InnerText;  					fieldValue = worksheet.Cells [i' dictHeader [columnName]].Value;  				}  				if ("yes".Equals (field.GetAttribute ("unique"))) {  					unique += fieldValue;  				}  				if ("yes".Equals (field.GetAttribute ("fk"))) {  					string referenceTable = field.GetAttribute ("referenceTable");  					fieldValue = ((Hashtable)hashTables [referenceTable]) [fieldValue];  				}  				fields += "[" + fieldName + "]'";  				values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  			}  			if (hash.Contains (unique)) {  				continue;  			}  			string id = "";  			id = Guid.NewGuid () + "";  			hash.Add (unique' id);  			if (fields.Length > 0) {  				fields = fields.Substring (0' fields.Length - 1);  				values = values.Substring (0' values.Length - 1);  			}  			sql += "insert into " + tableName + " (Id'";  			sql += fields;  			sql += ") values ('" + id + "''";  			sql += values;  			sql += ")";  			listSql.Add (sql);  		}  		sqlService.ExecuteTransactionReturnCount (listSql);  	}  }  
Magic Number,BLLCommon,Import,C:\repos\HuweiKop_Demo\BLLCommon\Import.cs,ImporttoExcel,The following statement contains a magic number: for (int i = 0; i < arr.Length - 2; i++) {  	path += arr [i] + "\\";  }  
Magic Number,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,The following statement contains a magic number: for (int i = 0; i < arr.Length - 2; i++) {  	path += arr [i] + "\\";  }  
Magic Number,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	ExcelWorksheet commonWorksheet = package.Workbook.Worksheets [1];  	int colStart = commonWorksheet.Dimension.Start.Column;  	//工作区开始列  	int colEnd = commonWorksheet.Dimension.End.Column;  	//工作区结束列  	int rowStart = commonWorksheet.Dimension.Start.Row;  	//工作区开始行号  	string mergeHeader = "";  	for (int i = colStart; i <= colEnd; i++) {  		string headerName = commonWorksheet.Cells [rowStart' i].Value + "" + commonWorksheet.Cells [rowStart + 1' i].Value;  		if (commonWorksheet.Cells [rowStart' i].Merge) {  			if (commonWorksheet.Cells [rowStart' i].Value != null) {  				mergeHeader = commonWorksheet.Cells [rowStart' i].Value + "";  			}  			else {  				headerName = mergeHeader + commonWorksheet.Cells [rowStart + 1' i].Value;  			}  		}  		headerName = headerName.Replace ("\n"' "");  		dictHeader [headerName] = i;  	}  	bool loadData = false;  	foreach (ExcelWorksheet worksheet in package.Workbook.Worksheets) {  		int rowEnd = worksheet.Dimension.End.Row;  		//工作区结束行号  		foreach (XmlElement model in dom.DocumentElement.ChildNodes) {  			string tableName = model.SelectSingleNode ("name").InnerText;  			List<string> listSql = new List<string> ();  			XmlNode keys = model.SelectSingleNode ("tableUniques");  			if (!loadData) {  				hash = new Hashtable ();  				if (keys != null) {  					hash = GetDataBaseUnique (tableName' keys);  				}  				if (!hashTables.Contains (tableName)) {  					hashTables.Add (tableName' hash);  				}  			}  			else {  				hash = (Hashtable)hashTables [tableName];  			}  			for (int i = rowStart + 2; i <= rowEnd; i++) {  				bool whitespace = false;  				string sql = "";  				string fields = "";  				string values = "";  				XmlNode xmlFields = model.SelectSingleNode ("fields");  				string unique = "";  				foreach (XmlElement field in xmlFields.ChildNodes) {  					string fieldName = field.SelectSingleNode ("name").InnerText;  					string columnName = "";  					object fieldValue = null;  					int row = i;  					//if (field.SelectSingleNode("row") != null)  					//{  					//    row = Convert.ToInt32(field.SelectSingleNode("row").InnerText);  					//}  					if (field.SelectSingleNode ("columns") != null) {  						XmlNode columns = field.SelectSingleNode ("columns");  						foreach (XmlElement column in columns) {  							row = i;  							if (!string.IsNullOrWhiteSpace (column.GetAttribute ("row"))) {  								row = Convert.ToInt32 (column.GetAttribute ("row"));  							}  							columnName = column.InnerText;  							fieldValue += worksheet.Cells [row' dictHeader [columnName]].Value + "";  						}  					}  					else {  						if (field.SelectSingleNode ("column").Attributes ["row"] != null) {  							row = Convert.ToInt32 (field.SelectSingleNode ("column").Attributes ["row"].Value);  						}  						columnName = field.SelectSingleNode ("column").InnerText;  						fieldValue = worksheet.Cells [row' dictHeader [columnName]].Value;  					}  					if ("yes".Equals (field.GetAttribute ("unique"))) {  						if (string.IsNullOrWhiteSpace (fieldValue + "")) {  							whitespace = true;  							break;  						}  						unique += fieldValue;  					}  					if ("yes".Equals (field.GetAttribute ("notnull"))) {  						if (string.IsNullOrWhiteSpace (fieldValue + "")) {  							whitespace = true;  							break;  						}  					}  					if ("yes".Equals (field.GetAttribute ("fk"))) {  						string referenceTable = field.GetAttribute ("referenceTable");  						fieldValue = (fieldValue == null) ? null : ((Hashtable)hashTables [referenceTable]) [fieldValue];  					}  					fields += "[" + fieldName + "]'";  					if (fieldValue == null) {  						values += "NULL'";  					}  					else {  						values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  					}  				}  				if (whitespace)  					break;  				if (hash.Contains (unique)) {  					continue;  				}  				string id = "";  				id = Guid.NewGuid () + "";  				if (!string.IsNullOrWhiteSpace (unique)) {  					hash.Add (unique' id);  				}  				if (fields.Length > 0) {  					fields = fields.Substring (0' fields.Length - 1);  					values = values.Substring (0' values.Length - 1);  				}  				sql += "insert into " + tableName + " (Id'";  				sql += fields;  				sql += ") values ('" + id + "''";  				sql += values;  				sql += ")";  				listSql.Add (sql);  			}  			sqlService.ExecuteTransactionReturnCount (listSql);  		}  		loadData = true;  	}  }  
Magic Number,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,The following statement contains a magic number: foreach (ExcelWorksheet worksheet in package.Workbook.Worksheets) {  	int rowEnd = worksheet.Dimension.End.Row;  	//工作区结束行号  	foreach (XmlElement model in dom.DocumentElement.ChildNodes) {  		string tableName = model.SelectSingleNode ("name").InnerText;  		List<string> listSql = new List<string> ();  		XmlNode keys = model.SelectSingleNode ("tableUniques");  		if (!loadData) {  			hash = new Hashtable ();  			if (keys != null) {  				hash = GetDataBaseUnique (tableName' keys);  			}  			if (!hashTables.Contains (tableName)) {  				hashTables.Add (tableName' hash);  			}  		}  		else {  			hash = (Hashtable)hashTables [tableName];  		}  		for (int i = rowStart + 2; i <= rowEnd; i++) {  			bool whitespace = false;  			string sql = "";  			string fields = "";  			string values = "";  			XmlNode xmlFields = model.SelectSingleNode ("fields");  			string unique = "";  			foreach (XmlElement field in xmlFields.ChildNodes) {  				string fieldName = field.SelectSingleNode ("name").InnerText;  				string columnName = "";  				object fieldValue = null;  				int row = i;  				//if (field.SelectSingleNode("row") != null)  				//{  				//    row = Convert.ToInt32(field.SelectSingleNode("row").InnerText);  				//}  				if (field.SelectSingleNode ("columns") != null) {  					XmlNode columns = field.SelectSingleNode ("columns");  					foreach (XmlElement column in columns) {  						row = i;  						if (!string.IsNullOrWhiteSpace (column.GetAttribute ("row"))) {  							row = Convert.ToInt32 (column.GetAttribute ("row"));  						}  						columnName = column.InnerText;  						fieldValue += worksheet.Cells [row' dictHeader [columnName]].Value + "";  					}  				}  				else {  					if (field.SelectSingleNode ("column").Attributes ["row"] != null) {  						row = Convert.ToInt32 (field.SelectSingleNode ("column").Attributes ["row"].Value);  					}  					columnName = field.SelectSingleNode ("column").InnerText;  					fieldValue = worksheet.Cells [row' dictHeader [columnName]].Value;  				}  				if ("yes".Equals (field.GetAttribute ("unique"))) {  					if (string.IsNullOrWhiteSpace (fieldValue + "")) {  						whitespace = true;  						break;  					}  					unique += fieldValue;  				}  				if ("yes".Equals (field.GetAttribute ("notnull"))) {  					if (string.IsNullOrWhiteSpace (fieldValue + "")) {  						whitespace = true;  						break;  					}  				}  				if ("yes".Equals (field.GetAttribute ("fk"))) {  					string referenceTable = field.GetAttribute ("referenceTable");  					fieldValue = (fieldValue == null) ? null : ((Hashtable)hashTables [referenceTable]) [fieldValue];  				}  				fields += "[" + fieldName + "]'";  				if (fieldValue == null) {  					values += "NULL'";  				}  				else {  					values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  				}  			}  			if (whitespace)  				break;  			if (hash.Contains (unique)) {  				continue;  			}  			string id = "";  			id = Guid.NewGuid () + "";  			if (!string.IsNullOrWhiteSpace (unique)) {  				hash.Add (unique' id);  			}  			if (fields.Length > 0) {  				fields = fields.Substring (0' fields.Length - 1);  				values = values.Substring (0' values.Length - 1);  			}  			sql += "insert into " + tableName + " (Id'";  			sql += fields;  			sql += ") values ('" + id + "''";  			sql += values;  			sql += ")";  			listSql.Add (sql);  		}  		sqlService.ExecuteTransactionReturnCount (listSql);  	}  	loadData = true;  }  
Magic Number,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,The following statement contains a magic number: foreach (XmlElement model in dom.DocumentElement.ChildNodes) {  	string tableName = model.SelectSingleNode ("name").InnerText;  	List<string> listSql = new List<string> ();  	XmlNode keys = model.SelectSingleNode ("tableUniques");  	if (!loadData) {  		hash = new Hashtable ();  		if (keys != null) {  			hash = GetDataBaseUnique (tableName' keys);  		}  		if (!hashTables.Contains (tableName)) {  			hashTables.Add (tableName' hash);  		}  	}  	else {  		hash = (Hashtable)hashTables [tableName];  	}  	for (int i = rowStart + 2; i <= rowEnd; i++) {  		bool whitespace = false;  		string sql = "";  		string fields = "";  		string values = "";  		XmlNode xmlFields = model.SelectSingleNode ("fields");  		string unique = "";  		foreach (XmlElement field in xmlFields.ChildNodes) {  			string fieldName = field.SelectSingleNode ("name").InnerText;  			string columnName = "";  			object fieldValue = null;  			int row = i;  			//if (field.SelectSingleNode("row") != null)  			//{  			//    row = Convert.ToInt32(field.SelectSingleNode("row").InnerText);  			//}  			if (field.SelectSingleNode ("columns") != null) {  				XmlNode columns = field.SelectSingleNode ("columns");  				foreach (XmlElement column in columns) {  					row = i;  					if (!string.IsNullOrWhiteSpace (column.GetAttribute ("row"))) {  						row = Convert.ToInt32 (column.GetAttribute ("row"));  					}  					columnName = column.InnerText;  					fieldValue += worksheet.Cells [row' dictHeader [columnName]].Value + "";  				}  			}  			else {  				if (field.SelectSingleNode ("column").Attributes ["row"] != null) {  					row = Convert.ToInt32 (field.SelectSingleNode ("column").Attributes ["row"].Value);  				}  				columnName = field.SelectSingleNode ("column").InnerText;  				fieldValue = worksheet.Cells [row' dictHeader [columnName]].Value;  			}  			if ("yes".Equals (field.GetAttribute ("unique"))) {  				if (string.IsNullOrWhiteSpace (fieldValue + "")) {  					whitespace = true;  					break;  				}  				unique += fieldValue;  			}  			if ("yes".Equals (field.GetAttribute ("notnull"))) {  				if (string.IsNullOrWhiteSpace (fieldValue + "")) {  					whitespace = true;  					break;  				}  			}  			if ("yes".Equals (field.GetAttribute ("fk"))) {  				string referenceTable = field.GetAttribute ("referenceTable");  				fieldValue = (fieldValue == null) ? null : ((Hashtable)hashTables [referenceTable]) [fieldValue];  			}  			fields += "[" + fieldName + "]'";  			if (fieldValue == null) {  				values += "NULL'";  			}  			else {  				values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  			}  		}  		if (whitespace)  			break;  		if (hash.Contains (unique)) {  			continue;  		}  		string id = "";  		id = Guid.NewGuid () + "";  		if (!string.IsNullOrWhiteSpace (unique)) {  			hash.Add (unique' id);  		}  		if (fields.Length > 0) {  			fields = fields.Substring (0' fields.Length - 1);  			values = values.Substring (0' values.Length - 1);  		}  		sql += "insert into " + tableName + " (Id'";  		sql += fields;  		sql += ") values ('" + id + "''";  		sql += values;  		sql += ")";  		listSql.Add (sql);  	}  	sqlService.ExecuteTransactionReturnCount (listSql);  }  
Magic Number,BLLCommon,Import2,C:\repos\HuweiKop_Demo\BLLCommon\Import2.cs,ImporttoExcel,The following statement contains a magic number: for (int i = rowStart + 2; i <= rowEnd; i++) {  	bool whitespace = false;  	string sql = "";  	string fields = "";  	string values = "";  	XmlNode xmlFields = model.SelectSingleNode ("fields");  	string unique = "";  	foreach (XmlElement field in xmlFields.ChildNodes) {  		string fieldName = field.SelectSingleNode ("name").InnerText;  		string columnName = "";  		object fieldValue = null;  		int row = i;  		//if (field.SelectSingleNode("row") != null)  		//{  		//    row = Convert.ToInt32(field.SelectSingleNode("row").InnerText);  		//}  		if (field.SelectSingleNode ("columns") != null) {  			XmlNode columns = field.SelectSingleNode ("columns");  			foreach (XmlElement column in columns) {  				row = i;  				if (!string.IsNullOrWhiteSpace (column.GetAttribute ("row"))) {  					row = Convert.ToInt32 (column.GetAttribute ("row"));  				}  				columnName = column.InnerText;  				fieldValue += worksheet.Cells [row' dictHeader [columnName]].Value + "";  			}  		}  		else {  			if (field.SelectSingleNode ("column").Attributes ["row"] != null) {  				row = Convert.ToInt32 (field.SelectSingleNode ("column").Attributes ["row"].Value);  			}  			columnName = field.SelectSingleNode ("column").InnerText;  			fieldValue = worksheet.Cells [row' dictHeader [columnName]].Value;  		}  		if ("yes".Equals (field.GetAttribute ("unique"))) {  			if (string.IsNullOrWhiteSpace (fieldValue + "")) {  				whitespace = true;  				break;  			}  			unique += fieldValue;  		}  		if ("yes".Equals (field.GetAttribute ("notnull"))) {  			if (string.IsNullOrWhiteSpace (fieldValue + "")) {  				whitespace = true;  				break;  			}  		}  		if ("yes".Equals (field.GetAttribute ("fk"))) {  			string referenceTable = field.GetAttribute ("referenceTable");  			fieldValue = (fieldValue == null) ? null : ((Hashtable)hashTables [referenceTable]) [fieldValue];  		}  		fields += "[" + fieldName + "]'";  		if (fieldValue == null) {  			values += "NULL'";  		}  		else {  			values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  		}  	}  	if (whitespace)  		break;  	if (hash.Contains (unique)) {  		continue;  	}  	string id = "";  	id = Guid.NewGuid () + "";  	if (!string.IsNullOrWhiteSpace (unique)) {  		hash.Add (unique' id);  	}  	if (fields.Length > 0) {  		fields = fields.Substring (0' fields.Length - 1);  		values = values.Substring (0' values.Length - 1);  	}  	sql += "insert into " + tableName + " (Id'";  	sql += fields;  	sql += ") values ('" + id + "''";  	sql += values;  	sql += ")";  	listSql.Add (sql);  }  
Magic Number,BLLCommon,Import3,C:\repos\HuweiKop_Demo\BLLCommon\Import3.cs,ImporttoExcel,The following statement contains a magic number: using (ExcelPackage package = new ExcelPackage (existingFile)) {  	SqlService sqlService = SqlServiceFactory.GetSQLService ();  	XmlDocument dom = new XmlDocument ();  	Hashtable hashTables = new Hashtable ();  	Hashtable hash = null;  	string path = AppDomain.CurrentDomain.BaseDirectory;  	string[] arr = path.Split ('\\');  	path = "";  	for (int i = 0; i < arr.Length - 2; i++) {  		path += arr [i] + "\\";  	}  	dom.Load (path + "ImportExcel.xml");  	//装载XML文档   	foreach (XmlElement model in dom.DocumentElement.ChildNodes) {  		string tableName = model.SelectSingleNode ("name").InnerText;  		List<string> listSql = new List<string> ();  		hash = new Hashtable ();  		if (!hashTables.Contains (tableName)) {  			XmlNode keys = model.SelectSingleNode ("tableUniques");  			if (keys != null) {  				hash = GetDataBaseUnique (tableName' keys);  			}  			hashTables.Add (tableName' hash);  		}  		else {  			hash = (Hashtable)hashTables [tableName];  		}  		if (string.IsNullOrWhiteSpace (model.GetAttribute ("data"))) {  			//读取数据   			string sheetName = model.SelectSingleNode ("sheetName").InnerText;  			ExcelWorksheet worksheet = package.Workbook.Worksheets [sheetName];  			int colStart = worksheet.Dimension.Start.Column;  			//工作区开始列  			int colEnd = worksheet.Dimension.End.Column;  			//工作区结束列  			int rowStart = worksheet.Dimension.Start.Row;  			//工作区开始行号  			int rowEnd = worksheet.Dimension.End.Row;  			//工作区结束行号  			dictHeader = new Dictionary<string' int> ();  			//将每列标题添加到字典中  			for (int i = colStart; i <= colEnd; i++) {  				string headerName = worksheet.Cells [rowStart' i].Value + "";  				headerName = headerName.Replace ("\n"' "");  				dictHeader [headerName] = i;  			}  			for (int i = rowStart + 1; i <= rowEnd; i++) {  				string sql = "";  				string fields = "";  				string values = "";  				XmlNode xmlFields = model.SelectSingleNode ("fields");  				string unique = "";  				foreach (XmlElement field in xmlFields.ChildNodes) {  					string fieldName = field.SelectSingleNode ("name").InnerText;  					string columnName = "";  					object fieldValue = null;  					if (field.SelectSingleNode ("columns") != null) {  						XmlNode columns = field.SelectSingleNode ("columns");  						foreach (XmlElement column in columns) {  							columnName = column.InnerText;  							fieldValue += worksheet.Cells [i' dictHeader [columnName]].Value + "";  						}  					}  					else {  						if (field.SelectSingleNode ("value") == null) {  							columnName = field.SelectSingleNode ("column").InnerText;  							fieldValue = worksheet.Cells [i' dictHeader [columnName]].Value;  						}  						else {  							fieldValue = field.SelectSingleNode ("value").InnerText;  						}  					}  					if (string.IsNullOrWhiteSpace (fieldValue + "") && !string.IsNullOrWhiteSpace (field.GetAttribute ("defaultValue")))  						fieldValue = field.GetAttribute ("defaultValue");  					if ("yes".Equals (field.GetAttribute ("unique"))) {  						unique += fieldValue;  					}  					if ("yes".Equals (field.GetAttribute ("fk"))) {  						string referenceTable = field.GetAttribute ("referenceTable");  						fieldValue = ((Hashtable)hashTables [referenceTable]) [fieldValue];  					}  					fields += "[" + fieldName + "]'";  					values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  				}  				if (hash.Contains (unique)) {  					continue;  				}  				string id = "";  				id = Guid.NewGuid () + "";  				hash.Add (unique' id);  				if (fields.Length > 0) {  					fields = fields.Substring (0' fields.Length - 1);  					values = values.Substring (0' values.Length - 1);  				}  				sql += "insert into " + tableName + " (Id'";  				sql += fields;  				sql += ") values ('" + id + "''";  				sql += values;  				sql += ")";  				listSql.Add (sql);  			}  		}  		else {  			XmlNode xmlFields = model.SelectSingleNode ("record");  			foreach (XmlElement record in xmlFields.ChildNodes) {  				string fields = "";  				string values = "";  				string unique = "";  				string sql = "";  				foreach (XmlElement field in record.ChildNodes) {  					string fieldValue = field.SelectSingleNode ("data").InnerText;  					if (string.IsNullOrWhiteSpace (fieldValue + "") && !string.IsNullOrWhiteSpace (field.GetAttribute ("defaultValue")))  						fieldValue = field.GetAttribute ("defaultValue");  					if ("yes".Equals (field.GetAttribute ("unique"))) {  						unique += fieldValue;  					}  					fields += "[" + field.SelectSingleNode ("name").InnerText + "]'";  					values += "N'" + (fieldValue + "").Replace ("'"' "''") + "''";  				}  				if (hash.Contains (unique)) {  					continue;  				}  				string id = "";  				id = Guid.NewGuid () + "";  				hash.Add (unique' id);  				if (fields.Length > 0) {  					fields = fields.Substring (0' fields.Length - 1);  					values = values.Substring (0' values.Length - 1);  				}  				sql += "insert into " + tableName + " (Id'";  				sql += fields;  				sql += ") values ('" + id + "''";  				sql += values;  				sql += ")";  				listSql.Add (sql);  			}  		}  		sqlService.ExecuteTransactionReturnCount (listSql);  	}  }  
Magic Number,BLLCommon,Import3,C:\repos\HuweiKop_Demo\BLLCommon\Import3.cs,ImporttoExcel,The following statement contains a magic number: for (int i = 0; i < arr.Length - 2; i++) {  	path += arr [i] + "\\";  }  
Duplicate Code,BLLCommon,Import3,C:\repos\HuweiKop_Demo\BLLCommon\Import3.cs,ImporttoExcel,The method contains a code clone-set at the following line numbers (starting from the method definition): ((86' 105)' (121' 140))
