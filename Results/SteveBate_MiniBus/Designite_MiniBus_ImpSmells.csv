Implementation smell,Namespace,Class,File,Method,Description
Long Method,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The method has 110 lines of code.
Long Method,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The method has 140 lines of code.
Complex Method,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,Cyclomatic complexity of the method is 9
Complex Method,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,IsNumeric,Cyclomatic complexity of the method is 12
Complex Method,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,Cyclomatic complexity of the method is 13
Long Parameter List,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,Bus,The method has 5 parameters. Parameters: config' logger' errorQueue' readQueue' writeQueues
Long Identifier,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,,The length of the parameter _currentJsonSerializerStrategy is 30.
Long Identifier,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,,The length of the parameter ArrayConstructorParameterTypes is 30.
Long Statement,MiniBus.Aspects,DiscardFailuresAspect,C:\repos\SteveBate_MiniBus\src\MiniBus\Aspects\DiscardFailuresAspect.cs,Handle,The length of the statement  "                    _logger.Log(string.Format("Message: {0} - Payload discarded as determined by DiscardFailures flag"' msg.Label' ex.Message)); " is 124.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,Send,The length of the statement  "                throw new BusException("Bus has not been configured for sending messages. Did you forget to call DefineWriteQueue on BusBuilder?"); " is 131.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,Receive,The length of the statement  "                throw new BusException("Bus has not been configured for receiving messages. Did you forget to call DefineReadQueue on BusBuilder?"); " is 132.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,ReceiveAsync,The length of the statement  "                throw new BusException("Bus has not been configured for receiving messages. Did you forget to call DefineReadQueue on BusBuilder?"); " is 132.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,ReturnAllErrorMessages,The length of the statement  "                throw new BusException("Bus has not been configured for returning messages to the read queue. Did you forget to call DefineReadQueue and/or DeineErrorQueue on BusBuilder?"); " is 173.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,Copy,The length of the statement  "                throw new BusException("Bus has not been configured for copying messages from the read queue. Did you forget to call DefineReadQueue and/or DeineErrorQueue on BusBuilder?"); " is 173.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,Copy,The length of the statement  "                throw new BusException("Bus has not been configured for returning messages to a write queue. Did you forget to call DefineWriteQueue on BusBuilder?"); " is 150.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,ReturnErrorMessage,The length of the statement  "                throw new BusException("Bus has not been configured for returning messages to the read queue. Did you forget to call DefineReadQueue and/or DeineErrorQueue on BusBuilder?"); " is 173.
Long Statement,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,CreateMsmqMessageFromDto,The length of the statement  "                Formatter = _config.JsonSerialization ? (IMessageFormatter)new JsonFormatter<T>() : new XmlMessageFormatter(new[] { typeof(T) })' " is 129.
Long Statement,MiniBus,BusBuilder,C:\repos\SteveBate_MiniBus\src\MiniBus\BusBuilder.cs,CreateLocalEndpointOnDisk,The length of the statement  "                    string adminName = new SecurityIdentifier(WellKnownSidType.BuiltinAdministratorsSid' null).Translate(typeof(NTAccount)).ToString(); " is 131.
Long Statement,MiniBus,BusBuilder,C:\repos\SteveBate_MiniBus\src\MiniBus\BusBuilder.cs,ValidateQueue,The length of the statement  "                throw new QueueNotFoundException(string.Format("{0} doesn't exist {1}. Did you type it correctly?"' queueName' machineName == "." ? "locally" : "on " + machineName)); " is 166.
Long Statement,MiniBus.Handlers,ReceiveMessageHandler<T>,C:\repos\SteveBate_MiniBus\src\MiniBus\Handlers\ReceiveMessageHandler.cs,GetPayload,The length of the statement  "            msg.Formatter = _config.JsonSerialization ? (IMessageFormatter) new JsonFormatter<T>() : new XmlMessageFormatter(new[] {typeof(T)}); " is 132.
Long Statement,MiniBus.Infrastructure,Msmq,C:\repos\SteveBate_MiniBus\src\MiniBus\Infrastructure\Msmq.cs,GetOsDependantFilename,The length of the statement  "            // For 32-bit processes on 64-bit systems' %windir%\system32 folder can only be accessed by specifying %windir%\sysnative folder. " is 129.
Long Statement,MiniBus.MessageQueues,MiniBusMessageQueue,C:\repos\SteveBate_MiniBus\src\MiniBus\MessageQueues\MiniBusMessageQueue.cs,Send,The length of the statement  "            if (_autoPurgeSystemJournal && (_lastPurgedOn == DateTime.MinValue || _lastPurgedOn.AddMinutes(purgeIntervalInMinutes) < DateTime.Now)) " is 135.
Long Statement,MiniBus.MessageQueues,MiniBusMessageQueue,C:\repos\SteveBate_MiniBus\src\MiniBus\MessageQueues\MiniBusMessageQueue.cs,ReceiveAsync,The length of the statement  "                    if (_autoPurgeSystemJournal && (_lastPurgedOn == DateTime.MinValue || _lastPurgedOn.AddMinutes(purgeIntervalInMinutes) < DateTime.Now)) " is 135.
Long Statement,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The length of the statement  "                            if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint))) " is 130.
Long Statement,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The length of the statement  "                                    if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint)) " is 163.
Long Statement,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseNumber,The length of the statement  "            if (str.IndexOf("."' StringComparison.OrdinalIgnoreCase) != -1 || str.IndexOf("e"' StringComparison.OrdinalIgnoreCase) != -1) " is 125.
Long Statement,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseNumber,The length of the statement  "                success = double.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 123.
Long Statement,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseNumber,The length of the statement  "                success = long.TryParse(new string(json' index' charLength)' NumberStyles.Any' CultureInfo.InvariantCulture' out number); " is 121.
Long Statement,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The length of the statement  "                if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e') " is 127.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,SetterValueFactory,The length of the statement  "            IDictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>> result = new Dictionary<string' KeyValuePair<Type' ReflectionUtils.SetDelegate>>(); " is 152.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,SetterValueFactory,The length of the statement  "                    result[MapClrMemberNameToJsonFieldName(propertyInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(propertyInfo.PropertyType' ReflectionUtils.GetSetMethod(propertyInfo)); " is 184.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,SetterValueFactory,The length of the statement  "                result[MapClrMemberNameToJsonFieldName(fieldInfo.Name)] = new KeyValuePair<Type' ReflectionUtils.SetDelegate>(fieldInfo.FieldType' ReflectionUtils.GetSetMethod(fieldInfo)); " is 172.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTime) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTime))) " is 127.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTime.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 144.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                    if (type == typeof(DateTimeOffset) || (ReflectionUtils.IsNullableType(type) && Nullable.GetUnderlyingType(type) == typeof(DateTimeOffset))) " is 139.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                        return DateTimeOffset.ParseExact(str' Iso8601Format' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal | DateTimeStyles.AdjustToUniversal); " is 150.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                obj = type == typeof(int) || type == typeof(long) || type == typeof(double) || type == typeof(float) || type == typeof(bool) || type == typeof(decimal) || type == typeof(byte) || type == typeof(short) " is 200.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                        else if (ReflectionUtils.IsTypeGenericeCollectionInterface(type) || ReflectionUtils.IsAssignableFrom(typeof(IList)' type)) " is 122.
Long Statement,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The length of the statement  "                            list = (IList)(ConstructorCache[type] ?? ConstructorCache[typeof(List<>).MakeGenericType(innerType)])(jsonObject.Count); " is 120.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,IsTypeGenericeCollectionInterface,The length of the statement  "            return (genericDefinition == typeof(IList<>) || genericDefinition == typeof(ICollection<>) || genericDefinition == typeof(IEnumerable<>)); " is 138.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ToNullableType,The length of the statement  "            return obj == null ? null : Convert.ChangeType(obj' Nullable.GetUnderlyingType(nullableType)' CultureInfo.InvariantCulture); " is 124.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "            UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,GetGetMethodByExpression,The length of the statement  "            Func<object' object> compiled = Expression.Lambda<Func<object' object>>(Expression.TypeAs(Expression.Call(instanceCast' getMethodInfo)' typeof(object))' instance).Compile(); " is 173.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "            UnaryExpression instanceCast = (!IsValueType(propertyInfo.DeclaringType)) ? Expression.TypeAs(instance' propertyInfo.DeclaringType) : Expression.Convert(instance' propertyInfo.DeclaringType); " is 191.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "            UnaryExpression valueCast = (!IsValueType(propertyInfo.PropertyType)) ? Expression.TypeAs(value' propertyInfo.PropertyType) : Expression.Convert(value' propertyInfo.PropertyType); " is 179.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "            Action<object' object> compiled = Expression.Lambda<Action<object' object>>(Expression.Call(instanceCast' setMethodInfo' valueCast)' new ParameterExpression[] { instance' value }).Compile(); " is 190.
Long Statement,MiniBus.Serialization,ReflectionUtils,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,GetSetMethodByExpression,The length of the statement  "                Assign(Expression.Field(Expression.Convert(instance' fieldInfo.DeclaringType)' fieldInfo)' Expression.Convert(value' fieldInfo.FieldType))' instance' value).Compile(); " is 167.
Complex Conditional,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,ReturnAllErrorMessages,The conditional expression  "(_errorQueue == null || !_errorQueue.IsInitialized) || (_readQueue == null || !_readQueue.IsInitialized)"  is complex.
Complex Conditional,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,Copy,The conditional expression  "_errorQueue == null || !_errorQueue.IsInitialized || _readQueue == null || !_readQueue.IsInitialized"  is complex.
Complex Conditional,MiniBus,Bus,C:\repos\SteveBate_MiniBus\src\MiniBus\Bus.cs,ReturnErrorMessage,The conditional expression  "(_errorQueue == null || !_errorQueue.IsInitialized) || (_readQueue == null || !_readQueue.IsInitialized)"  is complex.
Complex Conditional,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e'"  is complex.
Complex Conditional,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e'"  is complex.
Complex Conditional,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The conditional expression  "json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l'"  is complex.
Complex Conditional,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsLong && type == typeof(long)) || (valueIsDouble && type == typeof(double))"  is complex.
Complex Conditional,MiniBus.Serialization,PocoJsonSerializerStrategy,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,DeserializeObject,The conditional expression  "(valueIsDouble && type != typeof(double)) || (valueIsLong && type != typeof(long))"  is complex.
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,EscapeToJavascriptString,The following statement contains a magic number: for (int i = 0; i < jsonString.Length; )              {                  c = jsonString[i++];                    if (c == '\\')                  {                      int remainingLength = jsonString.Length - i;                      if (remainingLength >= 2)                      {                          char lookahead = jsonString[i];                          if (lookahead == '\\')                          {                              sb.Append('\\');                              ++i;                          }                          else if (lookahead == '"')                          {                              sb.Append("\"");                              ++i;                          }                          else if (lookahead == 't')                          {                              sb.Append('\t');                              ++i;                          }                          else if (lookahead == 'b')                          {                              sb.Append('\b');                              ++i;                          }                          else if (lookahead == 'n')                          {                              sb.Append('\n');                              ++i;                          }                          else if (lookahead == 'r')                          {                              sb.Append('\r');                              ++i;                          }                      }                  }                  else                  {                      sb.Append(c);                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseString,The following statement contains a magic number: while (!complete)              {                  if (index == json.Length)                  {                      break;                  }                    c = json[index++];                  if (c == '"')                  {                      complete = true;                      break;                  }                  else if (c == '\\')                  {                      if (index == json.Length)                      {                          break;                      }                      c = json[index++];                      if (c == '"')                      {                          s.Append('"');                      }                                                else if (c == '\\')                      {                          s.Append('\\');                      }                      else if (c == '/')                      {                          s.Append('/');                      }                      else if (c == 'b')                      {                          s.Append('\b');                      }                      else if (c == 'f')                      {                          s.Append('\f');                      }                      else if (c == 'n')                      {                          s.Append('\n');                      }                      else if (c == 'r')                      {                          s.Append('\r');                      }                      else if (c == 't')                      {                          s.Append('\t');                      }                      else if (c == 'u')                      {                          int remainingLength = json.Length - index;                          if (remainingLength >= 4)                          {                              // parse the 32 bit hex into an integer codepoint                              uint codePoint;                              if (!(success = UInt32.TryParse(new string(json' index' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out codePoint)))                              {                                  return "";                              }                                // convert the integer codepoint to a unicode char and add to string                              if (0xD800 <= codePoint && codePoint <= 0xDBFF)  // if high surrogate                              {                                  index += 4; // skip 4 chars                                  remainingLength = json.Length - index;                                  if (remainingLength >= 6)                                  {                                      uint lowCodePoint;                                      if (new string(json' index' 2) == "\\u" && UInt32.TryParse(new string(json' index + 2' 4)' NumberStyles.HexNumber' CultureInfo.InvariantCulture' out lowCodePoint))                                      {                                          if (0xDC00 <= lowCodePoint && lowCodePoint <= 0xDFFF)    // if low surrogate                                          {                                              s.Append((char)codePoint);                                              s.Append((char)lowCodePoint);                                              index += 6; // skip 6 chars                                              continue;                                          }                                      }                                  }                                  success = false;    // invalid surrogate pair                                  return "";                              }                              s.Append(ConvertFromUtf32((int)codePoint));                              // skip 4 chars                              index += 4;                          }                          else                              break;                      }                  }                  else                      s.Append(c);              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ConvertFromUtf32,The following statement contains a magic number: return new string(new char[] { (char)((utf32 >> 10) + 0xD800)' (char)(utf32 % 0x0400 + 0xDC00) });
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 5)              {                  if (json[index] == 'f' && json[index + 1] == 'a' && json[index + 2] == 'l' && json[index + 3] == 's' && json[index + 4] == 'e')                  {                      index += 5;                      return TOKEN_FALSE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 't' && json[index + 1] == 'r' && json[index + 2] == 'u' && json[index + 3] == 'e')                  {                      index += 4;                      return TOKEN_TRUE;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Magic Number,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following statement contains a magic number: if (remainingLength >= 4)              {                  if (json[index] == 'n' && json[index + 1] == 'u' && json[index + 2] == 'l' && json[index + 3] == 'l')                  {                      index += 4;                      return TOKEN_NULL;                  }              }
Missing Default,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,ParseValue,The following switch statement is missing a default case: switch (LookAhead(json' index))              {                  case TOKEN_STRING:                      return ParseString(json' ref index' ref success);                  case TOKEN_NUMBER:                      return ParseNumber(json' ref index' ref success);                  case TOKEN_CURLY_OPEN:                      return ParseObject(json' ref index' ref success);                  case TOKEN_SQUARED_OPEN:                      return ParseArray(json' ref index' ref success);                  case TOKEN_TRUE:                      NextToken(json' ref index);                      return true;                  case TOKEN_FALSE:                      NextToken(json' ref index);                      return false;                  case TOKEN_NULL:                      NextToken(json' ref index);                      return null;                  case TOKEN_NONE:                      break;              }
Missing Default,MiniBus.Serialization,SimpleJson,C:\repos\SteveBate_MiniBus\src\MiniBus\Serialization\SimpleJson.cs,NextToken,The following switch statement is missing a default case: switch (c)              {                  case '{':                      return TOKEN_CURLY_OPEN;                  case '}':                      return TOKEN_CURLY_CLOSE;                  case '[':                      return TOKEN_SQUARED_OPEN;                  case ']':                      return TOKEN_SQUARED_CLOSE;                  case ''':                      return TOKEN_COMMA;                  case '"':                      return TOKEN_STRING;                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                  case '-':                      return TOKEN_NUMBER;                  case ':':                      return TOKEN_COLON;              }
