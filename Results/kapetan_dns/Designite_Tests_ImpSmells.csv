Implementation smell,Namespace,Class,File,Method,Description
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 0' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 0' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 0' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 0' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 109)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,SameDomainsWithMultipleLabels,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(87' 87' 87)'                  Helper.GetArray<byte>(103' 79' 79' 103' 108' 101)'                  Helper.GetArray<byte>(99' 0' 77)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,DifferentDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 0' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,DifferentDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain a = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 0' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,DifferentDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,DifferentDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)              ));
Magic Number,DNS.Tests.Protocol,CompareDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\CompareDomainTest.cs,DifferentDomainsWithSingleLabelNonAlphabeticCodes,The following statement contains a magic number: Domain b = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)              ));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,SimpleCharacterString,The following statement contains a magic number: Assert.Equal(4' characterString.Size);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,SimpleCharacterString,The following statement contains a magic number: Assert.Equal(4' endOffset);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringWithWrongLengthUnder,The following statement contains a magic number: Assert.Equal(2' result.Size);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringWithWrongLengthUnder,The following statement contains a magic number: Assert.Equal(2' endOffset);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringWithWrongOffset,The following statement contains a magic number: Assert.Throws<IndexOutOfRangeException>(() => CharacterString.FromArray(fixture' 4));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,MultipleCharacterStrings,The following statement contains a magic number: Assert.Equal(3' characterStrings.Count);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,MultipleCharacterStrings,The following statement contains a magic number: Assert.Equal(15' endOffset);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,MultipleCharacterStrings,The following statement contains a magic number: Assert.Equal(4' characterString.Size);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,MultipleCharacterStrings,The following statement contains a magic number: Assert.Equal(7' characterString.Size);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,MultipleCharacterStrings,The following statement contains a magic number: characterString = characterStrings[2];
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,MultipleCharacterStrings,The following statement contains a magic number: Assert.Equal(4' characterString.Size);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromSimpleString,The following statement contains a magic number: Assert.Equal(4' characterString.Size);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: var result = CharacterString.FromString(new string('a'' 512));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(3' result.Count);
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(new []{256' 256' 3}' result.Select(x => x.Size));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(new []{256' 256' 3}' result.Select(x => x.Size));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(new []{256' 256' 3}' result.Select(x => x.Size));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(new []{255' 255' 2}' result.Select(x => (int) x.ToArray()[0]));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(new []{255' 255' 2}' result.Select(x => (int) x.ToArray()[0]));
Magic Number,DNS.Tests.Protocol,ParseCharacterStringTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseCharacterStringTest.cs,CharacterStringFromLongString,The following statement contains a magic number: Assert.Equal(new []{255' 255' 2}' result.Select(x => (int) x.ToArray()[0]));
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithSingleLabel,The following statement contains a magic number: Assert.Equal(5' domain.Size);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithSingleLabel,The following statement contains a magic number: Assert.Equal(5' endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithMultipleLabels,The following statement contains a magic number: Assert.Equal(16' domain.Size);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithMultipleLabels,The following statement contains a magic number: Assert.Equal(16' endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithMultipleLabelsPreceededByHeader,The following statement contains a magic number: Domain domain = Domain.FromArray(content' 12' out endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithMultipleLabelsPreceededByHeader,The following statement contains a magic number: Assert.Equal(16' domain.Size);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,DomainWithMultipleLabelsPreceededByHeader,The following statement contains a magic number: Assert.Equal(28' endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,EmptyPointerDomain,The following statement contains a magic number: Assert.Equal(3' endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithSingleLabel,The following statement contains a magic number: Domain domain = Domain.FromArray(content' 5' out endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithSingleLabel,The following statement contains a magic number: Assert.Equal(5' domain.Size);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithSingleLabel,The following statement contains a magic number: Assert.Equal(7' endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithMultipleLabels,The following statement contains a magic number: Domain domain = Domain.FromArray(content' 16' out endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithMultipleLabels,The following statement contains a magic number: Assert.Equal(16' domain.Size);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithMultipleLabels,The following statement contains a magic number: Assert.Equal(18' endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithMultipleLabelsPreceededByHeader,The following statement contains a magic number: Domain domain = Domain.FromArray(content' 28' out endOffset);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithMultipleLabelsPreceededByHeader,The following statement contains a magic number: Assert.Equal(16' domain.Size);
Magic Number,DNS.Tests.Protocol,ParseDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseDomainTest.cs,PointerDomainWithMultipleLabelsPreceededByHeader,The following statement contains a magic number: Assert.Equal(30' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,BasicQuestionWithEmptyDomain,The following statement contains a magic number: Assert.Equal(5' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,BasicQuestionWithEmptyDomain,The following statement contains a magic number: Assert.Equal(5' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,BasicQuestionWithMultipleLabelDomain,The following statement contains a magic number: Assert.Equal(20' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,BasicQuestionWithMultipleLabelDomain,The following statement contains a magic number: Assert.Equal(20' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,CNameQuestionWithEmptyDomain,The following statement contains a magic number: Assert.Equal(5' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,CNameQuestionWithEmptyDomain,The following statement contains a magic number: Assert.Equal(5' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,AnyQuestionWithEmptyDomain,The following statement contains a magic number: Assert.Equal(5' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,AnyQuestionWithEmptyDomain,The following statement contains a magic number: Assert.Equal(5' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,AllSetQuestionWithMultipleLabelDomains,The following statement contains a magic number: Assert.Equal(20' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,AllSetQuestionWithMultipleLabelDomains,The following statement contains a magic number: Assert.Equal(20' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: IList<Question> questions = Question.GetAllFromArray(content' 0' 3' out endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: Assert.Equal(3' questions.Count);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: Assert.Equal(36' endOffset);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: Assert.Equal(5' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: Assert.Equal(20' question.Size);
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: question = questions[2];
Magic Number,DNS.Tests.Protocol,ParseQuestionTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseQuestionTest.cs,MultipleQuestions,The following statement contains a magic number: Assert.Equal(11' question.Size);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,BasicQuestionRequestWithEmptyHeader,The following statement contains a magic number: Assert.Equal(17' request.Size);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,SingleQuestionRequestWithHeader,The following statement contains a magic number: Assert.Equal(32' request.Size);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,RequestWithMultipleQuestions,The following statement contains a magic number: Assert.Equal(43' request.Size);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,RequestWithMultipleQuestions,The following statement contains a magic number: Assert.Equal(2' request.Questions.Count);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,RequestWithAdditionalRecords,The following statement contains a magic number: Assert.Equal(11772' request.Id);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,RequestWithAdditionalRecords,The following statement contains a magic number: Assert.Equal(39' request.Size);
Magic Number,DNS.Tests.Protocol,ParseRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseRequestTest.cs,RequestWithAdditionalRecords,The following statement contains a magic number: Assert.Equal(4096' (int) record.Class);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,BasicQuestionResponseWithEmptyHeader,The following statement contains a magic number: Assert.Equal(62' response.Size);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(101' response.Size);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(Helper.GetArray<byte>(3' 119' 119' 119' 0)' record.Data);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(Helper.GetArray<byte>(3' 119' 119' 119' 0)' record.Data);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(Helper.GetArray<byte>(3' 119' 119' 119' 0)' record.Data);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(Helper.GetArray<byte>(3' 119' 119' 119' 0)' record.Data);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(Helper.GetArray<byte>(192' 12)' record.Data);
Magic Number,DNS.Tests.Protocol,ParseResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ParseResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: Assert.Equal(Helper.GetArray<byte>(192' 12)' record.Data);
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithSingleBinaryLabel,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithSingleBinaryLabel,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithSingleBinaryLabel,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeDomainTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeDomainTest.cs,DomainWithMultipleBinaryLabels,The following statement contains a magic number: Domain domain = new Domain(Helper.GetArray<byte[]>(                  Helper.GetArray<byte>(119' 119' 119)'                  Helper.GetArray<byte>(103' 111' 111' 103' 108' 101)'                  Helper.GetArray<byte>(99' 111' 109)              ));
Magic Number,DNS.Tests.Protocol,SerializeRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeRequestTest.cs,RequestWithAdditionalRecords,The following statement contains a magic number: ResourceRecord record = new ResourceRecord(domain2' Helper.GetArray<byte>()'                  RecordType.OPT' (RecordClass) 4096' TimeSpan.FromSeconds(0));
Magic Number,DNS.Tests.Protocol,SerializeRequestTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeRequestTest.cs,RequestWithAdditionalRecords,The following statement contains a magic number: request.Id = 11772;
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,BasicResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,BasicResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,BasicResourceRecordWithMultipleLabelDomain,The following statement contains a magic number: Assert.Equal(26' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,BasicResourceRecordWithMultipleLabelDomain,The following statement contains a magic number: Assert.Equal(26' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,DataResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(13' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,DataResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(13' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,CNameResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,CNameResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,AnyResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,AnyResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,TtlResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,TtlResourceRecordWithEmptyDomain,The following statement contains a magic number: Assert.Equal(11' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,AllSetResourceRecordWithMultipleLabelDomain,The following statement contains a magic number: Assert.Equal(28' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,AllSetResourceRecordWithMultipleLabelDomain,The following statement contains a magic number: Assert.Equal(28' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: IList<ResourceRecord> records = ResourceRecord.GetAllFromArray(content' 0' 3' out endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: Assert.Equal(3' records.Count);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: Assert.Equal(60' endOffset);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: Assert.Equal(11' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: Assert.Equal(28' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: record = records[2];
Magic Number,DNS.Tests.Protocol.ResourceRecords,ParseResourceRecordTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\ResourceRecords\ParseResourceRecordTest.cs,MultipleResourceRecords,The following statement contains a magic number: Assert.Equal(21' record.Size);
Magic Number,DNS.Tests.Protocol.ResourceRecords,SerializeResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: ResourceRecord record1 = new ResourceRecord(domain1' Helper.GetArray<byte>(3' 119' 119' 119' 0)'                  RecordType.CNAME' RecordClass.IN' TimeSpan.FromSeconds(1));
Magic Number,DNS.Tests.Protocol.ResourceRecords,SerializeResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: ResourceRecord record1 = new ResourceRecord(domain1' Helper.GetArray<byte>(3' 119' 119' 119' 0)'                  RecordType.CNAME' RecordClass.IN' TimeSpan.FromSeconds(1));
Magic Number,DNS.Tests.Protocol.ResourceRecords,SerializeResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: ResourceRecord record1 = new ResourceRecord(domain1' Helper.GetArray<byte>(3' 119' 119' 119' 0)'                  RecordType.CNAME' RecordClass.IN' TimeSpan.FromSeconds(1));
Magic Number,DNS.Tests.Protocol.ResourceRecords,SerializeResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: ResourceRecord record1 = new ResourceRecord(domain1' Helper.GetArray<byte>(3' 119' 119' 119' 0)'                  RecordType.CNAME' RecordClass.IN' TimeSpan.FromSeconds(1));
Magic Number,DNS.Tests.Protocol.ResourceRecords,SerializeResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: ResourceRecord record3 = new ResourceRecord(domain3' Helper.GetArray<byte>(192' 12)'                  RecordType.CNAME' RecordClass.ANY' TimeSpan.FromSeconds(1));
Magic Number,DNS.Tests.Protocol.ResourceRecords,SerializeResponseTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Protocol\SerializeResponseTest.cs,RequestWithHeaderAndResourceRecords,The following statement contains a magic number: ResourceRecord record3 = new ResourceRecord(domain3' Helper.GetArray<byte>(192' 12)'                  RecordType.CNAME' RecordClass.ANY' TimeSpan.FromSeconds(1));
Magic Number,DNS.Tests.Server,DnsServerTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Server\DnsServerTest.cs,ServerLookup,The following statement contains a magic number: await Create(new IPAddressRequestResolver()' async server => {                  DnsServer.RequestedEventArgs requestedEvent = null;                  DnsServer.RespondedEventArgs respondedEvent = null;                  DnsServer.ErroredEventArgs erroredEvent = null;                    server.Requested += (sender' e) => {                      requestedEvent = e;                  };                    server.Responded += (sender' e) => {                      respondedEvent = e;                  };                    server.Errored += (sender' e) => {                      erroredEvent = e;                  };                    IRequest clientRequest = new Request();                  Question clientRequestQuestion = new Question(new Domain("google.com")' RecordType.A);                    clientRequest.Id = 1;                  clientRequest.Questions.Add(clientRequestQuestion);                  clientRequest.OperationCode = OperationCode.Query;                    IResponse clientResponse = await Resolve(clientRequest);                    Assert.Equal(1' clientResponse.Id);                  Assert.Equal(1' clientResponse.Questions.Count);                  Assert.Equal(1' clientResponse.AnswerRecords.Count);                  Assert.Equal(0' clientResponse.AuthorityRecords.Count);                  Assert.Equal(0' clientResponse.AdditionalRecords.Count);                    Question clientResponseQuestion = clientResponse.Questions[0];                    Assert.Equal(RecordType.A' clientResponseQuestion.Type);                  Assert.Equal("google.com"' clientResponseQuestion.Name.ToString());                    IResourceRecord clientResponseRecord = clientResponse.AnswerRecords[0];                    Assert.Equal("google.com"' clientResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' clientResponseRecord.Data);                  Assert.Equal(RecordType.A' clientResponseRecord.Type);                    Assert.NotNull(requestedEvent);                    Assert.NotNull(requestedEvent.Request);                  Assert.Equal(1' requestedEvent.Request.Id);                  Assert.Equal(1' requestedEvent.Request.Questions.Count);                    Question requestedRequestQuestion = requestedEvent.Request.Questions[0];                    Assert.Equal(RecordType.A' requestedRequestQuestion.Type);                  Assert.Equal("google.com"' requestedRequestQuestion.Name.ToString());                    Assert.NotNull(respondedEvent);                  Assert.Equal(requestedEvent.Request' respondedEvent.Request);                    Assert.NotNull(respondedEvent.Response);                    Assert.Equal(1' respondedEvent.Response.Id);                  Assert.Equal(1' respondedEvent.Response.Questions.Count);                  Assert.Equal(1' respondedEvent.Response.AnswerRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AuthorityRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AdditionalRecords.Count);                    Question respondedResponseQuestion = respondedEvent.Response.Questions[0];                    Assert.Equal(RecordType.A' respondedResponseQuestion.Type);                  Assert.Equal("google.com"' respondedResponseQuestion.Name.ToString());                    IResourceRecord respondedResponseRecord = respondedEvent.Response.AnswerRecords[0];                    Assert.Equal("google.com"' respondedResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' respondedResponseRecord.Data);                  Assert.Equal(RecordType.A' respondedResponseRecord.Type);                    Assert.Null(erroredEvent);              });
Magic Number,DNS.Tests.Server,DnsServerTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Server\DnsServerTest.cs,ServerLookup,The following statement contains a magic number: await Create(new IPAddressRequestResolver()' async server => {                  DnsServer.RequestedEventArgs requestedEvent = null;                  DnsServer.RespondedEventArgs respondedEvent = null;                  DnsServer.ErroredEventArgs erroredEvent = null;                    server.Requested += (sender' e) => {                      requestedEvent = e;                  };                    server.Responded += (sender' e) => {                      respondedEvent = e;                  };                    server.Errored += (sender' e) => {                      erroredEvent = e;                  };                    IRequest clientRequest = new Request();                  Question clientRequestQuestion = new Question(new Domain("google.com")' RecordType.A);                    clientRequest.Id = 1;                  clientRequest.Questions.Add(clientRequestQuestion);                  clientRequest.OperationCode = OperationCode.Query;                    IResponse clientResponse = await Resolve(clientRequest);                    Assert.Equal(1' clientResponse.Id);                  Assert.Equal(1' clientResponse.Questions.Count);                  Assert.Equal(1' clientResponse.AnswerRecords.Count);                  Assert.Equal(0' clientResponse.AuthorityRecords.Count);                  Assert.Equal(0' clientResponse.AdditionalRecords.Count);                    Question clientResponseQuestion = clientResponse.Questions[0];                    Assert.Equal(RecordType.A' clientResponseQuestion.Type);                  Assert.Equal("google.com"' clientResponseQuestion.Name.ToString());                    IResourceRecord clientResponseRecord = clientResponse.AnswerRecords[0];                    Assert.Equal("google.com"' clientResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' clientResponseRecord.Data);                  Assert.Equal(RecordType.A' clientResponseRecord.Type);                    Assert.NotNull(requestedEvent);                    Assert.NotNull(requestedEvent.Request);                  Assert.Equal(1' requestedEvent.Request.Id);                  Assert.Equal(1' requestedEvent.Request.Questions.Count);                    Question requestedRequestQuestion = requestedEvent.Request.Questions[0];                    Assert.Equal(RecordType.A' requestedRequestQuestion.Type);                  Assert.Equal("google.com"' requestedRequestQuestion.Name.ToString());                    Assert.NotNull(respondedEvent);                  Assert.Equal(requestedEvent.Request' respondedEvent.Request);                    Assert.NotNull(respondedEvent.Response);                    Assert.Equal(1' respondedEvent.Response.Id);                  Assert.Equal(1' respondedEvent.Response.Questions.Count);                  Assert.Equal(1' respondedEvent.Response.AnswerRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AuthorityRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AdditionalRecords.Count);                    Question respondedResponseQuestion = respondedEvent.Response.Questions[0];                    Assert.Equal(RecordType.A' respondedResponseQuestion.Type);                  Assert.Equal("google.com"' respondedResponseQuestion.Name.ToString());                    IResourceRecord respondedResponseRecord = respondedEvent.Response.AnswerRecords[0];                    Assert.Equal("google.com"' respondedResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' respondedResponseRecord.Data);                  Assert.Equal(RecordType.A' respondedResponseRecord.Type);                    Assert.Null(erroredEvent);              });
Magic Number,DNS.Tests.Server,DnsServerTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Server\DnsServerTest.cs,ServerLookup,The following statement contains a magic number: await Create(new IPAddressRequestResolver()' async server => {                  DnsServer.RequestedEventArgs requestedEvent = null;                  DnsServer.RespondedEventArgs respondedEvent = null;                  DnsServer.ErroredEventArgs erroredEvent = null;                    server.Requested += (sender' e) => {                      requestedEvent = e;                  };                    server.Responded += (sender' e) => {                      respondedEvent = e;                  };                    server.Errored += (sender' e) => {                      erroredEvent = e;                  };                    IRequest clientRequest = new Request();                  Question clientRequestQuestion = new Question(new Domain("google.com")' RecordType.A);                    clientRequest.Id = 1;                  clientRequest.Questions.Add(clientRequestQuestion);                  clientRequest.OperationCode = OperationCode.Query;                    IResponse clientResponse = await Resolve(clientRequest);                    Assert.Equal(1' clientResponse.Id);                  Assert.Equal(1' clientResponse.Questions.Count);                  Assert.Equal(1' clientResponse.AnswerRecords.Count);                  Assert.Equal(0' clientResponse.AuthorityRecords.Count);                  Assert.Equal(0' clientResponse.AdditionalRecords.Count);                    Question clientResponseQuestion = clientResponse.Questions[0];                    Assert.Equal(RecordType.A' clientResponseQuestion.Type);                  Assert.Equal("google.com"' clientResponseQuestion.Name.ToString());                    IResourceRecord clientResponseRecord = clientResponse.AnswerRecords[0];                    Assert.Equal("google.com"' clientResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' clientResponseRecord.Data);                  Assert.Equal(RecordType.A' clientResponseRecord.Type);                    Assert.NotNull(requestedEvent);                    Assert.NotNull(requestedEvent.Request);                  Assert.Equal(1' requestedEvent.Request.Id);                  Assert.Equal(1' requestedEvent.Request.Questions.Count);                    Question requestedRequestQuestion = requestedEvent.Request.Questions[0];                    Assert.Equal(RecordType.A' requestedRequestQuestion.Type);                  Assert.Equal("google.com"' requestedRequestQuestion.Name.ToString());                    Assert.NotNull(respondedEvent);                  Assert.Equal(requestedEvent.Request' respondedEvent.Request);                    Assert.NotNull(respondedEvent.Response);                    Assert.Equal(1' respondedEvent.Response.Id);                  Assert.Equal(1' respondedEvent.Response.Questions.Count);                  Assert.Equal(1' respondedEvent.Response.AnswerRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AuthorityRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AdditionalRecords.Count);                    Question respondedResponseQuestion = respondedEvent.Response.Questions[0];                    Assert.Equal(RecordType.A' respondedResponseQuestion.Type);                  Assert.Equal("google.com"' respondedResponseQuestion.Name.ToString());                    IResourceRecord respondedResponseRecord = respondedEvent.Response.AnswerRecords[0];                    Assert.Equal("google.com"' respondedResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' respondedResponseRecord.Data);                  Assert.Equal(RecordType.A' respondedResponseRecord.Type);                    Assert.Null(erroredEvent);              });
Magic Number,DNS.Tests.Server,DnsServerTest,D:\research\architectureSmells\repos\kapetan_dns\Tests\Server\DnsServerTest.cs,ServerLookup,The following statement contains a magic number: await Create(new IPAddressRequestResolver()' async server => {                  DnsServer.RequestedEventArgs requestedEvent = null;                  DnsServer.RespondedEventArgs respondedEvent = null;                  DnsServer.ErroredEventArgs erroredEvent = null;                    server.Requested += (sender' e) => {                      requestedEvent = e;                  };                    server.Responded += (sender' e) => {                      respondedEvent = e;                  };                    server.Errored += (sender' e) => {                      erroredEvent = e;                  };                    IRequest clientRequest = new Request();                  Question clientRequestQuestion = new Question(new Domain("google.com")' RecordType.A);                    clientRequest.Id = 1;                  clientRequest.Questions.Add(clientRequestQuestion);                  clientRequest.OperationCode = OperationCode.Query;                    IResponse clientResponse = await Resolve(clientRequest);                    Assert.Equal(1' clientResponse.Id);                  Assert.Equal(1' clientResponse.Questions.Count);                  Assert.Equal(1' clientResponse.AnswerRecords.Count);                  Assert.Equal(0' clientResponse.AuthorityRecords.Count);                  Assert.Equal(0' clientResponse.AdditionalRecords.Count);                    Question clientResponseQuestion = clientResponse.Questions[0];                    Assert.Equal(RecordType.A' clientResponseQuestion.Type);                  Assert.Equal("google.com"' clientResponseQuestion.Name.ToString());                    IResourceRecord clientResponseRecord = clientResponse.AnswerRecords[0];                    Assert.Equal("google.com"' clientResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' clientResponseRecord.Data);                  Assert.Equal(RecordType.A' clientResponseRecord.Type);                    Assert.NotNull(requestedEvent);                    Assert.NotNull(requestedEvent.Request);                  Assert.Equal(1' requestedEvent.Request.Id);                  Assert.Equal(1' requestedEvent.Request.Questions.Count);                    Question requestedRequestQuestion = requestedEvent.Request.Questions[0];                    Assert.Equal(RecordType.A' requestedRequestQuestion.Type);                  Assert.Equal("google.com"' requestedRequestQuestion.Name.ToString());                    Assert.NotNull(respondedEvent);                  Assert.Equal(requestedEvent.Request' respondedEvent.Request);                    Assert.NotNull(respondedEvent.Response);                    Assert.Equal(1' respondedEvent.Response.Id);                  Assert.Equal(1' respondedEvent.Response.Questions.Count);                  Assert.Equal(1' respondedEvent.Response.AnswerRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AuthorityRecords.Count);                  Assert.Equal(0' respondedEvent.Response.AdditionalRecords.Count);                    Question respondedResponseQuestion = respondedEvent.Response.Questions[0];                    Assert.Equal(RecordType.A' respondedResponseQuestion.Type);                  Assert.Equal("google.com"' respondedResponseQuestion.Name.ToString());                    IResourceRecord respondedResponseRecord = respondedEvent.Response.AnswerRecords[0];                    Assert.Equal("google.com"' respondedResponseRecord.Name.ToString());                  Assert.Equal(Helper.GetArray<byte>(192' 168' 0' 1)' respondedResponseRecord.Data);                  Assert.Equal(RecordType.A' respondedResponseRecord.Type);                    Assert.Null(erroredEvent);              });
