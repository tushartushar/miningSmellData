Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,Cyclomatic complexity of the method is 8
Complex Method,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,TryParsePrivate,Cyclomatic complexity of the method is 10
Long Parameter List,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,Allocate,The method has 11 parameters.
Long Statement,MoneyHandler.CurrenciesFactorLoaders,CsvFileCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\CsvFileCurrenciesFactorsLoader.cs,ParseFileData,The length of the statement  "		if (!Decimal.TryParse (reader.GetField (1)' NumberStyles.Number' CultureInfo.InvariantCulture' out factor) || factor <= 0m) " is 123.
Long Statement,MoneyHandler.CurrenciesFactorLoaders,FakeCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\FakeCurrenciesFactorsLoader.cs,LoadCurrenciesFactorsAsync,The length of the statement  "	ThreadPool.QueueUserWorkItem (t => callback (ThrowException ? new CurrenciesFactorsLoaderCalbackState (null' new ApplicationException ("Fake")' false) : new CurrenciesFactorsLoaderCalbackState (_factors' null' false))); " is 219.
Long Statement,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,OnClientDownloadStringCompleted,The length of the statement  "		((CurrenciesFactorsLoaderCallback)e.UserState) (new CurrenciesFactorsLoaderCalbackState (e.Error == null ? ParseLoadedData (e.Result) : new CurrenciesFactorsPer1UnitInUsd ()' e.Error' e.Cancelled)); " is 198.
Long Statement,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The length of the statement  "			if (!Decimal.TryParse (reader.GetField (1)' NumberStyles.Number' CultureInfo.InvariantCulture' out factor) || factor <= 0m) " is 123.
Long Statement,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,ConvertToCurrency,The length of the statement  "	return _currency != targetCurrency ? new Money (_amount * factorProvider.GetFactor (_currency' targetCurrency)' targetCurrency) : this; " is 135.
Long Statement,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,Allocate,The length of the statement  "	return Allocate (ratios' (amount' totalAmount' currency' index' decimals) => Math.Round (amount' CurrencyDescriptor.GetDescriptor (currency).SignificantDecimalDigits)' (amount' totalAmount' currency' decimals' money) => amount); " is 228.
Long Statement,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,ToString,The length of the statement  "	return String.Format (formatProvider' format' RoundedAmount' _amount' descriptor.IsoCode' descriptor.Symbol' descriptor.EnglishName' descriptor.NativeName); " is 156.
Long Statement,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,ParseCurrency,The length of the statement  "			if (currencyStr.Equals (desc.NativeName' StringComparison.InvariantCultureIgnoreCase) || currencyStr.Equals (desc.IsoCode' StringComparison.InvariantCultureIgnoreCase) || currencyStr.Equals (desc.Symbol' StringComparison.InvariantCultureIgnoreCase) || currencyStr.Equals (desc.EnglishName' StringComparison.InvariantCultureIgnoreCase)) " is 335.
Long Statement,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The length of the statement  "	return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD); " is 218.
Long Statement,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The length of the statement  "				Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())' " is 132.
Complex Conditional,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,ParseCurrency,The conditional expression  "currencyStr.Equals (desc.NativeName' StringComparison.InvariantCultureIgnoreCase) || currencyStr.Equals (desc.IsoCode' StringComparison.InvariantCultureIgnoreCase) || currencyStr.Equals (desc.Symbol' StringComparison.InvariantCultureIgnoreCase) || currencyStr.Equals (desc.EnglishName' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Empty Catch Block,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,CancelAsync,The method has an empty catch block.
Empty Catch Block,MoneyHandler.CurrenciesFactorsUpdateStrategies,CsvFileCurrenciesFactorsUpdateStrategy,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorsUpdateStrategies\CsvFileCurrenciesFactorsUpdateStrategy.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MoneyHandler.CurrenciesFactorsUpdateStrategies,CsvFileCurrenciesFactorsUpdateStrategy,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorsUpdateStrategies\CsvFileCurrenciesFactorsUpdateStrategy.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MoneyHandler.CurrenciesFactorsUpdateStrategies,DefaultCurrenciesFactorsUpdateStrategy,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorsUpdateStrategies\DefaultCurrenciesFactorsUpdateStrategy.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MoneyHandler.CurrenciesFactorsUpdateStrategies,DefaultCurrenciesFactorsUpdateStrategy,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorsUpdateStrategies\DefaultCurrenciesFactorsUpdateStrategy.cs,Dispose,The method has an empty catch block.
Empty Catch Block,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The method has an empty catch block.
Magic Number,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The following statement contains a magic number: using (var stringReader = new StringReader (yahooData)) {  	var reader = new CsvReader (stringReader' CreateCsvReaderConfiguration ());  	while (reader.Read ()) {  		var symbol = reader.GetField (0);  		if (symbol.Length < 6)  			continue;  		symbol = symbol.Substring (0' symbol.Length - 5).ToLower ();  		Currency currency;  		try {  			currency = (Currency)Enum.Parse (typeof(Currency)' symbol.ToUpper ());  		}  		catch {  			continue;  		}  		if (currency == Currency.UNKNOWN || currency == Currency.USD)  			continue;  		decimal factor;  		if (!Decimal.TryParse (reader.GetField (1)' NumberStyles.Number' CultureInfo.InvariantCulture' out factor) || factor <= 0m)  			continue;  		factors [currency] = factor;  	}  }  
Magic Number,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The following statement contains a magic number: using (var stringReader = new StringReader (yahooData)) {  	var reader = new CsvReader (stringReader' CreateCsvReaderConfiguration ());  	while (reader.Read ()) {  		var symbol = reader.GetField (0);  		if (symbol.Length < 6)  			continue;  		symbol = symbol.Substring (0' symbol.Length - 5).ToLower ();  		Currency currency;  		try {  			currency = (Currency)Enum.Parse (typeof(Currency)' symbol.ToUpper ());  		}  		catch {  			continue;  		}  		if (currency == Currency.UNKNOWN || currency == Currency.USD)  			continue;  		decimal factor;  		if (!Decimal.TryParse (reader.GetField (1)' NumberStyles.Number' CultureInfo.InvariantCulture' out factor) || factor <= 0m)  			continue;  		factors [currency] = factor;  	}  }  
Magic Number,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The following statement contains a magic number: while (reader.Read ()) {  	var symbol = reader.GetField (0);  	if (symbol.Length < 6)  		continue;  	symbol = symbol.Substring (0' symbol.Length - 5).ToLower ();  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' symbol.ToUpper ());  	}  	catch {  		continue;  	}  	if (currency == Currency.UNKNOWN || currency == Currency.USD)  		continue;  	decimal factor;  	if (!Decimal.TryParse (reader.GetField (1)' NumberStyles.Number' CultureInfo.InvariantCulture' out factor) || factor <= 0m)  		continue;  	factors [currency] = factor;  }  
Magic Number,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The following statement contains a magic number: while (reader.Read ()) {  	var symbol = reader.GetField (0);  	if (symbol.Length < 6)  		continue;  	symbol = symbol.Substring (0' symbol.Length - 5).ToLower ();  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' symbol.ToUpper ());  	}  	catch {  		continue;  	}  	if (currency == Currency.UNKNOWN || currency == Currency.USD)  		continue;  	decimal factor;  	if (!Decimal.TryParse (reader.GetField (1)' NumberStyles.Number' CultureInfo.InvariantCulture' out factor) || factor <= 0m)  		continue;  	factors [currency] = factor;  }  
Magic Number,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The following statement contains a magic number: if (symbol.Length < 6)  	continue;  
Magic Number,MoneyHandler.CurrenciesFactorLoaders,YahooCurrenciesFactorsLoader,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrenciesFactorLoaders\YahooCurrenciesFactorsLoader.cs,ParseLoadedData,The following statement contains a magic number: symbol = symbol.Substring (0' symbol.Length - 5).ToLower ();  
Magic Number,MoneyHandler,Money,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\Money.cs,TryParsePrivate,The following statement contains a magic number: if (s.Length < 2) {  	ex = new FormatException ("String too short");  	return false;  }  
Magic Number,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The following statement contains a magic number: return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD);  
Magic Number,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The following statement contains a magic number: return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD);  
Magic Number,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The following statement contains a magic number: return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD);  
Magic Number,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The following statement contains a magic number: return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD);  
Magic Number,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The following statement contains a magic number: return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD);  
Magic Number,MoneyHandler,MoneyHandlerSettings,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\MoneyHandlerSettings.cs,CreateDefaultSettings,The following statement contains a magic number: return new MoneyHandlerSettings (new DefaultCurrenciesFactorsUpdateStrategy (new YahooCurrenciesFactorsLoader ()' isPreviousLoadSuccessful => isPreviousLoadSuccessful ? (6 * 60 * 60 * 1000) : 60 * 1000)' Currency.USD);  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: foreach (XmlNode node in doc.ChildNodes [1].ChildNodes) {  	if (node.Attributes == null)  		continue;  	Currency currency;  	try {  		currency = (Currency)Enum.Parse (typeof(Currency)' node.Attributes [0].Value.Trim ().ToUpper ());  	}  	catch {  		continue;  	}  	try {  		var descriptor = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = node.ChildNodes [0].InnerText.Trim ()'  			NativeName = node.ChildNodes [1].InnerText.Trim ()'  			Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  			SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  			DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  			GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  			GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  			select Int32.Parse (s)).ToList ())'  			PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  			NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  		};  		descriptors [(int)currency] = descriptor;  	}  	catch {  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: try {  	var descriptor = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = node.ChildNodes [0].InnerText.Trim ()'  		NativeName = node.ChildNodes [1].InnerText.Trim ()'  		Symbol = String.Concat (SplitNumberSequence (node.ChildNodes [2]).Select (s => Char.ConvertFromUtf32 (Int32.Parse (s))).ToArray ())'  		SignificantDecimalDigits = Int32.Parse (node.ChildNodes [3].InnerText)'  		DecimalSeparator = GetCharFromString (node.ChildNodes [4].InnerText.Trim ())'  		GroupSeparator = GetCharFromString (node.ChildNodes [5].InnerText.Trim ())'  		GroupSizes = new ReadOnlyCollection<Int32> ((from s in SplitNumberSequence (node.ChildNodes [6])  		select Int32.Parse (s)).ToList ())'  		PositivePattern = Int32.Parse (node.ChildNodes [7].InnerText)'  		NegativePattern = Int32.Parse (node.ChildNodes [8].InnerText)  	};  	descriptors [(int)currency] = descriptor;  }  catch {  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: for (int i = 0; i < descriptors.Length; ++i) {  	if (descriptors [i] == null) {  		var currency = (Currency)i;  		descriptors [i] = new CurrencyDescriptor {  			Currency = currency'  			IsoCode = currency.ToString ()'  			EnglishName = currency.ToString ()'  			SignificantDecimalDigits = 2'  			DecimalSeparator = '.''  			GroupSeparator = ''''  			GroupSizes = DefaultGroupSizes  		};  	}  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: if (descriptors [i] == null) {  	var currency = (Currency)i;  	descriptors [i] = new CurrencyDescriptor {  		Currency = currency'  		IsoCode = currency.ToString ()'  		EnglishName = currency.ToString ()'  		SignificantDecimalDigits = 2'  		DecimalSeparator = '.''  		GroupSeparator = ''''  		GroupSizes = DefaultGroupSizes  	};  }  
Magic Number,MoneyHandler.CurrencyDescriptors,CurrencyDescriptor,C:\repos\pyontko-nazar_MoneyHandler\MoneyHandler.NET4\..\MoneyHandler\CurrencyDescriptors\CurrencyDescriptor.cs,CreateDescriptors,The following statement contains a magic number: descriptors [i] = new CurrencyDescriptor {  	Currency = currency'  	IsoCode = currency.ToString ()'  	EnglishName = currency.ToString ()'  	SignificantDecimalDigits = 2'  	DecimalSeparator = '.''  	GroupSeparator = ''''  	GroupSizes = DefaultGroupSizes  };  
