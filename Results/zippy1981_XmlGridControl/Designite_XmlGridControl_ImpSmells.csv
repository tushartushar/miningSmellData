Implementation smell,Namespace,Class,File,Method,Description
Long Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnKeyDown,The method has 112 lines of code.
Complex Method,WmHelp.XmlGrid,XmlGroupCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,CopyToClipboard,Cyclomatic complexity of the method is 10
Complex Method,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,CreateColumns,Cyclomatic complexity of the method is 12
Complex Method,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,GroupNode,Cyclomatic complexity of the method is 22
Complex Method,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,GetNodeAtColumn,Cyclomatic complexity of the method is 10
Complex Method,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,Cyclomatic complexity of the method is 32
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetRowNumWidth,Cyclomatic complexity of the method is 9
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,SetCellWidth,Cyclomatic complexity of the method is 13
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DoAutoHeightCells,Cyclomatic complexity of the method is 8
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,MeasureCells,Cyclomatic complexity of the method is 13
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindCellByPoint,Cyclomatic complexity of the method is 8
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,Cyclomatic complexity of the method is 8
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,Expand,Cyclomatic complexity of the method is 8
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,MakeCellVisible,Cyclomatic complexity of the method is 18
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnMouseDown,Cyclomatic complexity of the method is 8
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnKeyDown,Cyclomatic complexity of the method is 57
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnKeyPress,Cyclomatic complexity of the method is 9
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,Cyclomatic complexity of the method is 16
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawGridTable,Cyclomatic complexity of the method is 10
Complex Method,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnPaint,Cyclomatic complexity of the method is 12
Long Parameter List,WmHelp.XmlGrid,XmlLabelCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,DrawCellText,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlValueCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,DrawCellText,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlValueCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,GetTextHeight,The method has 5 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlColumnLabelCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,DrawCellText,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,GridCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridCellTable.cs,GetTextHeight,The method has 5 parameters.
Long Parameter List,WmHelp.XmlGrid,GridCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridCellTable.cs,DrawCellText,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,GridCellGroup,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridCellTable.cs,DrawCellText,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,GridHeadLabel,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridCellTable.cs,DrawCellText,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,Win32,C:\repos\zippy1981_XmlGridControl\XmlGridControl\Win32.cs,SetScrollRange,The method has 5 parameters.
Long Parameter List,WmHelp.XmlGrid,Win32,C:\repos\zippy1981_XmlGridControl\XmlGridControl\Win32.cs,ScrollWindowEx,The method has 8 parameters.
Long Parameter List,WmHelp.XmlGrid,Win32,C:\repos\zippy1981_XmlGridControl\XmlGridControl\Win32.cs,ScrollWindowEx,The method has 8 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The method has 6 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The method has 7 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawGridTable,The method has 8 parameters.
Long Parameter List,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawGroupCell,The method has 8 parameters.
Long Statement,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The length of the statement  "		else if ((child.NodeType != XmlNodeType.Text && IsPairNode (child)) || child.NodeType == XmlNodeType.XmlDeclaration || child.NodeType == XmlNodeType.DocumentType || child.NodeType == XmlNodeType.ProcessingInstruction) " is 217.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindCellByPoint,The length of the statement  "		Rectangle rc = Rectangle.FromLTRB (cellRect.Right - cell.TableWidth - cell.TablePadding' cellRect.Bottom - cell.TableHeight' cellRect.Right - cell.TablePadding' cellRect.Bottom); " is 178.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The length of the statement  "		Rectangle rc = Rectangle.FromLTRB (cellRect.Right - cell.TableWidth - cell.TablePadding' cellRect.Bottom - cell.TableHeight' cellRect.Right - cell.TablePadding' cellRect.Bottom); " is 178.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,HandleScrollBar,The length of the statement  "		Win32.ScrollWindowEx (Handle' _drawInfo.cxChar * inc' 0' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero' Win32.SW_INVALIDATE); " is 130.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsInputKey,The length of the statement  "	if (keyData == Keys.Up || keyData == Keys.Down || keyData == Keys.Left || keyData == Keys.Right || keyData == Keys.PageUp || keyData == Keys.PageDown || keyData == Keys.Tab || keyData == Keys.Home || keyData == Keys.End) { " is 222.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawGridTable,The length of the statement  "					bool cellSelected = isSelected || (table [k' 0] is GridColumnLabel && table [k' 0] == _focusedCell) || (table [0' s] is GridRowLabel && table [0' s] == _focusedCell); " is 166.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawGroupCell,The length of the statement  "			g.DrawLine (framePen' X + pixelWidth - cell.TablePadding - 1' Y + pixelHeight - 1' X + pixelWidth' Y + pixelHeight - 1); " is 120.
Long Statement,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawGroupCell,The length of the statement  "		DrawGridTable (g' clipRect' X + left' Y + top' cell.Table' cell.TableWidth' cell.TableHeight' isSelected || cell == _focusedCell); " is 130.
Complex Conditional,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,IsPairNode,The conditional expression  "!elem.HasAttributes && (!elem.HasChildNodes || (elem.ChildNodes.Count == 1 && elem.FirstChild is XmlText))"  is complex.
Complex Conditional,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,CanGroupNodes,The conditional expression  "node1 != null && node1 is XmlElement && node2 != null && node2 is XmlElement"  is complex.
Complex Conditional,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The conditional expression  "(child.NodeType != XmlNodeType.Text && IsPairNode (child)) || child.NodeType == XmlNodeType.XmlDeclaration || child.NodeType == XmlNodeType.DocumentType || child.NodeType == XmlNodeType.ProcessingInstruction"  is complex.
Complex Conditional,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,SetFocusedCell,The conditional expression  "cell != null && cell.Parent != null && cell.Index == 0 && cell is GridRowLabel"  is complex.
Complex Conditional,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsInputKey,The conditional expression  "keyData == Keys.Up || keyData == Keys.Down || keyData == Keys.Left || keyData == Keys.Right || keyData == Keys.PageUp || keyData == Keys.PageDown || keyData == Keys.Tab || keyData == Keys.Home || keyData == Keys.End"  is complex.
Magic Number,WmHelp.XmlGrid,XmlValueCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,GetTextHeight,The following statement contains a magic number: if (String.IsNullOrEmpty (Text))  	return drawInfo.cyChar;  else {  	StringFormat sf = GetStringFormat ();  	sf.FormatFlags = 0;  	SizeF sz = graphics.MeasureString (Text' font' Width' sf);  	int height = Math.Max ((int)sz.Height' drawInfo.cyChar);  	if (height > drawInfo.cyChar)  		height += 4;  	return height;  }  
Magic Number,WmHelp.XmlGrid,XmlValueCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,GetTextHeight,The following statement contains a magic number: if (height > drawInfo.cyChar)  	height += 4;  
Magic Number,WmHelp.XmlGrid,XmlValueCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,GetTextHeight,The following statement contains a magic number: height += 4;  
Magic Number,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following statement contains a magic number: if (items.Length == 1 && items [0].type == ItemType.Values) {  	cell.Table.SetBounds (2' items [0].nodes.Count);  	for (int s = 0; s < items [0].nodes.Count; s++) {  		XmlNode node = items [0].nodes [s];  		cell.Table [0' s] = new XmlLabelCell (node);  		cell.Table [1' s] = new XmlValueCell (node);  	}  }  else {  	int k = 0;  	cell.Table.SetBounds (1' items.CountCells ());  	for (int i = 0; i < items.Length; i++) {  		Item item = items [i];  		switch (item.type) {  		case ItemType.Values:  			{  				GridCellGroup group = new GridCellGroup ();  				group.Flags = GroupFlags.Expanded | GroupFlags.Overlapped;  				group.Table.SetBounds (2' item.nodes.Count);  				for (int s = 0; s < item.nodes.Count; s++) {  					XmlNode node = item.nodes [s];  					group.Table [0' s] = new XmlLabelCell (node);  					if (node.NodeType == XmlNodeType.XmlDeclaration || node.NodeType == XmlNodeType.DocumentType)  						group.Table [1' s] = new XmlDeclarationCell (node);  					else  						group.Table [1' s] = new XmlValueCell (node);  				}  				cell.Table [0' k++] = group;  			}  			break;  		case ItemType.List:  			for (int s = 0; s < item.nodes.Count; s++)  				if (item.nodes [s].NodeType == XmlNodeType.Element)  					cell.Table [0' k++] = new XmlGroupCell (item.nodes [s]);  				else  					cell.Table [0' k++] = new XmlLabelCell (item.nodes [s]);  			break;  		case ItemType.Table:  			{  				GridCellGroup group = new XmlGroupCell (item.nodes [0]);  				group.Flags = group.Flags | GroupFlags.TableView;  				TableColumns tableColumns = new TableColumns ();  				for (int s = 0; s < item.nodes.Count; s++)  					tableColumns = GroupNode (item.nodes [s]' tableColumns);  				group.Table.SetBounds (tableColumns.Length + 1' item.nodes.Count + 1);  				group.Table [0' 0] = new GridRowLabel ();  				for (int s = 0; s < tableColumns.Length; s++)  					group.Table [s + 1' 0] = new XmlColumnLabelCell (tableColumns [s].type' tableColumns [s].name' tableColumns [s].pos);  				for (int s = 0; s < item.nodes.Count; s++) {  					XmlNode node = item.nodes [s];  					group.Table [0' s + 1] = new XmlRowLabelCell (s + 1' node);  					for (int p = 0; p < tableColumns.Length; p++) {  						NodeList nodeList = GetNodeAtColumn (node' tableColumns [p]);  						if (nodeList.Count == 0)  							group.Table [p + 1' s + 1] = new XmlValueCell (null);  						else {  							XmlNode child = nodeList [0];  							if (nodeList.Count == 1) {  								if (child.NodeType != XmlNodeType.Element || IsPairNode (child))  									group.Table [p + 1' s + 1] = new XmlValueCell (child);  								else  									group.Table [p + 1' s + 1] = new XmlGroupCell (child);  							}  							else {  								XmlGroupCell childGroup = new XmlGroupCell (child);  								childGroup.Flags = GroupFlags.Overlapped | GroupFlags.Expanded;  								group.Table [p + 1' s + 1] = childGroup;  								ParseNodes (childGroup' null' nodeList);  							}  						}  					}  				}  				cell.Table [0' k++] = group;  			}  			break;  		}  	}  }  
Magic Number,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following statement contains a magic number: if (items.Length == 1 && items [0].type == ItemType.Values) {  	cell.Table.SetBounds (2' items [0].nodes.Count);  	for (int s = 0; s < items [0].nodes.Count; s++) {  		XmlNode node = items [0].nodes [s];  		cell.Table [0' s] = new XmlLabelCell (node);  		cell.Table [1' s] = new XmlValueCell (node);  	}  }  else {  	int k = 0;  	cell.Table.SetBounds (1' items.CountCells ());  	for (int i = 0; i < items.Length; i++) {  		Item item = items [i];  		switch (item.type) {  		case ItemType.Values:  			{  				GridCellGroup group = new GridCellGroup ();  				group.Flags = GroupFlags.Expanded | GroupFlags.Overlapped;  				group.Table.SetBounds (2' item.nodes.Count);  				for (int s = 0; s < item.nodes.Count; s++) {  					XmlNode node = item.nodes [s];  					group.Table [0' s] = new XmlLabelCell (node);  					if (node.NodeType == XmlNodeType.XmlDeclaration || node.NodeType == XmlNodeType.DocumentType)  						group.Table [1' s] = new XmlDeclarationCell (node);  					else  						group.Table [1' s] = new XmlValueCell (node);  				}  				cell.Table [0' k++] = group;  			}  			break;  		case ItemType.List:  			for (int s = 0; s < item.nodes.Count; s++)  				if (item.nodes [s].NodeType == XmlNodeType.Element)  					cell.Table [0' k++] = new XmlGroupCell (item.nodes [s]);  				else  					cell.Table [0' k++] = new XmlLabelCell (item.nodes [s]);  			break;  		case ItemType.Table:  			{  				GridCellGroup group = new XmlGroupCell (item.nodes [0]);  				group.Flags = group.Flags | GroupFlags.TableView;  				TableColumns tableColumns = new TableColumns ();  				for (int s = 0; s < item.nodes.Count; s++)  					tableColumns = GroupNode (item.nodes [s]' tableColumns);  				group.Table.SetBounds (tableColumns.Length + 1' item.nodes.Count + 1);  				group.Table [0' 0] = new GridRowLabel ();  				for (int s = 0; s < tableColumns.Length; s++)  					group.Table [s + 1' 0] = new XmlColumnLabelCell (tableColumns [s].type' tableColumns [s].name' tableColumns [s].pos);  				for (int s = 0; s < item.nodes.Count; s++) {  					XmlNode node = item.nodes [s];  					group.Table [0' s + 1] = new XmlRowLabelCell (s + 1' node);  					for (int p = 0; p < tableColumns.Length; p++) {  						NodeList nodeList = GetNodeAtColumn (node' tableColumns [p]);  						if (nodeList.Count == 0)  							group.Table [p + 1' s + 1] = new XmlValueCell (null);  						else {  							XmlNode child = nodeList [0];  							if (nodeList.Count == 1) {  								if (child.NodeType != XmlNodeType.Element || IsPairNode (child))  									group.Table [p + 1' s + 1] = new XmlValueCell (child);  								else  									group.Table [p + 1' s + 1] = new XmlGroupCell (child);  							}  							else {  								XmlGroupCell childGroup = new XmlGroupCell (child);  								childGroup.Flags = GroupFlags.Overlapped | GroupFlags.Expanded;  								group.Table [p + 1' s + 1] = childGroup;  								ParseNodes (childGroup' null' nodeList);  							}  						}  					}  				}  				cell.Table [0' k++] = group;  			}  			break;  		}  	}  }  
Magic Number,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following statement contains a magic number: cell.Table.SetBounds (2' items [0].nodes.Count);  
Magic Number,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following statement contains a magic number: for (int i = 0; i < items.Length; i++) {  	Item item = items [i];  	switch (item.type) {  	case ItemType.Values:  		{  			GridCellGroup group = new GridCellGroup ();  			group.Flags = GroupFlags.Expanded | GroupFlags.Overlapped;  			group.Table.SetBounds (2' item.nodes.Count);  			for (int s = 0; s < item.nodes.Count; s++) {  				XmlNode node = item.nodes [s];  				group.Table [0' s] = new XmlLabelCell (node);  				if (node.NodeType == XmlNodeType.XmlDeclaration || node.NodeType == XmlNodeType.DocumentType)  					group.Table [1' s] = new XmlDeclarationCell (node);  				else  					group.Table [1' s] = new XmlValueCell (node);  			}  			cell.Table [0' k++] = group;  		}  		break;  	case ItemType.List:  		for (int s = 0; s < item.nodes.Count; s++)  			if (item.nodes [s].NodeType == XmlNodeType.Element)  				cell.Table [0' k++] = new XmlGroupCell (item.nodes [s]);  			else  				cell.Table [0' k++] = new XmlLabelCell (item.nodes [s]);  		break;  	case ItemType.Table:  		{  			GridCellGroup group = new XmlGroupCell (item.nodes [0]);  			group.Flags = group.Flags | GroupFlags.TableView;  			TableColumns tableColumns = new TableColumns ();  			for (int s = 0; s < item.nodes.Count; s++)  				tableColumns = GroupNode (item.nodes [s]' tableColumns);  			group.Table.SetBounds (tableColumns.Length + 1' item.nodes.Count + 1);  			group.Table [0' 0] = new GridRowLabel ();  			for (int s = 0; s < tableColumns.Length; s++)  				group.Table [s + 1' 0] = new XmlColumnLabelCell (tableColumns [s].type' tableColumns [s].name' tableColumns [s].pos);  			for (int s = 0; s < item.nodes.Count; s++) {  				XmlNode node = item.nodes [s];  				group.Table [0' s + 1] = new XmlRowLabelCell (s + 1' node);  				for (int p = 0; p < tableColumns.Length; p++) {  					NodeList nodeList = GetNodeAtColumn (node' tableColumns [p]);  					if (nodeList.Count == 0)  						group.Table [p + 1' s + 1] = new XmlValueCell (null);  					else {  						XmlNode child = nodeList [0];  						if (nodeList.Count == 1) {  							if (child.NodeType != XmlNodeType.Element || IsPairNode (child))  								group.Table [p + 1' s + 1] = new XmlValueCell (child);  							else  								group.Table [p + 1' s + 1] = new XmlGroupCell (child);  						}  						else {  							XmlGroupCell childGroup = new XmlGroupCell (child);  							childGroup.Flags = GroupFlags.Overlapped | GroupFlags.Expanded;  							group.Table [p + 1' s + 1] = childGroup;  							ParseNodes (childGroup' null' nodeList);  						}  					}  				}  			}  			cell.Table [0' k++] = group;  		}  		break;  	}  }  
Magic Number,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following statement contains a magic number: switch (item.type) {  case ItemType.Values:  	{  		GridCellGroup group = new GridCellGroup ();  		group.Flags = GroupFlags.Expanded | GroupFlags.Overlapped;  		group.Table.SetBounds (2' item.nodes.Count);  		for (int s = 0; s < item.nodes.Count; s++) {  			XmlNode node = item.nodes [s];  			group.Table [0' s] = new XmlLabelCell (node);  			if (node.NodeType == XmlNodeType.XmlDeclaration || node.NodeType == XmlNodeType.DocumentType)  				group.Table [1' s] = new XmlDeclarationCell (node);  			else  				group.Table [1' s] = new XmlValueCell (node);  		}  		cell.Table [0' k++] = group;  	}  	break;  case ItemType.List:  	for (int s = 0; s < item.nodes.Count; s++)  		if (item.nodes [s].NodeType == XmlNodeType.Element)  			cell.Table [0' k++] = new XmlGroupCell (item.nodes [s]);  		else  			cell.Table [0' k++] = new XmlLabelCell (item.nodes [s]);  	break;  case ItemType.Table:  	{  		GridCellGroup group = new XmlGroupCell (item.nodes [0]);  		group.Flags = group.Flags | GroupFlags.TableView;  		TableColumns tableColumns = new TableColumns ();  		for (int s = 0; s < item.nodes.Count; s++)  			tableColumns = GroupNode (item.nodes [s]' tableColumns);  		group.Table.SetBounds (tableColumns.Length + 1' item.nodes.Count + 1);  		group.Table [0' 0] = new GridRowLabel ();  		for (int s = 0; s < tableColumns.Length; s++)  			group.Table [s + 1' 0] = new XmlColumnLabelCell (tableColumns [s].type' tableColumns [s].name' tableColumns [s].pos);  		for (int s = 0; s < item.nodes.Count; s++) {  			XmlNode node = item.nodes [s];  			group.Table [0' s + 1] = new XmlRowLabelCell (s + 1' node);  			for (int p = 0; p < tableColumns.Length; p++) {  				NodeList nodeList = GetNodeAtColumn (node' tableColumns [p]);  				if (nodeList.Count == 0)  					group.Table [p + 1' s + 1] = new XmlValueCell (null);  				else {  					XmlNode child = nodeList [0];  					if (nodeList.Count == 1) {  						if (child.NodeType != XmlNodeType.Element || IsPairNode (child))  							group.Table [p + 1' s + 1] = new XmlValueCell (child);  						else  							group.Table [p + 1' s + 1] = new XmlGroupCell (child);  					}  					else {  						XmlGroupCell childGroup = new XmlGroupCell (child);  						childGroup.Flags = GroupFlags.Overlapped | GroupFlags.Expanded;  						group.Table [p + 1' s + 1] = childGroup;  						ParseNodes (childGroup' null' nodeList);  					}  				}  			}  		}  		cell.Table [0' k++] = group;  	}  	break;  }  
Magic Number,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following statement contains a magic number: group.Table.SetBounds (2' item.nodes.Count);  
Magic Number,WmHelp.XmlGrid,GridCell,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridCellTable.cs,DrawCellText,The following statement contains a magic number: rect.Y += 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,CreateForm,The following statement contains a magic number: root.Table.SetBounds (1' 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,XmlGridView,The following statement contains a magic number: _images = new ImageList {  	TransparentColor = Color.Fuchsia'  	ImageSize = new Size (16' 13)'  	ColorDepth = ColorDepth.Depth24Bit  };  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,XmlGridView,The following statement contains a magic number: _images = new ImageList {  	TransparentColor = Color.Fuchsia'  	ImageSize = new Size (16' 13)'  	ColorDepth = ColorDepth.Depth24Bit  };  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,XmlGridView,The following statement contains a magic number: Font = new Font ("Arial"' 8);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,XmlGridView,The following statement contains a magic number: DefaultColumnWidth = 105;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetRowNumWidth,The following statement contains a magic number: for (int k = 0; k < table.Width; k++)  	for (int s = 0; s < table.Height; s++)  		if (table [k' s].IsGroup) {  			GridCellGroup cell = (GridCellGroup)table [k' s];  			if (cell.TableView) {  				width = (int)g.MeasureString (cell.Table.Height.ToString () + "0"' font).Width + 3;  				if (width > _rowNumWidth)  					_rowNumWidth = width;  			}  			GetRowNumWidth (cell.Table' g);  		}  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetRowNumWidth,The following statement contains a magic number: for (int s = 0; s < table.Height; s++)  	if (table [k' s].IsGroup) {  		GridCellGroup cell = (GridCellGroup)table [k' s];  		if (cell.TableView) {  			width = (int)g.MeasureString (cell.Table.Height.ToString () + "0"' font).Width + 3;  			if (width > _rowNumWidth)  				_rowNumWidth = width;  		}  		GetRowNumWidth (cell.Table' g);  	}  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetRowNumWidth,The following statement contains a magic number: if (table [k' s].IsGroup) {  	GridCellGroup cell = (GridCellGroup)table [k' s];  	if (cell.TableView) {  		width = (int)g.MeasureString (cell.Table.Height.ToString () + "0"' font).Width + 3;  		if (width > _rowNumWidth)  			_rowNumWidth = width;  	}  	GetRowNumWidth (cell.Table' g);  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetRowNumWidth,The following statement contains a magic number: if (cell.TableView) {  	width = (int)g.MeasureString (cell.Table.Height.ToString () + "0"' font).Width + 3;  	if (width > _rowNumWidth)  		_rowNumWidth = width;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetRowNumWidth,The following statement contains a magic number: width = (int)g.MeasureString (cell.Table.Height.ToString () + "0"' font).Width + 3;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,MeasureCells,The following statement contains a magic number: _rowNumWidth = 30;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,MeasureCells,The following statement contains a magic number: if (numcols == 1)  	_columnsWidth [0] = DefaultColumnWidth * 2;  else {  	for (int k = 0; k < _columnsWidth.Length && k < columnsWidth.Length; k++)  		_columnsWidth [k] = columnsWidth [k];  	for (int k = columnsWidth.Length; k < numcols; k++)  		_columnsWidth [k] = DefaultColumnWidth;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,MeasureCells,The following statement contains a magic number: _columnsWidth [0] = DefaultColumnWidth * 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: _drawInfo.cxImage = 12;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: if ((tm.tmPitchAndFamily & 1) == 1)  	_drawInfo.cxCaps = 3 * _drawInfo.cxChar / 2;  else  	_drawInfo.cxCaps = 2 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: if ((tm.tmPitchAndFamily & 1) == 1)  	_drawInfo.cxCaps = 3 * _drawInfo.cxChar / 2;  else  	_drawInfo.cxCaps = 2 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: if ((tm.tmPitchAndFamily & 1) == 1)  	_drawInfo.cxCaps = 3 * _drawInfo.cxChar / 2;  else  	_drawInfo.cxCaps = 2 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: if ((tm.tmPitchAndFamily & 1) == 1)  	_drawInfo.cxCaps = 3 * _drawInfo.cxChar / 2;  else  	_drawInfo.cxCaps = 2 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: _drawInfo.cxCaps = 3 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: _drawInfo.cxCaps = 3 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: _drawInfo.cxCaps = 2 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: _drawInfo.cxCaps = 2 * _drawInfo.cxChar / 2;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,UpdateTextMetrics,The following statement contains a magic number: _drawInfo.cyChar = tm.tmHeight + tm.tmExternalLeading + 4;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: if (cell.Expanded) {  	Rectangle rc = Rectangle.FromLTRB (cellRect.Right - cell.TableWidth - cell.TablePadding' cellRect.Bottom - cell.TableHeight' cellRect.Right - cell.TablePadding' cellRect.Bottom);  	int rcLeft = rc.Left;  	for (int k = 0; k < cell.Table.Width; k++) {  		if (rcLeft > right)  			break;  		int rcRight = rcLeft + cell.Table.ColumnsWidth [k];  		if (rcLeft <= left && right <= rcRight) {  			int rcTop = rc.Top;  			for (int s = 0; s < cell.Table.Height; s++) {  				if (cell.Table [k' s].IsGroup) {  					Rectangle rc2 = Rectangle.FromLTRB (rcLeft' rcTop' rcRight' rcTop + cell.Table.RowHeight [s]);  					FindColumnMaxWidth ((GridCellGroup)cell.Table [k' s]' rc2' g' left' right' ref iMaxWidth);  				}  				else if (rcLeft == left && rcRight == right)  					iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  				rcTop += cell.Table.RowHeight [s];  			}  		}  		rcLeft = rcRight;  	}  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: for (int k = 0; k < cell.Table.Width; k++) {  	if (rcLeft > right)  		break;  	int rcRight = rcLeft + cell.Table.ColumnsWidth [k];  	if (rcLeft <= left && right <= rcRight) {  		int rcTop = rc.Top;  		for (int s = 0; s < cell.Table.Height; s++) {  			if (cell.Table [k' s].IsGroup) {  				Rectangle rc2 = Rectangle.FromLTRB (rcLeft' rcTop' rcRight' rcTop + cell.Table.RowHeight [s]);  				FindColumnMaxWidth ((GridCellGroup)cell.Table [k' s]' rc2' g' left' right' ref iMaxWidth);  			}  			else if (rcLeft == left && rcRight == right)  				iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  			rcTop += cell.Table.RowHeight [s];  		}  	}  	rcLeft = rcRight;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: if (rcLeft <= left && right <= rcRight) {  	int rcTop = rc.Top;  	for (int s = 0; s < cell.Table.Height; s++) {  		if (cell.Table [k' s].IsGroup) {  			Rectangle rc2 = Rectangle.FromLTRB (rcLeft' rcTop' rcRight' rcTop + cell.Table.RowHeight [s]);  			FindColumnMaxWidth ((GridCellGroup)cell.Table [k' s]' rc2' g' left' right' ref iMaxWidth);  		}  		else if (rcLeft == left && rcRight == right)  			iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  		rcTop += cell.Table.RowHeight [s];  	}  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: for (int s = 0; s < cell.Table.Height; s++) {  	if (cell.Table [k' s].IsGroup) {  		Rectangle rc2 = Rectangle.FromLTRB (rcLeft' rcTop' rcRight' rcTop + cell.Table.RowHeight [s]);  		FindColumnMaxWidth ((GridCellGroup)cell.Table [k' s]' rc2' g' left' right' ref iMaxWidth);  	}  	else if (rcLeft == left && rcRight == right)  		iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  	rcTop += cell.Table.RowHeight [s];  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: if (cell.Table [k' s].IsGroup) {  	Rectangle rc2 = Rectangle.FromLTRB (rcLeft' rcTop' rcRight' rcTop + cell.Table.RowHeight [s]);  	FindColumnMaxWidth ((GridCellGroup)cell.Table [k' s]' rc2' g' left' right' ref iMaxWidth);  }  else if (rcLeft == left && rcRight == right)  	iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: if (rcLeft == left && rcRight == right)  	iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,FindColumnMaxWidth,The following statement contains a magic number: iMaxWidth = Math.Max (iMaxWidth' 2 * _drawInfo.cxChar + cell.Table [k' s].GetTextWidth (this' g' Font' _drawInfo));  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: if (cell != null) {  	Rectangle rc;  	if (cell.ImageIndex != -1) {  		rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  		if (rc.Contains (p))  			return HitTest.Icon;  	}  	rc = cellRect;  	rc.X++;  	rc.Offset (0' 0);  	rc.Inflate (-3' 0);  	if (rc.Contains (p))  		return HitTest.Text;  	else  		return HitTest.Cell;  }  else  	return HitTest.Nothing;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: if (cell != null) {  	Rectangle rc;  	if (cell.ImageIndex != -1) {  		rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  		if (rc.Contains (p))  			return HitTest.Icon;  	}  	rc = cellRect;  	rc.X++;  	rc.Offset (0' 0);  	rc.Inflate (-3' 0);  	if (rc.Contains (p))  		return HitTest.Text;  	else  		return HitTest.Cell;  }  else  	return HitTest.Nothing;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: if (cell != null) {  	Rectangle rc;  	if (cell.ImageIndex != -1) {  		rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  		if (rc.Contains (p))  			return HitTest.Icon;  	}  	rc = cellRect;  	rc.X++;  	rc.Offset (0' 0);  	rc.Inflate (-3' 0);  	if (rc.Contains (p))  		return HitTest.Text;  	else  		return HitTest.Cell;  }  else  	return HitTest.Nothing;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: if (cell.ImageIndex != -1) {  	rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  	if (rc.Contains (p))  		return HitTest.Icon;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: if (cell.ImageIndex != -1) {  	rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  	if (rc.Contains (p))  		return HitTest.Icon;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: rc = new Rectangle (cellRect.Left + 2' cellRect.Top + 2' _images.ImageSize.Width' _images.ImageSize.Height);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,GetHitTest,The following statement contains a magic number: rc.Inflate (-3' 0);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsBorder,The following statement contains a magic number: for (int i = 0; i < _columnsWidth.Length; i++) {  	curr += _columnsWidth [i];  	if (curr - 3 <= X && X <= curr + 2) {  		_columnIndex = i;  		return true;  	}  	else if (curr > X)  		break;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsBorder,The following statement contains a magic number: for (int i = 0; i < _columnsWidth.Length; i++) {  	curr += _columnsWidth [i];  	if (curr - 3 <= X && X <= curr + 2) {  		_columnIndex = i;  		return true;  	}  	else if (curr > X)  		break;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsBorder,The following statement contains a magic number: if (curr - 3 <= X && X <= curr + 2) {  	_columnIndex = i;  	return true;  }  else if (curr > X)  	break;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsBorder,The following statement contains a magic number: if (curr - 3 <= X && X <= curr + 2) {  	_columnIndex = i;  	return true;  }  else if (curr > X)  	break;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsBorderLine,The following statement contains a magic number: if (p.Y <= _drawInfo.nLinesCount * _drawInfo.cyChar && IsBorder (p.X)) {  	Rectangle cellRect = Rectangle.Empty;  	GridCell cell = FindCellByPoint (p' ref cellRect);  	if (cell == null || (cellRect.Right - 3 <= p.X && p.X <= cellRect.Right))  		return true;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,IsBorderLine,The following statement contains a magic number: if (cell == null || (cellRect.Right - 3 <= p.X && p.X <= cellRect.Right))  	return true;  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnMouseMove,The following statement contains a magic number: if (!_resizeFlag) {  	if (IsBorderLine (p))  		Cursor.Current = Cursors.VSplit;  	else  		Cursor.Current = Cursors.Default;  }  else {  	int delta = p.X - RangeWidth (0' _columnIndex);  	if (delta > _rowNumWidth + 5) {  		_columnsWidth [_columnIndex] = delta;  		UpdateWidth ();  		if (AutoHeightCells)  			using (Graphics g = CreateGraphics ())  				UpdateHeight (g);  		UpdateScrollRange ();  		Refresh ();  	}  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnMouseMove,The following statement contains a magic number: if (delta > _rowNumWidth + 5) {  	_columnsWidth [_columnIndex] = delta;  	UpdateWidth ();  	if (AutoHeightCells)  		using (Graphics g = CreateGraphics ())  			UpdateHeight (g);  	UpdateScrollRange ();  	Refresh ();  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex != -1) {  	if (cell.ImageIndex <= 1)  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  	else  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  	cellRect.X += _images.ImageSize.Width + 1;  	cellRect.Width -= _images.ImageSize.Width + 1;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex != -1) {  	if (cell.ImageIndex <= 1)  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  	else  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  	cellRect.X += _images.ImageSize.Width + 1;  	cellRect.Width -= _images.ImageSize.Width + 1;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex != -1) {  	if (cell.ImageIndex <= 1)  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  	else  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  	cellRect.X += _images.ImageSize.Width + 1;  	cellRect.Width -= _images.ImageSize.Width + 1;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex != -1) {  	if (cell.ImageIndex <= 1)  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  	else  		g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  	cellRect.X += _images.ImageSize.Width + 1;  	cellRect.Width -= _images.ImageSize.Width + 1;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex <= 1)  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  else  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex <= 1)  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  else  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex <= 1)  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  else  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: if (cell.ImageIndex <= 1)  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  else  	g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: g.DrawImage (_images.Images [cell.ImageIndex]' x + 5' y + 3);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: g.DrawImage (_images.Images [cell.ImageIndex]' x + 2' y + 2);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,DrawCell,The following statement contains a magic number: cellRect.Inflate (-3' -1);  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnPaint,The following statement contains a magic number: if (Footer != null) {  	Font f;  	int top;  	if (_rootCell != null) {  		f = new Font (Font' FontStyle.Italic);  		top = _drawInfo.iHeight + _drawInfo.cyChar / 2;  	}  	else {  		f = Font;  		top = 0;  	}  	Brush brush = new SolidBrush (SystemColors.WindowText);  	foreach (string s in Footer) {  		g.DrawString (s' f' brush' _drawInfo.cxChar' top);  		top += _drawInfo.cyChar;  	}  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnPaint,The following statement contains a magic number: if (_rootCell != null) {  	f = new Font (Font' FontStyle.Italic);  	top = _drawInfo.iHeight + _drawInfo.cyChar / 2;  }  else {  	f = Font;  	top = 0;  }  
Magic Number,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnPaint,The following statement contains a magic number: top = _drawInfo.iHeight + _drawInfo.cyChar / 2;  
Missing Default,WmHelp.XmlGrid,GridBuilder,C:\repos\zippy1981_XmlGridControl\XmlGridControl\GridBuilder.cs,ParseNodes,The following switch statement is missing a default case: switch (item.type) {  case ItemType.Values:  	{  		GridCellGroup group = new GridCellGroup ();  		group.Flags = GroupFlags.Expanded | GroupFlags.Overlapped;  		group.Table.SetBounds (2' item.nodes.Count);  		for (int s = 0; s < item.nodes.Count; s++) {  			XmlNode node = item.nodes [s];  			group.Table [0' s] = new XmlLabelCell (node);  			if (node.NodeType == XmlNodeType.XmlDeclaration || node.NodeType == XmlNodeType.DocumentType)  				group.Table [1' s] = new XmlDeclarationCell (node);  			else  				group.Table [1' s] = new XmlValueCell (node);  		}  		cell.Table [0' k++] = group;  	}  	break;  case ItemType.List:  	for (int s = 0; s < item.nodes.Count; s++)  		if (item.nodes [s].NodeType == XmlNodeType.Element)  			cell.Table [0' k++] = new XmlGroupCell (item.nodes [s]);  		else  			cell.Table [0' k++] = new XmlLabelCell (item.nodes [s]);  	break;  case ItemType.Table:  	{  		GridCellGroup group = new XmlGroupCell (item.nodes [0]);  		group.Flags = group.Flags | GroupFlags.TableView;  		TableColumns tableColumns = new TableColumns ();  		for (int s = 0; s < item.nodes.Count; s++)  			tableColumns = GroupNode (item.nodes [s]' tableColumns);  		group.Table.SetBounds (tableColumns.Length + 1' item.nodes.Count + 1);  		group.Table [0' 0] = new GridRowLabel ();  		for (int s = 0; s < tableColumns.Length; s++)  			group.Table [s + 1' 0] = new XmlColumnLabelCell (tableColumns [s].type' tableColumns [s].name' tableColumns [s].pos);  		for (int s = 0; s < item.nodes.Count; s++) {  			XmlNode node = item.nodes [s];  			group.Table [0' s + 1] = new XmlRowLabelCell (s + 1' node);  			for (int p = 0; p < tableColumns.Length; p++) {  				NodeList nodeList = GetNodeAtColumn (node' tableColumns [p]);  				if (nodeList.Count == 0)  					group.Table [p + 1' s + 1] = new XmlValueCell (null);  				else {  					XmlNode child = nodeList [0];  					if (nodeList.Count == 1) {  						if (child.NodeType != XmlNodeType.Element || IsPairNode (child))  							group.Table [p + 1' s + 1] = new XmlValueCell (child);  						else  							group.Table [p + 1' s + 1] = new XmlGroupCell (child);  					}  					else {  						XmlGroupCell childGroup = new XmlGroupCell (child);  						childGroup.Flags = GroupFlags.Overlapped | GroupFlags.Expanded;  						group.Table [p + 1' s + 1] = childGroup;  						ParseNodes (childGroup' null' nodeList);  					}  				}  			}  		}  		cell.Table [0' k++] = group;  	}  	break;  }  
Missing Default,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Up:  	cell = PriorCell (_focusedCell);  	if (cell != null)  		if (e.Control) {  			rc = FindCellRect (cell);  			if (!rc.IsEmpty) {  				Rectangle window = GetWindowRect ();  				ScrollTo (-1' (window.Top - rc.Height - 1) / _drawInfo.cyChar);  			}  		}  		else {  			SetFocusedCell (cell);  			using (Graphics g = CreateGraphics ())  				MakeCellVisible (g' cell' false);  		}  	break;  case Keys.Down:  	cell = NextCell (_focusedCell' true);  	if (cell != null)  		if (e.Control) {  			rc = FindCellRect (cell);  			if (!rc.IsEmpty) {  				Rectangle window = GetWindowRect ();  				ScrollTo (-1' (window.Top + rc.Height) / _drawInfo.cyChar);  			}  		}  		else {  			SetFocusedCell (cell);  			using (Graphics g = CreateGraphics ())  				MakeCellVisible (g' cell' false);  		}  	break;  case Keys.Left:  	cell = BackwardCell (_focusedCell);  	if (cell != null)  		if (e.Control) {  			rc = FindCellRect (cell);  			if (!rc.IsEmpty) {  				Rectangle window = GetWindowRect ();  				ScrollTo ((window.Left - rc.Width) / _drawInfo.cxChar' -1);  			}  		}  		else {  			SetFocusedCell (cell);  			using (Graphics g = CreateGraphics ())  				MakeCellVisible (g' cell' false);  		}  	break;  case Keys.Right:  	cell = ForwardCell (_focusedCell);  	if (cell != null)  		if (e.Control) {  			rc = FindCellRect (cell);  			if (!rc.IsEmpty) {  				Rectangle window = GetWindowRect ();  				ScrollTo ((window.Left + rc.Width) / _drawInfo.cxChar' -1);  			}  		}  		else {  			SetFocusedCell (cell);  			using (Graphics g = CreateGraphics ())  				MakeCellVisible (g' cell' false);  		}  	break;  case Keys.Tab:  	if (_focusedCell.Parent != null && _focusedCell.Parent.TableView) {  		cell = null;  		if (_focusedCell.Col < _focusedCell.Parent.Table.Width - 1)  			cell = ForwardCell (_focusedCell);  		else if (_focusedCell.Row < _focusedCell.Parent.Table.Height - 1)  			cell = _focusedCell.Parent.Table [1' _focusedCell.Row + 1];  		if (cell != null) {  			SetFocusedCell (cell);  			using (Graphics g = CreateGraphics ())  				MakeCellVisible (g' cell' false);  		}  	}  	else {  		cell = NextCell (_focusedCell' true);  		if (cell != null) {  			SetFocusedCell (cell);  			using (Graphics g = CreateGraphics ())  				MakeCellVisible (g' cell' false);  		}  	}  	break;  case Keys.Home:  	cell = _focusedCell.Parent.Table [0' 0];  	SetFocusedCell (cell);  	using (Graphics g = CreateGraphics ())  		MakeCellVisible (g' cell' false);  	break;  case Keys.End:  	cell = _focusedCell.Parent.Table [_focusedCell.Parent.Table.Width - 1' _focusedCell.Parent.Table.Height - 1];  	SetFocusedCell (cell);  	using (Graphics g = CreateGraphics ())  		MakeCellVisible (g' cell' false);  	break;  case Keys.C:  	if (e.Control)  		if (_focusedCell != null)  			_focusedCell.CopyToClipboard ();  	break;  }  
Missing Default,WmHelp.XmlGrid,XmlGridView,C:\repos\zippy1981_XmlGridControl\XmlGridControl\XmlGridView.cs,OnKeyPress,The following switch statement is missing a default case: switch (e.KeyChar) {  case '+':  	if (_focusedCell.IsGroup)  		Expand ((GridCellGroup)_focusedCell);  	break;  case '-':  	if (_focusedCell.IsGroup)  		Collapse ((GridCellGroup)_focusedCell);  	break;  }  
