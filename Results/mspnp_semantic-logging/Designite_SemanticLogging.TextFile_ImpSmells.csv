Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Practices.EnterpriseLibrary.SemanticLogging,RollingFlatFileLog,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\RollingFlatFileLog.cs,LogToRollingFlatFile,The method has 9 parameters. Parameters: eventStream' fileName' rollSizeKB' timestampPattern' rollFileExistsBehavior' rollInterval' formatter' maxArchivedFiles' isAsync
Long Parameter List,Microsoft.Practices.EnterpriseLibrary.SemanticLogging,RollingFlatFileLog,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\RollingFlatFileLog.cs,CreateListener,The method has 8 parameters. Parameters: fileName' rollSizeKB' timestampPattern' rollFileExistsBehavior' rollInterval' formatter' maxArchivedFiles' isAsync
Long Parameter List,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,RollingFlatFileSink,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFileSink.cs,RollingFlatFileSink,The method has 8 parameters. Parameters: fileName' rollSizeKB' timestampPattern' rollFileExistsBehavior' rollInterval' maxArchivedFiles' formatter' isAsync
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Configuration,RollingFlatFileSinkElement,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Configuration\RollingFlatFileSinkElement.cs,CreateSink,The length of the statement  "            RollFileExistsBehavior rollFileExistsBehavior = (RollFileExistsBehavior)Enum.Parse(typeof(RollFileExistsBehavior)' (string)element.Attribute("rollFileExistsBehavior") ?? default(RollFileExistsBehavior).ToString()); " is 214.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Configuration,RollingFlatFileSinkElement,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Configuration\RollingFlatFileSinkElement.cs,CreateSink,The length of the statement  "            RollInterval rollInterval = (RollInterval)Enum.Parse(typeof(RollInterval)' (string)element.Attribute("rollInterval") ?? default(RollInterval).ToString()); " is 154.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging,RollingFlatFileLog,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\RollingFlatFileLog.cs,LogToRollingFlatFile,The length of the statement  "            var sink = new RollingFlatFileSink(fileName' rollSizeKB' timestampPattern' rollFileExistsBehavior' rollInterval' maxArchivedFiles' formatter ?? new EventTextFormatter()' isAsync); " is 179.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging,RollingFlatFileLog,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\RollingFlatFileLog.cs,CreateListener,The length of the statement  "            listener.LogToRollingFlatFile(fileName' rollSizeKB' timestampPattern' rollFileExistsBehavior' rollInterval' formatter' maxArchivedFiles' isAsync); " is 146.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,StreamWriterRollingHelper,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFileSink.Inner.cs,FindMaxSequenceNumber,The length of the statement  "                Regex regex = new Regex(string.Format(CultureInfo.InvariantCulture' @"{0}\.(?<sequence>\d+){1}$"' fileName' extension)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,StreamWriterRollingHelper,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFileSink.Inner.cs,PerformRoll,The length of the statement  "                this.owner.writer = new TallyKeepingFileStreamWriter(this.owner.file.Open(FileMode.Append' FileAccess.Write' FileShare.Read)); " is 126.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,RollingFlatFilePurger,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFilePurger.cs,TryDelete,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,RollingFlatFilePurger,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFilePurger.cs,TryDelete,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,RollingFlatFilePurger,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFilePurger.cs,TryGetMatchingFiles,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,RollingFlatFilePurger,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFilePurger.cs,TryGetMatchingFiles,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,RollingFlatFilePurger,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFilePurger.cs,TryGetMatchingFiles,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,StreamWriterRollingHelper,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFileSink.Inner.cs,SafeMove,The method has an empty catch block.
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Sinks,StreamWriterRollingHelper,C:\repos\mspnp_semantic-logging\source\Src\SemanticLogging.TextFile\Sinks\RollingFlatFileSink.Inner.cs,CalculateNextRollDate,The following statement contains a magic number: try                  {                      switch (this.owner.rollInterval)                      {                          case RollInterval.Minute:                              return dateTime.AddMinutes(1);                          case RollInterval.Hour:                              return dateTime.AddHours(1);                          case RollInterval.Day:                              return dateTime.AddDays(1);                          case RollInterval.Week:                              return dateTime.AddDays(7);                          case RollInterval.Month:                              return dateTime.AddMonths(1);                          case RollInterval.Year:                              return dateTime.AddYears(1);                          case RollInterval.Midnight:                              return dateTime.AddDays(1).Date;                          default:                              return DateTime.MaxValue;                      }                  }                  catch (ArgumentOutOfRangeException)                  {                      return DateTime.MaxValue;                  }
