Implementation smell,Namespace,Class,File,Method,Description
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "            // ThrottleEventsWithEventId is a custom extension method that shows how you can leverage the power of Reactive Extensions (Rx)  " is 127.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "            // In this case' ThrottleEventsWithEventId will throttle entries with EventID=4 and mute additional occurrences for 15 seconds. " is 127.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "            // This can be useful in the case that a high-throughput event does not have a keyword or verbosity setting that makes it easy " is 126.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "            // The rest of the code in this QuickStart is here to show an interactive demo of how it looks if this filter is turned on or off. " is 130.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "            Console.WriteLine("This program simulates the scenario of a particular event being logged multiple times in succession when a certain condition occurs'"); " is 154.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "                            Console.WriteLine("Filter toggled: event entries will not be throttled. In this scenario' if there is no post-filtering of events' important messages could go unnoticed."); " is 172.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The length of the statement  "                            Console.WriteLine("Filter toggled: event entries with ID {0} will be throttled for 15 seconds to prevent that type of entry to flood the log."' ThrottledEventId); " is 162.
Long Statement,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,DoImportantWork,The length of the statement  "                        throw new DataException("Error updating account balance information. Something unexpected happened and needs to be fixed. Do not ignore this error!"); " is 150.
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The following statement contains a magic number: var subscription = listener                                  .ThrottleEventsWithEventId(TimeSpan.FromSeconds(15)' ThrottledEventId)                                  .LogToConsole(SingleLineFormatter);
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The following statement contains a magic number: while (!cts.IsCancellationRequested)              {                  key = Console.ReadKey(false);                  switch (key.Key)                  {                      case ConsoleKey.Spacebar:                          subscription.Dispose();                          if (currentlyThrottling)                          {                              Console.WriteLine("Filter toggled: event entries will not be throttled. In this scenario' if there is no post-filtering of events' important messages could go unnoticed.");                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = false;                                // Note that the events are sent directly to the console' without using Reactive Extensions.                              subscription = listener                                                  .LogToConsole(SingleLineFormatter);                          }                          else                          {                              Console.WriteLine("Filter toggled: event entries with ID {0} will be throttled for 15 seconds to prevent that type of entry to flood the log."' ThrottledEventId);                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = true;                                // Note that the events are filtered first and then sent to the console' using Reactive Extensions.                              subscription = listener                                                  .ThrottleEventsWithEventId(TimeSpan.FromSeconds(15)' ThrottledEventId)                                                  .LogToConsole(SingleLineFormatter);                          }                                                    break;                        case ConsoleKey.Escape:                          cts.Cancel();                          break;                  }              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The following statement contains a magic number: while (!cts.IsCancellationRequested)              {                  key = Console.ReadKey(false);                  switch (key.Key)                  {                      case ConsoleKey.Spacebar:                          subscription.Dispose();                          if (currentlyThrottling)                          {                              Console.WriteLine("Filter toggled: event entries will not be throttled. In this scenario' if there is no post-filtering of events' important messages could go unnoticed.");                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = false;                                // Note that the events are sent directly to the console' without using Reactive Extensions.                              subscription = listener                                                  .LogToConsole(SingleLineFormatter);                          }                          else                          {                              Console.WriteLine("Filter toggled: event entries with ID {0} will be throttled for 15 seconds to prevent that type of entry to flood the log."' ThrottledEventId);                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = true;                                // Note that the events are filtered first and then sent to the console' using Reactive Extensions.                              subscription = listener                                                  .ThrottleEventsWithEventId(TimeSpan.FromSeconds(15)' ThrottledEventId)                                                  .LogToConsole(SingleLineFormatter);                          }                                                    break;                        case ConsoleKey.Escape:                          cts.Cancel();                          break;                  }              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The following statement contains a magic number: while (!cts.IsCancellationRequested)              {                  key = Console.ReadKey(false);                  switch (key.Key)                  {                      case ConsoleKey.Spacebar:                          subscription.Dispose();                          if (currentlyThrottling)                          {                              Console.WriteLine("Filter toggled: event entries will not be throttled. In this scenario' if there is no post-filtering of events' important messages could go unnoticed.");                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = false;                                // Note that the events are sent directly to the console' without using Reactive Extensions.                              subscription = listener                                                  .LogToConsole(SingleLineFormatter);                          }                          else                          {                              Console.WriteLine("Filter toggled: event entries with ID {0} will be throttled for 15 seconds to prevent that type of entry to flood the log."' ThrottledEventId);                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = true;                                // Note that the events are filtered first and then sent to the console' using Reactive Extensions.                              subscription = listener                                                  .ThrottleEventsWithEventId(TimeSpan.FromSeconds(15)' ThrottledEventId)                                                  .LogToConsole(SingleLineFormatter);                          }                                                    break;                        case ConsoleKey.Escape:                          cts.Cancel();                          break;                  }              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,RefreshDisplayData,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  try                  {                      throw new WebException("Error connecting to the back-end service.");                  }                  catch (Exception ex)                  {                      RxFloodQuickStartEventSource.Log.UnknownError(ex.ToString());                  }                    // sleep between poll retries.                  Thread.Sleep(TimeSpan.FromMilliseconds(random.Next(1500)));              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,DoImportantWork,The following statement contains a magic number: Thread.Sleep(TimeSpan.FromSeconds(2));
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,DoImportantWork,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  int customerId = random.Next(100000);                    try                  {                      // simulate very infrequent important errors that might get "lost" (or go unnoticed) in a flooded log file.                      RxFloodQuickStartEventSource.Log.UpdatingAccountBalance(customerId);                        if (random.Next(100) < 15)                      {                          throw new DataException("Error updating account balance information. Something unexpected happened and needs to be fixed. Do not ignore this error!");                      }                  }                  catch (Exception ex)                  {                      RxFloodQuickStartEventSource.Log.UpdateAccountBalanceFailed(customerId' ex.ToString());                  }                    // sleep between work iterations.                  Thread.Sleep(TimeSpan.FromSeconds(5));              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,DoImportantWork,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  int customerId = random.Next(100000);                    try                  {                      // simulate very infrequent important errors that might get "lost" (or go unnoticed) in a flooded log file.                      RxFloodQuickStartEventSource.Log.UpdatingAccountBalance(customerId);                        if (random.Next(100) < 15)                      {                          throw new DataException("Error updating account balance information. Something unexpected happened and needs to be fixed. Do not ignore this error!");                      }                  }                  catch (Exception ex)                  {                      RxFloodQuickStartEventSource.Log.UpdateAccountBalanceFailed(customerId' ex.ToString());                  }                    // sleep between work iterations.                  Thread.Sleep(TimeSpan.FromSeconds(5));              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,DoImportantWork,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  int customerId = random.Next(100000);                    try                  {                      // simulate very infrequent important errors that might get "lost" (or go unnoticed) in a flooded log file.                      RxFloodQuickStartEventSource.Log.UpdatingAccountBalance(customerId);                        if (random.Next(100) < 15)                      {                          throw new DataException("Error updating account balance information. Something unexpected happened and needs to be fixed. Do not ignore this error!");                      }                  }                  catch (Exception ex)                  {                      RxFloodQuickStartEventSource.Log.UpdateAccountBalanceFailed(customerId' ex.ToString());                  }                    // sleep between work iterations.                  Thread.Sleep(TimeSpan.FromSeconds(5));              }
Magic Number,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,DoImportantWork,The following statement contains a magic number: while (!token.IsCancellationRequested)              {                  int customerId = random.Next(100000);                    try                  {                      // simulate very infrequent important errors that might get "lost" (or go unnoticed) in a flooded log file.                      RxFloodQuickStartEventSource.Log.UpdatingAccountBalance(customerId);                        if (random.Next(100) < 15)                      {                          throw new DataException("Error updating account balance information. Something unexpected happened and needs to be fixed. Do not ignore this error!");                      }                  }                  catch (Exception ex)                  {                      RxFloodQuickStartEventSource.Log.UpdateAccountBalanceFailed(customerId' ex.ToString());                  }                    // sleep between work iterations.                  Thread.Sleep(TimeSpan.FromSeconds(5));              }
Magic Number,QuickStart,RxFloodQuickStartEventSource,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\RxFloodQuickStartEventSource.cs,UnknownError,The following statement contains a magic number: if (this.IsEnabled()) this.WriteEvent(4' errorMessage);
Magic Number,QuickStart,RxFloodQuickStartEventSource,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\RxFloodQuickStartEventSource.cs,UpdateAccountBalanceFailed,The following statement contains a magic number: if (this.IsEnabled()) this.WriteEvent(5' customerId' errorMessage);
Magic Number,QuickStart,RxFloodQuickStartEventSource,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\RxFloodQuickStartEventSource.cs,UpdatingAccountBalance,The following statement contains a magic number: if (this.IsEnabled()) this.WriteEvent(6' customerId);
Missing Default,QuickStart,Program,C:\repos\mspnp_semantic-logging\quickstarts\SLAB RxFloodThrottle\CS\Program.cs,Main,The following switch statement is missing a default case: switch (key.Key)                  {                      case ConsoleKey.Spacebar:                          subscription.Dispose();                          if (currentlyThrottling)                          {                              Console.WriteLine("Filter toggled: event entries will not be throttled. In this scenario' if there is no post-filtering of events' important messages could go unnoticed.");                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = false;                                // Note that the events are sent directly to the console' without using Reactive Extensions.                              subscription = listener                                                  .LogToConsole(SingleLineFormatter);                          }                          else                          {                              Console.WriteLine("Filter toggled: event entries with ID {0} will be throttled for 15 seconds to prevent that type of entry to flood the log."' ThrottledEventId);                              Thread.Sleep(TimeSpan.FromSeconds(3));                              currentlyThrottling = true;                                // Note that the events are filtered first and then sent to the console' using Reactive Extensions.                              subscription = listener                                                  .ThrottleEventsWithEventId(TimeSpan.FromSeconds(15)' ThrottledEventId)                                                  .LogToConsole(SingleLineFormatter);                          }                                                    break;                        case ConsoleKey.Escape:                          cts.Cancel();                          break;                  }
