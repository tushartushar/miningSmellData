Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,AllSupportedTypes,The method has 6 parameters. Parameters: srtArg' intArg' lngArg' fltArg' enumArg' guidArg
Long Parameter List,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ObjectArrayEvent4,The method has 5 parameters. Parameters: arg0' arg1' arg2' arg3' arg4
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,,The length of the parameter InfoWithKeywordDiagnosticEventId is 32.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,,The length of the parameter ErrorWithKeywordDiagnosticEventId is 33.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,,The length of the parameter CriticalWithKeywordPageEventId is 30.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,,The length of the parameter InfoWithKeywordDiagnosticEventId is 32.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSrcForJson,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSrcForJson.cs,,The length of the parameter LogUsingMessageWithRelatedActivityIdEventID is 43.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSrcForXml,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSrcForXml.cs,,The length of the parameter LogUsingMessageWithRelatedActivityIdEventID is 43.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSource.cs,,The length of the parameter NonDefaultOpcodeNonDefaultVersionEventId is 40.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSource.cs,,The length of the parameter EventWithoutPayloadNorMessageId is 31.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSource.cs,,The length of the parameter ErrorWithKeywordDiagnosticEventId is 33.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSource.cs,,The length of the parameter CriticalWithKeywordPageEventId is 30.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNonTransient,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNonTransient.cs,,The length of the parameter NonDefaultOpcodeNonDefaultVersionEventId is 40.
Long Identifier,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNonTransient,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNonTransient.cs,,The length of the parameter EventWithoutPayloadNorMessageId is 31.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenExceptionOccursInCustomFormatter,The length of the statement  "                    StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.InvalidOperationException: Operation is not valid due to the current state of the object."); " is 170.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInJson,The length of the statement  "            using (var listener = new InMemoryEventListener() { Formatter = new JsonEventTextFormatter(EventTextFormatting.Indented) }) " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInXml,The length of the statement  "            Assert.AreEqual<long>((long)MockEventSrcForXml.Keywords.Errors' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 139.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgInXml,The length of the statement  "            Assert.AreEqual<long>((long)MockEventSrcForXml.Keywords.Errors' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 139.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageInXml,The length of the statement  "            Assert.AreEqual<long>((long)EventKeywords.None' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInXml,The length of the statement  "            Assert.AreEqual<long>((long)EventKeywords.None' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInFormattedMessageInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInFormattedMessageInXml,The length of the statement  "            Assert.AreEqual<int>(MockEventSrcForXml.LogUsingMessageFormatEventID' Convert.ToInt32(XmlFormattedEntry.EventId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInFormattedMessageInXml,The length of the statement  "            Assert.AreEqual<long>((long)EventKeywords.None' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInFormattedMessageInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithNullPayloadInFormattedMessageInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageFormatInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageFormatInXml,The length of the statement  "            Assert.AreEqual<int>(MockEventSrcForXml.LogUsingMessageFormatEventID' Convert.ToInt32(XmlFormattedEntry.EventId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageFormatInXml,The length of the statement  "            Assert.AreEqual<long>((long)EventKeywords.None' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageFormatInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageFormatInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageWithDateTimeFormatInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageWithDateTimeFormatInXml,The length of the statement  "            Assert.AreEqual<long>((long)EventKeywords.None' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageWithDateTimeFormatInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAndMessageWithDateTimeFormatInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' formatter.DateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 184.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAloneInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAloneInXml,The length of the statement  "            Assert.AreEqual<long>((long)EventKeywords.None' Int64.Parse(XmlFormattedEntry.Keywords.Value.Replace("0x"' string.Empty))); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAloneInXml,The length of the statement  "            Assert.AreEqual<int>(System.Diagnostics.Process.GetCurrentProcess().Id' Int32.Parse(XmlFormattedEntry.ProcessId.Value)); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadAloneInXml,The length of the statement  "            Assert.IsTrue(DateTime.TryParseExact(XmlFormattedEntry.TimeCreated.Attribute("SystemTime").Value' EventEntry.DefaultDateTimeFormat' CultureInfo.InvariantCulture' DateTimeStyles.None' out dt)); " is 192.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithActivityIdInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithActivityIdAndRelatedActivityIdInXml,The length of the statement  "            Assert.AreEqual<Guid>(EventSource.GetGuid(typeof(MockEventSrcForXml))' Guid.Parse(XmlFormattedEntry.Provider.Attribute("Guid").Value)); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithActivityIdAndRelatedActivityIdInXml,The length of the statement  "            Assert.AreEqual<Guid>(relatedActivityId' Guid.Parse(XmlFormattedEntry.Correlation.Attribute("RelatedActivityID").Value)); " is 121.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,Teardown,The length of the statement  "                AzureTableHelper.DeleteTable(System.Configuration.ConfigurationManager.AppSettings["StorageConnectionString"]' this.tableName); " is 127.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsWithDifferentLevels,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenNoPayload,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventHasAllValuesForAttribute,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenSourceIsEnabledAndDisabled,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventHasMultiplePayloads,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20)); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenTableNameIsNull,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenTableNameIsEmpty,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenTableNameIsInvalid,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(1)); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenTableNameIsInvalid,The length of the statement  "            StringAssert.Contains(ex.Message' "Table names may contain only alphanumeric characters' cannot begin with a numeric character and must be from 3 to 63 characters long."); " is 171.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The length of the statement  "                    listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20)); " is 131.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The length of the statement  "                    listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20)); " is 131.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferingWithMinimumNonDefaultInterval,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: minimumBufferingInterval); " is 130.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenInternalBufferCountIsExceededAndIntervalExceeded,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferIntervalExceedsAndLessEntriesThanBufferCount,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The length of the statement  "                    listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenSourceEnabledWitKeywordsAll,The length of the statement  "                   listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(10)); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenNotEnabledWithKeywordsAndEventWithSpecificKeywordIsRaised,The length of the statement  "                   listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(10)); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The length of the statement  "                   listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20)); " is 131.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The length of the statement  "                   listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20)); " is 131.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventWithTaskNameInAttributeIsRaised,The length of the statement  "                   listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(10)); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenOneListenerTwoSources,The length of the statement  "            StringAssert.Contains(dr2["Level"].ToString() + "|" + dr["Level"].ToString()' ((int)EventLevel.Informational).ToString()); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenWrongTableNameExceptionsAreRoutedToErrorEventSource,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "WrongTable"' bufferingCount: 200' bufferingInterval: TimeSpan.FromSeconds(1)); " is 147.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenWrongDbExceptionsAreRoutedToErrorEventSource,The length of the statement  "                    StringAssert.Contains(errorsListener.ToString()' @"Cannot open database ""Invalid"" requested by the login. The login failed."); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithMessageInAttribute,The length of the statement  "            StringAssert.Contains((string)dr["Payload"]' "{\r\n  \"arg0\": 10'\r\n  \"arg1\": \"stringarg1\"'\r\n  \"arg2\": 20'\r\n  \"arg3\": \"stringarg3\"'\r\n  \"arg4\": 30\r\n}"); " is 173.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsToMultipleListenersWithSameSource,The length of the statement  "                    listener1.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(30)); " is 124.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDisposeFlushesBufferedEvents,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 100); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The length of the statement  "                    listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000); " is 139.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The length of the statement  "                    listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000); " is 139.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The length of the statement  "                    listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1); " is 140.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The length of the statement  "                    listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1); " is 140.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The length of the statement  "                    listener.LogToSqlDatabase("WithBuffering_IntervalNotReached_MaxLogReached"' validConnectionString' bufferingInterval: longBufferingInterval' bufferingCount: 10); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The length of the statement  "                    listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000); " is 137.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The length of the statement  "                    listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 50); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The length of the statement  "                    listener.LogToSqlDatabase("WhenDefaultBufferingCountAndNonDefaultBufferInterval"' validConnectionString' bufferingInterval: bufferingInterval); " is 143.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The length of the statement  "            Assert.AreEqual(50' finalTable.Select("InstanceName = 'WhenDefaultBufferingCountAndNonDefaultBufferInterval'").Count()); " is 120.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The length of the statement  "                    listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1); " is 140.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The length of the statement  "                    listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1); " is 140.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The length of the statement  "                    listener1.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0); " is 154.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The length of the statement  "                    listener2.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0); " is 154.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The length of the statement  "                    listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount); " is 135.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenDefaultColorMappingForInformational,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenDefaultColorMappingForError,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenDefaultColorMappingForCritical,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenDefaultColorMappingForVerbose,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenOneSourceTwoListeners,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenOneListenerTwoSources,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenOneSourceTwoListenersConcurrently,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenPayloadHasDifferentTypes,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenPayloadHasDifferentTypesAndNull,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventHasRawMessageAndFormattedMessage,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenHighEventIds,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenLoggingErrorOCcurs,The length of the statement  "                    StringAssert.Contains(errorsListener.ToString()' "System.InvalidOperationException: Operation is not valid due to the current state of the object."); " is 149.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenSingleLineTextFormatter,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenSingleLineTextFormatter,The length of the statement  "            Assert.IsTrue(entry.Contains("\r\nEventId : 200\r\nKeywords : None\r\nLevel : Critical\r\nMessage : Functional Test\r\nOpcode : Info\r\nTask : 65334\r\nVersion : 0\r\nPayload : [message : This is to log critical in Console] \r\nEventName : CriticalInfo\r\nTimestamp :")); " is 271.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEnablingAllKeywords,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEnablingAllKeywords,The length of the statement  "            Assert.IsTrue(entry.Contains("\r\nEventId : 1020\r\nKeywords : 4\r\nLevel : Informational\r\nMessage : \r\nOpcode : Info\r\nTask : 2\r\nVersion : 0\r\nPayload : [message : Info with keyword Diagnostic] \r\nEventName : DbQueryInfo\r\nTimestamp : ")); " is 249.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenSourceEnabledAndNotSpecifyingKeyword,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenCriticalVerbosityForFormatter,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenDefaultFormatter,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenActivityId,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenActivityIdAndRelatedActivityId,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithTaskName,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithTaskName,The length of the statement  "            Assert.IsTrue(entry.Contains("\r\nEventId : 1500\r\nKeywords : 1\r\nLevel : Critical\r\nMessage : \r\nOpcode : Info\r\nTask : 1\r\nVersion : 0\r\nPayload : [message : Critical with taskname Page] \r\nEventName : PageInfo\r\nTimestamp : ")); " is 240.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithTaskNone,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithTaskNone,The length of the statement  "            Assert.IsTrue(entry.Contains("\r\nEventId : 200\r\nKeywords : None\r\nLevel : Critical\r\nMessage : Functional Test\r\nOpcode : Info\r\nTask : 65334\r\nVersion : 0\r\nPayload : [message : Critical with taskname or eventname as Critical] \r\nEventName : CriticalInfo\r\nTimestamp : ")); " is 285.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttribute,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttribute,The length of the statement  "            StringAssert.Contains(entry' "[arg0 : 1000] [arg1 : stringstringarg10] [arg2 : 2000] [arg3 : stringstringarg20] [arg4 : 3000]"); " is 128.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingJson,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingJson,The length of the statement  "            StringAssert.Contains(entry' "{\"arg0\":1000'\"arg1\":\"stringstringarg10\"'\"arg2\":2000'\"arg3\":\"stringstringarg20\"'\"arg4\":3000}"); " is 138.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingXml,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingXml,The length of the statement  "            StringAssert.Contains(entry' "<Data Name=\"arg0\">1000</Data><Data Name=\"arg1\">stringstringarg10</Data><Data Name=\"arg2\">2000</Data><Data Name=\"arg3\">stringstringarg20</Data><Data Name=\"arg4\">3000</Data>"); " is 214.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenProcessId,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenThreadId,The length of the statement  "            var entry = Regex.Split(consoleOutputInterceptor.Ouput' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)).SingleOrDefault(); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForSize,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2); " is 165.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForSize,The length of the statement  "                        logger.Informational("The quick brown fox jumps over the lazy dog.  And then the fox did it again and again for time #  " + msg.ToString()); " is 140.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollSizeMetAndRollIntervalProvidedNotMet,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSizeWithNegativeSize,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' -1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 163.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenLoggingBeforeRollOccurs,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsBeforeEvents,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 180.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsBeforeEvents,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,RollFileDateUsesFileCreationDate,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter()); " is 148.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollWithSizeAndRollIntervalNoneWithOverwrite,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Overwrite' RollInterval.None' new EventTextFormatter()); " is 130.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollWithSizeAndRollIntervalNoneWithOverwriteTimeStampIsNotMandatory,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1' string.Empty' RollFileExistsBehavior.Overwrite' RollInterval.None' new EventTextFormatter()); " is 155.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollOverwrite_TimestampNone_RollSizeNone_RollIntervalNone,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 0' string.Empty' RollFileExistsBehavior.Overwrite' RollInterval.None' new EventTextFormatter()); " is 155.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollOverwrite_Timestamp_RollSizeNone_RollIntervalNone,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Overwrite' RollInterval.None' new EventTextFormatter()); " is 149.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollInIncrementModeBasedOnInterval,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 10' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 181.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollInIncrementModeBasedOnInterval,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1" + ".log").Contains("Message 1")); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMinute,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 186.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMinute,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMinute,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log").Contains("Message 1")); " is 156.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsHour,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Hour' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 184.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsHour,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1" + ".log").Contains("Message 1")); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsDay,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 183.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsDay,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsDay,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log").Contains("Message 1")); " is 156.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsWeek,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Week' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 184.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsWeek,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsWeek,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log").Contains("Message 1")); " is 156.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMonth,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Month' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 185.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMonth,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMonth,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log").Contains("Message 1")); " is 156.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsYear,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Year' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 181.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsYear,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsYear,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log").Contains("Message 1")); " is 156.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollAtMidnight,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Midnight' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 185.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollAtMidnight,The length of the statement  "            Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log")); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollAtMidnight,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + dateTimeProvider.OverrideCurrentDateTime.Value.Year + ".1" + ".log").Contains("Message 1")); " is 156.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsMultipleTimes,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 10' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 184.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsMultipleTimes,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + "." + DateTime.Now.Year + ".2" + ".log").Contains("Message 3")); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollWithHyphenInTimestampPattern,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "MM-dd-yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 167.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2); " is 183.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The length of the statement  "                    var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2); " is 183.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFileSizeIsNegativeFilesAreNotDeleted,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' -2); " is 166.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesIsZeroFilesAreNotDeleted,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0); " is 165.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenLoggingEventsInDifferentLevels,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 2' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 162.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFileNameIsNull,The length of the statement  "                var subscription = listener.LogToRollingFlatFile(null' 2' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 177.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFileNameIsEmpty,The length of the statement  "                var subscription = listener.LogToRollingFlatFile(string.Empty' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 185.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenTimestampPatternIsEmpty,The length of the statement  "                        listener.LogToRollingFlatFile("TestForTimestampAsEmptyString.log"' 0' string.Empty' RollFileExistsBehavior.Increment' RollInterval.Midnight' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 199.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFilenameInvalidErrorOCcursEarly,The length of the statement  "                        listener.LogToRollingFlatFile(@">"' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 158.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFilenameInvalidErrorOCcursEarly1,The length of the statement  "                        listener.LogToRollingFlatFile(@"|"' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 158.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFilenameInvalidErrorOCcursEarly2,The length of the statement  "                        listener.LogToRollingFlatFile(@"..\"' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 160.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFilenameInvalidErrorOCcursEarly2,The length of the statement  "            Assert.AreEqual("A file name with a relative path is not allowed. Provide only the file name or the full path of the file."' excpectionThrown.Message); " is 151.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFormattingErrorExceptionIsRoutedToBuiltInSource,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' null' RollFileExistsBehavior.Increment' RollInterval.None' new MockFormatter(true)); " is 127.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFormattingErrorExceptionIsRoutedToBuiltInSource,The length of the statement  "                    StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.InvalidOperationException: Operation is not valid due to the current state of the object."); " is 170.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenKeywordsAreNotSpecifiedWithEnabled,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenActivityId,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenActivityIdAndRelatedActivityId,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenActivityIdAndRelatedActivityId,The length of the statement  "            Assert.IsTrue(File.ReadAllText(fileNameWithoutExtension + ".log").Contains("RelatedActivityId : " + relatedActivityId.ToString())); " is 131.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenTaskNameIsSpecifiedForEvent,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' eventTextFormatter); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenTaskNameIsSpecifiedForEvent,The length of the statement  "            StringAssert.Contains(File.ReadAllText(fileNameWithoutExtension + ".log")' "Task : 1\r\nVersion : 0\r\nPayload : [message : CriticalWithTaskName] \r\nEventName : PageSuspend"); " is 176.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenTaskNameIsSpecifiedForEvent,The length of the statement  "            StringAssert.Contains(File.ReadAllText(fileNameWithoutExtension + ".log")' "Task : 64512\r\nVersion : 0\r\nPayload : [message : InfoWithKeywordDiagnostic] \r\nEventName : InfoWithKeywordDiagnosticInfo"); " is 203.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayload,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0); " is 165.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayload,The length of the statement  "            Assert.IsTrue(readFile.Contains("[arg0 : 100] [arg1 : stringstringarg1] [arg2 : 200] [arg3 : stringstringarg2] [arg4 : 300]")); " is 127.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInJson,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' jsonFormatter' 0); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInJson,The length of the statement  "            Assert.IsTrue(readFile.Contains("{\"arg0\":1000'\"arg1\":\"stringstringarg10\"'\"arg2\":2000'\"arg3\":\"stringstringarg20\"'\"arg4\":3000}")); " is 142.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInXml,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' xmlFormatter' 0); " is 121.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInXml,The length of the statement  "            Assert.IsTrue(readFile.Contains("<Data Name=\"arg0\">1000</Data><Data Name=\"arg1\">stringstringarg10</Data><Data Name=\"arg2\">2000</Data><Data Name=\"arg3\">stringstringarg20</Data><Data Name=\"arg4\">3000</Data>")); " is 218.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenProcessId,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenThreadId,The length of the statement  "                    listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenFolderNameHasSpace,The length of the statement  "            var entries = Regex.Split(ReadFileWithoutLock(folderName + "\\" + fileName)' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)); " is 137.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonExistingFolder,The length of the statement  "            var entries = Regex.Split(ReadFileWithoutLock(folderName + "\\" + fileName)' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)); " is 137.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNoAccessFolder,The length of the statement  "                dirSecurity.AddAccessRule(new FileSystemAccessRule(System.Security.Principal.WindowsIdentity.GetCurrent().Name' FileSystemRights.FullControl' AccessControlType.Allow)); " is 168.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNoAccessFolder,The length of the statement  "                dirSecurityNew.AddAccessRule(new FileSystemAccessRule(System.Security.Principal.WindowsIdentity.GetCurrent().Name' FileSystemRights.ReadPermissions' AccessControlType.Deny)); " is 174.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNoAccessFolder,The length of the statement  "                    var entries = Regex.Split(ReadFileWithoutLock(folderfilePath)' formatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNoAccessFolder,The length of the statement  "                dirSecurity.AddAccessRule(new FileSystemAccessRule(System.Security.Principal.WindowsIdentity.GetCurrent().Name' FileSystemRights.FullControl' AccessControlType.Allow)); " is 168.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenUsingTextFormatter,The length of the statement  "            StringAssert.Contains(strLog' "\r\nEventId : 4\r\nKeywords : None\r\nLevel : Verbose\r\nMessage : Functional Test\r\nOpcode : Info\r\nTask : 1\r\nVersion : 1\r\nPayload : [message : Message 1] \r\nEventName : PageInfo\r\nTimestamp :"); " is 235.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenErrorInLogging,The length of the statement  "                    StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.InvalidOperationException: Operation is not valid due to the current state of the object."); " is 170.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenExceptionInFormatter,The length of the statement  "                    StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.ObjectDisposedException: Cannot write to a closed TextWriter."); " is 142.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenFilePathLengthExceedsMaxExceptionOccursEarly,The length of the statement  "                Assert.AreEqual(ex.Message' "The specified path' file name' or both are too long. The fully qualified file name must be less than 260 characters' and the directory name must be less than 248 characters."); " is 205.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenInvalidCharactersInFileName2,The length of the statement  "                Assert.AreEqual("A file name with a relative path is not allowed. Provide only the file name or the full path of the file."' ex.Message); " is 137.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenFileNameIsFolder,The length of the statement  "                Assert.AreEqual("A file name with a relative path is not allowed. Provide only the file name or the full path of the file."' ex.Message); " is 137.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenKeywordsAllIsEnabled,The length of the statement  "            var formatter = new EventTextFormatter(EventTextFormatter.DashSeparator' EventTextFormatter.DashSeparator' EventLevel.LogAlways); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenVerbosityThresholdIsSet,The length of the statement  "            Assert.IsTrue(fileText.Contains("\r\nEventId : 3\r\nKeywords : None\r\nLevel : Error\r\nMessage : Test Error\r\nOpcode : Stop\r\nTask : 2\r\nVersion : 3\r\nPayload : [message : Error message] \r\nEventName : DBQueryStop\r\nTimestamp :")); " is 238.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenVerbosityThresholdIsSet,The length of the statement  "            Assert.IsTrue(fileText.Contains("\r\nEventId : 2\r\nKeywords : None\r\nLevel : Critical\r\nMessage : Functional Test\r\nOpcode : Info\r\nTask : 2\r\nVersion : 0\r\nPayload : [message : Critical message] \r\nEventName : DBQueryInfo\r\nTimestamp :")); " is 249.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenVerbosityThresholdIsSet,The length of the statement  "            Assert.IsTrue(fileText.Contains("----------------------------------------\r\nEventId : 6' Level : Warning' Message : Test Warning' Payload : [message : Warning message] ' EventName : DBQuerySend' Timestamp :")); " is 211.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenEventWithTaskName,The length of the statement  "            var formatter = new EventTextFormatter(EventTextFormatter.DashSeparator' EventTextFormatter.DashSeparator' EventLevel.LogAlways); " is 129.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenEventWithTaskName,The length of the statement  "            Assert.IsTrue(fileText.Contains("Task : 1\r\nVersion : 0\r\nPayload : [message : CriticalWithTaskName] \r\nEventName : PageSuspend")); " is 134.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenEventWithTaskName,The length of the statement  "            Assert.IsTrue(fileText.Contains("Task : 64512\r\nVersion : 0\r\nPayload : [message : InfoWithKeywordDiagnostic] \r\nEventName : InfoWithKeywordDiagnosticInfo")); " is 161.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenUsingStaticCreate,The length of the statement  "            Assert.IsTrue(fileContents.Contains("------\r\nEventId : 1' Level : Informational' Message : ' Payload : [message : some message to flat file 0] ' EventName : InformationalInfo' Timestamp :")' "File contents: " + fileContents); " is 227.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInJson,The length of the statement  "            Assert.IsTrue(readFile.Contains("{\"arg0\":10'\"arg1\":\"stringarg1\"'\"arg2\":20'\"arg3\":\"stringarg3\"'\"arg4\":30}")); " is 122.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositonalParametersInMessageInXml,The length of the statement  "            Assert.IsTrue(readFile.Contains("<Data Name=\"arg0\">20</Data><Data Name=\"arg1\">stringarg1</Data><Data Name=\"arg2\">30</Data><Data Name=\"arg3\">stringarg3</Data><Data Name=\"arg4\">40</Data>")); " is 198.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenMultipleSourcesAreEnabledForSameListener,The length of the statement  "            var entries = Regex.Split(LogFileReader.ReadFileWithoutLock(fileName)' eventTextFormatter.Header).Where(c => !string.IsNullOrWhiteSpace(c)); " is 140.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,CustomFormatterWithWait,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\CustomFormatterWithWait.cs,FormatPayload,The length of the statement  "                    sb.AppendFormat(" [{0} : {1}]"' "Exception"' string.Format(CultureInfo.CurrentCulture' TextSerializationError' e.Message)); " is 123.
Long Statement,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockFormatter3,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockFormatter3.cs,FormatPayload,The length of the statement  "                    sb.AppendFormat(" [{0} : {1}]"' "Exception"' string.Format(CultureInfo.CurrentCulture' Microsoft.Practices.EnterpriseLibrary.SemanticLogging.Properties.Resources.TextSerializationError' e.Message)); " is 198.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenUnEscalatedTransactionRollsBack,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestScenarios,TestScenario,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestScenarios\TestScenario.cs,With1Listener,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestScenarios,TestScenario,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestScenarios\TestScenario.cs,With2Listeners,The method has an empty catch block.
Empty Catch Block,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestScenarios,TestScenario,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestScenarios\TestScenario.cs,With2Listeners,The method has an empty catch block.
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenUsingCustomSink,The following statement contains a magic number: Assert.AreEqual(4' (int)dr["Level"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenUsingCustomSink,The following statement contains a magic number: Assert.AreEqual(8' (int)dr["EventID"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenUsingCustomSinkAndMultipleEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToMockFlatFile(fileName' "==-==");                      listener.EnableEvents(logger' EventLevel.LogAlways' Keywords.All);                      logger.LogSomeMessage("some message");                      logger.LogSomeMessage("some message2");                      logger.LogSomeMessage("some message3");                        entries = FlatFileHelper.PollUntilTextEventsAreWritten(fileName' 3' "==-==");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenUsingCustomSinkAndMultipleEvents,The following statement contains a magic number: Assert.AreEqual<int>(3' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenMultipleCustomSinksSubscribing,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToMockFlatFile(fileName1' "==-==");                      listener.LogToFlatFile(fileName2' new EventTextFormatter("--==--"));                      listener.LogToSqlDatabase("testInstance"' validConnectionString' "Traces"' TimeSpan.Zero' 1);                      listener.LogToCustomSqlDatabase("testCustom"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways' Keywords.All);                      logger.LogSomeMessage(message);                      logger.LogSomeMessage(message2);                        entries = FlatFileHelper.PollUntilTextEventsAreWritten(fileName1' 2' "==-==");                      entries2 = FlatFileHelper.PollUntilTextEventsAreWritten(fileName2' 2' "--==--");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenMultipleCustomSinksSubscribing,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToMockFlatFile(fileName1' "==-==");                      listener.LogToFlatFile(fileName2' new EventTextFormatter("--==--"));                      listener.LogToSqlDatabase("testInstance"' validConnectionString' "Traces"' TimeSpan.Zero' 1);                      listener.LogToCustomSqlDatabase("testCustom"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways' Keywords.All);                      logger.LogSomeMessage(message);                      logger.LogSomeMessage(message2);                        entries = FlatFileHelper.PollUntilTextEventsAreWritten(fileName1' 2' "==-==");                      entries2 = FlatFileHelper.PollUntilTextEventsAreWritten(fileName2' 2' "--==--");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenMultipleCustomSinksSubscribing,The following statement contains a magic number: Assert.AreEqual<int>(2' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenMultipleCustomSinksSubscribing,The following statement contains a magic number: Assert.AreEqual<int>(2' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenMultipleCustomSinksSubscribing,The following statement contains a magic number: Assert.AreEqual(4' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenExceptinOccursInCustomFormater1,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToFlatFile(filename' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways' Keywords.All);                      logger.LogSomeMessage("testing");                        errorsListener.WaitEvents.Wait(3000);                      StringAssert.Contains(errorsListener.ToString()' "unhandled exception from formatter");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenExceptionOccursInCustomFormatter,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToFlatFile(fileName' new MockFormatter(true));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithPayload("payload1"' 100);                        StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.InvalidOperationException: Operation is not valid due to the current state of the object.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Extensibility,CustomSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Extensibility\CustomSinkFixture.cs,WhenUsingCustomFormatter,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        logger.EventWithPayload("payload1"' 100);                        entries = FlatFileHelper.PollUntilTextEventsAreWritten(fileName' 1' header);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInJson,The following statement contains a magic number: Assert.AreEqual(19' rawOutput.Split('\n').Length);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInJson,The following statement contains a magic number: Assert.AreEqual(2' entry.Payload.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMessageInJson,The following statement contains a magic number: Assert.AreEqual(2' entry.Payload.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithNoOpCodeNoKeywordsNoVersionNoMsgInJson,The following statement contains a magic number: logger.NoTaskNoOpCode1(1' 2' 3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithNoOpCodeNoKeywordsNoVersionNoMsgInJson,The following statement contains a magic number: logger.NoTaskNoOpCode1(1' 2' 3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,JsonEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\JsonEventTextFormatterFixture.cs,EventWithNoOpCodeNoKeywordsNoVersionNoMsgInJson,The following statement contains a magic number: Assert.AreEqual(3' entry.Payload.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInXml,The following statement contains a magic number: Assert.AreEqual(22' rawOutput.Split('\n').Length);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgIndentedInXml,The following statement contains a magic number: Assert.AreEqual(2' XmlFormattedEntry.Payload.Elements().Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,EventWithPayloadKeywrdsNoMsgInXml,The following statement contains a magic number: Assert.AreEqual(2' XmlFormattedEntry.Payload.Elements().Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Formatters,XmlEventTextFormatterFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Formatters\XmlEventTextFormatterFixture.cs,TwoEventsWithPayloadsAndMessageInXml,The following statement contains a magic number: Assert.AreEqual(2' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.SchemaReader,EventSourceSchemaReaderFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\SchemaReader\EventSourceSchemaReaderFixture.cs,EventWithNoTaskIsValid,The following statement contains a magic number: Assert.AreEqual("Test"' schemas[4].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsWithDifferentLevels,The following statement contains a magic number: var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsWithDifferentLevels,The following statement contains a magic number: Assert.AreEqual(3' events.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsWithDifferentLevels,The following statement contains a magic number: Assert.AreEqual(TestEventSource.CriticalEventId' events.ElementAt(2).EventId);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenLoggingMultipleMessages,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 300; n++)                      {                          logger.Informational("logging multiple messages " + n.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenLoggingMultipleMessages,The following statement contains a magic number: var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 300);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenLoggingMultipleMessages,The following statement contains a magic number: Assert.AreEqual(300' events.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventHasAllValuesForAttribute,The following statement contains a magic number: Assert.AreEqual(10001' events.ElementAt(0).EventId);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventHasMultiplePayloads,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithMultiplePayloads("TestPayload 1"' "TestPayload 2"' "TestPayload 3");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        // 100 events or more will be flushed by count before the buffering interval elapses                      var logTaskList = new List<Task>();                      for (int i = 0; i < 120; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait less than the buffering interval for the events to be written and assert                      // Only the first batch of 100 is written for each listener                      events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 200' waitFor: TimeSpan.FromSeconds(10));                      Assert.AreEqual(200' events.Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance1").Count());                      Assert.AreEqual(100' events.Where(e => e.InstanceName == "mytestinstance2").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 240' waitFor: TimeSpan.FromSeconds(2));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 240' waitFor: TimeSpan.FromSeconds(2));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: Assert.AreEqual(240' events.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: Assert.AreEqual(120' events.Where(e => e.InstanceName == "mytestinstance1").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBatchSizeIsExceeded,The following statement contains a magic number: Assert.AreEqual(120' events.Where(e => e.InstanceName == "mytestinstance2").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferingWithMinimumNonDefaultInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      // Minimum buffering interval is 500 ms                      var minimumBufferingInterval = TimeSpan.FromMilliseconds(500);                      listener.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: minimumBufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical message");                      }                        // Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(3)).Wait();                      var eventsCount = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(10' eventsCount);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferingWithMinimumNonDefaultInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      // Minimum buffering interval is 500 ms                      var minimumBufferingInterval = TimeSpan.FromMilliseconds(500);                      listener.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: minimumBufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical message");                      }                        // Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(3)).Wait();                      var eventsCount = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(10' eventsCount);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferingWithMinimumNonDefaultInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      // Minimum buffering interval is 500 ms                      var minimumBufferingInterval = TimeSpan.FromMilliseconds(500);                      listener.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: minimumBufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical message");                      }                        // Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(3)).Wait();                      var eventsCount = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(10' eventsCount);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferingWithMinimumNonDefaultInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      // Minimum buffering interval is 500 ms                      var minimumBufferingInterval = TimeSpan.FromMilliseconds(500);                      listener.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: minimumBufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical message");                      }                        // Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(3)).Wait();                      var eventsCount = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(10' eventsCount);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferingWithMinimumNonDefaultInterval,The following statement contains a magic number: Assert.AreEqual(10' eventsCountFinal);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Pre-condition: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical Message");                      }                        // Event must not be written before the interval has elapsed                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Pre-condition: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical Message");                      }                        // Event must not be written before the interval has elapsed                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Pre-condition: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical Message");                      }                        // Event must not be written before the interval has elapsed                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Pre-condition: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical Message");                      }                        // Event must not be written before the interval has elapsed                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Pre-condition: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical Message");                      }                        // Event must not be written before the interval has elapsed                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenUsingNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Pre-condition: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        for (int i = 0; i < 10; i++)                      {                          logger.Critical("Critical Message");                      }                        // Event must not be written before the interval has elapsed                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(0' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenInternalBufferCountIsExceededAndIntervalExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // When reachiing 100 events buffer will be flushed                      for (int i = 0; i < 110; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse                      Task.Delay(bufferingInterval).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(100' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenInternalBufferCountIsExceededAndIntervalExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // When reachiing 100 events buffer will be flushed                      for (int i = 0; i < 110; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse                      Task.Delay(bufferingInterval).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(100' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenInternalBufferCountIsExceededAndIntervalExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(5);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // When reachiing 100 events buffer will be flushed                      for (int i = 0; i < 110; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse                      Task.Delay(bufferingInterval).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(100' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenInternalBufferCountIsExceededAndIntervalExceeded,The following statement contains a magic number: Assert.AreEqual(110' eventsCountFinal);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferIntervalExceedsAndLessEntriesThanBufferCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 100 events or more will be flushed by count before the buffering interval elapses                      for (int i = 0; i < 90; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse and allow time for events to be written                      Task.Delay(bufferingInterval.Add(TimeSpan.FromSeconds(5))).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(90' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferIntervalExceedsAndLessEntriesThanBufferCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 100 events or more will be flushed by count before the buffering interval elapses                      for (int i = 0; i < 90; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse and allow time for events to be written                      Task.Delay(bufferingInterval.Add(TimeSpan.FromSeconds(5))).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(90' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferIntervalExceedsAndLessEntriesThanBufferCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 100 events or more will be flushed by count before the buffering interval elapses                      for (int i = 0; i < 90; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse and allow time for events to be written                      Task.Delay(bufferingInterval.Add(TimeSpan.FromSeconds(5))).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(90' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenBufferIntervalExceedsAndLessEntriesThanBufferCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 100 events or more will be flushed by count before the buffering interval elapses                      for (int i = 0; i < 90; i++)                      {                          logger.Informational("Message1");                      }                        // Wait for buffer interval to elapse and allow time for events to be written                      Task.Delay(bufferingInterval.Add(TimeSpan.FromSeconds(5))).Wait();                      var events = AzureTableHelper.GetEventsCount(connectionString' this.tableName);                      Assert.AreEqual(90' events);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: var bufferingInterval = TimeSpan.FromSeconds(6);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: var insertionInterval = TimeSpan.FromSeconds(2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 1st interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 1st interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 2nd interval: start                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 2nd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 2nd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 3rd interval: start                        // 2nd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(20' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 3rd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 3rd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 4th interval: start                        // 3rd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // No errors should have been reported                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 1st interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 1st interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 2nd interval: start                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 2nd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 2nd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 3rd interval: start                        // 2nd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(20' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 3rd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 3rd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 4th interval: start                        // 3rd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // No errors should have been reported                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 1st interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 1st interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 2nd interval: start                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 2nd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 2nd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 3rd interval: start                        // 2nd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(20' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 3rd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 3rd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 4th interval: start                        // 3rd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // No errors should have been reported                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 1st interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 1st interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 2nd interval: start                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 2nd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 2nd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 3rd interval: start                        // 2nd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(20' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 3rd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 3rd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 4th interval: start                        // 3rd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // No errors should have been reported                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 1st interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 1st interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 2nd interval: start                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 2nd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 2nd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 3rd interval: start                        // 2nd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(20' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 3rd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 3rd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 4th interval: start                        // 3rd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // No errors should have been reported                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.Informational);                        // 1st interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 1st interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 2nd interval: start                        // 1st interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(10' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 2nd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 2nd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 3rd interval: start                        // 2nd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(20' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // 3rd interval: Log 10 events                      for (int i = 0; i < 10; i++)                      {                          logger.Informational("Message1");                      }                        // 3rd interval: Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      // 4th interval: start                        // 3rd interval: Wait for the events to be written and assert                      Task.Delay(insertionInterval).Wait();                      Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));                        // No errors should have been reported                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventsInThreeConsecutiveIntervals,The following statement contains a magic number: Assert.AreEqual(30' AzureTableHelper.GetEventsCount(connectionString' this.tableName));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenSourceEnabledWitKeywordsAll,The following statement contains a magic number: TestScenario.With1Listener(                 logger'                 listener =>                 {                     listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(10));                     listener.EnableEvents(logger' EventLevel.LogAlways' Keywords.All);                     logger.ErrorWithKeywordDiagnostic("Error with keyword Diagnostic");                     logger.CriticalWithKeywordPage("Critical with keyword Page");                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenSourceEnabledWitKeywordsAll,The following statement contains a magic number: var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenSourceEnabledWitKeywordsAll,The following statement contains a magic number: Assert.AreEqual(2' events.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenNotEnabledWithKeywordsAndEventWithSpecificKeywordIsRaised,The following statement contains a magic number: TestScenario.With1Listener(                 logger'                 listener =>                 {                     listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(10));                     listener.EnableEvents(logger' EventLevel.LogAlways);                     logger.ErrorWithKeywordDiagnostic("Error with keyword EventlogClassic");                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The following statement contains a magic number: TestScenario.With2Listeners(                 logger'                 (listener1' listener2) =>                 {                     listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener1.EnableEvents(logger' EventLevel.LogAlways);                     listener2.EnableEvents(logger' EventLevel.LogAlways);                     var logTaskList = new List<Task>();                     for (int i = 0; i < 105; i++)                     {                         var messageNumber = i;                         logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                     }                       Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                     listener1.Dispose();                     listener2.Dispose();                       var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 600);                     Assert.AreEqual(210' events.Count());                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The following statement contains a magic number: TestScenario.With2Listeners(                 logger'                 (listener1' listener2) =>                 {                     listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener1.EnableEvents(logger' EventLevel.LogAlways);                     listener2.EnableEvents(logger' EventLevel.LogAlways);                     var logTaskList = new List<Task>();                     for (int i = 0; i < 105; i++)                     {                         var messageNumber = i;                         logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                     }                       Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                     listener1.Dispose();                     listener2.Dispose();                       var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 600);                     Assert.AreEqual(210' events.Count());                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The following statement contains a magic number: TestScenario.With2Listeners(                 logger'                 (listener1' listener2) =>                 {                     listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener1.EnableEvents(logger' EventLevel.LogAlways);                     listener2.EnableEvents(logger' EventLevel.LogAlways);                     var logTaskList = new List<Task>();                     for (int i = 0; i < 105; i++)                     {                         var messageNumber = i;                         logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                     }                       Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                     listener1.Dispose();                     listener2.Dispose();                       var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 600);                     Assert.AreEqual(210' events.Count());                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The following statement contains a magic number: TestScenario.With2Listeners(                 logger'                 (listener1' listener2) =>                 {                     listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener1.EnableEvents(logger' EventLevel.LogAlways);                     listener2.EnableEvents(logger' EventLevel.LogAlways);                     var logTaskList = new List<Task>();                     for (int i = 0; i < 105; i++)                     {                         var messageNumber = i;                         logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                     }                       Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                     listener1.Dispose();                     listener2.Dispose();                       var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 600);                     Assert.AreEqual(210' events.Count());                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The following statement contains a magic number: TestScenario.With2Listeners(                 logger'                 (listener1' listener2) =>                 {                     listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener1.EnableEvents(logger' EventLevel.LogAlways);                     listener2.EnableEvents(logger' EventLevel.LogAlways);                     var logTaskList = new List<Task>();                     for (int i = 0; i < 105; i++)                     {                         var messageNumber = i;                         logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                     }                       Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                     listener1.Dispose();                     listener2.Dispose();                       var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 600);                     Assert.AreEqual(210' events.Count());                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenListenerIsDisposed,The following statement contains a magic number: TestScenario.With2Listeners(                 logger'                 (listener1' listener2) =>                 {                     listener1.LogToWindowsAzureTable("mytestinstance1"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener2.LogToWindowsAzureTable("mytestinstance2"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(20));                     listener1.EnableEvents(logger' EventLevel.LogAlways);                     listener2.EnableEvents(logger' EventLevel.LogAlways);                     var logTaskList = new List<Task>();                     for (int i = 0; i < 105; i++)                     {                         var messageNumber = i;                         logTaskList.Add(Task.Run(() => logger.Critical(messageNumber + "Critical message")));                     }                       Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                     listener1.Dispose();                     listener2.Dispose();                       var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 600);                     Assert.AreEqual(210' events.Count());                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventWithTaskNameInAttributeIsRaised,The following statement contains a magic number: TestScenario.With1Listener(                 logger'                 listener =>                 {                     listener.LogToWindowsAzureTable("mytestinstance"' connectionString' this.tableName' bufferingInterval: TimeSpan.FromSeconds(10));                     listener.EnableEvents(logger' EventLevel.LogAlways' Keywords.All);                     logger.CriticalWithTaskName("Critical with task name");                     logger.CriticalWithKeywordPage("Critical with no task name");                 });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventWithTaskNameInAttributeIsRaised,The following statement contains a magic number: var events = AzureTableHelper.PollForEvents(connectionString' this.tableName' 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,WindowsAzureTableSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\WindowsAzureTableSinkFixture.cs,WhenEventWithTaskNameInAttributeIsRaised,The following statement contains a magic number: Assert.AreEqual(2' events.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErrorEvent,The following statement contains a magic number: Assert.AreEqual(3' (int)dr["EventID"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenCriticalEvent,The following statement contains a magic number: Assert.AreEqual(2' (int)dr["EventID"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInformationalEventWithOpCode,The following statement contains a magic number: Assert.AreEqual(7' (int)dr["OpCode"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 9; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Informational(messageNumber + "Message ")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 9; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() => logger.Informational(messageNumber + "Message ")));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEvents,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 9);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEvents,The following statement contains a magic number: Assert.AreEqual(dt.Rows.Count' 9);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEvents,The following statement contains a magic number: Assert.AreEqual(result.Length' 9);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEvents,The following statement contains a magic number: n < 9
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: TestScenario.With1Listener(                  new EventSource[] { logger' loggerNoTask }'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.Critical);                      listener.EnableEvents(loggerNoTask' EventLevel.Informational);                      string criticalMessage = string.Concat("CriticalMessage");                      string infoMessage = string.Concat("InfoMessage");                      var logTaskList = new List<Task>();                      for (int i = 0; i < 9; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + criticalMessage);                              loggerNoTask.Informational(messageNumber + infoMessage);                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: TestScenario.With1Listener(                  new EventSource[] { logger' loggerNoTask }'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.Critical);                      listener.EnableEvents(loggerNoTask' EventLevel.Informational);                      string criticalMessage = string.Concat("CriticalMessage");                      string infoMessage = string.Concat("InfoMessage");                      var logTaskList = new List<Task>();                      for (int i = 0; i < 9; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + criticalMessage);                              loggerNoTask.Informational(messageNumber + infoMessage);                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 18);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: Assert.AreEqual(18' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: Assert.AreEqual(result1.Length' 9);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: n < 9
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: Assert.AreEqual(result1.Length' 9);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsFromMultipleSources,The following statement contains a magic number: n < 9
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMultipleEventsUsingSingleListener,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 300; n++)                      {                          logger.Informational("logging multiple messages " + n.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMultipleEventsUsingSingleListener,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 300);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMultipleEventsUsingSingleListener,The following statement contains a magic number: Assert.AreEqual(300' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMultipleEventsUsingSingleListener,The following statement contains a magic number: StringAssert.Contains(dt.Rows[299]["payload"].ToString()' "logging multiple messages 299");
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenOneSourceTwoListeners,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenOneSourceTwoListeners,The following statement contains a magic number: Assert.AreEqual(3' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenOneListenerTwoSources,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenOneListenerTwoSources,The following statement contains a magic number: Assert.IsTrue(dt.Rows.Count == 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithNoTaskInSchema,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.NoTaskSpecfied1(1' 2' 3);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithNoTaskInSchema,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.NoTaskSpecfied1(1' 2' 3);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithNoOpCodeNoKeywordsNoVersionNoMessage,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.NoTaskNoOpCode1(1' 2' 3);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithNoOpCodeNoKeywordsNoVersionNoMessage,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.NoTaskNoOpCode1(1' 2' 3);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenActivityIdAndRelatedActivityId,The following statement contains a magic number: Assert.AreEqual(14' (int)dr["EventID"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMaxLengthPayload,The following statement contains a magic number: string largeMessage = new string('*'' 3900);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithDifferentTypesPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.DifferentTypes("testString"' 500000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithPayloadWithSupportedTypes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.AllSupportedTypes(Int16.MinValue' Int32.MaxValue' Int64.MaxValue' 10 / 3' TestEnum.value1' guidArg);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithPayloadWithSupportedTypes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.AllSupportedTypes(Int16.MinValue' Int32.MaxValue' Int64.MaxValue' 10 / 3' TestEnum.value1' guidArg);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithPayloadDifferentTypesAndNull,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.DifferentTypes(null' 500000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithEnumsInPayload,The following statement contains a magic number: Assert.AreEqual(2' (int)dr["EventID"]);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenAmbientTransactionIsDisposed,The following statement contains a magic number: Assert.IsTrue(dt.Rows.Count == 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSingleLineTextFormatter,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 5);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSingleLineTextFormatter,The following statement contains a magic number: Assert.AreEqual(dt.Rows.Count' 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenWrongTableNameExceptionsAreRoutedToErrorEventSource,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "WrongTable"' bufferingCount: 200' bufferingInterval: TimeSpan.FromSeconds(1));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 200; n++)                      {                          logger.Informational("Message: " + n);                      }                        errorsListener.WaitEvents.Wait(2000);                      StringAssert.Contains(errorsListener.ToString()' "Cannot access destination table 'WrongTable'.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenWrongTableNameExceptionsAreRoutedToErrorEventSource,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "WrongTable"' bufferingCount: 200' bufferingInterval: TimeSpan.FromSeconds(1));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 200; n++)                      {                          logger.Informational("Message: " + n);                      }                        errorsListener.WaitEvents.Wait(2000);                      StringAssert.Contains(errorsListener.ToString()' "Cannot access destination table 'WrongTable'.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenWrongTableNameExceptionsAreRoutedToErrorEventSource,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "WrongTable"' bufferingCount: 200' bufferingInterval: TimeSpan.FromSeconds(1));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 200; n++)                      {                          logger.Informational("Message: " + n);                      }                        errorsListener.WaitEvents.Wait(2000);                      StringAssert.Contains(errorsListener.ToString()' "Cannot access destination table 'WrongTable'.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenWrongDbExceptionsAreRoutedToErrorEventSource,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' invalidConnectionString' bufferingCount: 1);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                        errorsListener.WaitEvents.Wait(1000);                      StringAssert.Contains(errorsListener.ToString()' @"Cannot open database ""Invalid"" requested by the login. The login failed.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEnablingKeywordsAll,The following statement contains a magic number: var dt = DatabaseHelper.GetLoggedTable(validConnectionString' 5);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEnablingKeywordsAll,The following statement contains a magic number: Assert.AreEqual(2' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenUnEscalatedTransactionRollsBack,The following statement contains a magic number: Assert.AreEqual(2' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenUnEscalatedTransactionSucceeds,The following statement contains a magic number: Assert.AreEqual(2' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithMessageInAttribute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithMessageInAttribute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenEventWithMessageInAttribute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsToMultipleListenersWithSameSource,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(30));                      listener2.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 1000; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsToMultipleListenersWithSameSource,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(30));                      listener2.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 1000; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsToMultipleListenersWithSameSource,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(30));                      listener2.LogToSqlDatabase("WaitFor_BufferingInterval"' validConnectionString);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 1000; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsToMultipleListenersWithSameSource,The following statement contains a magic number: Assert.AreEqual(2000' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("MultipleThreads"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(20));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var threads = new System.Threading.Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new System.Threading.Thread(new System.Threading.ThreadStart(() =>                              {                                  for (int j = 0; j < 50; j++)                                  {                                      logger.Critical("Test MultipleThreads");                                  }                              }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("MultipleThreads"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(20));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var threads = new System.Threading.Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new System.Threading.Thread(new System.Threading.ThreadStart(() =>                              {                                  for (int j = 0; j < 50; j++)                                  {                                      logger.Critical("Test MultipleThreads");                                  }                              }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("MultipleThreads"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(20));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var threads = new System.Threading.Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new System.Threading.Thread(new System.Threading.ThreadStart(() =>                              {                                  for (int j = 0; j < 50; j++)                                  {                                      logger.Critical("Test MultipleThreads");                                  }                              }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("MultipleThreads"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(20));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var threads = new System.Threading.Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new System.Threading.Thread(new System.Threading.ThreadStart(() =>                              {                                  for (int j = 0; j < 50; j++)                                  {                                      logger.Critical("Test MultipleThreads");                                  }                              }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("MultipleThreads"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(20));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      var threads = new System.Threading.Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new System.Threading.Thread(new System.Threading.ThreadStart(() =>                              {                                  for (int j = 0; j < 50; j++)                                  {                                      logger.Critical("Test MultipleThreads");                                  }                              }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: var dt = DatabaseHelper.PollUntilEventsAreWritten(validConnectionString' 500);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenConcurrentEventsSameListener,The following statement contains a magic number: Assert.AreEqual<int>(500' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDisposeFlushesBufferedEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 100);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 10; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDisposeFlushesBufferedEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 100);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 10; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDisposeFlushesBufferedEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 100);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 10; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDisposeFlushesBufferedEvents,The following statement contains a magic number: Assert.AreEqual(10' dt.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(1);                      listener1.LogToSqlDatabase("WithMinBufferingInterval1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener2.LogToSqlDatabase("WithMinBufferingInterval2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                      var logTaskList = new List<Task>();                      for (int i = 0; i < 50; i++)                      {                          var messageNumber = i;                          logTaskList.Add(Task.Run(() =>                          {                              logger.Critical(messageNumber + "Critical message");                          }));                      }                        Task.WaitAll(logTaskList.ToArray()' TimeSpan.FromSeconds(10));                        // Wait for the buffer to flush at end of interval                      Task.Delay(TimeSpan.FromSeconds(2)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(100' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval1'").Count());                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: Assert.AreEqual(100' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Select("InstanceName = 'WithMinBufferingInterval1'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenSmallBufferingInterval,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Select("InstanceName = 'WithMinBufferingInterval2'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: TimeSpan.FromSeconds(10)' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: Assert.AreEqual(4' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: Assert.AreEqual(2' finalTable.Select("InstanceName = 'WithMinBufferingCount1'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenMinBufferingCount,The following statement contains a magic number: Assert.AreEqual(2' finalTable.Select("InstanceName = 'WithMinBufferingCount2'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var longBufferingInterval = TimeSpan.FromSeconds(30);                      listener.LogToSqlDatabase("WithBuffering_IntervalNotReached_MaxLogReached"' validConnectionString' bufferingInterval: longBufferingInterval' bufferingCount: 10);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 15; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the first 10 buffered events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(10' dt.Rows.Count);                      Assert.AreEqual(10' dt.Select("InstanceName = 'WithBuffering_IntervalNotReached_MaxLogReached'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var longBufferingInterval = TimeSpan.FromSeconds(30);                      listener.LogToSqlDatabase("WithBuffering_IntervalNotReached_MaxLogReached"' validConnectionString' bufferingInterval: longBufferingInterval' bufferingCount: 10);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 15; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the first 10 buffered events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(10' dt.Rows.Count);                      Assert.AreEqual(10' dt.Select("InstanceName = 'WithBuffering_IntervalNotReached_MaxLogReached'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var longBufferingInterval = TimeSpan.FromSeconds(30);                      listener.LogToSqlDatabase("WithBuffering_IntervalNotReached_MaxLogReached"' validConnectionString' bufferingInterval: longBufferingInterval' bufferingCount: 10);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 15; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the first 10 buffered events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(10' dt.Rows.Count);                      Assert.AreEqual(10' dt.Select("InstanceName = 'WithBuffering_IntervalNotReached_MaxLogReached'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var longBufferingInterval = TimeSpan.FromSeconds(30);                      listener.LogToSqlDatabase("WithBuffering_IntervalNotReached_MaxLogReached"' validConnectionString' bufferingInterval: longBufferingInterval' bufferingCount: 10);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 15; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the first 10 buffered events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(10' dt.Rows.Count);                      Assert.AreEqual(10' dt.Select("InstanceName = 'WithBuffering_IntervalNotReached_MaxLogReached'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var longBufferingInterval = TimeSpan.FromSeconds(30);                      listener.LogToSqlDatabase("WithBuffering_IntervalNotReached_MaxLogReached"' validConnectionString' bufferingInterval: longBufferingInterval' bufferingCount: 10);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 15; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the first 10 buffered events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(10' dt.Rows.Count);                      Assert.AreEqual(10' dt.Select("InstanceName = 'WithBuffering_IntervalNotReached_MaxLogReached'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: Assert.AreEqual(15' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalNotReachedBufferingCountExceeded,The following statement contains a magic number: Assert.AreEqual(15' finalTable.Select("InstanceName = 'WithBuffering_IntervalNotReached_MaxLogReached'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(4);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Before buffer interval is exceeded there should be no events written                      Assert.AreEqual(0' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(4);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Before buffer interval is exceeded there should be no events written                      Assert.AreEqual(0' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(4);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Before buffer interval is exceeded there should be no events written                      Assert.AreEqual(0' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(4);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Before buffer interval is exceeded there should be no events written                      Assert.AreEqual(0' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(4);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 1000);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Before buffer interval is exceeded there should be no events written                      Assert.AreEqual(0' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                        var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferIntervalIsReachedButBufferingCountNotExceeded,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Select("InstanceName = 'WithMinBufferingInterval'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalAndBufferingCountIsExceeded,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Select("InstanceName = 'WithMinBufferingInterval'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WhenDefaultBufferingCountAndNonDefaultBufferInterval"' validConnectionString' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WhenDefaultBufferingCountAndNonDefaultBufferInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WhenDefaultBufferingCountAndNonDefaultBufferInterval"' validConnectionString' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WhenDefaultBufferingCountAndNonDefaultBufferInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WhenDefaultBufferingCountAndNonDefaultBufferInterval"' validConnectionString' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WhenDefaultBufferingCountAndNonDefaultBufferInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener.LogToSqlDatabase("WhenDefaultBufferingCountAndNonDefaultBufferInterval"' validConnectionString' bufferingInterval: bufferingInterval);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WhenDefaultBufferingCountAndNonDefaultBufferInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenDefaultBufferingCountAndNonDefaultBufferInterval,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Select("InstanceName = 'WhenDefaultBufferingCountAndNonDefaultBufferInterval'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenNonDefaultBufferingCountAndDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenNonDefaultBufferingCountAndDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenNonDefaultBufferingCountAndDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenNonDefaultBufferingCountAndDefaultBufferInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToSqlDatabase("WithMinBufferingInterval"' validConnectionString' bufferingCount: 50);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // When reaching 50 events the buffer will be flushed                      for (int i = 0; i < 50; i++)                      {                          logger.Critical(i + "Critical message");                      }                        // Wait for the events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(50' dt.Rows.Count);                      Assert.AreEqual(50' dt.Select("InstanceName = 'WithMinBufferingInterval'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenNonDefaultBufferingCountAndDefaultBufferInterval,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenNonDefaultBufferingCountAndDefaultBufferInterval,The following statement contains a magic number: Assert.AreEqual(50' finalTable.Select("InstanceName = 'WithMinBufferingInterval'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToSqlDatabase("WithMinBufferingCount1"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1);                      listener2.LogToSqlDatabase("WithMinBufferingCount2"' validConnectionString' bufferingInterval: Timeout.InfiniteTimeSpan' bufferingCount: 1);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the events to be written to the database in each listener                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WithMinBufferingCount2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The following statement contains a magic number: Assert.AreEqual(4' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The following statement contains a magic number: Assert.AreEqual(2' finalTable.Select("InstanceName = 'WithMinBufferingCount1'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenInfiniteBufferingIntervalAndMinBufferingCount,The following statement contains a magic number: Assert.AreEqual(2' finalTable.Select("InstanceName = 'WithMinBufferingCount2'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener1.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener2.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener1.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener2.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener1.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener2.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      var bufferingInterval = TimeSpan.FromSeconds(2);                      listener1.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener2.LogToSqlDatabase("WhenBufferIntervalIsZeroAndCountIsExceeded2"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: 0);                      listener1.EnableEvents(logger' EventLevel.LogAlways);                      listener2.EnableEvents(logger' EventLevel.LogAlways);                        logger.Critical("Critical message 1");                      logger.Critical("Critical message 2");                        // Wait for the buffer to flush at end of interval                      Task.Delay(bufferingInterval).Wait();                      var dt = DatabaseHelper.GetLoggedTable(validConnectionString);                      Assert.AreEqual(4' dt.Rows.Count);                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded1'").Count());                      Assert.AreEqual(2' dt.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded2'").Count());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: Assert.AreEqual(4' finalTable.Rows.Count);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: Assert.AreEqual(2' finalTable.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded1'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenBufferingIntervalIsReachedAndBufferingCountIsZero,The following statement contains a magic number: Assert.AreEqual(2' finalTable.Select("InstanceName = 'WhenBufferIntervalIsZeroAndCountIsExceeded2'").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,WhenErraticEventsInDifferentBufferIntervals,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' "Traces"' TimeSpan.FromSeconds(3));                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 0; i < 20; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(20' result);                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      for (int i = 20; i < 50; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result2 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(50' result2);                        for (int i = 50; i < 100; i++)                      {                          logger.InformationalNoMessage("test" + i);                      }                        Task.Delay(TimeSpan.FromSeconds(5)).Wait();                      var result3 = DatabaseHelper.GetRowCount(validConnectionString);                      Assert.AreEqual<int>(100' result3);                      errorsListener.WaitEvents.Wait(10000);                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TimeSpan bufferingInterval = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: int bufferCount = 10;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TimeSpan bufferingInterval = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: int bufferCount = 10;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Wait for new next interval                      Task.Delay(bufferingInterval).Wait();                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingIntervalNextByBufferingCount,The following statement contains a magic number: Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TimeSpan bufferingInterval = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: int bufferCount = 10;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                        listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                        listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                        listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                        listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                        listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                        listener.EnableEvents(logger' EventLevel.LogAlways);                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingCountNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: Assert.AreEqual(30' DatabaseHelper.GetRowCount(validConnectionString));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TimeSpan bufferingInterval = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: int bufferCount = 10;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(10' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingIntervalNextByBufferingInterval,The following statement contains a magic number: Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TimeSpan bufferingInterval = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: int bufferCount = 10;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // Insert new events in next interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                      Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingInterval,The following statement contains a magic number: Assert.AreEqual(20' DatabaseHelper.GetRowCount(validConnectionString));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TimeSpan bufferingInterval = TimeSpan.FromSeconds(4);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: int bufferCount = 10;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToSqlDatabase("mytestinstance1"' validConnectionString' bufferingInterval: bufferingInterval' bufferingCount: bufferCount);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        // Insert new events in this interval                      for (int i = 0; i < 5; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for interval to flush                      Task.Delay(bufferingInterval).Wait();                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(5' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(15' DatabaseHelper.GetRowCount(validConnectionString));                        // The first 10 events reach the buffer size and should be flushed before interval ends                      for (int i = 0; i < 10; i++)                      {                          logger.MaxValues("test"' long.MaxValue' int.MaxValue);                      }                        // Wait for events to be written                      Task.Delay(TimeSpan.FromSeconds(1)).Wait();                      Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));                        errorsListener.WaitEvents.Wait(TimeSpan.FromSeconds(1));                      Assert.AreEqual(string.Empty' errorsListener.ToString());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,DatabaseSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\DatabaseSinkFixture.cs,FirstFlushByBufferingIntervalNextByBufferingCountNextByBufferingCount,The following statement contains a magic number: Assert.AreEqual(25' DatabaseHelper.GetRowCount(validConnectionString));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenMultipleEvents,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.EnableEvents(logger' EventLevel.LogAlways);                      listener.LogToConsole();                      for (int n = 0; n < 300; n++)                      {                          logger.Informational("Some message to console " + n);                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenOneSourceTwoListenersConcurrently,The following statement contains a magic number: TestScenario.With2Listeners(                  logger'                  (listener1' listener2) =>                  {                      listener1.LogToConsole();                      listener2.LogToConsole();                      int maxLoggedEntries = 9;                      string criticalMessage = string.Concat("CriticalMessage");                      string infoMessage = string.Concat("InfoMessage");                      listener1.EnableEvents(logger' EventLevel.Critical);                      listener2.EnableEvents(logger' EventLevel.Critical);                      Parallel.Invoke(Enumerable.Range(0' maxLoggedEntries).Select(i =>                      new Action(() =>                      {                          logger.Critical(i + criticalMessage);                      })).ToArray());                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenPayloadHasDifferentTypes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole();                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.DifferentTypes("testString"' 500000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenPayloadHasDifferentTypesAndNull,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole();                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.DifferentTypes(null' 500000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenLoggingErrorOCcurs,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToConsole(new MockFormatter(true));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithPayload("payload1"' 100);                        StringAssert.Contains(errorsListener.ToString()' "System.InvalidOperationException: Operation is not valid due to the current state of the object.");                      Assert.AreEqual(string.Empty' mockConsole.Ouput);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttribute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(eventformatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttribute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(eventformatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttribute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(eventformatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(jsonFormatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(jsonFormatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(jsonFormatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(xmlFormatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(xmlFormatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,ConsoleSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\ConsoleSinkFixture.cs,WhenEventWithMessageInAttributeUsingXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToConsole(xmlFormatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForSize,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 40; msg++)                      {                          logger.Informational("The quick brown fox jumps over the lazy dog.  And then the fox did it again and again for time #  " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForSize,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 40; msg++)                      {                          logger.Informational("The quick brown fox jumps over the lazy dog.  And then the fox did it again and again for time #  " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForSize,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 40; msg++)                      {                          logger.Informational("The quick brown fox jumps over the lazy dog.  And then the fox did it again and again for time #  " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForSize,The following statement contains a magic number: Assert.AreEqual<int>(3' files.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,RollFileDateUsesFileCreationDate,The following statement contains a magic number: DateTime currentDateTime = new DateTime(2011' 1' 1);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,RollFileDateUsesFileCreationDate,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter());                      listener.EnableEvents(logger' EventLevel.LogAlways);                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("New message");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollWithSizeAndRollIntervalNoneWithOverwrite,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Overwrite' RollInterval.None' new EventTextFormatter());                      listener.EnableEvents(logger' EventLevel.LogAlways);                        for (int msg = 0; msg < 26; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollInIncrementModeBasedOnInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 10' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                        MockDateTimeProvider dtp = new MockDateTimeProvider();                      dtp.OverrideCurrentDateTime = DateTime.Now.AddDays(1);                      subscription.Sink.RollingHelper.DateTimeProvider = dtp;                        logger.Informational("Message 2");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMinute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMinute,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsHour,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Hour' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddHours(1);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsDay,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(1);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      subscription.Sink.RollingHelper.UpdateRollingInformationIfNecessary();                        logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsWeek,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Week' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                      dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(7);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsWeek,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Week' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                      dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(7);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMonth,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Month' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                      dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMonths(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalIsMonth,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 1000' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Month' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                      dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMonths(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 100; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 4' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 100; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The following statement contains a magic number: Assert.IsTrue(files.Count() >= 5);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The following statement contains a magic number: i < 100
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The following statement contains a magic number: (fileInfo.Length >= 4300) && (fileInfo.Length <= 3200)
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollForSize,The following statement contains a magic number: (fileInfo.Length >= 4300) && (fileInfo.Length <= 3200)
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsMultipleTimes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 10' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsMultipleTimes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 10' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenRollIntervalExceedsMultipleTimes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 10' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Minute' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddMinutes(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 7");                      logger.Informational("Message 8");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 9");                      logger.Informational("Message 10");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 7");                      logger.Informational("Message 8");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 9");                      logger.Informational("Message 10");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 7");                      logger.Informational("Message 8");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 9");                      logger.Informational("Message 10");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 7");                      logger.Informational("Message 8");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 9");                      logger.Informational("Message 10");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message 1");                      logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(2);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                      logger.Informational("Message 6");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 7");                      logger.Informational("Message 8");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 9");                      logger.Informational("Message 10");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollForInterval,The following statement contains a magic number: Assert.AreEqual<int>(3' FlatFileHelper.GetFileNames(fileNameWithoutExtension + "*.log").Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: DateTime currentDateTime = new DateTime(2010' 1' 1);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 1");                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 1");                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 1");                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 1");                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 1");                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      var subscription = listener.LogToRollingFlatFile(fileName' 0' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.Day' new EventTextFormatter(EventTextFormatter.DashSeparator)' 2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime;                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 1");                      dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                        logger.Informational("Message 2");                        dateTimeProvider.OverrideCurrentDateTime = currentDateTime.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 3");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(4);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 4");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(6);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 5");                        dateTimeProvider.OverrideCurrentDateTime = DateTime.Now.AddDays(8);                      subscription.Sink.RollingHelper.DateTimeProvider = dateTimeProvider;                      logger.Informational("Message 6");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesExceedsAndRollingACrossDifferentDatesWithRollInterval,The following statement contains a magic number: Assert.AreEqual<int>(3' files.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFileSizeIsNegativeFilesAreNotDeleted,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' -2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 30; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFileSizeIsNegativeFilesAreNotDeleted,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' -2);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 30; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMaxArchivedFilesIsZeroFilesAreNotDeleted,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int msg = 0; msg < 30; msg++)                      {                          logger.Informational("Message " + msg.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenLoggingEventsInDifferentLevels,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 2' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message Info");                      logger.Verbose("Message Verb");                      logger.Critical("Message Critic");                      logger.Error("Message Err");                      logger.Warning("Message Warn");                      logger.LogAlways("Message Log");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFileNameIsNull,The following statement contains a magic number: var subscription = listener.LogToRollingFlatFile(null' 2' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenEventTextFormatterIsNull,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 2' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' null);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational("Message Info");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenFormattingErrorExceptionIsRoutedToBuiltInSource,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToRollingFlatFile(fileName' 1' null' RollFileExistsBehavior.Increment' RollInterval.None' new MockFormatter(true));                      listener.EnableEvents(logger' EventLevel.LogAlways);                        logger.EventWithPayload("payload1"' 100);                        StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.InvalidOperationException: Operation is not valid due to the current state of the object.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMultipleEventsAreLogged,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 300000' "d"' RollFileExistsBehavior.Increment' RollInterval.Year' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 300; n++)                      {                          logger.Informational("some message to flat file " + n.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMultipleEventsAreLogged,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 300000' "d"' RollFileExistsBehavior.Increment' RollInterval.Year' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 300; n++)                      {                          logger.Informational("some message to flat file " + n.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMultipleEventsAreLogged,The following statement contains a magic number: var entries = FlatFileHelper.PollUntilTextEventsAreWritten(fileName' 300' formatter.Header);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenMultipleEventsAreLogged,The following statement contains a magic number: Assert.AreEqual<int>(300' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(100' "stringstringarg1"' 200' "stringstringarg2"' 300);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(100' "stringstringarg1"' 200' "stringstringarg2"' 300);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(100' "stringstringarg1"' 200' "stringstringarg2"' 300);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' new EventTextFormatter(EventTextFormatter.DashSeparator)' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(100' "stringstringarg1"' 200' "stringstringarg2"' 300);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' jsonFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' jsonFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' jsonFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' jsonFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' xmlFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' xmlFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' xmlFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,RollingFlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\RollingFlatFileSinkFixture.cs,WhenPositionalParametersInPayloadInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToRollingFlatFile(fileName' 1' "yyyy"' RollFileExistsBehavior.Increment' RollInterval.None' xmlFormatter' 0);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int i = 0; i < 7; i++)                      {                          logger.ObjectArrayEvent4(1000' "stringstringarg10"' 2000' "stringstringarg20"' 3000);                      }                        Assert.IsTrue(File.Exists(fileNameWithoutExtension + "." + DateTime.Now.Year + ".1.log"));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenMultipleEventsAreRaised,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      for (int n = 0; n < 300; n++)                      {                          logger.Informational("some message to flat file " + n.ToString());                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenMultipleEventsAreRaised,The following statement contains a magic number: Assert.AreEqual<int>(300' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenFileExistsEventIsAppended,The following statement contains a magic number: Assert.AreEqual<int>(2' entries2.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenErrorInLogging,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToFlatFile(fileName' new MockFormatter(true));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithPayload("payload1"' 100);                        StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.InvalidOperationException: Operation is not valid due to the current state of the object.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenExceptionInFormatter,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  (listener' errorsListener) =>                  {                      listener.LogToFlatFile(fileName' new MockFormatter2(true));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithPayload("TryingToLog"' 100);                        StringAssert.Contains(errorsListener.ToString()' "Payload : [message : System.ObjectDisposedException: Cannot write to a closed TextWriter.");                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenErrorAndValidMessageAfterError,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' new MockFormatter3("header"));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithPayload("error"' 100);                      logger.EventWithPayload("not an error"' 100);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenErrorAndValidMessageAfterError,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' new MockFormatter3("header"));                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.EventWithPayload("error"' 100);                      logger.EventWithPayload("not an error"' 100);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenFilePathLengthExceedsMaxExceptionOccursEarly,The following statement contains a magic number: int folderNameLength = 246 - countLength;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceIsRenabled,The following statement contains a magic number: Assert.IsTrue(fileContents.Count == 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenVerbosityIsLowFilteringOccurs,The following statement contains a magic number: Assert.IsTrue(fileContents.Count == 2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPayloadIsLarge,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.Informational(new string('a'' 50000000));                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPayloadIsLarge,The following statement contains a magic number: Assert.IsTrue(File.ReadAllText(fileName).Contains(new string('a'' 50000000)));
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSinkIsAsync,The following statement contains a magic number: int count = 2;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenDisposeFlushOccurs,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      Thread[] threads = new Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new Thread(new ThreadStart(() =>                          {                              for (int j = 0; j < 1000; j++)                              {                                  logger.Critical("TestMsg " + j);                              }                          }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenDisposeFlushOccurs,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      Thread[] threads = new Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new Thread(new ThreadStart(() =>                          {                              for (int j = 0; j < 1000; j++)                              {                                  logger.Critical("TestMsg " + j);                              }                          }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenDisposeFlushOccurs,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      Thread[] threads = new Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new Thread(new ThreadStart(() =>                          {                              for (int j = 0; j < 1000; j++)                              {                                  logger.Critical("TestMsg " + j);                              }                          }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenDisposeFlushOccurs,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      Thread[] threads = new Thread[10];                      for (int i = 0; i < 10; i++)                      {                          threads[i] = new Thread(new ThreadStart(() =>                          {                              for (int j = 0; j < 1000; j++)                              {                                  logger.Critical("TestMsg " + j);                              }                          }));                            threads[i].Start();                      }                        for (int i = 0; i < 10; i++)                      {                          threads[i].Join();                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenUsingStaticCreate,The following statement contains a magic number: n < 2
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInText,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInText,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInText,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' jsonformatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' jsonformatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositionalParametersInMessageInJson,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' jsonformatter);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositonalParametersInMessageInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' xmlformat);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(20' "stringarg1"' 30' "stringarg3"' 40);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositonalParametersInMessageInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' xmlformat);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(20' "stringarg1"' 30' "stringarg3"' 40);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenPositonalParametersInMessageInXml,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' xmlformat);                      listener.EnableEvents(logger' EventLevel.LogAlways);                      logger.ObjectArrayEvent4(20' "stringarg1"' 30' "stringarg3"' 40);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenFileAttributesChangeDuringLogging,The following statement contains a magic number: Assert.AreEqual<int>(2' entries2.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenMultipleSourcesAreEnabledForSameListener,The following statement contains a magic number: Assert.AreEqual<int>(3' entries.Count());
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenMultipleSourcesAreEnabledForSameListener,The following statement contains a magic number: StringAssert.Contains(entries.ToArray()[2]' "Critical");
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenMultipleSourcesAreEnabledForSameListener,The following statement contains a magic number: StringAssert.Contains(entries.ToArray()[2]' "critical 1");
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName);                      listener.EnableEvents(logger' EventLevel.Informational);                      for (int i = 1; i < 16; i++)                      {                          events.Add(EventSourceSchemaCache.Instance.GetSchema(i' logger));                      }                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("LongArgEvent3"' events[2].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("ObjectArrayEvent4"' events[3].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("StringArgEvent5"' events[4].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("TwoIntArgEvent6"' events[5].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("TwoLongArgEvent7"' events[6].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("StringAndIntArgEvent8"' events[7].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("StringAndLongArgEvent9"' events[8].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("StringAndStringArgEvent10"' events[9].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("ThreeIntArgEvent11"' events[10].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("ThreeLongArgEvent12"' events[11].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("StringAndTwoIntArgEvent13"' events[12].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("ThreeStringArgEvent14"' events[13].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceHasNoAttributes,The following statement contains a magic number: Assert.AreEqual<string>("SendEnumsEvent15"' events[14].TaskName);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenIntArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.IntArgEvent2(10);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenLongArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.LongArgEvent3((long)10);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenObjectArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenObjectArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenObjectArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.ObjectArrayEvent4(10' "stringarg1"' 20' "stringarg3"' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenTwoIntArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.TwoIntArgEvent6(10' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenTwoIntArgPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.TwoIntArgEvent6(10' 30);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenStringAndLongPayload,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.StringAndLongArgEvent9("message1"' 20);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceEventHasNoTask,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NoTaskSpecfied(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenSourceEventHasNoTask,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NoTaskSpecfied(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonDefaultOpCode,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NonDefaultOpcodeNonDefaultVersionEvent(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonDefaultOpCode,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NonDefaultOpcodeNonDefaultVersionEvent(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonDefaultVersion,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NonDefaultOpcodeNonDefaultVersionEvent(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonDefaultVersion,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NonDefaultOpcodeNonDefaultVersionEvent(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonDefaultMessage,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NonDefaultOpcodeNonDefaultVersionEvent(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenNonDefaultMessage,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Verbose);                      logger.NonDefaultOpcodeNonDefaultVersionEvent(1' 3' 5);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenActivityId,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.IntArgEvent2(10);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenActivityIdAndRelatedActivityId,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.IntArgEventWithRelatedActivityId(10' relatedActivityId);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenProcessId,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.IntArgEvent2(10);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.Sinks,FlatFileSinkFixture,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\Sinks\FlatFileSinkFixture.cs,WhenThreadId,The following statement contains a magic number: TestScenario.With1Listener(                  logger'                  listener =>                  {                      listener.LogToFlatFile(fileName' formatter);                      listener.EnableEvents(logger' EventLevel.Informational);                      logger.IntArgEvent2(10);                  });
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,BasicTestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\BasicTestEventSource.cs,RaiseBasicTestEventSourceEvent,The following statement contains a magic number: this.WriteEvent(100' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,BasicTestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\BasicTestEventSource.cs,RaiseEventWithMaxVerbosityAsError,The following statement contains a magic number: this.WriteEvent(200' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,BasicTestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\BasicTestEventSource.cs,RaiseEventWithMaxVerbosityAsInformational,The following statement contains a magic number: this.WriteEvent(300' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,BasicTestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\BasicTestEventSource.cs,RaiseEventWithMaxVerbosityAsCritical,The following statement contains a magic number: this.WriteEvent(400' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,InfoTest,The following statement contains a magic number: this.WriteEvent(401' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Informational,The following statement contains a magic number: this.WriteEvent(100' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Critical,The following statement contains a magic number: this.WriteEvent(200' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Error,The following statement contains a magic number: this.WriteEvent(300' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Verbose,The following statement contains a magic number: this.WriteEvent(400' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,LogAlways,The following statement contains a magic number: this.WriteEvent(500' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Warning,The following statement contains a magic number: this.WriteEvent(600' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Informational2,The following statement contains a magic number: this.WriteEvent(700' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,CriticalWithRelatedActivityId,The following statement contains a magic number: this.WriteEventWithRelatedActivityId(800' relatedActivityId' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockNegativeEventIdEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource.cs,Warning,The following statement contains a magic number: this.WriteEvent(-100);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource2,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource2.cs,Informational,The following statement contains a magic number: this.WriteEvent(100' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource2,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource2.cs,Critical,The following statement contains a magic number: this.WriteEvent(200' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource2,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource2.cs,Error,The following statement contains a magic number: this.WriteEvent(300' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource2,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource2.cs,Verbose,The following statement contains a magic number: this.WriteEvent(400' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource2,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource2.cs,LogAlways,The following statement contains a magic number: this.WriteEvent(500' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockConsoleListenerEventSource2,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockConsoleListenerEventSource2.cs,Warning,The following statement contains a magic number: this.WriteEvent(600' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,Critical,The following statement contains a magic number: this.WriteEvent(2' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,Error,The following statement contains a magic number: this.WriteEvent(3' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,Verbose,The following statement contains a magic number: this.WriteEvent(4' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,LogAlways,The following statement contains a magic number: this.WriteEvent(5' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,Warning,The following statement contains a magic number: this.WriteEvent(6' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,WriteWithOpCode,The following statement contains a magic number: this.WriteEvent(7' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,LogSomeMessage,The following statement contains a magic number: this.WriteEvent(8' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,InformationalWithRelatedActivityId,The following statement contains a magic number: this.WriteEventWithRelatedActivityId(14' relatedActivityId' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSource.cs,CriticalWithRelatedActivityId,The following statement contains a magic number: this.WriteEventWithRelatedActivityId(15' relatedActivityId' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,NoTaskSpecfied1,The following statement contains a magic number: this.WriteEvent(2' event3Arg0' event3Arg0' event3Arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,NoTaskNoOpCode1,The following statement contains a magic number: this.WriteEvent(5' event3Arg0' event3Arg0' event3Arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,DifferentTypes,The following statement contains a magic number: this.WriteEvent(6' strArg' longArg);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,DifferentTypesInverted,The following statement contains a magic number: this.WriteEvent(7' intArg' strArg' longArg);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,AllSupportedTypes,The following statement contains a magic number: this.WriteEvent(8' srtArg' intArg' lngArg' fltArg' (int)enumArg' guidArg);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,InformationalNoMessage,The following statement contains a magic number: this.WriteEvent(9' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceNoTask,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceNoTask.cs,InformationalMessageFormat,The following statement contains a magic number: this.WriteEvent(10' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceInProcEnum,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceOutProcEnum.cs,SendEnumsEvent15,The following statement contains a magic number: this.WriteEvent(2' (int)a' (int)b);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceInProcEnum,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceOutProcEnum.cs,SendEnumsEvent16,The following statement contains a magic number: this.WriteEvent(3' a' b);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceInProcEnum,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceOutProcEnum.cs,SaveExpenseStarted,The following statement contains a magic number: this.WriteEvent(4' expenseId);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceInProcEnum,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceOutProcEnum.cs,SendEnumsEvent17,The following statement contains a magic number: this.WriteEvent(5' (int)a' (int)b);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceInProcKeywords,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceOutProcKeywords.cs,InformationalDatabase,The following statement contains a magic number: this.WriteEvent(2' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,MockEventSourceInProcKeywords,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\MockEventSourceOutProcKeywords.cs,InformationalDiagnostic,The following statement contains a magic number: this.WriteEvent(3' message);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestAttributesEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestAttributesEventSource.cs,NonDefaultOpcodeNonDefaultVersionEvent,The following statement contains a magic number: this.WriteEvent(103' arg1' arg2' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestAttributesEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestAttributesEventSource.cs,NoTaskSpecfied,The following statement contains a magic number: this.WriteEvent(104' arg1' arg3' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestAttributesEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestAttributesEventSource.cs,NoTaskSpecfied2,The following statement contains a magic number: this.WriteEvent(105' arg1' arg3' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSource,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSource.cs,AllParametersWithCustomValues,The following statement contains a magic number: this.WriteEvent(10001);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,IntArgEvent2,The following statement contains a magic number: this.WriteEvent(2' arg);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,LongArgEvent3,The following statement contains a magic number: this.WriteEvent(3' arg);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ObjectArrayEvent4,The following statement contains a magic number: object[] args = new object[5];
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ObjectArrayEvent4,The following statement contains a magic number: args[2] = arg2;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ObjectArrayEvent4,The following statement contains a magic number: args[3] = arg3;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ObjectArrayEvent4,The following statement contains a magic number: args[4] = arg4;
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ObjectArrayEvent4,The following statement contains a magic number: this.WriteEvent(4' args);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,StringArgEvent5,The following statement contains a magic number: this.WriteEvent(5' arg);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,TwoIntArgEvent6,The following statement contains a magic number: this.WriteEvent(6' arg1' arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,TwoLongArgEvent7,The following statement contains a magic number: this.WriteEvent(7' arg1' arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,StringAndIntArgEvent8,The following statement contains a magic number: this.WriteEvent(8' arg1' arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,StringAndLongArgEvent9,The following statement contains a magic number: this.WriteEvent(9' arg1' arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,StringAndStringArgEvent10,The following statement contains a magic number: this.WriteEvent(10' arg1' arg2);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ThreeIntArgEvent11,The following statement contains a magic number: this.WriteEvent(11' arg1' arg2' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ThreeLongArgEvent12,The following statement contains a magic number: this.WriteEvent(12' arg1' arg2' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,StringAndTwoIntArgEvent13,The following statement contains a magic number: this.WriteEvent(13' arg1' arg2' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,ThreeStringArgEvent14,The following statement contains a magic number: this.WriteEvent(14' arg1' arg2' arg3);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,SendEnumsEvent15,The following statement contains a magic number: this.WriteEvent(15' (int)color' (int)flags);
Magic Number,Microsoft.Practices.EnterpriseLibrary.SemanticLogging.InProc.Tests.TestObjects,TestEventSourceNoAttributes,C:\research\architectureSmells\repos\mspnp_semantic-logging\BVT\SLAB.Tests\SemanticLogging.InProc.Tests\TestObjects\TestEventSourceNoAttributes.cs,IntArgEventWithRelatedActivityId,The following statement contains a magic number: this.WriteEventWithRelatedActivityId(16' relatedActivityId' arg);
