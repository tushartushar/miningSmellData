Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,Cyclomatic complexity of the method is 8
Complex Method,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,IsValidBase64String,Cyclomatic complexity of the method is 8
Complex Method,AE.Net.Mail,MailMessage,C:\repos\andyedinborough_aenetmail\MailMessage.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,AE.Net.Mail,MailMessage,C:\repos\andyedinborough_aenetmail\MailMessage.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessages,Cyclomatic complexity of the method is 8
Complex Method,AE.Net.Mail.Imap,ModifiedUtf7Encoding,C:\repos\andyedinborough_aenetmail\Imap\ModifiedUtf7Encoding.cs,Encode,Cyclomatic complexity of the method is 8
Long Parameter List,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadLine,The method has 5 parameters. Parameters: stream' maxLength' encoding' termChar' ReadTimeout
Long Parameter List,AE.Net.Mail,MailMessage,C:\repos\andyedinborough_aenetmail\MailMessage.cs,ParseMime,The method has 6 parameters. Parameters: reader' boundary' maxLength' attachments' encoding' termChar
Long Parameter List,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,ImapClient,The method has 7 parameters. Parameters: host' username' password' method' port' secure' skipSslValidation
Long Parameter List,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessages,The method has 5 parameters. Parameters: start' end' uid' headersonly' setseen
Long Parameter List,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessages,The method has 7 parameters. Parameters: start' end' uid' uidsonly' headersonly' setseen' processCallback
Long Parameter List,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessages,The method has 7 parameters. Parameters: start' end' uid' uidsonly' headersonly' setseen' action
Long Parameter List,AE.Net.Mail,Pop3Client,C:\repos\andyedinborough_aenetmail\Pop3Client.cs,Pop3Client,The method has 6 parameters. Parameters: host' username' password' port' secure' skipSslValidation
Long Statement,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,NormalizeDate,The length of the statement  "			value = rxTimeZoneColon.Replace(value' match => " " + match.Groups[1].Value + match.Groups[2].Value.PadLeft(2' '0') + match.Groups[3].Value); " is 141.
Long Statement,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessages,The length of the statement  "                foreach (var key in imapHeaders.AllKeys.Except(new[] { "UID"' "Flags"' "BODY[]"' "BODY[HEADER]" }' StringComparer.OrdinalIgnoreCase)) " is 133.
Long Statement,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessages,The length of the statement  "                foreach (var key in imapHeaders.AllKeys.Except(new[] { "UID"' "Flags"' "BODY[]"' "BODY[HEADER]" }' StringComparer.OrdinalIgnoreCase)) " is 133.
Long Statement,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,OnLogin,The length of the statement  "            // // _Reader = new System.IO.StreamReader(new System.IO.Compression.DeflateStream(_Stream0' System.IO.Compression.CompressionMode.Decompress' true)' System.Text.Encoding.Default); " is 180.
Long Statement,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,OnLogin,The length of the statement  "            // // _Stream = new System.IO.Compression.DeflateStream(_Stream0' System.IO.Compression.CompressionMode.Compress' true); " is 120.
Long Statement,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetMessageCount,The length of the statement  "            string command = GetTag() + "STATUS " + Utilities.QuoteString(_utf7.Encode(mailbox) ?? _SelectedMailbox) + " (MESSAGES)"; " is 121.
Long Statement,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Store,The length of the statement  "            string command = string.Concat(GetTag()' prefix' "STORE "' messageset' " "' replace ? "" : "+"' "FLAGS.SILENT (" + flags + ")"); " is 128.
Long Statement,AE.Net.Mail.Imap,ModifiedUtf7Encoding,C:\repos\andyedinborough_aenetmail\Imap\ModifiedUtf7Encoding.cs,Decode,The length of the statement  "            for (int indexOfAmpersand = result.IndexOf('&'); indexOfAmpersand != -1; indexOfAmpersand = result.IndexOf('&'' indexOfAmpersand + 1)) " is 134.
Complex Conditional,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadLine,The conditional expression  "maxLengthSpecified && mem.Length == 1 && b == termChar && b0 == termChar"  is complex.
Complex Conditional,AE.Net.Mail,MailMessage,C:\repos\andyedinborough_aenetmail\MailMessage.cs,ParseMime,The conditional expression  "data != null && !data.StartsWith(bounderOuter) && !(maxLengthSpecified && maxLength == 0)"  is complex.
Complex Conditional,AE.Net.Mail,MailMessage,C:\repos\andyedinborough_aenetmail\MailMessage.cs,ParseMime,The conditional expression  "!data.StartsWith(bounderInner) && data != string.Empty && !(maxLengthSpecified && maxLength == 0)"  is complex.
Virtual Method Call from Constructor,AE.Net.Mail,Attachment,C:\repos\andyedinborough_aenetmail\Attachment.cs,Attachment,The constructor "Attachment" calls a virtual method "Add".
Virtual Method Call from Constructor,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,ImapClient,The constructor "ImapClient" calls a virtual method "Connect".
Virtual Method Call from Constructor,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,ImapClient,The constructor "ImapClient" calls a virtual method "Login".
Virtual Method Call from Constructor,AE.Net.Mail,Pop3Client,C:\repos\andyedinborough_aenetmail\Pop3Client.cs,Pop3Client,The constructor "Pop3Client" calls a virtual method "Connect".
Virtual Method Call from Constructor,AE.Net.Mail,Pop3Client,C:\repos\andyedinborough_aenetmail\Pop3Client.cs,Pop3Client,The constructor "Pop3Client" calls a virtual method "Login".
Empty Catch Block,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,TryDispose,The method has an empty catch block.
Empty Catch Block,AE.Net.Mail,Pop3Client,C:\repos\andyedinborough_aenetmail\Pop3Client.cs,GetMessage,The method has an empty catch block.
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadLine,The following statement contains a magic number: using (var mem = new MemoryStream()) {  				while (true) {  					b0 = b;  					i = stream.ReadByte();  					if (i == -1) break;  					else read = true;    					b = (byte)i;  					if (maxLengthSpecified) maxLength--;    					if (maxLengthSpecified && mem.Length == 1 && b == termChar && b0 == termChar) {  						maxLength++;  						continue;  					}    					if (b == 10 || b == 13) {  						if (mem.Length == 0 && b == 10) {  							continue;  						} else break;  					}    					mem.WriteByte(b);  					if (maxLengthSpecified && maxLength == 0)  						break;  				}    				if (mem.Length == 0 && !read) return null;  				return encoding.GetString(mem.ToArray());  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadLine,The following statement contains a magic number: using (var mem = new MemoryStream()) {  				while (true) {  					b0 = b;  					i = stream.ReadByte();  					if (i == -1) break;  					else read = true;    					b = (byte)i;  					if (maxLengthSpecified) maxLength--;    					if (maxLengthSpecified && mem.Length == 1 && b == termChar && b0 == termChar) {  						maxLength++;  						continue;  					}    					if (b == 10 || b == 13) {  						if (mem.Length == 0 && b == 10) {  							continue;  						} else break;  					}    					mem.WriteByte(b);  					if (maxLengthSpecified && maxLength == 0)  						break;  				}    				if (mem.Length == 0 && !read) return null;  				return encoding.GetString(mem.ToArray());  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadLine,The following statement contains a magic number: using (var mem = new MemoryStream()) {  				while (true) {  					b0 = b;  					i = stream.ReadByte();  					if (i == -1) break;  					else read = true;    					b = (byte)i;  					if (maxLengthSpecified) maxLength--;    					if (maxLengthSpecified && mem.Length == 1 && b == termChar && b0 == termChar) {  						maxLength++;  						continue;  					}    					if (b == 10 || b == 13) {  						if (mem.Length == 0 && b == 10) {  							continue;  						} else break;  					}    					mem.WriteByte(b);  					if (maxLengthSpecified && maxLength == 0)  						break;  				}    				if (mem.Length == 0 && !read) return null;  				return encoding.GetString(mem.ToArray());  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadToEnd,The following statement contains a magic number: if (stream.CanTimeout)  				stream.ReadTimeout = 10000;
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,ReadToEnd,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,NormalizeDate,The following statement contains a magic number: value = rxTimeZoneColon.Replace(value' match => " " + match.Groups[1].Value + match.Groups[2].Value.PadLeft(2' '0') + match.Groups[3].Value);
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,NormalizeDate,The following statement contains a magic number: value = rxTimeZoneColon.Replace(value' match => " " + match.Groups[1].Value + match.Groups[2].Value.PadLeft(2' '0') + match.Groups[3].Value);
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,NormalizeDate,The following statement contains a magic number: value = rxTimeZoneColon.Replace(value' match => " " + match.Groups[1].Value + match.Groups[2].Value.PadLeft(2' '0') + match.Groups[3].Value);
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,NormalizeDate,The following statement contains a magic number: if (minutes.Groups[2].Value.ToInt() > 60) { //even if there's no match' the value = 0  				value = value.Substring(0' minutes.Index) + minutes.Groups[1].Value + "00";  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,NormalizeDate,The following statement contains a magic number: if (minutes.Groups[2].Value.ToInt() > 60) { //even if there's no match' the value = 0  				value = value.Substring(0' minutes.Index) + minutes.Groups[1].Value + "00";  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,DecodeQuotedPrintable,The following statement contains a magic number: for (int i = 0; i < data.Length; i++) {  				var b = data[i];    				if ((b == eq) && ((i + 2) < data.Length)) {  					byte b1 = data[i + 1]' b2 = data[i + 2];  					if (b1 == 10 || b1 == 13) {  						i++;  						if (b2 == 10 || b2 == 13) {  							i++;  						}  						continue;  					}    					if (byte.TryParse(value.Substring(i + 1' 2)' NumberStyles.HexNumber' null' out b)) {  						data[n] = (byte)b;  						n++;  						i += 2;  					} else {  						data[i] = eq;  						n++;  					}    				} else {  					data[n] = b;  					n++;  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,IsValidBase64String,The following statement contains a magic number: var missingPaddingLength = lengthWPadding % 4;
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,IsValidBase64String,The following statement contains a magic number: if (missingPaddingLength != 0) {  				// Base64 string length should be multiple of 4  				if (strictPadding) {  					return false;  				} else {  					//add the minimum necessary padding  					if (missingPaddingLength > 2)  						missingPaddingLength = missingPaddingLength % 2;  					param += new string(Base64Padding' missingPaddingLength);  					lengthWPadding += missingPaddingLength;  					System.Diagnostics.Debug.Assert(lengthWPadding % 4 == 0);  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,IsValidBase64String,The following statement contains a magic number: if (missingPaddingLength != 0) {  				// Base64 string length should be multiple of 4  				if (strictPadding) {  					return false;  				} else {  					//add the minimum necessary padding  					if (missingPaddingLength > 2)  						missingPaddingLength = missingPaddingLength % 2;  					param += new string(Base64Padding' missingPaddingLength);  					lengthWPadding += missingPaddingLength;  					System.Diagnostics.Debug.Assert(lengthWPadding % 4 == 0);  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,IsValidBase64String,The following statement contains a magic number: if (missingPaddingLength != 0) {  				// Base64 string length should be multiple of 4  				if (strictPadding) {  					return false;  				} else {  					//add the minimum necessary padding  					if (missingPaddingLength > 2)  						missingPaddingLength = missingPaddingLength % 2;  					param += new string(Base64Padding' missingPaddingLength);  					lengthWPadding += missingPaddingLength;  					System.Diagnostics.Debug.Assert(lengthWPadding % 4 == 0);  				}  			}
Magic Number,AE.Net.Mail,Utilities,C:\repos\andyedinborough_aenetmail\Utilities.cs,IsValidBase64String,The following statement contains a magic number: if ((lengthWPadding - lengthWOPadding) > 2) {  				// there should be no more than 2 pad characters  				return false;  			}
Magic Number,AE.Net.Mail,TextClient,C:\repos\andyedinborough_aenetmail\TextClient.cs,TextClient,The following statement contains a magic number: Encoding = System.Text.Encoding.GetEncoding(1252);
Magic Number,AE.Net.Mail,TextClient,C:\repos\andyedinborough_aenetmail\TextClient.cs,TextClient,The following statement contains a magic number: ServerTimeout = 10000;
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,ImapClient,The following statement contains a magic number: IdleTimeout = 1200000;
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,TryGetResponse,The following statement contains a magic number: _ResponseTask = Task.Factory.StartNew(() =>              {                  resp = GetResponse(IdleTimeout + ServerTimeout * 3);              });
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,WatchIdleQueue,The following statement contains a magic number: try              {                  string last = null' resp;                    while (true)                  {                      if (!TryGetResponse(out resp))                      {                          //Child task should still running on ReadByte here.                          //Need to send some data to get it to exit.                            SendCommand("DONE"); //_ResponseTask should pick up response and exit                          if (!_ResponseTask.Wait(ServerTimeout))                          {                              //Not responding                              Disconnect();                              throw new ImapClientException("Lost communication to IMAP server' connection closed.");                          }                          _ResponseTask.Dispose();                          _ResponseTask = null;                            IdleResumeCommand();                            continue;                      }                        if (resp.Contains("OK IDLE"))  //Server response after DONE                          return;                        var data = resp.Split(' ');                      if (data[0] == "*" && data.Length >= 3)                      {                          var e = new MessageEventArgs { Client = this' MessageCount = int.Parse(data[1]) };                          if (data[2].Is("EXISTS") && !last.Is("EXPUNGE") && e.MessageCount > 0)                          {                              Task.Factory.StartNew(() => _NewMessage.Fire(this' e)); //Fire the event in a task                          }                          else if (data[2].Is("EXPUNGE"))                          {                              Task.Factory.StartNew(() => _MessageDeleted.Fire(this' e));                          }                          last = data[2];                      }                  }              }              catch (Exception e)              {                  ImapClientExceptionEventArgs args = new ImapClientExceptionEventArgs(e);                  Task.Factory.StartNew(() => ImapException.Fire(this' args));              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,WatchIdleQueue,The following statement contains a magic number: try              {                  string last = null' resp;                    while (true)                  {                      if (!TryGetResponse(out resp))                      {                          //Child task should still running on ReadByte here.                          //Need to send some data to get it to exit.                            SendCommand("DONE"); //_ResponseTask should pick up response and exit                          if (!_ResponseTask.Wait(ServerTimeout))                          {                              //Not responding                              Disconnect();                              throw new ImapClientException("Lost communication to IMAP server' connection closed.");                          }                          _ResponseTask.Dispose();                          _ResponseTask = null;                            IdleResumeCommand();                            continue;                      }                        if (resp.Contains("OK IDLE"))  //Server response after DONE                          return;                        var data = resp.Split(' ');                      if (data[0] == "*" && data.Length >= 3)                      {                          var e = new MessageEventArgs { Client = this' MessageCount = int.Parse(data[1]) };                          if (data[2].Is("EXISTS") && !last.Is("EXPUNGE") && e.MessageCount > 0)                          {                              Task.Factory.StartNew(() => _NewMessage.Fire(this' e)); //Fire the event in a task                          }                          else if (data[2].Is("EXPUNGE"))                          {                              Task.Factory.StartNew(() => _MessageDeleted.Fire(this' e));                          }                          last = data[2];                      }                  }              }              catch (Exception e)              {                  ImapClientExceptionEventArgs args = new ImapClientExceptionEventArgs(e);                  Task.Factory.StartNew(() => ImapException.Fire(this' args));              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,WatchIdleQueue,The following statement contains a magic number: try              {                  string last = null' resp;                    while (true)                  {                      if (!TryGetResponse(out resp))                      {                          //Child task should still running on ReadByte here.                          //Need to send some data to get it to exit.                            SendCommand("DONE"); //_ResponseTask should pick up response and exit                          if (!_ResponseTask.Wait(ServerTimeout))                          {                              //Not responding                              Disconnect();                              throw new ImapClientException("Lost communication to IMAP server' connection closed.");                          }                          _ResponseTask.Dispose();                          _ResponseTask = null;                            IdleResumeCommand();                            continue;                      }                        if (resp.Contains("OK IDLE"))  //Server response after DONE                          return;                        var data = resp.Split(' ');                      if (data[0] == "*" && data.Length >= 3)                      {                          var e = new MessageEventArgs { Client = this' MessageCount = int.Parse(data[1]) };                          if (data[2].Is("EXISTS") && !last.Is("EXPUNGE") && e.MessageCount > 0)                          {                              Task.Factory.StartNew(() => _NewMessage.Fire(this' e)); //Fire the event in a task                          }                          else if (data[2].Is("EXPUNGE"))                          {                              Task.Factory.StartNew(() => _MessageDeleted.Fire(this' e));                          }                          last = data[2];                      }                  }              }              catch (Exception e)              {                  ImapClientExceptionEventArgs args = new ImapClientExceptionEventArgs(e);                  Task.Factory.StartNew(() => ImapException.Fire(this' args));              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,WatchIdleQueue,The following statement contains a magic number: try              {                  string last = null' resp;                    while (true)                  {                      if (!TryGetResponse(out resp))                      {                          //Child task should still running on ReadByte here.                          //Need to send some data to get it to exit.                            SendCommand("DONE"); //_ResponseTask should pick up response and exit                          if (!_ResponseTask.Wait(ServerTimeout))                          {                              //Not responding                              Disconnect();                              throw new ImapClientException("Lost communication to IMAP server' connection closed.");                          }                          _ResponseTask.Dispose();                          _ResponseTask = null;                            IdleResumeCommand();                            continue;                      }                        if (resp.Contains("OK IDLE"))  //Server response after DONE                          return;                        var data = resp.Split(' ');                      if (data[0] == "*" && data.Length >= 3)                      {                          var e = new MessageEventArgs { Client = this' MessageCount = int.Parse(data[1]) };                          if (data[2].Is("EXISTS") && !last.Is("EXPUNGE") && e.MessageCount > 0)                          {                              Task.Factory.StartNew(() => _NewMessage.Fire(this' e)); //Fire the event in a task                          }                          else if (data[2].Is("EXPUNGE"))                          {                              Task.Factory.StartNew(() => _MessageDeleted.Fire(this' e));                          }                          last = data[2];                      }                  }              }              catch (Exception e)              {                  ImapClientExceptionEventArgs args = new ImapClientExceptionEventArgs(e);                  Task.Factory.StartNew(() => ImapException.Fire(this' args));              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Copy,The following statement contains a magic number: if (messageset.StartsWith("UID "' StringComparison.OrdinalIgnoreCase))              {                  messageset = messageset.Substring(4);                  prefix = "UID ";              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetQuota,The following statement contains a magic number: while (response.StartsWith("*"))              {                  Match m = Regex.Match(response' reg);                  if (m.Groups.Count > 1)                  {                      quota = new Quota(m.Groups[1].ToString()'                                                                                                      m.Groups[2].ToString()'                                                                                                      Int32.Parse(m.Groups[3].ToString())'                                                                                                      Int32.Parse(m.Groups[4].ToString())                                                                                      );                      break;                  }                  response = GetResponse();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetQuota,The following statement contains a magic number: while (response.StartsWith("*"))              {                  Match m = Regex.Match(response' reg);                  if (m.Groups.Count > 1)                  {                      quota = new Quota(m.Groups[1].ToString()'                                                                                                      m.Groups[2].ToString()'                                                                                                      Int32.Parse(m.Groups[3].ToString())'                                                                                                      Int32.Parse(m.Groups[4].ToString())                                                                                      );                      break;                  }                  response = GetResponse();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,GetQuota,The following statement contains a magic number: while (response.StartsWith("*"))              {                  Match m = Regex.Match(response' reg);                  if (m.Groups.Count > 1)                  {                      quota = new Quota(m.Groups[1].ToString()'                                                                                                      m.Groups[2].ToString()'                                                                                                      Int32.Parse(m.Groups[3].ToString())'                                                                                                      Int32.Parse(m.Groups[4].ToString())                                                                                      );                      break;                  }                  response = GetResponse();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,ListMailboxes,The following statement contains a magic number: while (m.Groups.Count > 1)              {                  Mailbox mailbox = new Mailbox(_utf7.Decode(m.Groups[3].Value));                  mailbox.SetFlags(m.Groups[1].Value);                  x.Add(mailbox);                  response = GetResponse();                  m = Regex.Match(response' reg);              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,ListSuscribesMailboxes,The following statement contains a magic number: while (m.Groups.Count > 1)              {                  Mailbox mailbox = new Mailbox(_utf7.Decode(m.Groups[3].Value));                  x.Add(mailbox);                  response = GetResponse();                  m = Regex.Match(response' reg);              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,OnLogin,The following statement contains a magic number: if (!IsResultOK(result))              {                  if (result.StartsWith("+ ") && result.EndsWith("=="))                  {                      string jsonErr = Utilities.DecodeBase64(result.Substring(2)' System.Text.Encoding.UTF7);                      throw new Exception(jsonErr);                  }                  else                      throw new Exception(result);              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: response = response.Substring(12);
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: if (m.Groups.Count != 4)                  throw new Exception("En error occure' this command is not fully supported !");
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: while (m2.Groups.Count > 1)              {                  n.ServerNamespace.Add(new Namespace(m2.Groups[1].Value' m2.Groups[2].Value));                  m2 = m2.NextMatch();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: m2 = Regex.Match(m.Groups[2].ToString()' reg2);
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: while (m2.Groups.Count > 1)              {                  n.UserNamespace.Add(new Namespace(m2.Groups[1].Value' m2.Groups[2].Value));                  m2 = m2.NextMatch();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: m2 = Regex.Match(m.Groups[3].ToString()' reg2);
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Namespace,The following statement contains a magic number: while (m2.Groups.Count > 1)              {                  n.SharedNamespace.Add(new Namespace(m2.Groups[1].Value' m2.Groups[2].Value));                  m2 = m2.NextMatch();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,HandleUntaggedResponse,The following statement contains a magic number: while (response.StartsWith("*"))              {                  if (mailbox != null)                  {                      if ((match = Regex.Match(response' @"\d+(?=\s+EXISTS)")).Success)                          mailbox.NumMsg = match.Value.ToInt();                        else if ((match = Regex.Match(response' @"\d+(?=\s+RECENT)")).Success)                          mailbox.NumNewMsg = match.Value.ToInt();                        else if ((match = Regex.Match(response' @"(?<=UNSEEN\s+)\d+")).Success)                          mailbox.NumUnSeen = match.Value.ToInt();                        else if ((match = Regex.Match(response' @"(?<=\sFLAGS\s+\().*?(?=\))")).Success)                          mailbox.SetFlags(match.Value);                        else if ((match = Regex.Match(response' @"UIDVALIDITY (\d+)")).Success)                          mailbox.UIDValidity = match.Groups[1].Value.ToInt();                          else if (response.StartsWith("* CAPABILITY "))                      {                          response = response.Substring(13);                          _Capability = response.Trim().Split(' ');                      }                        else if (response.StartsWith("* OK"))                      {                                                }                        else return response;                  }                  response = GetResponse();              }
Magic Number,AE.Net.Mail,ImapClient,C:\repos\andyedinborough_aenetmail\ImapClient.cs,Store,The following statement contains a magic number: if (messageset.StartsWith("UID "' StringComparison.OrdinalIgnoreCase))              {                  messageset = messageset.Substring(4);                  prefix = "UID ";              }
Missing Default,AE.Net.Mail,SearchCondition,C:\repos\andyedinborough_aenetmail\Imap\SearchCondition.cs,ToString,The following switch statement is missing a default case: switch (Field)                  {                      case Fields.BCC:                      case Fields.Body:                      case Fields.From:                      case Fields.Subject:                      case Fields.Text:                      case Fields.To:                          value = Convert.ToString(value).QuoteString();                          break;                  }
