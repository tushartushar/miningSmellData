Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SourceLog.Plugin.Subversion,SubversionPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.Subversion\SubversionPlugin.cs,ProcessChangedPaths,The length of the statement  "								Logger.Write(new LogEntry { Message = "SvnRepositoryIOException: " + e' Categories = { "Plugin.Subversion" }' Severity = TraceEventType.Error }); " is 145.
Long Statement,SourceLog.Plugin.Subversion,SubversionPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.Subversion\SubversionPlugin.cs,ProcessChangedPaths,The length of the statement  "								Logger.Write(new LogEntry { Message = "SvnFileSystemException: " + ex' Categories = { "Plugin.Subversion" }' Severity = TraceEventType.Warning }); " is 146.
Magic Number,SourceLog.Plugin.Subversion,SubversionPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.Subversion\SubversionPlugin.cs,CheckForNewLogEntriesImpl,The following statement contains a magic number: try  			{  				using (var svnClient = new SvnClient())  				{  					var uri = new Uri(SettingsXml);  					Collection<SvnLogEventArgs> svnLogEntries;  					if (svnClient.GetLog(uri' new SvnLogArgs { Limit = 30 }' out svnLogEntries))  					{  						var q = svnLogEntries  							.Where(e => e.Time.PrecisionFix() > MaxDateTimeRetrieved)  							.OrderBy(e => e.Time);  						foreach (var svnLogEntry in q)  						{  							var revision = svnLogEntry.Revision;  							Logger.Write(new LogEntry  								{  									Message = "Creating LogEntryDto for revision " + revision'  									Categories = { "Plugin." + GetType().Name }  								});  							var logEntry = new LogEntryDto  								{  									Author = svnLogEntry.Author'  									CommittedDate = svnLogEntry.Time'  									Message = svnLogEntry.LogMessage'  									Revision = revision.ToString(CultureInfo.InvariantCulture)'  									ChangedFiles = new List<ChangedFileDto>()  								};    							ProcessChangedPaths(svnLogEntry' revision' logEntry);    							var args = new NewLogEntryEventArgs { LogEntry = logEntry };  							OnNewLogEntry(args);  						}  						MaxDateTimeRetrieved = svnLogEntries.Max(x => x.Time).PrecisionFix();  					}  				}  			}  			finally  			{  				Monitor.Exit(LockObject);  			}
