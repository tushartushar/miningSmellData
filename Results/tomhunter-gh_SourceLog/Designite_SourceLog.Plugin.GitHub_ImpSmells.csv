Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,SourceLog.Plugin.GitHub,GitHubPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.GitHub\GitHubPlugin.cs,CheckForNewLogEntriesImpl,The length of the parameter maxDateTimeRetrievedAtStartOfProcessing is 39.
Long Statement,SourceLog.Plugin.GitHub,GitHubPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.GitHub\GitHubPlugin.cs,CheckForNewLogEntriesImpl,The length of the statement  "				foreach (var commitEntry in repoLog.Where(x => DateTime.Parse(x.commit.committer.date) > maxDateTimeRetrievedAtStartOfProcessing) " is 129.
Long Statement,SourceLog.Plugin.GitHub,GitHubPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.GitHub\GitHubPlugin.cs,GitHubApiGetBinary,The length of the statement  "					Logger.Write(new LogEntry { Message = "GitHub API rate limit met - sleeping for 1 hr"' Categories = { "Plugin.GitHub" } }); " is 123.
Magic Number,SourceLog.Plugin.GitHub,GitHubPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.GitHub\GitHubPlugin.cs,Initialise,The following statement contains a magic number: Timer.Change(0' 60000);
Magic Number,SourceLog.Plugin.GitHub,GitHubPlugin,C:\repos\tomhunter-gh_SourceLog\SourceLog.Plugin.GitHub\GitHubPlugin.cs,CheckForNewLogEntriesImpl,The following statement contains a magic number: if (repoLog.Any())  			{  				var maxDateTimeRetrievedAtStartOfProcessing = MaxDateTimeRetrieved;  				foreach (var commitEntry in repoLog.Where(x => DateTime.Parse(x.commit.committer.date) > maxDateTimeRetrievedAtStartOfProcessing)  					.OrderBy(x => DateTime.Parse(x.commit.committer.date)))  				{  					var logEntry = new LogEntryDto  						{  							Revision = commitEntry.sha.Substring(0' 7)'  							Author = commitEntry.commit.committer.name'  							CommittedDate = DateTime.Parse(commitEntry.commit.committer.date)'  							Message = commitEntry.commit.message'  							ChangedFiles = new List<ChangedFileDto>()  						};    					var fullCommitEntry = JsonConvert.DeserializeObject<CommitEntry>(  						GitHubApiGetString(  							"https://api.github.com/repos/" + _username + "/"  							+ _reponame + "/commits/"  							+ commitEntry.sha  						)  					);    					// process changed files in parallel  					fullCommitEntry.files.AsParallel().ForAll(file =>  					{  						var changedFile = new ChangedFileDto  							{  								FileName = file.filename'  								//NewVersion = GitHubApiGet(file.raw_url)'  								//ChangeType = ChangeType.Modified  							};    						if (file.status == "removed")  						{  							changedFile.ChangeType = ChangeType.Deleted;  							changedFile.OldVersion = GitHubApiGetBinary(file.raw_url);  							changedFile.NewVersion = new byte[0];  						}  						else  						{  							changedFile.ChangeType = ChangeType.Modified;  							changedFile.NewVersion = GitHubApiGetBinary(file.raw_url);    							// get the previous version  							// first get the list of commits for the file  							var fileLog = JsonConvert.DeserializeObject<RepoLog>(  								GitHubApiGetString(  									"https://api.github.com/repos/" + _username + "/"  									+ _reponame + "/commits?path=" + file.filename  									)  								);    							// get most recent commit before this one  							var previousCommit = fileLog.Where(f => DateTime.Parse(f.commit.committer.date) < logEntry.CommittedDate)  								.OrderByDescending(f => DateTime.Parse(f.commit.committer.date))  								.FirstOrDefault();    							if (previousCommit != null)  							{  								// get the raw contents of the path at the previous commit sha  								changedFile.OldVersion = GitHubApiGetBinary(  									"https://github.com/" + _username + "/"  									+ _reponame + "/raw/"  									+ previousCommit.sha + "/"  									+ changedFile.FileName  									);  							}  							else  							{  								changedFile.OldVersion = new byte[0];  								changedFile.ChangeType = ChangeType.Added;  							}  						}    						logEntry.ChangedFiles.Add(changedFile);  					});    					var args = new NewLogEntryEventArgs { LogEntry = logEntry };    					OnNewLogEntry(args);  					MaxDateTimeRetrieved = logEntry.CommittedDate;  				}  			}
