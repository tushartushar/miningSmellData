Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,Cyclomatic complexity of the method is 14
Long Statement,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The length of the statement  "                m_resultLine.Add(new GridLine(m_rectangles[resultList[resultTrav].x][resultList[resultTrav].y]'m_rectangles[resultList[resultTrav+1].x][resultList[resultTrav+1].y])); " is 166.
Magic Number,EpPathFinding.cs,GridBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridBox.cs,GridBox,The following statement contains a magic number: width = 18;
Magic Number,EpPathFinding.cs,GridBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridBox.cs,GridBox,The following statement contains a magic number: height = 18;
Magic Number,EpPathFinding.cs,GridLine,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridLine.cs,GridLine,The following statement contains a magic number: this.fromX = iFrom.boxRec.X + 9;
Magic Number,EpPathFinding.cs,GridLine,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridLine.cs,GridLine,The following statement contains a magic number: this.fromY = iFrom.boxRec.Y + 9;
Magic Number,EpPathFinding.cs,GridLine,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridLine.cs,GridLine,The following statement contains a magic number: this.toX = iTo.boxRec.X + 9;
Magic Number,EpPathFinding.cs,GridLine,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridLine.cs,GridLine,The following statement contains a magic number: this.toY = iTo.boxRec.Y + 9;
Magic Number,EpPathFinding.cs,GridLine,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridLine.cs,GridLine,The following statement contains a magic number: pen.Width = 2;
Magic Number,EpPathFinding.cs,ResultBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\ResultBox.cs,ResultBox,The following statement contains a magic number: width = 18;
Magic Number,EpPathFinding.cs,ResultBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\ResultBox.cs,ResultBox,The following statement contains a magic number: height = 18;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: this.Width = (width+1) * 20;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: this.Height = (height+1) * 20 +100;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: this.Height = (height+1) * 20 +100;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,SearchGridForm,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < width; widthTrav++)              {                  m_rectangles[widthTrav] = new GridBox[height];                  for (int heightTrav = 0; heightTrav < height; heightTrav++)                  {                      if(widthTrav==(width/3) && heightTrav==(height/2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Start);                      else if (widthTrav == 41 && heightTrav == (height / 2))                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20 ' heightTrav * 20 + 50' BoxType.End);                      else                          m_rectangles[widthTrav][heightTrav] = new GridBox(widthTrav * 20' heightTrav * 20 + 50' BoxType.Normal);                      }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < jumpParam.SearchGrid.width; widthTrav++)              {                  for (int heightTrav = 0; heightTrav < jumpParam.SearchGrid.height; heightTrav++)                  {                      if(jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav)==null)                          continue;                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isOpened)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Opened);                          m_resultBox.Add(resultBox);                      }                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isClosed)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Closed);                          m_resultBox.Add(resultBox);                      }                  }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < jumpParam.SearchGrid.width; widthTrav++)              {                  for (int heightTrav = 0; heightTrav < jumpParam.SearchGrid.height; heightTrav++)                  {                      if(jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav)==null)                          continue;                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isOpened)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Opened);                          m_resultBox.Add(resultBox);                      }                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isClosed)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Closed);                          m_resultBox.Add(resultBox);                      }                  }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < jumpParam.SearchGrid.width; widthTrav++)              {                  for (int heightTrav = 0; heightTrav < jumpParam.SearchGrid.height; heightTrav++)                  {                      if(jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav)==null)                          continue;                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isOpened)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Opened);                          m_resultBox.Add(resultBox);                      }                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isClosed)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Closed);                          m_resultBox.Add(resultBox);                      }                  }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < jumpParam.SearchGrid.width; widthTrav++)              {                  for (int heightTrav = 0; heightTrav < jumpParam.SearchGrid.height; heightTrav++)                  {                      if(jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav)==null)                          continue;                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isOpened)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Opened);                          m_resultBox.Add(resultBox);                      }                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isClosed)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Closed);                          m_resultBox.Add(resultBox);                      }                  }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < jumpParam.SearchGrid.width; widthTrav++)              {                  for (int heightTrav = 0; heightTrav < jumpParam.SearchGrid.height; heightTrav++)                  {                      if(jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav)==null)                          continue;                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isOpened)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Opened);                          m_resultBox.Add(resultBox);                      }                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isClosed)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Closed);                          m_resultBox.Add(resultBox);                      }                  }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnSearch_Click,The following statement contains a magic number: for (int widthTrav = 0; widthTrav < jumpParam.SearchGrid.width; widthTrav++)              {                  for (int heightTrav = 0; heightTrav < jumpParam.SearchGrid.height; heightTrav++)                  {                      if(jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav)==null)                          continue;                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isOpened)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Opened);                          m_resultBox.Add(resultBox);                      }                      if (jumpParam.SearchGrid.GetNodeAt(widthTrav' heightTrav).isClosed)                      {                          ResultBox resultBox = new ResultBox(widthTrav * 20' heightTrav * 20 + 50' ResultBoxType.Closed);                          m_resultBox.Add(resultBox);                      }                  }              }
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Location = new System.Drawing.Point(11' 14);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Location = new System.Drawing.Point(11' 14);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Size = new System.Drawing.Size(64' 25);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.Size = new System.Drawing.Size(64' 25);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearPath.Location = new System.Drawing.Point(81' 13);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearPath.Location = new System.Drawing.Point(81' 13);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearPath.Size = new System.Drawing.Size(64' 25);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearPath.Size = new System.Drawing.Size(64' 25);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearWall.Location = new System.Drawing.Point(152' 12);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearWall.Location = new System.Drawing.Point(152' 12);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearWall.Size = new System.Drawing.Size(89' 25);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearWall.Size = new System.Drawing.Size(89' 25);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClearWall.TabIndex = 2;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseRecursive.Location = new System.Drawing.Point(533' 17);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseRecursive.Location = new System.Drawing.Point(533' 17);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseRecursive.Size = new System.Drawing.Size(96' 17);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseRecursive.Size = new System.Drawing.Size(96' 17);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbUseRecursive.TabIndex = 6;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbbJumpType.Location = new System.Drawing.Point(338' 16);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbbJumpType.Location = new System.Drawing.Point(338' 16);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbbJumpType.Size = new System.Drawing.Size(189' 21);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbbJumpType.Size = new System.Drawing.Size(189' 21);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.cbbJumpType.TabIndex = 7;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(247' 18);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(247' 18);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(85' 13);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(85' 13);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(693' 284);
Magic Number,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(693' 284);
Missing Default,EpPathFinding.cs,GridBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridBox.cs,GridBox,The following switch statement is missing a default case: switch (iType)              {                  case BoxType.Normal:                      brush = new SolidBrush(Color.WhiteSmoke);                      break;                  case BoxType.End:                      brush = new SolidBrush(Color.Red);                      break;                  case BoxType.Start:                      brush = new SolidBrush(Color.Green);                      break;                  case BoxType.Wall:                      brush = new SolidBrush(Color.Gray);                      break;                            }
Missing Default,EpPathFinding.cs,GridBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\GridBox.cs,SwitchBox,The following switch statement is missing a default case: switch (this.boxType)              {                  case BoxType.Normal:                      if (this.brush != null)                          this.brush.Dispose();                      this.brush = new SolidBrush(Color.Gray);                      this.boxType = BoxType.Wall;                      break;                  case BoxType.Wall:                      if (this.brush != null)                          this.brush.Dispose();                      this.brush = new SolidBrush(Color.WhiteSmoke);                      this.boxType = BoxType.Normal;                      break;                }
Missing Default,EpPathFinding.cs,ResultBox,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\ResultBox.cs,ResultBox,The following switch statement is missing a default case: switch (iType)              {                  case ResultBoxType.Opened:                      brush = new SolidBrush(Color.AliceBlue);                      break;                  case ResultBoxType.Closed:                      brush = new SolidBrush(Color.LightGreen);                      break;                                            }
Missing Default,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,Form1_MouseMove,The following switch statement is missing a default case: switch (m_lastBoxType)                                  {                                      case BoxType.Normal:                                      case BoxType.Wall:                                          m_rectangles[widthTrav][heightTrav].SwitchBox();                                          this.Invalidate();                                          break;                                      case BoxType.Start:                                      case BoxType.End:                                            break;                                  }
Missing Default,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,Form1_MouseMove,The following switch statement is missing a default case: switch (m_lastBoxType)                                      {                                          case BoxType.Normal:                                          case BoxType.Wall:                                              if (m_rectangles[widthTrav][heightTrav].boxType == m_lastBoxType)                                              {                                                  m_rectangles[widthTrav][heightTrav].SwitchBox();                                                  m_lastBoxSelect = m_rectangles[widthTrav][heightTrav];                                                  this.Invalidate();                                              }                                              break;                                          case BoxType.Start:                                              m_lastBoxSelect.SetNormalBox();                                              m_lastBoxSelect = m_rectangles[widthTrav][heightTrav];                                              m_lastBoxSelect.SetStartBox();                                              this.Invalidate();                                              break;                                          case BoxType.End:                                              m_lastBoxSelect.SetNormalBox();                                              m_lastBoxSelect = m_rectangles[widthTrav][heightTrav];                                              m_lastBoxSelect.SetEndBox();                                              this.Invalidate();                                              break;                                      }
Missing Default,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,Form1_MouseDown,The following switch statement is missing a default case: switch(m_lastBoxType)                              {                                  case BoxType.Normal:                                  case BoxType.Wall:                                  m_rectangles[widthTrav][heightTrav].SwitchBox();                                  this.Invalidate();                                  break;                                  case BoxType.Start:                                  case BoxType.End:                                                                       break;                              }
Missing Default,EpPathFindingDemo,SearchGridForm,C:\repos\juhgiyo_EpPathFinding.cs\EpPathFindingDemo\SearchGridForm.cs,btnClearWall_Click,The following switch statement is missing a default case: switch (m_rectangles[widthTrav][heightTrav].boxType)                      {                          case BoxType.Normal:                          case BoxType.Start:                          case BoxType.End:                              break;                          case BoxType.Wall:                              m_rectangles[widthTrav][heightTrav].SetNormalBox();                              break;                      }
