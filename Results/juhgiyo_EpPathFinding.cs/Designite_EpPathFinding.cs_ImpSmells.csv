Implementation smell,Namespace,Class,File,Method,Description
Long Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The method has 361 lines of code.
Long Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The method has 160 lines of code.
Long Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,findNeighbors,The method has 241 lines of code.
Complex Method,EpPathFinding.cs,BaseGrid,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\BaseGrid.cs,GetNeighbors,Cyclomatic complexity of the method is 13
Complex Method,EpPathFinding.cs,DynamicGrid,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\DynamicGrid.cs,SetWalkableAt,Cyclomatic complexity of the method is 9
Complex Method,EpPathFinding.cs,StaticGrid,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\StaticGrid.cs,buildNodes,Cyclomatic complexity of the method is 8
Complex Method,EpPathFinding.cs,StaticGrid,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\StaticGrid.cs,Reset,Cyclomatic complexity of the method is 8
Complex Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,identifySuccessors,Cyclomatic complexity of the method is 9
Complex Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,Cyclomatic complexity of the method is 43
Complex Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,Cyclomatic complexity of the method is 33
Complex Method,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,findNeighbors,Cyclomatic complexity of the method is 57
Long Parameter List,EpPathFinding.cs,AStarParam,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\AStarFinder.cs,AStarParam,The method has 6 parameters. Parameters: iGrid' iStartPos' iEndPos' iweight' iDiagonalMovement' iMode
Long Parameter List,EpPathFinding.cs,JumpPointParam,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,JumpPointParam,The method has 7 parameters. Parameters: iGrid' iStartPos' iEndPos' iAllowEndNodeUnWalkable' iCrossCorner' iCrossAdjacentPoint' iMode
Long Parameter List,EpPathFinding.cs,JumpPointParam,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,JumpPointParam,The method has 5 parameters. Parameters: iGrid' iAllowEndNodeUnWalkable' iCrossCorner' iCrossAdjacentPoint' iMode
Long Parameter List,EpPathFinding.cs,JumpPointParam,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,JumpPointParam,The method has 6 parameters. Parameters: iGrid' iStartPos' iEndPos' iAllowEndNodeUnWalkable' iDiagonalMovement' iMode
Long Parameter List,EpPathFinding.cs,JumpPointParam,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,JumpPointParam,The method has 6 parameters. Parameters: iGrid' iStartPos' iEndPos' iAllowEndNodeUnWalkable' iDiagonalMovement' iMode
Long Parameter List,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The method has 5 parameters. Parameters: iParam' iX' iY' iPx' iPy
Long Parameter List,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The method has 5 parameters. Parameters: iParam' iX' iY' iPx' iPy
Long Parameter List,EpPathFinding.cs,ParamBase,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\ParamBase.cs,ParamBase,The method has 5 parameters. Parameters: iGrid' iStartPos' iEndPos' iDiagonalMovement' iMode
Long Statement,EpPathFinding.cs,AStarFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\AStarFinder.cs,FindPath,The length of the statement  "                        if (neighbor.heuristicCurNodeToEndLen == null) neighbor.heuristicCurNodeToEndLen = weight * heuristic(Math.Abs(x - endNode.x)' Math.Abs(y - endNode.y)); " is 152.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,FindPath,The length of the statement  "            if (iParam.CurEndNodeUnWalkableTreatment == EndNodeUnWalkableTreatment.ALLOW && !iParam.SearchGrid.IsWalkableAt(tEndNode.x' tEndNode.y)) " is 136.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,identifySuccessors,The length of the statement  "                        tJumpNode.heuristicCurNodeToEndLen = (tJumpNode.heuristicCurNodeToEndLen == null ? tHeuristic(Math.Abs(tJumpPoint.x - tEndX)' Math.Abs(tJumpPoint.y - tEndY)) : tJumpNode.heuristicCurNodeToEndLen); " is 196.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                        if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable) " is 123.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) || " is 220.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                    (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy))) " is 214.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                    if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) || " is 184.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                        (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1))) " is 178.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                    if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) || " is 184.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                        (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY))) " is 178.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                            if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)) " is 193.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) || " is 316.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                    (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))) " is 310.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                    if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) || " is 184.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                        (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1))) " is 178.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                    if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) || " is 184.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                                        (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy))) " is 178.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                            if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)) " is 193.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                        if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)) " is 193.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                        if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)) " is 193.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The length of the statement  "                        if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)) " is 193.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The length of the statement  "            if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable) " is 123.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The length of the statement  "                    if (iParam.SearchGrid.IsWalkableAt(iX + tDx' iY + tDy) && ( !iParam.SearchGrid.IsWalkableAt(iX' iY + tDy) || !iParam.SearchGrid.IsWalkableAt(iX + tDx' iY))) " is 156.
Long Statement,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,findNeighbors,The length of the statement  "                if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable) " is 123.
Complex Conditional,EpPathFinding.cs,DynamicGrid,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\DynamicGrid.cs,SetWalkableAt,The conditional expression  "iX == m_gridRect.minX || iX == m_gridRect.maxX || iY == m_gridRect.minY || iY == m_gridRect.maxY"  is complex.
Complex Conditional,EpPathFinding.cs,DynamicGridWPool,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\DynamicGridWPool.cs,SetWalkableAt,The conditional expression  "iX == m_gridRect.minX || iX == m_gridRect.maxX || iY == m_gridRect.minY || iY == m_gridRect.maxY"  is complex.
Complex Conditional,EpPathFinding.cs,PartialGridWPool,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\Grid\PartialGridWPool.cs,IsInside,The conditional expression  "iX < m_gridRect.minX || iX > m_gridRect.maxX || iY < m_gridRect.minY || iY > m_gridRect.maxY"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(iX - tDx' iY + tDy) && !iParam.SearchGrid.IsWalkableAt(iX - tDx' iY)) ||                          (iParam.SearchGrid.IsWalkableAt(iX + tDx' iY - tDy) && !iParam.SearchGrid.IsWalkableAt(iX' iY - tDy))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(iX + tDx' iY + 1) && !iParam.SearchGrid.IsWalkableAt(iX' iY + 1)) ||                              (iParam.SearchGrid.IsWalkableAt(iX + tDx' iY - 1) && !iParam.SearchGrid.IsWalkableAt(iX' iY - 1))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(iX + 1' iY + tDy) && !iParam.SearchGrid.IsWalkableAt(iX + 1' iY)) ||                              (iParam.SearchGrid.IsWalkableAt(iX - 1' iY + tDy) && !iParam.SearchGrid.IsWalkableAt(iX - 1' iY))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(iX' iY + 1) && !iParam.SearchGrid.IsWalkableAt(iX - tDx' iY + 1)) ||                              (iParam.SearchGrid.IsWalkableAt(iX' iY - 1) && !iParam.SearchGrid.IsWalkableAt(iX - tDx' iY - 1))"  is complex.
Complex Conditional,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jump,The conditional expression  "(iParam.SearchGrid.IsWalkableAt(iX + 1' iY) && !iParam.SearchGrid.IsWalkableAt(iX + 1' iY - tDy)) ||                              (iParam.SearchGrid.IsWalkableAt(iX - 1' iY) && !iParam.SearchGrid.IsWalkableAt(iX - 1' iY - tDy))"  is complex.
Virtual Method Call from Constructor,EpPathFinding.cs,ParamBase,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\ParamBase.cs,ParamBase,The constructor "ParamBase" calls a virtual method "GetNodeAt".
Virtual Method Call from Constructor,EpPathFinding.cs,ParamBase,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\ParamBase.cs,ParamBase,The constructor "ParamBase" calls a virtual method "GetNodeAt".
Magic Number,EpPathFinding.cs,AStarFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\AStarFinder.cs,FindPath,The following statement contains a magic number: Parallel.ForEach(neighbors' neighbor =>  #endif                  {  #if (UNITY)                      if (neighbor.isClosed) continue;  #else                      if (neighbor.isClosed) return;  #endif                      var x = neighbor.x;                      var y = neighbor.y;                      float ng = node.startToCurNodeLen + (float)((x - node.x == 0 || y - node.y == 0) ? 1 : Math.Sqrt(2));                        if (!neighbor.isOpened || ng < neighbor.startToCurNodeLen)                      {                          neighbor.startToCurNodeLen = ng;                          if (neighbor.heuristicCurNodeToEndLen == null) neighbor.heuristicCurNodeToEndLen = weight * heuristic(Math.Abs(x - endNode.x)' Math.Abs(y - endNode.y));                          neighbor.heuristicStartToEndLen = neighbor.startToCurNodeLen + neighbor.heuristicCurNodeToEndLen.Value;                          neighbor.parent = node;                          if (!neighbor.isOpened)                          {                              lock (lo)                              {                                  openList.Add(neighbor);                              }                              neighbor.isOpened = true;                          }                          else                          {                            }                      }                  }  #if (!UNITY)                  );
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Magic Number,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following statement contains a magic number: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
Duplicate Code,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The method contains a code clone-set at the following line numbers (starting from the method definition): ((87' 111)' (258' 282))
Missing Default,EpPathFinding.cs,JumpPointFinder,D:\research\architectureSmells\repos\juhgiyo_EpPathFinding.cs\EpPathFinding.cs\EpPathFinding.cs\PathFinder\JumpPointFinder.cs,jumpLoop,The following switch statement is missing a default case: switch (currentSnapshot.stage)                  {                      case 0:                          if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY))                          {                              retVal = null;                              continue;                          }                          else if (iParam.SearchGrid.GetNodeAt(currentSnapshot.iX' currentSnapshot.iY).Equals(iParam.EndNode))                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.tDx = currentSnapshot.iX - currentSnapshot.iPx;                          currentSnapshot.tDy = currentSnapshot.iY - currentSnapshot.iPy;                          if (iParam.DiagonalMovement == DiagonalMovement.Always || iParam.DiagonalMovement == DiagonalMovement.IfAtLeastOneWalkable)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                              // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 1;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                                // moving diagonally' must make sure one of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else if (iParam.DiagonalMovement==DiagonalMovement.Always)                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else if (iParam.DiagonalMovement == DiagonalMovement.OnlyWhenNoObstacles)                          {                              // check for forced neighbors                              // along the diagonal                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY)) ||                                      (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY + currentSnapshot.tDy) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy)))                                  {                                      retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                      continue;                                  }                              }                              // horizontally/vertically                              else                              {                                  if (currentSnapshot.tDx != 0)                                  {                                      // moving along x                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY + 1)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY - 1) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - currentSnapshot.tDx' currentSnapshot.iY - 1)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                                  else                                  {                                      if ((iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + 1' currentSnapshot.iY - currentSnapshot.tDy)) ||                                          (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY) && !iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX - 1' currentSnapshot.iY - currentSnapshot.tDy)))                                      {                                          retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                                          continue;                                      }                                  }                              }                                  // when moving diagonally' must check for vertical/horizontal jump points                              if (currentSnapshot.tDx != 0 && currentSnapshot.tDy != 0)                              {                                  currentSnapshot.stage = 3;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                                // moving diagonally' must make sure both of the vertical/horizontal                              // neighbors is open to allow the path                              if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                              {                                  newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                                  newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                          }                          else // if(iParam.DiagonalMovement == DiagonalMovement.Never)                          {                              if (currentSnapshot.tDx != 0)                              {                                  // moving along x                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY))                                  {                                      retVal= new GridPos(iX' iY);                                      continue;                                  }                              }                              else                              {                                  if (!iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                                  {                                      retVal = new GridPos(iX' iY);                                      continue;                                  }                              }                                //  must check for perpendicular jump points                              if (currentSnapshot.tDx != 0)                              {                                  currentSnapshot.stage = 5;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX;                                  newSnapshot.iY = currentSnapshot.iY + 1;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                              }                              else // tDy != 0                              {                                  currentSnapshot.stage = 6;                                  stack.Push(currentSnapshot);                                    newSnapshot = new JumpSnapshot();                                  newSnapshot.iX = currentSnapshot.iX + 1;                                  newSnapshot.iY = currentSnapshot.iY;                                  newSnapshot.iPx = currentSnapshot.iX;                                  newSnapshot.iPy = currentSnapshot.iY;                                  newSnapshot.stage = 0;                                  stack.Push(newSnapshot);                                  continue;                                }                          }                          retVal = null;                          break;                      case 1:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 2;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 2:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure one of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) || iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          else if (iParam.DiagonalMovement==DiagonalMovement.Always)                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 3:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            currentSnapshot.stage = 4;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 4:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                            // moving diagonally' must make sure both of the vertical/horizontal                          // neighbors is open to allow the path                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                      case 5:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX;                          newSnapshot.iY = currentSnapshot.iY - 1;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 6:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          currentSnapshot.stage = 7;                          stack.Push(currentSnapshot);                            newSnapshot = new JumpSnapshot();                          newSnapshot.iX = currentSnapshot.iX - 1;                          newSnapshot.iY = currentSnapshot.iY;                          newSnapshot.iPx = currentSnapshot.iX;                          newSnapshot.iPy = currentSnapshot.iY;                          newSnapshot.stage = 0;                          stack.Push(newSnapshot);                          break;                      case 7:                          if (retVal != null)                          {                              retVal = new GridPos(currentSnapshot.iX' currentSnapshot.iY);                              continue;                          }                          // keep going                          if (iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX + currentSnapshot.tDx' currentSnapshot.iY) && iParam.SearchGrid.IsWalkableAt(currentSnapshot.iX' currentSnapshot.iY + currentSnapshot.tDy))                          {                              newSnapshot = new JumpSnapshot();                              newSnapshot.iX = currentSnapshot.iX + currentSnapshot.tDx;                              newSnapshot.iY = currentSnapshot.iY + currentSnapshot.tDy;                              newSnapshot.iPx = currentSnapshot.iX;                              newSnapshot.iPy = currentSnapshot.iY;                              newSnapshot.stage = 0;                              stack.Push(newSnapshot);                              continue;                          }                          retVal = null;                          break;                  }
