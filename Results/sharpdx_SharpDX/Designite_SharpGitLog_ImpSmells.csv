Implementation smell,Namespace,Class,File,Method,Description
Long Method,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,Run,The method has 218 lines of code.
Complex Method,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,Run,Cyclomatic complexity of the method is 14
Long Statement,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,Run,The length of the statement  "            var writer = (OutputFile != null) ? new StreamWriter(new FileStream(OutputFile' FileMode.Create' FileAccess.Write)) : Console.Out; " is 130.
Long Statement,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,EscapeHtml,The length of the statement  "            return stringToEscape.Replace("&"' "&amp;").Replace("<"' "&lt;").Replace(">"' "&gt;").Replace("\""' "&quot;").Replace("'"' "&apos;"); " is 133.
Magic Number,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,Run,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  var result = line.Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);                    string project = string.Empty;                  var commitId = result[0];                  var content = result[1];                    var match = matchProject.Match(result[1]);                  if (match.Success)                  {                      project = match.Groups[1].Value;                      content = match.Groups[2].Value;                  }                    if (commitProjectOverrides.ContainsKey(commitId))                      project = commitProjectOverrides[commitId];                    if (projectOverrides.ContainsKey(project))                      project = projectOverrides[project];                    List<Tuple<string' string>> commitsPerProject;                  if (!commits.TryGetValue(project' out commitsPerProject))                  {                      commitsPerProject = new List<Tuple<string' string>>();                      commits[project] = commitsPerProject;                  }                    commitsPerProject.Add(new Tuple<string' string>(commitId' content));              }
Magic Number,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,Run,The following statement contains a magic number: while ((line = reader.ReadLine()) != null)              {                  var result = line.Split(new[] { ' ' }' 2' StringSplitOptions.RemoveEmptyEntries);                    string project = string.Empty;                  var commitId = result[0];                  var content = result[1];                    var match = matchProject.Match(result[1]);                  if (match.Success)                  {                      project = match.Groups[1].Value;                      content = match.Groups[2].Value;                  }                    if (commitProjectOverrides.ContainsKey(commitId))                      project = commitProjectOverrides[commitId];                    if (projectOverrides.ContainsKey(project))                      project = projectOverrides[project];                    List<Tuple<string' string>> commitsPerProject;                  if (!commits.TryGetValue(project' out commitsPerProject))                  {                      commitsPerProject = new List<Tuple<string' string>>();                      commits[project] = commitsPerProject;                  }                    commitsPerProject.Add(new Tuple<string' string>(commitId' content));              }
Magic Number,SharpGitLog,Program,C:\repos\sharpdx_SharpDX\Source\Tools\SharpGitLog\Program.cs,Run,The following statement contains a magic number: foreach (var key in keys)              {                  writer.WriteLine("## {0}"' key);                    var values = commits[key];                  values.Sort((left' right) => left.Item2.CompareTo(right.Item2));                  var groupedValues = values.GroupBy(x => x.Item2);                  writer.WriteLine();                    foreach (var groupedValue in groupedValues)                  {                      if (mergeBranchRegex.IsMatch(groupedValue.Key))                          continue;                        var message = EscapeHtml(groupedValue.Key);                      var changesets = groupedValue.Select(x => x.Item1).ToList();                        const string issueUrlGoogleCode = "http://code.google.com/p/sharpdx/issues/detail?id=$1";                      const string issueUrlGithub = "https://github.com/sharpdx/SharpDX/issues/$1";                        var issueMatches = regexIssue.Matches(message);                      if (issueMatches.Count > 0)                      {                          // voodoo magic:                          var issueNumber = int.Parse(issueMatches[0].Value.Split('#')[1].Trim());                            var issueUrl = issueNumber > 133 ? issueUrlGoogleCode : issueUrlGithub;                            message = regexIssue.Replace(message' $"[$0]({issueUrl})");                      }                        writer.Write($"  - {message} (");                        //const string changesetUrl = "http://code.google.com/p/sharpdx/source/detail?r={0}";                      const string changesetUrl = "https://github.com/sharpdx/SharpDX/commit/";                        if (changesets.Count == 1)                      {                          writer.Write($"[changes]({changesetUrl}{changesets[0]})");                      }                      else                      {                          writer.Write("changes: ");                          for (var i = 0; i < changesets.Count; i++)                          {                              if (i != 0)                                  writer.Write("' ");                                writer.Write($"[{changesets[i]}]({changesetUrl}{changesets[i]})");                          }                      }                        writer.WriteLine(")");                  }                    writer.WriteLine();              }
