Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,PatchFile,Cyclomatic complexity of the method is 9
Long Statement,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,CreateModuleInit,The length of the statement  "            bool isCallAlreadyDone = cctor.Body.Instructions.Any(instruction => instruction.OpCode == OpCodes.Call && instruction.Operand == method); " is 137.
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,ReplaceFixedStatement,The following statement contains a magic number: switch (index)              {                  case 0:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_0);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_0);                      break;                  case 1:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_1);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_1);                      break;                  case 2:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_2);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_2);                      break;                  case 3:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_3);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_3);                      break;                  default:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc' index);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc' index);                      break;              }
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,ReplaceFixedStatement,The following statement contains a magic number: switch (index)              {                  case 0:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_0);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_0);                      break;                  case 1:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_1);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_1);                      break;                  case 2:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_2);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_2);                      break;                  case 3:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_3);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_3);                      break;                  default:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc' index);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc' index);                      break;              }
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,ReplaceFixedArrayStatement,The following statement contains a magic number: switch (index)              {                  case 0:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_0);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_0);                      break;                  case 1:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_1);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_1);                      break;                  case 2:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_2);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_2);                      break;                  case 3:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_3);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_3);                      break;                  default:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc' index);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc' index);                      break;              }
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,ReplaceFixedArrayStatement,The following statement contains a magic number: switch (index)              {                  case 0:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_0);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_0);                      break;                  case 1:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_1);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_1);                      break;                  case 2:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_2);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_2);                      break;                  case 3:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc_3);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc_3);                      break;                  default:                      stlocFixed = ilProcessor.Create(OpCodes.Stloc' index);                      ldlocFixed = ilProcessor.Create(OpCodes.Ldloc' index);                      break;              }
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,PatchMethod,The following statement contains a magic number: if (method.DeclaringType.Name == "Interop")              {                  if (method.Name == "memcpy")                  {                      CreateMemcpy(method);                  }                  else if (method.Name == "memset")                  {                      CreateMemset(method);                  }                  else if ((method.Name == "Cast") || (method.Name == "CastOut"))                  {                      CreateCastMethod(method);                  }                  else if (method.Name == "CastArray")                  {                      CreateCastArrayMethod(method);                  }                  else if (method.Name == "Read" || (method.Name == "ReadOut") || (method.Name == "Read2D"))                  {                      if (method.Parameters.Count == 2)                          CreateReadMethod(method);                      else                          CreateReadRangeMethod(method);                  }                  else if (method.Name == "Write" || (method.Name == "Write2D"))                  {                      if (method.Parameters.Count == 2)                          CreateWriteMethod(method);                      else                          CreateWriteRangeMethod(method);                  }              }              else if (method.HasBody)              {                  var ilProcessor = method.Body.GetILProcessor();                    var instructions = method.Body.Instructions;                  Instruction instruction = null;                  Instruction previousInstruction;                  for (int i = 0; i < instructions.Count; i++)                  {                      previousInstruction = instruction;                      instruction = instructions[i];                        if (instruction.OpCode == OpCodes.Call                          && instruction.Operand is MethodReference)                      {                          var methodDescription = (MethodReference)instruction.Operand;                              if (methodDescription.Name.StartsWith("Calli") && methodDescription.DeclaringType.Name == "LocalInterop")                          {                              var callSite = new CallSite(methodDescription.ReturnType) { CallingConvention = MethodCallingConvention.StdCall };                              // Last parameter is the function ptr' so we don't add it as a parameter for calli                              // as it is already an implicit parameter for calli                              for (int j = 0; j < methodDescription.Parameters.Count - 1; j++)                              {                                  var parameterDefinition = methodDescription.Parameters[j];                                  callSite.Parameters.Add(parameterDefinition);                              }                                // Create calli Instruction                              var callIInstruction = ilProcessor.Create(OpCodes.Calli' callSite);                                // Replace instruction                              ilProcessor.Replace(instruction' callIInstruction);                          }                          else if (methodDescription.DeclaringType.Name == "Interop")                          {                              if (methodDescription.FullName.Contains("Fixed"))                              {                                  if (methodDescription.Parameters[0].ParameterType.IsArray)                                  {                                      ReplaceFixedArrayStatement(method' ilProcessor' instruction);                                  }                                  else                                  {                                      ReplaceFixedStatement(method' ilProcessor' instruction);                                  }                              }                              else if (methodDescription.Name.StartsWith("ReadInline"))                              {                                  this.ReplaceReadInline(method' ilProcessor' instruction);                              }                              else if (methodDescription.Name.StartsWith("CopyInline") || methodDescription.Name.StartsWith("WriteInline"))                              {                                  this.ReplaceCopyInline(method' ilProcessor' instruction);                              }                              else if (methodDescription.Name.StartsWith("SizeOf"))                              {                                  this.ReplaceSizeOfStructGeneric(method' ilProcessor' instruction);                              }                          }                      }                  }              }
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,PatchMethod,The following statement contains a magic number: if (method.DeclaringType.Name == "Interop")              {                  if (method.Name == "memcpy")                  {                      CreateMemcpy(method);                  }                  else if (method.Name == "memset")                  {                      CreateMemset(method);                  }                  else if ((method.Name == "Cast") || (method.Name == "CastOut"))                  {                      CreateCastMethod(method);                  }                  else if (method.Name == "CastArray")                  {                      CreateCastArrayMethod(method);                  }                  else if (method.Name == "Read" || (method.Name == "ReadOut") || (method.Name == "Read2D"))                  {                      if (method.Parameters.Count == 2)                          CreateReadMethod(method);                      else                          CreateReadRangeMethod(method);                  }                  else if (method.Name == "Write" || (method.Name == "Write2D"))                  {                      if (method.Parameters.Count == 2)                          CreateWriteMethod(method);                      else                          CreateWriteRangeMethod(method);                  }              }              else if (method.HasBody)              {                  var ilProcessor = method.Body.GetILProcessor();                    var instructions = method.Body.Instructions;                  Instruction instruction = null;                  Instruction previousInstruction;                  for (int i = 0; i < instructions.Count; i++)                  {                      previousInstruction = instruction;                      instruction = instructions[i];                        if (instruction.OpCode == OpCodes.Call                          && instruction.Operand is MethodReference)                      {                          var methodDescription = (MethodReference)instruction.Operand;                              if (methodDescription.Name.StartsWith("Calli") && methodDescription.DeclaringType.Name == "LocalInterop")                          {                              var callSite = new CallSite(methodDescription.ReturnType) { CallingConvention = MethodCallingConvention.StdCall };                              // Last parameter is the function ptr' so we don't add it as a parameter for calli                              // as it is already an implicit parameter for calli                              for (int j = 0; j < methodDescription.Parameters.Count - 1; j++)                              {                                  var parameterDefinition = methodDescription.Parameters[j];                                  callSite.Parameters.Add(parameterDefinition);                              }                                // Create calli Instruction                              var callIInstruction = ilProcessor.Create(OpCodes.Calli' callSite);                                // Replace instruction                              ilProcessor.Replace(instruction' callIInstruction);                          }                          else if (methodDescription.DeclaringType.Name == "Interop")                          {                              if (methodDescription.FullName.Contains("Fixed"))                              {                                  if (methodDescription.Parameters[0].ParameterType.IsArray)                                  {                                      ReplaceFixedArrayStatement(method' ilProcessor' instruction);                                  }                                  else                                  {                                      ReplaceFixedStatement(method' ilProcessor' instruction);                                  }                              }                              else if (methodDescription.Name.StartsWith("ReadInline"))                              {                                  this.ReplaceReadInline(method' ilProcessor' instruction);                              }                              else if (methodDescription.Name.StartsWith("CopyInline") || methodDescription.Name.StartsWith("WriteInline"))                              {                                  this.ReplaceCopyInline(method' ilProcessor' instruction);                              }                              else if (methodDescription.Name.StartsWith("SizeOf"))                              {                                  this.ReplaceSizeOfStructGeneric(method' ilProcessor' instruction);                              }                          }                      }                  }              }
Magic Number,SharpCli,InteropApp,C:\repos\sharpdx_SharpDX\Source\Tools\SharpCli\InteropApp.cs,ProgramFilesx86,The following statement contains a magic number: if (8 == IntPtr.Size                  || (!String.IsNullOrEmpty(Environment.GetEnvironmentVariable("PROCESSOR_ARCHITEW6432")))                  || Environment.GetEnvironmentVariable("ProgramFiles(x86)") != null)              {                  return Environment.GetEnvironmentVariable("ProgramFiles(x86)");              }
