Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KinectEx.Demo.Playback.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Playback.Store\MainPage.xaml.cs,OpenButton_Click,Cyclomatic complexity of the method is 13
Magic Number,KinectEx.Demo.Playback.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Playback.Store\MainPage.xaml.cs,OpenButton_Click,The following statement contains a magic number: if (file != null)              {                  _colorBitmap = null; // reset to force recreation for new file                    OutputCombo.Items.Clear();                  _replay = new KinectReplay(await file.OpenStreamForReadAsync());                  _replay.PropertyChanged += _replay_PropertyChanged;                  if (_replay.HasBodyFrames)                  {                      _replay.BodyFrameArrived += _replay_BodyFrameArrived;                      OutputCombo.Items.Add("Body");                  }                  if (_replay.HasColorFrames)                  {                      _replay.ColorFrameArrived += _replay_ColorFrameArrived;                      OutputCombo.Items.Add("Color");                  }                  if (_replay.HasDepthFrames)                  {                      _replay.DepthFrameArrived += _replay_DepthFrameArrived;                      OutputCombo.Items.Add("Depth");                  }                  if (_replay.HasInfraredFrames)                  {                      _replay.InfraredFrameArrived += _replay_InfraredFrameArrived;                      OutputCombo.Items.Add("Infrared");                  }                    if (OutputCombo.Items.Count > 0)                  {                      OutputCombo.SelectedIndex = 0;                      LocationSlider.Maximum = _replay.Duration.TotalMilliseconds;                      LocationSlider.TickFrequency = 1000;                      LocationSlider.SmallChange = 1000;                  }                  else                  {                      PlayButton.IsEnabled = false;                  }              }
Magic Number,KinectEx.Demo.Playback.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Playback.Store\MainPage.xaml.cs,OpenButton_Click,The following statement contains a magic number: if (file != null)              {                  _colorBitmap = null; // reset to force recreation for new file                    OutputCombo.Items.Clear();                  _replay = new KinectReplay(await file.OpenStreamForReadAsync());                  _replay.PropertyChanged += _replay_PropertyChanged;                  if (_replay.HasBodyFrames)                  {                      _replay.BodyFrameArrived += _replay_BodyFrameArrived;                      OutputCombo.Items.Add("Body");                  }                  if (_replay.HasColorFrames)                  {                      _replay.ColorFrameArrived += _replay_ColorFrameArrived;                      OutputCombo.Items.Add("Color");                  }                  if (_replay.HasDepthFrames)                  {                      _replay.DepthFrameArrived += _replay_DepthFrameArrived;                      OutputCombo.Items.Add("Depth");                  }                  if (_replay.HasInfraredFrames)                  {                      _replay.InfraredFrameArrived += _replay_InfraredFrameArrived;                      OutputCombo.Items.Add("Infrared");                  }                    if (OutputCombo.Items.Count > 0)                  {                      OutputCombo.SelectedIndex = 0;                      LocationSlider.Maximum = _replay.Duration.TotalMilliseconds;                      LocationSlider.TickFrequency = 1000;                      LocationSlider.SmallChange = 1000;                  }                  else                  {                      PlayButton.IsEnabled = false;                  }              }
