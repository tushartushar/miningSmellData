Implementation smell,Namespace,Class,File,Method,Description
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,MainPage,The following statement contains a magic number: _colorData = new byte[colorFrameDesc.LengthInPixels * 4];
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var picker = new FileSavePicker();                  picker.FileTypeChoices.Add("KinectEx.DVR Files"' new List<string>() {".kdvr"});                  picker.DefaultFileExtension = ".kdvr";                  picker.SuggestedFileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss");                    var file = await picker.PickSaveFileAsync();                    if (file != null)                  {                      // NOTE : Unlike the WPF sample which uses the "Automatic" mode' this example                      //        shows the use of the manual recording mode and does some work to                      //        optimize the recording process. The result is a better experience                      //        for this application and a better recording because fewer frames                      //        end up getting lost.                      _recorder = new KinectRecorder(await file.OpenStreamForWriteAsync());                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      InfraredCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  InfraredCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.Demo.Recorder.Store,MainPage,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.Store\MainPage.xaml.cs,DisplayCombo_SelectionChanged,The following statement contains a magic number: if (DisplayCombo.SelectedIndex == 0)              {                  _displayType = FrameTypes.Body;                  OutputImage.Source = null;              }              else if (DisplayCombo.SelectedIndex == 1)              {                  _displayType = FrameTypes.Color;                  OutputImage.Source = _colorBitmap.Bitmap;              }              else if (DisplayCombo.SelectedIndex == 2)              {                  _displayType = FrameTypes.Depth;                  OutputImage.Source = _depthBitmap.Bitmap;              }              else              {                  _displayType = FrameTypes.Infrared;                  OutputImage.Source = _infraredBitmap.Bitmap;              }
