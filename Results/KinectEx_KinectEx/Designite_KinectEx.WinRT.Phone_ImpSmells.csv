Implementation smell,Namespace,Class,File,Method,Description
Long Method,KinectEx.DVR,ReplayBodyFrame,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\ReplayBodyFrame.cs,CreateBodyFromReader,The method has 111 lines of code.
Complex Method,KinectEx.DVR,KinectReplay,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\KinectReplay.cs,KinectReplay,Cyclomatic complexity of the method is 18
Complex Method,KinectEx.DVR,ReplayBodyFrame,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\ReplayBodyFrame.cs,CreateBodyFromReader,Cyclomatic complexity of the method is 13
Complex Method,KinectEx.Smoothing,ExponentialJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\ExponentialJoint.cs,Update,Cyclomatic complexity of the method is 8
Long Parameter List,KinectEx,BodyExtensions,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,GetAngleBetween,The method has 5 parameters. Parameters: body' boneTypeA' boneTypeB' invertBoneA' invertBoneB
Long Identifier,KinectEx.Smoothing,KalmanSmoothingParameters,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\KalmanSmoothingParameters.cs,,The length of the parameter DEFAULT_MEASUREMENT_UNCERTAINTY is 31.
Long Statement,KinectEx.DVR,RawColorCodec,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\RawColorCodec.cs,EncodeAsync,The length of the statement  "                var newBytes = await Task.FromResult(bmp.Resize(this.OutputWidth' this.OutputHeight' WriteableBitmapExtensions.Interpolation.NearestNeighbor).ToByteArray()); " is 157.
Long Statement,KinectEx.Smoothing,KalmanJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\KalmanJoint.cs,Update,The length of the statement  "                _filteredPosition = (_positionVariance * reportedPosition + _measurementUncertainty * _filteredPosition) / (_measurementUncertainty + _positionVariance); " is 153.
Long Statement,KinectEx.Smoothing,KalmanJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\KalmanJoint.cs,Update,The length of the statement  "                _velocity = (_velocityVariance * (reportedPosition - oldPosition) + _measurementUncertainty * _velocity) / (_measurementUncertainty + _velocityVariance); " is 153.
Empty Catch Block,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,RenderClippedEdges,The method has an empty catch block.
Empty Catch Block,KinectEx.DVR,ReplayColorFrame,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\ReplayColorFrame.cs,FromReader,The method has an empty catch block.
Magic Number,KinectEx,BodyExtensions,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: theta = Math.PI - 2.0 * Math.Asin((-vector1 - vector2).Length() / 2.0);
Magic Number,KinectEx,BodyExtensions,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: theta = Math.PI - 2.0 * Math.Asin((-vector1 - vector2).Length() / 2.0);
Magic Number,KinectEx,BodyExtensions,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: return theta * (180.0 / Math.PI);
Magic Number,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _width = 512;
Magic Number,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _height = 424;
Magic Number,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _halfWidth = _width / 2;
Magic Number,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _halfHeight = _height / 2;
Magic Number,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,DrawBonesAndJoints,The following statement contains a magic number: inferredJointColor.A = 128;
Magic Number,KinectEx,BodyImageExtension,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,DrawBone,The following statement contains a magic number: color.A = 192;
Magic Number,KinectEx,ColorFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\ColorFrameBitmap.cs,ColorFrameBitmap,The following statement contains a magic number: _bytes = new byte[_bitmap.PixelWidth * _bitmap.PixelHeight * 4];
Magic Number,KinectEx,DepthFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\DepthFrameBitmap.cs,Init,The following statement contains a magic number: _bytes = new byte[width * height * 4];
Magic Number,KinectEx,DepthFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\DepthFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  for (int i = 0; i < data.Length; ++i)                  {                      ushort depth = data[i];                      byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);                      _bytes[colorPixelIndex++] = intensity; // B                      _bytes[colorPixelIndex++] = intensity; // G                      _bytes[colorPixelIndex++] = intensity; // R                      _bytes[colorPixelIndex++] = 255;       // A                  }    #if NETFX_CORE              await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () => {                  _stream.Seek(0' SeekOrigin.Begin);                  _stream.Write(_bytes' 0' _bytes.Length);                  _bitmap.Invalidate();              });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx,InfraredFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,Init,The following statement contains a magic number: _bytes = new byte[width * height * 4];
Magic Number,KinectEx,InfraredFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,Init,The following statement contains a magic number: _stride = width * 4;
Magic Number,KinectEx,InfraredFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  int dataLen = data.Length;                  float avgSd = _avg * _sd;                    if (_resetAvgSdCounter++ == 15)                  {                      _avg = data.Average(d => (d / _max));                      _resetAvgSdCounter = 0;                  }                  for (int i = 0; i < dataLen; ++i)                  {                      float intensityRatio = (float)data[i] / _max;                      intensityRatio /= avgSd;                      intensityRatio = Math.Min(_infraredOutputValueMaximum' intensityRatio);                      intensityRatio = Math.Max(_infraredOutputValueMinimum' intensityRatio);                      byte intensity = (byte)(intensityRatio * 255.0f);                      _bytes[colorPixelIndex++] = intensity;  // B                      _bytes[colorPixelIndex++] = intensity;  // G                      _bytes[colorPixelIndex++] = intensity;  // R                      _bytes[colorPixelIndex++] = 255;        // A                  }    #if NETFX_CORE                  await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                  {                      _stream.Seek(0' SeekOrigin.Begin);                      _stream.Write(_bytes' 0' _bytes.Length);                      _bitmap.Invalidate();                  });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx,InfraredFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  int dataLen = data.Length;                  float avgSd = _avg * _sd;                    if (_resetAvgSdCounter++ == 15)                  {                      _avg = data.Average(d => (d / _max));                      _resetAvgSdCounter = 0;                  }                  for (int i = 0; i < dataLen; ++i)                  {                      float intensityRatio = (float)data[i] / _max;                      intensityRatio /= avgSd;                      intensityRatio = Math.Min(_infraredOutputValueMaximum' intensityRatio);                      intensityRatio = Math.Max(_infraredOutputValueMinimum' intensityRatio);                      byte intensity = (byte)(intensityRatio * 255.0f);                      _bytes[colorPixelIndex++] = intensity;  // B                      _bytes[colorPixelIndex++] = intensity;  // G                      _bytes[colorPixelIndex++] = intensity;  // R                      _bytes[colorPixelIndex++] = 255;        // A                  }    #if NETFX_CORE                  await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                  {                      _stream.Seek(0' SeekOrigin.Begin);                      _stream.Write(_bytes' 0' _bytes.Length);                      _bitmap.Invalidate();                  });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx,InfraredFrameBitmap,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  int dataLen = data.Length;                  float avgSd = _avg * _sd;                    if (_resetAvgSdCounter++ == 15)                  {                      _avg = data.Average(d => (d / _max));                      _resetAvgSdCounter = 0;                  }                  for (int i = 0; i < dataLen; ++i)                  {                      float intensityRatio = (float)data[i] / _max;                      intensityRatio /= avgSd;                      intensityRatio = Math.Min(_infraredOutputValueMaximum' intensityRatio);                      intensityRatio = Math.Max(_infraredOutputValueMinimum' intensityRatio);                      byte intensity = (byte)(intensityRatio * 255.0f);                      _bytes[colorPixelIndex++] = intensity;  // B                      _bytes[colorPixelIndex++] = intensity;  // G                      _bytes[colorPixelIndex++] = intensity;  // R                      _bytes[colorPixelIndex++] = 255;        // A                  }    #if NETFX_CORE                  await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                  {                      _stream.Seek(0' SeekOrigin.Begin);                      _stream.Write(_bytes' 0' _bytes.Length);                      _bitmap.Invalidate();                  });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx.DVR,JpegColorCodec,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\JpegColorCodec.cs,EncodeAsync,The following statement contains a magic number: var qualityValue = new BitmapTypedValue(this.JpegQuality / 100.0' PropertyType.Single);
Magic Number,KinectEx.DVR,JpegColorCodec,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\JpegColorCodec.cs,EncodeAsync,The following statement contains a magic number: encoder.SetPixelData(                      BitmapPixelFormat.Bgra8'                      BitmapAlphaMode.Straight'                      (uint)this.Width'                      (uint)this.Height'                      96'                      96'                      bytes);
Magic Number,KinectEx.DVR,JpegColorCodec,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\JpegColorCodec.cs,EncodeAsync,The following statement contains a magic number: encoder.SetPixelData(                      BitmapPixelFormat.Bgra8'                      BitmapAlphaMode.Straight'                      (uint)this.Width'                      (uint)this.Height'                      96'                      96'                      bytes);
Magic Number,KinectEx.DVR,KinectReplay,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\KinectReplay.cs,ExportColorFramesAsync,The following statement contains a magic number: numFrames = mills / 33;
Magic Number,KinectEx.DVR,KinectReplay,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\KinectReplay.cs,ExportColorFramesAsync,The following statement contains a magic number: mills > 60
Magic Number,KinectEx.DVR,ReplayDepthFrame,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\ReplayDepthFrame.cs,GetFrameDataAsync,The following statement contains a magic number: return Task<ushort[]>.Run(() =>              {                  Monitor.Enter(Stream);                  var reader = new BinaryReader(Stream);                  if (_staticBytes == null)                      _staticBytes = new byte[this.Width * this.Height * 2];                  if (_staticData == null)                      _staticData = new ushort[this.Width * this.Height];                    long savedPosition = Stream.Position;                  Stream.Position = StreamPosition;                    reader.Read(_staticBytes' 0' _staticBytes.Length);                  System.Buffer.BlockCopy(_staticBytes' 0' _staticData' 0' _staticBytes.Length);                    Stream.Position = savedPosition;                    Monitor.Exit(Stream);                  return _staticData;              });
Magic Number,KinectEx.DVR,ReplayInfraredFrame,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayInfraredFrame.cs,GetFrameDataAsync,The following statement contains a magic number: return Task<ushort[]>.Run(() => {                  Monitor.Enter(Stream);                  var reader = new BinaryReader(Stream);                  if (_staticBytes == null)                      _staticBytes = new byte[this.Width * this.Height * 2];                  if (_staticData == null)                      _staticData = new ushort[this.Width * this.Height];                    long savedPosition = Stream.Position;                  Stream.Position = StreamPosition;                    reader.Read(_staticBytes' 0' _staticBytes.Length);                  System.Buffer.BlockCopy(_staticBytes' 0' _staticData' 0' _staticBytes.Length);                    Stream.Position = savedPosition;                  Monitor.Exit(Stream);                  return _staticData;              });
Magic Number,KinectEx.Smoothing,ExponentialJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\ExponentialJoint.cs,ExponentialJoint,The following statement contains a magic number: _jitterRadius = Math.Max(0.0001f' parms.JitterRadius);
Magic Number,KinectEx.Smoothing,ExponentialJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\ExponentialJoint.cs,Update,The following statement contains a magic number: jitterRadius *= 2.0f;
Magic Number,KinectEx.Smoothing,ExponentialJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\ExponentialJoint.cs,Update,The following statement contains a magic number: maxDeviationRadius *= 2.0f;
Magic Number,KinectEx.Smoothing,KalmanJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\KalmanJoint.cs,Update,The following statement contains a magic number: _positionVariance = new Vector3(1000f);
Magic Number,KinectEx.Smoothing,KalmanJoint,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\smoothing\KalmanJoint.cs,Update,The following statement contains a magic number: _velocityVariance = new Vector3(1000f);
Missing Default,KinectEx.DVR,KinectReplay,D:\research\architectureSmells\repos\KinectEx_KinectEx\src\kinectex\dvr\KinectReplay.cs,KinectReplay,The following switch statement is missing a default case: switch (type)                      {                          case FrameTypes.Body:                              if (_bodyReplay == null)                              {                                  _bodyReplay = new ReplayBodySystem();                                  _activeReplaySystems.Add(_bodyReplay);                                  _bodyReplay.PropertyChanged += replay_PropertyChanged;                                  _bodyReplay.FrameArrived += bodyReplay_FrameArrived;                              }                              _bodyReplay.AddFrame(_reader' version);                              break;                          case FrameTypes.Color:                              if (_colorReplay == null)                              {                                  IColorCodec codec = new RawColorCodec();                                  if (metadata.ColorCodecId == ColorCodecs.Jpeg.CodecId)                                      codec = new JpegColorCodec();                                    _colorReplay = new ReplayColorSystem(codec);                                  _activeReplaySystems.Add(_colorReplay);                                  _colorReplay.PropertyChanged += replay_PropertyChanged;                                  _colorReplay.FrameArrived += colorReplay_FrameArrived;                              }                              _colorReplay.AddFrame(_reader);                              break;                          case FrameTypes.Depth:                              if (_depthReplay == null)                              {                                  _depthReplay = new ReplayDepthSystem();                                  _activeReplaySystems.Add(_depthReplay);                                  _depthReplay.PropertyChanged += replay_PropertyChanged;                                  _depthReplay.FrameArrived += depthReplay_FrameArrived;                              }                              _depthReplay.AddFrame(_reader);                              break;                          case FrameTypes.Infrared:                              if (_infraredReplay == null)                              {                                  _infraredReplay = new ReplayInfraredSystem();                                  _activeReplaySystems.Add(_infraredReplay);                                  _infraredReplay.PropertyChanged += replay_PropertyChanged;                                  _infraredReplay.FrameArrived += infraredReplay_FrameArrived;                              }                              _infraredReplay.AddFrame(_reader);                              break;                      }
