Implementation smell,Namespace,Class,File,Method,Description
Long Method,KinectEx.DVR,ReplayBodyFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayBodyFrame.cs,CreateBodyFromReader,The method has 111 lines of code.
Complex Method,KinectEx.DVR,KinectRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectRecorder.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,KinectEx.DVR,KinectRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectRecorder.cs,Start,Cyclomatic complexity of the method is 10
Complex Method,KinectEx.DVR,KinectReplay,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectReplay.cs,KinectReplay,Cyclomatic complexity of the method is 11
Complex Method,KinectEx.DVR,ReplayBodyFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayBodyFrame.cs,CreateBodyFromReader,Cyclomatic complexity of the method is 13
Long Parameter List,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,GetAngleBetween,The method has 5 parameters. Parameters: body' boneTypeA' boneTypeB' invertBoneA' invertBoneB
Long Parameter List,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,GetAngleBetween,The method has 5 parameters. Parameters: body' boneTypeA' boneTypeB' invertBoneA' invertBoneB
Long Identifier,KinectEx.DVR,KinectRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectRecorder.cs,,The length of the parameter _processFramesCancellationTokenSource is 37.
Long Identifier,KinectEx.Smoothing,KalmanSmoothingParameters,C:\repos\KinectEx_KinectEx\src\KinectEx\Smoothing\KalmanSmoothingParameters.cs,,The length of the parameter DEFAULT_MEASUREMENT_UNCERTAINTY is 31.
Long Statement,KinectEx.DVR,RawColorCodec,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\RawColorCodec.cs,EncodeAsync,The length of the statement  "                var newBytes = await Task.FromResult(bmp.Resize(this.OutputWidth' this.OutputHeight' WriteableBitmapExtensions.Interpolation.NearestNeighbor).ToByteArray()); " is 157.
Long Statement,KinectEx.Smoothing,KalmanJoint,C:\repos\KinectEx_KinectEx\src\KinectEx\Smoothing\KalmanJoint.cs,Update,The length of the statement  "                _filteredPosition = (_positionVariance * reportedPosition + _measurementUncertainty * _filteredPosition) / (_measurementUncertainty + _positionVariance); " is 153.
Long Statement,KinectEx.Smoothing,KalmanJoint,C:\repos\KinectEx_KinectEx\src\KinectEx\Smoothing\KalmanJoint.cs,Update,The length of the statement  "                _velocity = (_velocityVariance * (reportedPosition - oldPosition) + _measurementUncertainty * _velocity) / (_measurementUncertainty + _velocityVariance); " is 153.
Empty Catch Block,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,RenderClippedEdges,The method has an empty catch block.
Empty Catch Block,KinectEx.DVR,ReplayColorFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayColorFrame.cs,FromReader,The method has an empty catch block.
Magic Number,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: if (ratio < 0)              {                  theta = Math.PI - 2.0 * Math.Asin((-vector1 - vector2).Length() / 2.0);              }              else              {                  theta = 2.0 * Math.Asin((vector1 - vector2).Length() / 2.0);              }
Magic Number,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: if (ratio < 0)              {                  theta = Math.PI - 2.0 * Math.Asin((-vector1 - vector2).Length() / 2.0);              }              else              {                  theta = 2.0 * Math.Asin((vector1 - vector2).Length() / 2.0);              }
Magic Number,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: if (ratio < 0)              {                  theta = Math.PI - 2.0 * Math.Asin((-vector1 - vector2).Length() / 2.0);              }              else              {                  theta = 2.0 * Math.Asin((vector1 - vector2).Length() / 2.0);              }
Magic Number,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: if (ratio < 0)              {                  theta = Math.PI - 2.0 * Math.Asin((-vector1 - vector2).Length() / 2.0);              }              else              {                  theta = 2.0 * Math.Asin((vector1 - vector2).Length() / 2.0);              }
Magic Number,KinectEx,BodyExtensions,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyExtensions.cs,AngleBetween,The following statement contains a magic number: return theta * (180.0 / Math.PI);
Magic Number,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _width = 512;
Magic Number,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _height = 424;
Magic Number,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _halfWidth = _width / 2;
Magic Number,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,BodyImageExtension,The following statement contains a magic number: _halfHeight = _height / 2;
Magic Number,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,DrawBonesAndJoints,The following statement contains a magic number: inferredJointColor.A = 128;
Magic Number,KinectEx,BodyImageExtension,C:\repos\KinectEx_KinectEx\src\KinectEx\BodyImageExtension.cs,DrawBone,The following statement contains a magic number: if (startJoint.TrackingState != TrackingState.Tracked || endJoint.TrackingState != TrackingState.Tracked)              {                  color.A = 192;              }
Magic Number,KinectEx,ColorFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\ColorFrameBitmap.cs,ColorFrameBitmap,The following statement contains a magic number: _bytes = new byte[width * height * 4];
Magic Number,KinectEx,ColorFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\ColorFrameBitmap.cs,ColorFrameBitmap,The following statement contains a magic number: _bytes = new byte[_bitmap.PixelWidth * _bitmap.PixelHeight * 4];
Magic Number,KinectEx,DepthFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\DepthFrameBitmap.cs,Init,The following statement contains a magic number: _bytes = new byte[width * height * 4];
Magic Number,KinectEx,DepthFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\DepthFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  for (int i = 0; i < data.Length; ++i)                  {                      ushort depth = data[i];                      byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);                      _bytes[colorPixelIndex++] = intensity; // B                      _bytes[colorPixelIndex++] = intensity; // G                      _bytes[colorPixelIndex++] = intensity; // R                      _bytes[colorPixelIndex++] = 255;       // A                  }    #if NETFX_CORE              await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () => {                  _stream.Seek(0' SeekOrigin.Begin);                  _stream.Write(_bytes' 0' _bytes.Length);                  _bitmap.Invalidate();              });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx,InfraredFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,Init,The following statement contains a magic number: _bytes = new byte[width * height * 4];
Magic Number,KinectEx,InfraredFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,Init,The following statement contains a magic number: _stride = width * 4;
Magic Number,KinectEx,InfraredFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  int dataLen = data.Length;                  float avgSd = _avg * _sd;                    if (_resetAvgSdCounter++ == 15)                  {                      _avg = data.Average(d => (d / _max));                      _resetAvgSdCounter = 0;                  }                  for (int i = 0; i < dataLen; ++i)                  {                      float intensityRatio = (float)data[i] / _max;                      intensityRatio /= avgSd;                      intensityRatio = Math.Min(_infraredOutputValueMaximum' intensityRatio);                      intensityRatio = Math.Max(_infraredOutputValueMinimum' intensityRatio);                      byte intensity = (byte)(intensityRatio * 255.0f);                      _bytes[colorPixelIndex++] = intensity;  // B                      _bytes[colorPixelIndex++] = intensity;  // G                      _bytes[colorPixelIndex++] = intensity;  // R                      _bytes[colorPixelIndex++] = 255;        // A                  }    #if NETFX_CORE                  await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                  {                      _stream.Seek(0' SeekOrigin.Begin);                      _stream.Write(_bytes' 0' _bytes.Length);                      _bitmap.Invalidate();                  });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx,InfraredFrameBitmap,C:\repos\KinectEx_KinectEx\src\KinectEx\InfraredFrameBitmap.cs,UpdateAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  int colorPixelIndex = 0;                  int dataLen = data.Length;                  float avgSd = _avg * _sd;                    if (_resetAvgSdCounter++ == 15)                  {                      _avg = data.Average(d => (d / _max));                      _resetAvgSdCounter = 0;                  }                  for (int i = 0; i < dataLen; ++i)                  {                      float intensityRatio = (float)data[i] / _max;                      intensityRatio /= avgSd;                      intensityRatio = Math.Min(_infraredOutputValueMaximum' intensityRatio);                      intensityRatio = Math.Max(_infraredOutputValueMinimum' intensityRatio);                      byte intensity = (byte)(intensityRatio * 255.0f);                      _bytes[colorPixelIndex++] = intensity;  // B                      _bytes[colorPixelIndex++] = intensity;  // G                      _bytes[colorPixelIndex++] = intensity;  // R                      _bytes[colorPixelIndex++] = 255;        // A                  }    #if NETFX_CORE                  await _bitmap.Dispatcher.RunAsync(CoreDispatcherPriority.Normal' () =>                  {                      _stream.Seek(0' SeekOrigin.Begin);                      _stream.Write(_bytes' 0' _bytes.Length);                      _bitmap.Invalidate();                  });  #else                  await _bitmap.Dispatcher.InvokeAsync(() =>                  {                      _bitmap.FromByteArray(_bytes);                  });  #endif              });
Magic Number,KinectEx.DVR,DepthRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\DepthRecorder.cs,RecordAsync,The following statement contains a magic number: await Task.Run(() =>              {                  try                  {                      // Header                      _writer.Write((int)frame.FrameType);                      _writer.Write(frame.RelativeTime.TotalMilliseconds);                        // Data                      using (var dataStream = new MemoryStream())                      {                          using (var dataWriter = new BinaryWriter(dataStream))                          {                              dataWriter.Write(frame.DepthMinReliableDistance);                              dataWriter.Write(frame.DepthMaxReliableDistance);                                dataWriter.Write(frame.Width);                              dataWriter.Write(frame.Height);                              dataWriter.Write(frame.BytesPerPixel);                                if (_staticBytes == null)                                  _staticBytes = new byte[frame.FrameData.Length * 2];                                System.Buffer.BlockCopy(frame.FrameData' 0' _staticBytes' 0' _staticBytes.Length);                                dataWriter.Write(_staticBytes);                                // Reset frame data stream                              dataWriter.Flush();                              dataStream.Position = 0;                                // Write FrameSize                              _writer.Write(dataStream.Length);                                // Write actual frame data                              dataStream.CopyTo(_writer.BaseStream);                                // Write end of frame marker                              _writer.Write(ReplayFrame.EndOfFrameMarker);                          }                      }                  }                  catch (Exception ex)                  {                      // TODO: Change to log the error                      System.Diagnostics.Debug.WriteLine(ex);                  }              });
Magic Number,KinectEx.DVR,InfraredRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\InfraredRecorder.cs,RecordAsync,The following statement contains a magic number: await Task.Run(() =>              {                  try                  {                      // Header                      _writer.Write((int)frame.FrameType);                      _writer.Write(frame.RelativeTime.TotalMilliseconds);                        // Data                      using (var dataStream = new MemoryStream())                      {                          using (var dataWriter = new BinaryWriter(dataStream))                          {                              dataWriter.Write(frame.Width);                              dataWriter.Write(frame.Height);                              dataWriter.Write(frame.BytesPerPixel);                                if (_staticBytes == null)                                  _staticBytes = new byte[frame.FrameData.Length * 2];                                System.Buffer.BlockCopy(frame.FrameData' 0' _staticBytes' 0' _staticBytes.Length);                                dataWriter.Write(_staticBytes);                                // Reset frame data stream                              dataWriter.Flush();                              dataStream.Position = 0;                                // Write FrameSize                              _writer.Write(dataStream.Length);                                // Write actual frame data                              dataStream.CopyTo(_writer.BaseStream);                                // Write end of frame marker                              _writer.Write(ReplayFrame.EndOfFrameMarker);                          }                      }                  }                  catch (Exception ex)                  {                      // TODO: Change to log the error                      System.Diagnostics.Debug.WriteLine(ex);                  }              });
Magic Number,KinectEx.DVR,JpegColorCodec,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\JpegColorCodec.cs,EncodeAsync,The following statement contains a magic number: using (var jpegStream = new InMemoryRandomAccessStream())              {                  var propertySet = new BitmapPropertySet();                  var qualityValue = new BitmapTypedValue(this.JpegQuality / 100.0' PropertyType.Single);                  propertySet.Add("ImageQuality"' qualityValue);                    var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.JpegEncoderId' jpegStream' propertySet);                  if (this.Width != this.OutputWidth)                  {                      encoder.BitmapTransform.ScaledWidth = (uint)this.OutputWidth;                      encoder.BitmapTransform.ScaledHeight = (uint)this.OutputHeight;                  }                    encoder.SetPixelData(                      BitmapPixelFormat.Bgra8'                      BitmapAlphaMode.Straight'                      (uint)this.Width'                      (uint)this.Height'                      96'                      96'                      bytes);                  await encoder.FlushAsync();                    if (writer.BaseStream == null || writer.BaseStream.CanWrite == false)                      return;                    // Header                  writer.Write(this.OutputWidth);                  writer.Write(this.OutputHeight);                  writer.Write((int)jpegStream.Size);                    // Data                  jpegStream.AsStreamForRead().CopyTo(writer.BaseStream);              }
Magic Number,KinectEx.DVR,JpegColorCodec,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\JpegColorCodec.cs,EncodeAsync,The following statement contains a magic number: using (var jpegStream = new InMemoryRandomAccessStream())              {                  var propertySet = new BitmapPropertySet();                  var qualityValue = new BitmapTypedValue(this.JpegQuality / 100.0' PropertyType.Single);                  propertySet.Add("ImageQuality"' qualityValue);                    var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.JpegEncoderId' jpegStream' propertySet);                  if (this.Width != this.OutputWidth)                  {                      encoder.BitmapTransform.ScaledWidth = (uint)this.OutputWidth;                      encoder.BitmapTransform.ScaledHeight = (uint)this.OutputHeight;                  }                    encoder.SetPixelData(                      BitmapPixelFormat.Bgra8'                      BitmapAlphaMode.Straight'                      (uint)this.Width'                      (uint)this.Height'                      96'                      96'                      bytes);                  await encoder.FlushAsync();                    if (writer.BaseStream == null || writer.BaseStream.CanWrite == false)                      return;                    // Header                  writer.Write(this.OutputWidth);                  writer.Write(this.OutputHeight);                  writer.Write((int)jpegStream.Size);                    // Data                  jpegStream.AsStreamForRead().CopyTo(writer.BaseStream);              }
Magic Number,KinectEx.DVR,JpegColorCodec,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\JpegColorCodec.cs,EncodeAsync,The following statement contains a magic number: using (var jpegStream = new InMemoryRandomAccessStream())              {                  var propertySet = new BitmapPropertySet();                  var qualityValue = new BitmapTypedValue(this.JpegQuality / 100.0' PropertyType.Single);                  propertySet.Add("ImageQuality"' qualityValue);                    var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.JpegEncoderId' jpegStream' propertySet);                  if (this.Width != this.OutputWidth)                  {                      encoder.BitmapTransform.ScaledWidth = (uint)this.OutputWidth;                      encoder.BitmapTransform.ScaledHeight = (uint)this.OutputHeight;                  }                    encoder.SetPixelData(                      BitmapPixelFormat.Bgra8'                      BitmapAlphaMode.Straight'                      (uint)this.Width'                      (uint)this.Height'                      96'                      96'                      bytes);                  await encoder.FlushAsync();                    if (writer.BaseStream == null || writer.BaseStream.CanWrite == false)                      return;                    // Header                  writer.Write(this.OutputWidth);                  writer.Write(this.OutputHeight);                  writer.Write((int)jpegStream.Size);                    // Data                  jpegStream.AsStreamForRead().CopyTo(writer.BaseStream);              }
Magic Number,KinectEx.DVR,KinectRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectRecorder.cs,ProcessFramesAsync,The following statement contains a magic number: await Task.Run(async () =>              {                  while (true)                  {                      cancellationToken.ThrowIfCancellationRequested();                        ReplayFrame frame;                      if (_recordQueue.TryDequeue(out frame))                      {                          try                          {                              await _writerSemaphore.WaitAsync();                                if (frame is ReplayBodyFrame)                              {                                  await _bodyRecorder.RecordAsync((ReplayBodyFrame)frame);                                  System.Diagnostics.Debug.WriteLine("--- Processed Body Frame ({0})"' _recordQueue.Count);                              }                              else if (frame is ReplayColorFrame)                              {                                  await _colorRecorder.RecordAsync((ReplayColorFrame)frame);                                  System.Diagnostics.Debug.WriteLine("--- Processed Color Frame ({0})"' _recordQueue.Count);                              }                              else if (frame is ReplayDepthFrame)                              {                                  await _depthRecorder.RecordAsync((ReplayDepthFrame)frame);                                  System.Diagnostics.Debug.WriteLine("--- Processed Depth Frame ({0})"' _recordQueue.Count);                              }                              else if (frame is ReplayInfraredFrame)                              {                                  await _infraredRecorder.RecordAsync((ReplayInfraredFrame)frame);                                  System.Diagnostics.Debug.WriteLine("--- Processed Infrared Frame ({0})"' _recordQueue.Count);                              }                              Flush();                          }                          catch (Exception ex)                          {                              // TODO: Change to log the error                              System.Diagnostics.Debug.WriteLine(ex);                          }                          finally                          {                              _writerSemaphore.Release();                          }                      }                      else                      {                          await Task.Delay(100);                          if (_recordQueue.IsEmpty && _isStarted == false)                          {                              break;                          }                      }                  }              }' cancellationToken).ConfigureAwait(false);
Magic Number,KinectEx.DVR,KinectRecorder,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectRecorder.cs,Flush,The following statement contains a magic number: if (now.Subtract(_previousFlushTime).TotalSeconds > 10)              {                  _previousFlushTime = now;                  _writer.Flush();              }
Magic Number,KinectEx.DVR,KinectReplay,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectReplay.cs,ExportColorFramesAsync,The following statement contains a magic number: foreach (var frame in _colorReplay.Frames)              {                  ReplayColorFrame rcf = frame as ReplayColorFrame;                    var elapsed = rcf.RelativeTime - lastRelativeTime;                  lastRelativeTime = rcf.RelativeTime;                  var numFrames = 1;                  var mills = (int)Math.Ceiling(elapsed.TotalMilliseconds);                  if (mills > 60)                  {                      numFrames = mills / 33;                  }                    for (int i = 0; i < numFrames; i++)                  {                      var fileName = string.Format("\\{0:000000}.jpeg"' frameCounter++);    #if NETFX_CORE                      var file = await StorageFile.GetFileFromPathAsync(exportDir + fileName);                      using (var jpegStream = await file.OpenStreamForWriteAsync())    #else                      using (var jpegStream = new FileStream(exportDir + fileName' FileMode.Create' FileAccess.Write))  #endif                      {                          using (var jpegWriter = new BinaryWriter(jpegStream))                          {                              var bytes = rcf.GetRawFrameData();                                if (rcf.Codec.CodecId == jpegCodecId)                              {                                  jpegWriter.Write(bytes);                              }                              else                              {                                  await jpegCodec.EncodeAsync(bytes' jpegWriter);                              }                          }                      }                  }              }
Magic Number,KinectEx.DVR,KinectReplay,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectReplay.cs,ExportColorFramesAsync,The following statement contains a magic number: foreach (var frame in _colorReplay.Frames)              {                  ReplayColorFrame rcf = frame as ReplayColorFrame;                    var elapsed = rcf.RelativeTime - lastRelativeTime;                  lastRelativeTime = rcf.RelativeTime;                  var numFrames = 1;                  var mills = (int)Math.Ceiling(elapsed.TotalMilliseconds);                  if (mills > 60)                  {                      numFrames = mills / 33;                  }                    for (int i = 0; i < numFrames; i++)                  {                      var fileName = string.Format("\\{0:000000}.jpeg"' frameCounter++);    #if NETFX_CORE                      var file = await StorageFile.GetFileFromPathAsync(exportDir + fileName);                      using (var jpegStream = await file.OpenStreamForWriteAsync())    #else                      using (var jpegStream = new FileStream(exportDir + fileName' FileMode.Create' FileAccess.Write))  #endif                      {                          using (var jpegWriter = new BinaryWriter(jpegStream))                          {                              var bytes = rcf.GetRawFrameData();                                if (rcf.Codec.CodecId == jpegCodecId)                              {                                  jpegWriter.Write(bytes);                              }                              else                              {                                  await jpegCodec.EncodeAsync(bytes' jpegWriter);                              }                          }                      }                  }              }
Magic Number,KinectEx.DVR,RawColorCodec,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\RawColorCodec.cs,EncodeAsync,The following statement contains a magic number: if (this.Width == this.OutputWidth && this.Height == this.OutputHeight)              {                  // Header                  writer.Write(this.Width);                  writer.Write(this.Height);                  writer.Write(bytes.Length);                    // Data                  writer.Write(bytes);              }              else              {  #if NETFX_CORE                  using (var bmpStream = new InMemoryRandomAccessStream())                  {                      var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.BmpEncoderId' bmpStream);                      encoder.BitmapTransform.ScaledWidth = (uint)this.OutputWidth;                      encoder.BitmapTransform.ScaledHeight = (uint)this.OutputHeight;                        encoder.SetPixelData(                          BitmapPixelFormat.Bgra8'                          BitmapAlphaMode.Straight'                          (uint)this.Width'                          (uint)this.Height'                          96'                          96'                          bytes);                      await encoder.FlushAsync();                        bmpStream.Seek(0);                      var dec = await BitmapDecoder.CreateAsync(BitmapDecoder.BmpDecoderId' bmpStream);                      var pixelDataProvider = await dec.GetPixelDataAsync();                      var pixelData = pixelDataProvider.DetachPixelData();                        if (writer.BaseStream == null || writer.BaseStream.CanWrite == false)                          return;                        // Header                      writer.Write(this.OutputWidth);                      writer.Write(this.OutputHeight);                      writer.Write((int)pixelData.Length);                        // Data                      writer.Write(pixelData);                  }  #else                  WriteableBitmap bmp = BitmapFactory.New(this.Width' this.Height);                  int stride = this.Width * 4; // 4 bytes per pixel in BGRA                  var dirtyRect = new Int32Rect(0' 0' this.Width' this.Height);                  bmp.WritePixels(dirtyRect' bytes' stride' 0);                  var newBytes = await Task.FromResult(bmp.Resize(this.OutputWidth' this.OutputHeight' WriteableBitmapExtensions.Interpolation.NearestNeighbor).ToByteArray());                    // Header                  writer.Write(this.OutputWidth);                  writer.Write(this.OutputHeight);                  writer.Write(newBytes.Length);                    // Data                  writer.Write(newBytes);  #endif              }
Magic Number,KinectEx.DVR,RawColorCodec,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\RawColorCodec.cs,EncodeAsync,The following statement contains a magic number: if (this.Width == this.OutputWidth && this.Height == this.OutputHeight)              {                  // Header                  writer.Write(this.Width);                  writer.Write(this.Height);                  writer.Write(bytes.Length);                    // Data                  writer.Write(bytes);              }              else              {  #if NETFX_CORE                  using (var bmpStream = new InMemoryRandomAccessStream())                  {                      var encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.BmpEncoderId' bmpStream);                      encoder.BitmapTransform.ScaledWidth = (uint)this.OutputWidth;                      encoder.BitmapTransform.ScaledHeight = (uint)this.OutputHeight;                        encoder.SetPixelData(                          BitmapPixelFormat.Bgra8'                          BitmapAlphaMode.Straight'                          (uint)this.Width'                          (uint)this.Height'                          96'                          96'                          bytes);                      await encoder.FlushAsync();                        bmpStream.Seek(0);                      var dec = await BitmapDecoder.CreateAsync(BitmapDecoder.BmpDecoderId' bmpStream);                      var pixelDataProvider = await dec.GetPixelDataAsync();                      var pixelData = pixelDataProvider.DetachPixelData();                        if (writer.BaseStream == null || writer.BaseStream.CanWrite == false)                          return;                        // Header                      writer.Write(this.OutputWidth);                      writer.Write(this.OutputHeight);                      writer.Write((int)pixelData.Length);                        // Data                      writer.Write(pixelData);                  }  #else                  WriteableBitmap bmp = BitmapFactory.New(this.Width' this.Height);                  int stride = this.Width * 4; // 4 bytes per pixel in BGRA                  var dirtyRect = new Int32Rect(0' 0' this.Width' this.Height);                  bmp.WritePixels(dirtyRect' bytes' stride' 0);                  var newBytes = await Task.FromResult(bmp.Resize(this.OutputWidth' this.OutputHeight' WriteableBitmapExtensions.Interpolation.NearestNeighbor).ToByteArray());                    // Header                  writer.Write(this.OutputWidth);                  writer.Write(this.OutputHeight);                  writer.Write(newBytes.Length);                    // Data                  writer.Write(newBytes);  #endif              }
Magic Number,KinectEx.DVR,ReplayColorFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayColorFrame.cs,ReplayColorFrame,The following statement contains a magic number: this.FrameDataSize = this.Width * this.Height * 4;
Magic Number,KinectEx.DVR,ReplayColorFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayColorFrame.cs,ReplayColorFrame,The following statement contains a magic number: this.FrameDataSize = this.Width * this.Height * 4;
Magic Number,KinectEx.DVR,ReplayDepthFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayDepthFrame.cs,GetFrameDataAsync,The following statement contains a magic number: return Task<ushort[]>.Run(() =>              {                  Monitor.Enter(Stream);                  var reader = new BinaryReader(Stream);                  if (_staticBytes == null)                      _staticBytes = new byte[this.Width * this.Height * 2];                  if (_staticData == null)                      _staticData = new ushort[this.Width * this.Height];                    long savedPosition = Stream.Position;                  Stream.Position = StreamPosition;                    reader.Read(_staticBytes' 0' _staticBytes.Length);                  System.Buffer.BlockCopy(_staticBytes' 0' _staticData' 0' _staticBytes.Length);                    Stream.Position = savedPosition;                    Monitor.Exit(Stream);                  return _staticData;              });
Magic Number,KinectEx.DVR,ReplayInfraredFrame,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\ReplayInfraredFrame.cs,GetFrameDataAsync,The following statement contains a magic number: return Task<ushort[]>.Run(() => {                  Monitor.Enter(Stream);                  var reader = new BinaryReader(Stream);                  if (_staticBytes == null)                      _staticBytes = new byte[this.Width * this.Height * 2];                  if (_staticData == null)                      _staticData = new ushort[this.Width * this.Height];                    long savedPosition = Stream.Position;                  Stream.Position = StreamPosition;                    reader.Read(_staticBytes' 0' _staticBytes.Length);                  System.Buffer.BlockCopy(_staticBytes' 0' _staticData' 0' _staticBytes.Length);                    Stream.Position = savedPosition;                  Monitor.Exit(Stream);                  return _staticData;              });
Magic Number,KinectEx.Smoothing,KalmanJoint,C:\repos\KinectEx_KinectEx\src\KinectEx\Smoothing\KalmanJoint.cs,Update,The following statement contains a magic number: if (_init)              {                  _init = false;                    _filteredPosition = new Vector3(joint.Position.X' joint.Position.Y' joint.Position.Z);                  _positionVariance = new Vector3(1000f);                  _velocityVariance = new Vector3(1000f);              }              else              {                  var oldPosition = _filteredPosition;                  var oldVelocity = _velocity;                    // Predict                  _filteredPosition = _filteredPosition + _velocity;                  _velocity = _velocity + _velocityDelta;                  _positionVariance = _positionVariance + _measurementUncertainty;                  _velocityVariance = _velocityVariance + _measurementUncertainty;                    // Update                  var reportedPosition = new Vector3(joint.Position.X' joint.Position.Y' joint.Position.Z);                    // ... but first filter for jitter ...                  var positionDelta = reportedPosition - oldPosition;                  var differenceLength = Math.Abs((float)positionDelta.Length());                  var jitterRadiusMod = joint.TrackingState == TrackingState.Tracked ? _jitterRadius : _jitterRadius * 2;                  if (differenceLength <= jitterRadiusMod)                  {                      reportedPosition = (reportedPosition * (differenceLength / jitterRadiusMod)) +                               (oldPosition * (1.0f - (differenceLength / jitterRadiusMod)));                  }                    _filteredPosition = (_positionVariance * reportedPosition + _measurementUncertainty * _filteredPosition) / (_measurementUncertainty + _positionVariance);                  _velocity = (_velocityVariance * (reportedPosition - oldPosition) + _measurementUncertainty * _velocity) / (_measurementUncertainty + _velocityVariance);                    _velocityDelta = _velocity - oldVelocity;                    _positionVariance = Vector3.One / ((Vector3.One / _measurementUncertainty) + (Vector3.One / _positionVariance));                  _velocityVariance = Vector3.One / ((Vector3.One / _measurementUncertainty) + (Vector3.One / _velocityVariance));              }
Missing Default,KinectEx.DVR,KinectReplay,C:\repos\KinectEx_KinectEx\src\KinectEx\DVR\KinectReplay.cs,KinectReplay,The following switch statement is missing a default case: switch (type)                      {                          case FrameTypes.Body:                              if (_bodyReplay == null)                              {                                  _bodyReplay = new ReplayBodySystem();                                  _activeReplaySystems.Add(_bodyReplay);                                  _bodyReplay.PropertyChanged += replay_PropertyChanged;                                  _bodyReplay.FrameArrived += bodyReplay_FrameArrived;                              }                              _bodyReplay.AddFrame(_reader' version);                              break;                          case FrameTypes.Color:                              if (_colorReplay == null)                              {                                  IColorCodec codec = new RawColorCodec();                                  if (metadata.ColorCodecId == ColorCodecs.Jpeg.CodecId)                                      codec = new JpegColorCodec();                                    _colorReplay = new ReplayColorSystem(codec);                                  _activeReplaySystems.Add(_colorReplay);                                  _colorReplay.PropertyChanged += replay_PropertyChanged;                                  _colorReplay.FrameArrived += colorReplay_FrameArrived;                              }                              _colorReplay.AddFrame(_reader);                              break;                          case FrameTypes.Depth:                              if (_depthReplay == null)                              {                                  _depthReplay = new ReplayDepthSystem();                                  _activeReplaySystems.Add(_depthReplay);                                  _depthReplay.PropertyChanged += replay_PropertyChanged;                                  _depthReplay.FrameArrived += depthReplay_FrameArrived;                              }                              _depthReplay.AddFrame(_reader);                              break;                          case FrameTypes.Infrared:                              if (_infraredReplay == null)                              {                                  _infraredReplay = new ReplayInfraredSystem();                                  _activeReplaySystems.Add(_infraredReplay);                                  _infraredReplay.PropertyChanged += replay_PropertyChanged;                                  _infraredReplay.FrameArrived += infraredReplay_FrameArrived;                              }                              _infraredReplay.AddFrame(_reader);                              break;                      }
