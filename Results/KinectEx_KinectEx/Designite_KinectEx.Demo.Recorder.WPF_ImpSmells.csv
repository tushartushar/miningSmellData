Implementation smell,Namespace,Class,File,Method,Description
Long Statement,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/KinectEx.RecorderDemo.WPF;component/mainwindow.xaml"' System.UriKind.Relative); " is 125.
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,RecordButton_Click,The following statement contains a magic number: if (_recorder == null)              {                  var dlg = new SaveFileDialog()                  {                      FileName = DateTime.Now.ToString("MM-dd-yyyy-hh-mm-ss")'                      DefaultExt = ".kdvr"'                      Filter = "KinectEx.DVR Files (*.kdvr)|*.kdvr"                  };                    if (dlg.ShowDialog().GetValueOrDefault())                  {                      _recorder = new KinectRecorder(File.Open(dlg.FileName' FileMode.Create)' _sensor);                      _recorder.EnableBodyRecorder = BodyCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableColorRecorder = ColorCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableDepthRecorder = DepthCheckBox.IsChecked.GetValueOrDefault();                      _recorder.EnableInfraredRecorder = InfraredCheckBox.IsChecked.GetValueOrDefault();                        // NOTE : Default ColorRecorderCodec is Raw @ 1920 x 1080. Only need to change the                      //        bits that differ from the default.                        int colorCompressionType = ColorCompressionCombo.SelectedIndex / 3;                      int colorCompressionSize = ColorCompressionCombo.SelectedIndex % 3;                      if (colorCompressionType == 1)                      {                          _recorder.ColorRecorderCodec = new JpegColorCodec();                      }                      if (colorCompressionSize == 1) // 1280 x 720                      {                          _recorder.ColorRecorderCodec.OutputWidth = 1280;                          _recorder.ColorRecorderCodec.OutputHeight = 720;                      }                      else if (colorCompressionSize == 2) // 640 x 360                      {                          _recorder.ColorRecorderCodec.OutputWidth = 640;                          _recorder.ColorRecorderCodec.OutputHeight = 360;                      }                        _recorder.Start();                        RecordButton.Content = "Stop Recording";                      BodyCheckBox.IsEnabled = false;                      ColorCheckBox.IsEnabled = false;                      DepthCheckBox.IsEnabled = false;                      ColorCompressionCombo.IsEnabled = false;                  }              }              else              {                  RecordButton.IsEnabled = false;                    await _recorder.StopAsync();                  _recorder = null;                    RecordButton.Content = "Record";                  RecordButton.IsEnabled = true;                  BodyCheckBox.IsEnabled = true;                  ColorCheckBox.IsEnabled = true;                  DepthCheckBox.IsEnabled = true;                  ColorCompressionCombo.IsEnabled = true;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,DisplayCombo_SelectionChanged,The following statement contains a magic number: if (DisplayCombo.SelectedIndex == 0)              {                  _displayType = FrameTypes.Body;                  OutputImage.Source = null;              }              else if (DisplayCombo.SelectedIndex == 1)              {                  _displayType = FrameTypes.Color;                  OutputImage.Source = _colorBitmap.Bitmap;              }              else if (DisplayCombo.SelectedIndex == 2)              {                  _displayType = FrameTypes.Depth;                  OutputImage.Source = _depthBitmap.Bitmap;              }              else              {                  _displayType = FrameTypes.Infrared;                  OutputImage.Source = _infraredBitmap.Bitmap;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Magic Number,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
Missing Default,KinectEx.RecorderDemo.WPF,MainWindow,C:\repos\KinectEx_KinectEx\src\KinectEx.Demo.Recorder.WPF\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.RecordButton = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.BodyCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 3:              this.ColorCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 4:              this.DepthCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 5:              this.InfraredCheckBox = ((System.Windows.Controls.CheckBox)(target));              return;              case 6:              this.ColorCompressionCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 7:              this.SmoothingCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 8:              this.DisplayCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 9:              this.OutputImage = ((System.Windows.Controls.Image)(target));              return;              }
