Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,Cyclomatic complexity of the method is 12
Long Parameter List,CShell.Util,IAssemblyCacheItem,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,CreateStream,The method has 5 parameters. Parameters: pszName' dwFormat' dwFlags' dwMaxSize' ppStream
Long Parameter List,CShell.Util,IAssemblyName,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,BindToObject,The method has 8 parameters. Parameters: refIID' pAsmBindSink' pApplicationContext' szCodeBase' llFlags' pvReserved' cbReserved' ppv
Long Parameter List,CShell.Util,Fusion,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,CreateAssemblyEnum,The method has 5 parameters. Parameters: ppEnum' pAppCtx' pName' dwFlags' pvReserved
Long Statement,CShell,Shell,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Shell.Workspace.cs,Dump,The length of the statement  "                throw new NotSupportedException("The requested sink doesnt exist: " + sink + "' make sure the URI is spelled correctly and the module containing the specified sink is loaded."); " is 177.
Long Statement,CShell.Framework.Controls,LayoutInitializer,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The length of the statement  "                            //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below " is 130.
Long Statement,CShell.Framework.Menus,StandardMenuItem,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Menus\StandardMenuItem.cs,WithIcon,The length of the statement  "		    IconSource = new Uri("pack://application:'''/"+source.GetAssemblyName() + ";component/" + path' UriKind.RelativeOrAbsolute); " is 124.
Magic Number,CShell.Framework.Controls,LayoutInitializer,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The following statement contains a magic number: switch (preferredLocation)                      {                          case PaneLocation.Left:                          {                              //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below                              var layoutAnchorSide = layout.Descendents().OfType<LayoutAnchorSide>().First(side => side.Side == AnchorSide.Left);                              var layoutAnchorGroup = new LayoutAnchorGroup();                              layoutAnchorGroup.InsertChildAt(0' anchorableToShow);                              layoutAnchorSide.InsertChildAt(0' layoutAnchorGroup);                              anchorableToShow.AutoHideWidth = 200;                                //var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              //toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                          }                              break;                          case PaneLocation.Right:                          {                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          case PaneLocation.Bottom:                          {                              var ds = layout.Descendents().ToList();                              var items = layout.Descendents().OfType<LayoutPanel>().ToList();                              var items2 = layout.Descendents().OfType<LayoutAnchorGroup>().ToList();                              //var parent = items2.First();                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Vertical);                              toolsPane = new LayoutAnchorablePane { DockHeight = new GridLength(300' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }
Magic Number,CShell.Framework.Controls,LayoutInitializer,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The following statement contains a magic number: switch (preferredLocation)                      {                          case PaneLocation.Left:                          {                              //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below                              var layoutAnchorSide = layout.Descendents().OfType<LayoutAnchorSide>().First(side => side.Side == AnchorSide.Left);                              var layoutAnchorGroup = new LayoutAnchorGroup();                              layoutAnchorGroup.InsertChildAt(0' anchorableToShow);                              layoutAnchorSide.InsertChildAt(0' layoutAnchorGroup);                              anchorableToShow.AutoHideWidth = 200;                                //var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              //toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                          }                              break;                          case PaneLocation.Right:                          {                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          case PaneLocation.Bottom:                          {                              var ds = layout.Descendents().ToList();                              var items = layout.Descendents().OfType<LayoutPanel>().ToList();                              var items2 = layout.Descendents().OfType<LayoutAnchorGroup>().ToList();                              //var parent = items2.First();                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Vertical);                              toolsPane = new LayoutAnchorablePane { DockHeight = new GridLength(300' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }
Magic Number,CShell.Framework.Controls,LayoutInitializer,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The following statement contains a magic number: switch (preferredLocation)                      {                          case PaneLocation.Left:                          {                              //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below                              var layoutAnchorSide = layout.Descendents().OfType<LayoutAnchorSide>().First(side => side.Side == AnchorSide.Left);                              var layoutAnchorGroup = new LayoutAnchorGroup();                              layoutAnchorGroup.InsertChildAt(0' anchorableToShow);                              layoutAnchorSide.InsertChildAt(0' layoutAnchorGroup);                              anchorableToShow.AutoHideWidth = 200;                                //var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              //toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                          }                              break;                          case PaneLocation.Right:                          {                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          case PaneLocation.Bottom:                          {                              var ds = layout.Descendents().ToList();                              var items = layout.Descendents().OfType<LayoutPanel>().ToList();                              var items2 = layout.Descendents().OfType<LayoutAnchorGroup>().ToList();                              //var parent = items2.First();                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Vertical);                              toolsPane = new LayoutAnchorablePane { DockHeight = new GridLength(300' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }
Magic Number,CShell.Framework.Menus,StandardMenuItem,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Menus\StandardMenuItem.cs,WithIcon,The following statement contains a magic number: Icon = new Image  				{  					Source = iconSource'  					Width = 16'  					Height = 16  				};
Magic Number,CShell.Framework.Menus,StandardMenuItem,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Menus\StandardMenuItem.cs,WithIcon,The following statement contains a magic number: Icon = new Image  				{  					Source = iconSource'  					Width = 16'  					Height = 16  				};
Magic Number,CShell.Util,Fusion,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,GetGacPath,The following statement contains a magic number: const int size = 260;
Magic Number,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,GetAssemblyList,The following statement contains a magic number: Fusion.CreateAssemblyEnum(out assemblyEnum' null' null' 2' 0);
Magic Number,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,The following statement contains a magic number: Fusion.CreateAssemblyEnum(out assemblyEnum' null' assemblyName' 2' 0);
Magic Number,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,The following statement contains a magic number: publicKey != info[3].Substring(info[3].LastIndexOf('=') + 1)
Magic Number,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,The following statement contains a magic number: publicKey != info[3].Substring(info[3].LastIndexOf('=') + 1)
Magic Number,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindAssemblyInNetGac,The following statement contains a magic number: i < 2
Magic Number,CShell.Util,GlobalAssemblyCache,D:\research\architectureSmells\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,PublicKeyTokenToString,The following statement contains a magic number: pkt.Append(hex[b / 16 & mask]);
