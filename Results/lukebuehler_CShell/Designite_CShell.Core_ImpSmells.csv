Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,Cyclomatic complexity of the method is 12
Long Parameter List,CShell.Util,IAssemblyCacheItem,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,CreateStream,The method has 5 parameters. Parameters: pszName' dwFormat' dwFlags' dwMaxSize' ppStream
Long Parameter List,CShell.Util,IAssemblyName,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,BindToObject,The method has 8 parameters. Parameters: refIID' pAsmBindSink' pApplicationContext' szCodeBase' llFlags' pvReserved' cbReserved' ppv
Long Parameter List,CShell.Util,Fusion,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,CreateAssemblyEnum,The method has 5 parameters. Parameters: ppEnum' pAppCtx' pName' dwFlags' pvReserved
Long Statement,CShell,Shell,C:\repos\lukebuehler_CShell\Src\CShell.Core\Shell.Workspace.cs,Dump,The length of the statement  "                throw new NotSupportedException("The requested sink doesnt exist: " + sink + "' make sure the URI is spelled correctly and the module containing the specified sink is loaded."); " is 177.
Long Statement,CShell.Framework.Controls,LayoutInitializer,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The length of the statement  "                            //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below " is 130.
Long Statement,CShell.Framework.Menus,StandardMenuItem,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Menus\StandardMenuItem.cs,WithIcon,The length of the statement  "		    IconSource = new Uri("pack://application:'''/"+source.GetAssemblyName() + ";component/" + path' UriKind.RelativeOrAbsolute); " is 124.
Magic Number,CShell.Framework.Controls,LayoutInitializer,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The following statement contains a magic number: if (anchorableToShow.Content is ITool)              {                  var preferredLocation = ((ITool) anchorableToShow.Content).PreferredLocation;                  string paneName = GetPaneName(preferredLocation);                  var toolsPane = layout.Descendents().OfType<LayoutAnchorablePane>().FirstOrDefault(d => d.Name == paneName);                  if (toolsPane == null)                  {                      switch (preferredLocation)                      {                          case PaneLocation.Left:                          {                              //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below                              var layoutAnchorSide = layout.Descendents().OfType<LayoutAnchorSide>().First(side => side.Side == AnchorSide.Left);                              var layoutAnchorGroup = new LayoutAnchorGroup();                              layoutAnchorGroup.InsertChildAt(0' anchorableToShow);                              layoutAnchorSide.InsertChildAt(0' layoutAnchorGroup);                              anchorableToShow.AutoHideWidth = 200;                                //var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              //toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                          }                              break;                          case PaneLocation.Right:                          {                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          case PaneLocation.Bottom:                          {                              var ds = layout.Descendents().ToList();                              var items = layout.Descendents().OfType<LayoutPanel>().ToList();                              var items2 = layout.Descendents().OfType<LayoutAnchorGroup>().ToList();                              //var parent = items2.First();                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Vertical);                              toolsPane = new LayoutAnchorablePane { DockHeight = new GridLength(300' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }                  }                  if(toolsPane != null)                      toolsPane.Children.Add(anchorableToShow);                  return true;              }
Magic Number,CShell.Framework.Controls,LayoutInitializer,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The following statement contains a magic number: if (anchorableToShow.Content is ITool)              {                  var preferredLocation = ((ITool) anchorableToShow.Content).PreferredLocation;                  string paneName = GetPaneName(preferredLocation);                  var toolsPane = layout.Descendents().OfType<LayoutAnchorablePane>().FirstOrDefault(d => d.Name == paneName);                  if (toolsPane == null)                  {                      switch (preferredLocation)                      {                          case PaneLocation.Left:                          {                              //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below                              var layoutAnchorSide = layout.Descendents().OfType<LayoutAnchorSide>().First(side => side.Side == AnchorSide.Left);                              var layoutAnchorGroup = new LayoutAnchorGroup();                              layoutAnchorGroup.InsertChildAt(0' anchorableToShow);                              layoutAnchorSide.InsertChildAt(0' layoutAnchorGroup);                              anchorableToShow.AutoHideWidth = 200;                                //var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              //toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                          }                              break;                          case PaneLocation.Right:                          {                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          case PaneLocation.Bottom:                          {                              var ds = layout.Descendents().ToList();                              var items = layout.Descendents().OfType<LayoutPanel>().ToList();                              var items2 = layout.Descendents().OfType<LayoutAnchorGroup>().ToList();                              //var parent = items2.First();                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Vertical);                              toolsPane = new LayoutAnchorablePane { DockHeight = new GridLength(300' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }                  }                  if(toolsPane != null)                      toolsPane.Children.Add(anchorableToShow);                  return true;              }
Magic Number,CShell.Framework.Controls,LayoutInitializer,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Controls\LayoutInitializer.cs,BeforeInsertAnchorable,The following statement contains a magic number: if (anchorableToShow.Content is ITool)              {                  var preferredLocation = ((ITool) anchorableToShow.Content).PreferredLocation;                  string paneName = GetPaneName(preferredLocation);                  var toolsPane = layout.Descendents().OfType<LayoutAnchorablePane>().FirstOrDefault(d => d.Name == paneName);                  if (toolsPane == null)                  {                      switch (preferredLocation)                      {                          case PaneLocation.Left:                          {                              //TODO: this should use two steps: first' try to add to existing "LayoutAnchorablePane" if not create layoutAnchorGroup like below                              var layoutAnchorSide = layout.Descendents().OfType<LayoutAnchorSide>().First(side => side.Side == AnchorSide.Left);                              var layoutAnchorGroup = new LayoutAnchorGroup();                              layoutAnchorGroup.InsertChildAt(0' anchorableToShow);                              layoutAnchorSide.InsertChildAt(0' layoutAnchorGroup);                              anchorableToShow.AutoHideWidth = 200;                                //var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              //toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                          }                              break;                          case PaneLocation.Right:                          {                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Horizontal);                              toolsPane = new LayoutAnchorablePane { DockWidth = new GridLength(200' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          case PaneLocation.Bottom:                          {                              var ds = layout.Descendents().ToList();                              var items = layout.Descendents().OfType<LayoutPanel>().ToList();                              var items2 = layout.Descendents().OfType<LayoutAnchorGroup>().ToList();                              //var parent = items2.First();                              var parent = layout.Descendents().OfType<LayoutPanel>().First(d => d.Orientation == Orientation.Vertical);                              toolsPane = new LayoutAnchorablePane { DockHeight = new GridLength(300' GridUnitType.Pixel) };                              parent.Children.Add(toolsPane);                          }                              break;                          default:                              throw new ArgumentOutOfRangeException();                      }                  }                  if(toolsPane != null)                      toolsPane.Children.Add(anchorableToShow);                  return true;              }
Magic Number,CShell.Framework.Menus,StandardMenuItem,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Menus\StandardMenuItem.cs,WithIcon,The following statement contains a magic number: if (source != null)  				Icon = new Image  				{  					Source = iconSource'  					Width = 16'  					Height = 16  				};
Magic Number,CShell.Framework.Menus,StandardMenuItem,C:\repos\lukebuehler_CShell\Src\CShell.Core\Framework\Menus\StandardMenuItem.cs,WithIcon,The following statement contains a magic number: if (source != null)  				Icon = new Image  				{  					Source = iconSource'  					Width = 16'  					Height = 16  				};
Magic Number,CShell.Util,Fusion,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\FusionNative.cs,GetGacPath,The following statement contains a magic number: const int size = 260;
Magic Number,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,GetAssemblyList,The following statement contains a magic number: Fusion.CreateAssemblyEnum(out assemblyEnum' null' null' 2' 0);
Magic Number,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,The following statement contains a magic number: Fusion.CreateAssemblyEnum(out assemblyEnum' null' assemblyName' 2' 0);
Magic Number,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,The following statement contains a magic number: while (assemblyEnum.GetNextAssembly(out applicationContext' out assemblyName' 0) == 0)              {                  uint nChars = 0;                  assemblyName.GetDisplayName(null' ref nChars' 0);                    StringBuilder sb = new StringBuilder((int)nChars);                  assemblyName.GetDisplayName(sb' ref nChars' 0);                    string fullName = sb.ToString();                  if (!string.IsNullOrEmpty(publicKey))                  {                      info = fullName.Split(''');                      if (publicKey != info[3].Substring(info[3].LastIndexOf('=') + 1))                      {                          // Assembly has wrong public key                          continue;                      }                  }                  names.Add(fullName);              }
Magic Number,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindBestMatchingAssemblyName,The following statement contains a magic number: while (assemblyEnum.GetNextAssembly(out applicationContext' out assemblyName' 0) == 0)              {                  uint nChars = 0;                  assemblyName.GetDisplayName(null' ref nChars' 0);                    StringBuilder sb = new StringBuilder((int)nChars);                  assemblyName.GetDisplayName(sb' ref nChars' 0);                    string fullName = sb.ToString();                  if (!string.IsNullOrEmpty(publicKey))                  {                      info = fullName.Split(''');                      if (publicKey != info[3].Substring(info[3].LastIndexOf('=') + 1))                      {                          // Assembly has wrong public key                          continue;                      }                  }                  names.Add(fullName);              }
Magic Number,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,FindAssemblyInNetGac,The following statement contains a magic number: for (int i = 0; i < 2; i++)              {                  for (int j = 0; j < gacs.Length; j++)                  {                      var gac = Path.Combine(gac_paths[i]' gacs[j]);                      var file = GetAssemblyFile(reference' prefixes[i]' gac);                      if (File.Exists(file))                          return file;                  }              }
Magic Number,CShell.Util,GlobalAssemblyCache,C:\repos\lukebuehler_CShell\Src\CShell.Core\Util\GlobalAssemblyCache.cs,PublicKeyTokenToString,The following statement contains a magic number: foreach (byte b in assemblyName.GetPublicKeyToken())              {                  pkt.Append(hex[b / 16 & mask]);                  pkt.Append(hex[b & mask]);              }
