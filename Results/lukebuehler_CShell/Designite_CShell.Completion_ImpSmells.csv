Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CShell.Completion,CodeTextEditor,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CodeTextEditor.cs,ShowCompletion,Cyclomatic complexity of the method is 16
Complex Method,CShell.Completion,CSharpCompletion,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletion.cs,GetUnresolvedAssembly,Cyclomatic complexity of the method is 12
Long Parameter List,CShell.Completion,CSharpCompletionDataFactory,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletionDataFactory.cs,CreateEventCreationCompletionData,The method has 6 parameters. Parameters: varName' delegateType' evt' parameterDefinition' currentMember' currentType
Long Statement,CShell.Completion,CSharpCompletion,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletion.cs,GetCompletions,The length of the statement  "            var completionFactory = new CSharpCompletionDataFactory(completionContext.TypeResolveContextAtCaret' completionContext); " is 120.
Long Statement,CShell.Completion,CSharpCompletion,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletion.cs,GetCompletions,The length of the statement  "            result.TriggerWord = completionContext.Document.GetText(completionContext.Offset - triggerWordLength' triggerWordLength); " is 121.
Long Statement,CShell.Completion,CSharpCompletion,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletion.cs,GetXmlDocumentation,The length of the statement  "            var netPath = Path.Combine(@"C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0"' xmlFileName); " is 127.
Long Statement,CShell.Completion,CSharpCompletionContext,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletionContext.cs,PrepareCompletionDocument,The length of the statement  "            //if the code is just a script it it will contain no namestpace' class and method structure and so the code completion will not work properly " is 141.
Long Statement,CShell.Completion,CSharpCompletionContext,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletionContext.cs,PrepareCompletionDocument,The length of the statement  "                className = className.TrimStart('0'' '1'' '2'' '3'' '4'' '5'' '6'' '7'' '8'' '9'); //there can be no number at the beginning of the class name " is 142.
Long Statement,CShell.Completion,CSharpCompletionDataFactory,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletionDataFactory.cs,CreateMethodDataProvider,The length of the statement  "            return new CSharpOverloadProvider(context' startOffset' from m in methods where m != null select new CSharpInsightItem(m)); " is 123.
Long Statement,CShell.Completion,CSharpOverloadProvider,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpOverloadProvider.cs,Update,The length of the statement  "            var completionContext = new CSharpCompletionContext(document' offset' context.ProjectContent' context.OriginalNamespaces); " is 122.
Long Statement,CShell.Completion,CSharpOverloadProvider,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpOverloadProvider.cs,Update,The length of the statement  "            var completionFactory = new CSharpCompletionDataFactory(completionContext.TypeResolveContextAtCaret' completionContext); " is 120.
Long Statement,CShell.Completion.DataItems,OverrideCompletionData,C:\repos\lukebuehler_CShell\Src\CShell.Completion\DataItems\OverrideCompletionData.cs,XXXComplete,The length of the statement  "                textArea.Selection = new RectangleSelection(textArea' new TextViewPosition(textArea.Document.GetLocation(declarationBegin + segment.Offset))' new TextViewPosition(textArea.Document.GetLocation(declarationBegin + segment.Offset + segment.Length))); " is 247.
Long Statement,CShell.Completion.DataItems,OverrideCompletionData,C:\repos\lukebuehler_CShell\Src\CShell.Completion\DataItems\OverrideCompletionData.cs,XXXComplete,The length of the statement  "            //formatter.AddFormattingRegion(new DomRegion(document.GetLocation(declarationBegin)' document.GetLocation(declarationBegin + newText.Length))); " is 144.
Long Statement,CShell.Completion.DataItems,OverrideCompletionData,C:\repos\lukebuehler_CShell\Src\CShell.Completion\DataItems\OverrideCompletionData.cs,ParametersToExpressions,The length of the statement  "                    yield return new DirectionExpression(p.IsOut ? FieldDirection.Out : FieldDirection.Ref' new IdentifierExpression(p.Name)); " is 122.
Long Statement,CShell.Completion.Images,CompletionImage,C:\repos\lukebuehler_CShell\Src\CShell.Completion\Images\CompletionImage.cs,LoadBitmap,The length of the statement  "			BitmapImage image = new BitmapImage(new Uri("pack://application:'''/CShell.Completion;component/Images/" + name + ".png")); " is 123.
Empty Catch Block,CShell.Completion,CSharpCompletion,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletion.cs,GetUnresolvedAssembly,The method has an empty catch block.
Magic Number,CShell.Completion,CSharpCompletion,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletion.cs,GetCompletions,The following statement contains a magic number: if (controlSpace)              {                  if (!cce.TryGetCompletionWord(completionContext.Offset' out startPos' out triggerWordLength))                  {                      startPos = completionContext.Offset;                      triggerWordLength = 0;                  }                  completionData = cce.GetCompletionData(startPos' true);                  //this outputs tons of available entities                  //if (triggerWordLength == 0)                  //    completionData = completionData.Concat(cce.GetImportCompletionData(startPos));              }              else              {                  startPos = completionContext.Offset;                    if (char.IsLetterOrDigit(completionChar) || completionChar == '_')                  {                      if (startPos > 1 && char.IsLetterOrDigit(completionContext.Document.GetCharAt(startPos - 2)))                          return result;                      completionData = cce.GetCompletionData(startPos' false);                      startPos--;                      triggerWordLength = 1;                  }                  else                  {                      completionData = cce.GetCompletionData(startPos' false);                      triggerWordLength = 0;                  }              }
Magic Number,CShell.Completion,CSharpCompletionDataFactory,C:\repos\lukebuehler_CShell\Src\CShell.Completion\CSharpCompletionDataFactory.cs,CreateLiteralCompletionData,The following statement contains a magic number: return new CompletionData(title)              {                  Description = description'                  CompletionText = insertText ?? title'                  Image = CompletionImage.Literal.BaseImage'                  Priority = 2              };
Magic Number,CShell.Completion.Images,CompletionImage,C:\repos\lukebuehler_CShell\Src\CShell.Completion\Images\CompletionImage.cs,GetAccessibilityOverlayIndex,The following statement contains a magic number: switch (accessibility) {  				case Accessibility.Private:  					return 1;  				case Accessibility.Protected:  					return 2;  				case Accessibility.Internal:  					return 3;  				case Accessibility.ProtectedOrInternal:  				case Accessibility.ProtectedAndInternal:  					return 4;  				default:  					return 0;  			}
Magic Number,CShell.Completion.Images,CompletionImage,C:\repos\lukebuehler_CShell\Src\CShell.Completion\Images\CompletionImage.cs,GetAccessibilityOverlayIndex,The following statement contains a magic number: switch (accessibility) {  				case Accessibility.Private:  					return 1;  				case Accessibility.Protected:  					return 2;  				case Accessibility.Internal:  					return 3;  				case Accessibility.ProtectedOrInternal:  				case Accessibility.ProtectedAndInternal:  					return 4;  				default:  					return 0;  			}
Magic Number,CShell.Completion.Images,CompletionImage,C:\repos\lukebuehler_CShell\Src\CShell.Completion\Images\CompletionImage.cs,GetAccessibilityOverlayIndex,The following statement contains a magic number: switch (accessibility) {  				case Accessibility.Private:  					return 1;  				case Accessibility.Protected:  					return 2;  				case Accessibility.Internal:  					return 3;  				case Accessibility.ProtectedOrInternal:  				case Accessibility.ProtectedAndInternal:  					return 4;  				default:  					return 0;  			}
Magic Number,CShell.Completion.Images,CompletionImage,C:\repos\lukebuehler_CShell\Src\CShell.Completion\Images\CompletionImage.cs,GetImage,The following statement contains a magic number: if (image == null) {  				DrawingGroup g = new DrawingGroup();  				Rect iconRect = new Rect(0' 0' 16' 16);  				g.Children.Add(new ImageDrawing(this.BaseImage' iconRect));  				  				if (accessibilityOverlays[accessibilityIndex] != null)  					g.Children.Add(new ImageDrawing(accessibilityOverlays[accessibilityIndex]' iconRect));  				  				image = new DrawingImage(g);  				image.Freeze();  				Thread.MemoryBarrier();  				images[index] = image;  			}
Magic Number,CShell.Completion.Images,CompletionImage,C:\repos\lukebuehler_CShell\Src\CShell.Completion\Images\CompletionImage.cs,GetImage,The following statement contains a magic number: if (image == null) {  				DrawingGroup g = new DrawingGroup();  				Rect iconRect = new Rect(0' 0' 16' 16);  				g.Children.Add(new ImageDrawing(this.BaseImage' iconRect));  				  				if (accessibilityOverlays[accessibilityIndex] != null)  					g.Children.Add(new ImageDrawing(accessibilityOverlays[accessibilityIndex]' iconRect));  				  				image = new DrawingImage(g);  				image.Freeze();  				Thread.MemoryBarrier();  				images[index] = image;  			}
Missing Default,CShell.Completion.DataItems,EntityCompletionData,C:\repos\lukebuehler_CShell\Src\CShell.Completion\DataItems\EntityCompletionData.cs,XmlDocumentationToText,The following switch statement is missing a default case: switch (reader.NodeType)                          {                              case XmlNodeType.Text:                                  b.Append(reader.Value);                                  break;                              case XmlNodeType.Element:                                  switch (reader.Name)                                  {                                      case "filterpriority":                                          reader.Skip();                                          break;                                      case "returns":                                          b.AppendLine();                                          b.Append("Returns: ");                                          break;                                      case "param":                                          b.AppendLine();                                          b.Append(reader.GetAttribute("name") + ": ");                                          break;                                      case "remarks":                                          b.AppendLine();                                          b.Append("Remarks: ");                                          break;                                      case "see":                                          if (reader.IsEmptyElement)                                          {                                              b.Append(reader.GetAttribute("cref"));                                          }                                          else                                          {                                              reader.MoveToContent();                                              if (reader.HasValue)                                              {                                                  b.Append(reader.Value);                                              }                                              else                                              {                                                  b.Append(reader.GetAttribute("cref"));                                              }                                          }                                          break;                                  }                                  break;                          }
Missing Default,CShell.Completion.DataItems,EntityCompletionData,C:\repos\lukebuehler_CShell\Src\CShell.Completion\DataItems\EntityCompletionData.cs,XmlDocumentationToText,The following switch statement is missing a default case: switch (reader.Name)                                  {                                      case "filterpriority":                                          reader.Skip();                                          break;                                      case "returns":                                          b.AppendLine();                                          b.Append("Returns: ");                                          break;                                      case "param":                                          b.AppendLine();                                          b.Append(reader.GetAttribute("name") + ": ");                                          break;                                      case "remarks":                                          b.AppendLine();                                          b.Append("Remarks: ");                                          break;                                      case "see":                                          if (reader.IsEmptyElement)                                          {                                              b.Append(reader.GetAttribute("cref"));                                          }                                          else                                          {                                              reader.MoveToContent();                                              if (reader.HasValue)                                              {                                                  b.Append(reader.Value);                                              }                                              else                                              {                                                  b.Append(reader.GetAttribute("cref"));                                              }                                          }                                          break;                                  }
