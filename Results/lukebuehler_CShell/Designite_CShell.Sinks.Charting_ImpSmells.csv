Implementation smell,Namespace,Class,File,Method,Description
Long Method,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The method has 119 lines of code.
Complex Method,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,Cyclomatic complexity of the method is 15
Complex Method,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,Cyclomatic complexity of the method is 8
Long Parameter List,CShell.Sinks.Charting,ChartSink,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSink.cs,Plot,The method has 5 parameters. Parameters: ys' xs' seriesName' chartType' sinkName
Long Parameter List,CShell.Sinks.Charting,ChartSink,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSink.cs,PlotFunction,The method has 7 parameters. Parameters: f' seriesName' chartType' from' to' points' sinkName
Long Parameter List,CShell.Sinks.Charting,ChartSink,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSink.cs,Histogram,The method has 5 parameters. Parameters: ys' intervalNumber' intervalWidth' showPercentOnSecondaryYAxis' sinkName
Long Statement,CShell.Sinks.Charting,ChartSinkView,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/CShell.Sinks.Charting;component/chartsinkview.xaml"' System.UriKind.Relative); " is 124.
Long Statement,CShell.Sinks.Charting,ChartSinkView,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkView.xaml.cs,Connect,The length of the statement  "            ((CShell.Sinks.Charting.ChartSinkView)(target)).DataContextChanged += new System.Windows.DependencyPropertyChangedEventHandler(this.UserControl_DataContextChanged); " is 164.
Complex Conditional,CShell.Sinks.Charting,ChartSink,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSink.cs,CheckDataType,The conditional expression  "values is IEnumerable<double> ||                  values is IEnumerable<decimal> ||                  values is IEnumerable<Single> ||                  values is IEnumerable<int> ||                  values is IEnumerable<long> ||                  values is IEnumerable<uint> ||                  values is IEnumerable<ulong> ||                  values is IEnumerable<short> ||                  values is IEnumerable<ushort> ||                  values is IEnumerable<String> ||                  values is IEnumerable<DateTime>"  is complex.
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisY.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisY.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisY.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisY.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisX.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisX.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisX.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,ChartSinkViewModel,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkViewModel.cs,CreateChart,The following statement contains a magic number: chartArea.AxisX.MajorGrid.LineColor = Color.FromArgb(255' 185' 185' 185);
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: for (currentPosition = minValue; currentPosition <= maxValue; currentPosition += this.SegmentIntervalWidth)              {                  // Count all points from data series that are in current interval                  int count = 0;                  foreach (DataPoint dataPoint in chartControl.Series[dataSeriesName].Points)                  {                      if (!dataPoint.IsEmpty)                      {                          double endPosition = currentPosition + this.SegmentIntervalWidth;                          if (dataPoint.YValues[0] >= currentPosition &&                              dataPoint.YValues[0] < endPosition)                          {                              ++count;                          }                            // Last segment includes point values on both segment boundaries                          else if (endPosition >= maxValue)                          {                              if (dataPoint.YValues[0] >= currentPosition &&                                  dataPoint.YValues[0] <= endPosition)                              {                                  ++count;                              }                          }                      }                  }                      // Add data point into the histogram series                  histogramSeries.Points.AddXY(currentPosition + this.SegmentIntervalWidth / 2.0' count);              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: while ((maxValue - minValue) / axisInterval > 10.0)              {                  axisInterval *= 2.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: while ((maxValue - minValue) / axisInterval > 10.0)              {                  axisInterval *= 2.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: if (this.ShowPercentOnSecondaryYAxis)              {                  chartArea.RecalculateAxesScale();                    chartArea.AxisY2.Enabled = AxisEnabled.True;                  chartArea.AxisY2.LabelStyle.Format = "P0";                  chartArea.AxisY2.MajorGrid.Enabled = false;                  chartArea.AxisY2.Title = "Percent of Total";                    chartArea.AxisY2.Minimum = 0;                  chartArea.AxisY2.Maximum = chartArea.AxisY.Maximum / (pointCount / 100.0);                  double minStep = (chartArea.AxisY2.Maximum > 20.0) ? 5.0 : 1.0;                  chartArea.AxisY2.Interval = Math.Ceiling((chartArea.AxisY2.Maximum / 5.0 / minStep)) * minStep;                }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: if (this.ShowPercentOnSecondaryYAxis)              {                  chartArea.RecalculateAxesScale();                    chartArea.AxisY2.Enabled = AxisEnabled.True;                  chartArea.AxisY2.LabelStyle.Format = "P0";                  chartArea.AxisY2.MajorGrid.Enabled = false;                  chartArea.AxisY2.Title = "Percent of Total";                    chartArea.AxisY2.Minimum = 0;                  chartArea.AxisY2.Maximum = chartArea.AxisY.Maximum / (pointCount / 100.0);                  double minStep = (chartArea.AxisY2.Maximum > 20.0) ? 5.0 : 1.0;                  chartArea.AxisY2.Interval = Math.Ceiling((chartArea.AxisY2.Maximum / 5.0 / minStep)) * minStep;                }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: if (this.ShowPercentOnSecondaryYAxis)              {                  chartArea.RecalculateAxesScale();                    chartArea.AxisY2.Enabled = AxisEnabled.True;                  chartArea.AxisY2.LabelStyle.Format = "P0";                  chartArea.AxisY2.MajorGrid.Enabled = false;                  chartArea.AxisY2.Title = "Percent of Total";                    chartArea.AxisY2.Minimum = 0;                  chartArea.AxisY2.Maximum = chartArea.AxisY.Maximum / (pointCount / 100.0);                  double minStep = (chartArea.AxisY2.Maximum > 20.0) ? 5.0 : 1.0;                  chartArea.AxisY2.Interval = Math.Ceiling((chartArea.AxisY2.Maximum / 5.0 / minStep)) * minStep;                }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,CreateHistogram,The following statement contains a magic number: if (this.ShowPercentOnSecondaryYAxis)              {                  chartArea.RecalculateAxesScale();                    chartArea.AxisY2.Enabled = AxisEnabled.True;                  chartArea.AxisY2.LabelStyle.Format = "P0";                  chartArea.AxisY2.MajorGrid.Enabled = false;                  chartArea.AxisY2.Title = "Percent of Total";                    chartArea.AxisY2.Minimum = 0;                  chartArea.AxisY2.Maximum = chartArea.AxisY.Maximum / (pointCount / 100.0);                  double minStep = (chartArea.AxisY2.Maximum > 20.0) ? 5.0 : 1.0;                  chartArea.AxisY2.Interval = Math.Ceiling((chartArea.AxisY2.Maximum / 5.0 / minStep)) * minStep;                }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: while (tempValue > 1.0)              {                  step++;                  tempValue = tempValue / 10.0;                  if (step > 1000)                  {                      throw (new InvalidOperationException("Auto interval error due to invalid point values or axis minimum/maximum."));                  }              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: while (tempValue > 1.0)              {                  step++;                  tempValue = tempValue / 10.0;                  if (step > 1000)                  {                      throw (new InvalidOperationException("Auto interval error due to invalid point values or axis minimum/maximum."));                  }              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: while (tempValue < 1.0)              {                  step--;                  tempValue = tempValue * 10.0;                  if (step < -1000)                  {                      throw (new InvalidOperationException("Auto interval error due to invalid point values or axis minimum/maximum."));                  }              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: while (tempValue < 1.0)              {                  step--;                  tempValue = tempValue * 10.0;                  if (step < -1000)                  {                      throw (new InvalidOperationException("Auto interval error due to invalid point values or axis minimum/maximum."));                  }              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: double tempDiff = interval / Math.Pow(10.0' step);
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: if (tempDiff < 3.0)              {                  tempDiff = 2.0;              }              else if (tempDiff < 7.0)              {                  tempDiff = 5.0;              }              else              {                  tempDiff = 10.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: if (tempDiff < 3.0)              {                  tempDiff = 2.0;              }              else if (tempDiff < 7.0)              {                  tempDiff = 5.0;              }              else              {                  tempDiff = 10.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: if (tempDiff < 3.0)              {                  tempDiff = 2.0;              }              else if (tempDiff < 7.0)              {                  tempDiff = 5.0;              }              else              {                  tempDiff = 10.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: if (tempDiff < 3.0)              {                  tempDiff = 2.0;              }              else if (tempDiff < 7.0)              {                  tempDiff = 5.0;              }              else              {                  tempDiff = 10.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: if (tempDiff < 3.0)              {                  tempDiff = 2.0;              }              else if (tempDiff < 7.0)              {                  tempDiff = 5.0;              }              else              {                  tempDiff = 10.0;              }
Magic Number,CShell.Sinks.Charting,HistogramChartHelper,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\HistogramChartHelper.cs,RoundInterval,The following statement contains a magic number: return tempDiff * Math.Pow(10.0' step);
Magic Number,CShell.Sinks.Charting,ChartSinkView,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\ChartSinkView.xaml"              ((CShell.Sinks.Charting.ChartSinkView)(target)).DataContextChanged += new System.Windows.DependencyPropertyChangedEventHandler(this.UserControl_DataContextChanged);                            #line default              #line hidden              return;              case 2:              this.FormHost = ((System.Windows.Forms.Integration.WindowsFormsHost)(target));              return;              }
Missing Default,CShell.Sinks.Charting,ChartSinkView,C:\repos\lukebuehler_CShell\Src\CShell.Sinks.Chart\ChartSinkView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\ChartSinkView.xaml"              ((CShell.Sinks.Charting.ChartSinkView)(target)).DataContextChanged += new System.Windows.DependencyPropertyChangedEventHandler(this.UserControl_DataContextChanged);                            #line default              #line hidden              return;              case 2:              this.FormHost = ((System.Windows.Forms.Integration.WindowsFormsHost)(target));              return;              }
