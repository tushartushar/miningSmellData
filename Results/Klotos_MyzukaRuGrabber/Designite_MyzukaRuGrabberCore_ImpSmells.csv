Implementation smell,Namespace,Class,File,Method,Description
Long Method,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The method has 120 lines of code.
Complex Method,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,Cyclomatic complexity of the method is 15
Complex Method,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,Cyclomatic complexity of the method is 9
Complex Method,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,Cyclomatic complexity of the method is 14
Complex Method,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,Cyclomatic complexity of the method is 14
Complex Method,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryParseURI,Cyclomatic complexity of the method is 9
Complex Method,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,Cyclomatic complexity of the method is 20
Complex Method,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,Cyclomatic complexity of the method is 9
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePageAsync,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAllSongs,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongs,The method has 6 parameters.
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongs,The method has 10 parameters.
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The method has 6 parameters.
Long Parameter List,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongsAsync,The method has 7 parameters.
Long Parameter List,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,ReactiveDownloader,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,CreateTask,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,Start,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,AlbumHeader,The method has 12 parameters.
Long Parameter List,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,ParsedSong,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,OneSongHeader,The method has 14 parameters.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryGrabPage,The length of the statement  "		ErrorMessage = String.Format ("Ошибка при попытке преобразовать полученный от сервера по URI '{0}' ответ в HTML документ. {1}"' PageURI.ToString ()' ex.TotalMessage ()); " is 169.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryGrabPageWithCancellation,The length of the statement  "		throw new InvalidOperationException (String.Format ("Произошла ошибка при получении ответа от сервера по URI '{0}'"' PageURI)' ex); " is 131.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryGrabPageWithCancellation,The length of the statement  "		throw new InvalidOperationException (String.Format ("Произошла ошибка при попытке преобразовать полученный от сервера по URI '{0}' HTTP-ответ " + "с содержимым длиной {1} символов в HTML документ"' PageURI.ToString ()' raw_HTML.Length)' ex); " is 241.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The length of the statement  "	HtmlNode node1 = HTMLPage.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]//h1[@class = 'blue' or @class = 'green']"); " is 164.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The length of the statement  "	HtmlNode node2 = HTMLPage.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]//table[@style and @class]/tr"); " is 152.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The length of the statement  "	String node2_text_1st_part = StringTools.SubstringHelpers.GetSubstringToToken (node2.InnerText' "Описание:"' true' StringTools.Direction.FromStartToEnd' StringComparison.OrdinalIgnoreCase); " is 189.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The length of the statement  "	String node2_text_2nd_part = StringTools.SubstringHelpers.GetSubstringToToken (node2.InnerText' "Описание:"' true' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase); " is 189.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The length of the statement  "	if (StringTools.ContainsHelpers.ContainsAllOf (node2_text_2nd_part' StringComparison.OrdinalIgnoreCase' "скачать альбом") == true) { " is 132.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryGrabImageUri,The length of the statement  "	HtmlNode node = HTMLPage.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]//table[@style and @class]/tr[1]/td[1]/img[@src]"); " is 170.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ExtractAlbumUri,The length of the statement  "	String raw_URI = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (node' "Login?returnUrl="' "method"' 0' StringComparison.OrdinalIgnoreCase' out out_pos); " is 163.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryGrabCaption,The length of the statement  "	HtmlNode caption_node = InputHTML.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]//h1[@class = 'blue' or @class = 'green']"); " is 172.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ExtractDownloadSongURI,The length of the statement  "	HtmlNode link_node = HTMLPage.DocumentNode.SelectSingleNode ("//div[@id]/table[@width='100%']/tr[starts-with(@id''trSong_')]/td[4][@class='downloadSong']/a[@href]"); " is 165.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ExtractAlbumURIFromSongPage,The length of the statement  "	HtmlNode song_header_node = HTMLPage.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]/div/table[@style and @class]/tr/td[2][@class='infoSong']"); " is 191.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ExtractAlbumURIFromSongPage,The length of the statement  "	String raw_album_data = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (song_header_node.InnerHtml' "Альбом:"' "Длительность:"' 0' StringComparison.OrdinalIgnoreCase' out pos); " is 186.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ExtractAlbumURIFromSongPage,The length of the statement  "		throw new InvalidOperationException ("Невозможно извлечь из страницы песни блок HTML-кода с данными по альбому' к которому принадлежит эта песня"); " is 147.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ExtractAlbumURIFromSongPage,The length of the statement  "		throw new InvalidOperationException (String.Format ("Невозможно извлечь URI на страницу альбома из строки '{0}': {1}"' raw_album_URI' err_mes)); " is 144.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryFixReturnURI,The length of the statement  "	if (temp_URI.StartsWith (main_domain' StringComparison.OrdinalIgnoreCase) == false && temp_URI.StartsWith (download_domain' StringComparison.OrdinalIgnoreCase) == false) { " is 171.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryFixReturnURI,The length of the statement  "		ErrorMessage = String.Format ("Невозможно корректно распарсить как абсолютный URI подстроку '{0}'' полученную из строки '{1}'"' temp_URI' Input); " is 145.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	HtmlNode main_body = HTMLPage.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]/table[1]/tr/td[2]"); " is 145.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "		throw new InvalidOperationException ("Невозможно извлечь блок HTML-кода с данными о пользователях' загрузивших и обновивших альбом"); " is 133.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String genre = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Жанр:"' "Исполнитель"' 0' StringComparison.OrdinalIgnoreCase' out pos_input); " is 167.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String artist = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Исполнитель:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 184.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String release_date = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Дата релиза:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 190.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String type = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Тип:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 174.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String count = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Кол-во песен:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 184.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String format = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Формат:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 179.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	String description = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (main_body_html' "Описание: <br>"' "GetVipAccount"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input); " is 192.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The length of the statement  "	AlbumHeader output = new AlbumHeader (caption' genre' artist' release_date' type' count_parsed' format' uploader' updater' description' CoreInternal.TryGrabImageUri (HTMLPage)' CoreInternal.ExtractAlbumUri (HTMLPage)); " is 218.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "	HtmlNodeCollection raw_songs_list = InputHTML.DocumentNode.SelectNodes ("//table[normalize-space(@width)='100%' and normalize-space(@class)='rectable rectable_center']" + "/tr[starts-with(@id''trSong_')]"); " is 206.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "			throw new InvalidOperationException ("Невозможно извлечь блок HTML-кода с названием песни' которая имеет номер " + number); " is 123.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "		String title = HttpUtility.HtmlDecode (raw_title_text.TrimEnd ("Файл утерян"' StringComparison.OrdinalIgnoreCase' false)); " is 122.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "		HtmlNode raw_URI_node = inner_doc.DocumentNode.SelectSingleNode ("/root/td[@class='downloadSong']/a[@href and @title]"); " is 120.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "			throw new InvalidOperationException (String.Format ("Невозможно извлечь из страницы альбома блок HTML-кода со ссылкой на страницу песни '{0}-{1}'"' number' title)); " is 164.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "			throw new InvalidOperationException (String.Format ("Невозможно извлечь ссылку на страницу песни '{0}-{1}' из HTML-кода '{2}'"' number' title' raw_URI_node.OuterHtml)); " is 168.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "			throw new InvalidOperationException (String.Format ("Невозможно извлечь из страницы альбома URI на страницу песни' полученную из строки '{0}': {1}"' raw_URI' err_mes)); " is 168.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAllSongsInAlbum,The length of the statement  "		output.Add (new OneSongHeader (Byte.Parse (number)' title' title' artist' AHeader.Title' AHeader.Genre' duration' size' bitrate' AHeader.Format' AHeader.Uploader' null' song_link' is_available)); " is 195.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	HtmlNode body_node = HTMLPage.DocumentNode.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]/div/table[@style and @class]/tr/td[2][@class='infoSong']"); " is 184.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String genre = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "Жанр:"' "Исполнитель"' 0' StringComparison.OrdinalIgnoreCase' out pos_input); " is 157.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "		genre = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (genre' ">"' "</a>"' 0' StringComparison.OrdinalIgnoreCase' out pos_input); " is 140.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String artist = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "Исполнитель:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 174.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String album = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "Альбом:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 168.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String duration = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "Длительность:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 177.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String size = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "Размер:"' "<br>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 167.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String format = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "<i class=\"format\">"' "</i>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 182.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String bitrate = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (body' "<i class=\"bitrate\">"' "</i>"' pos_input' StringComparison.OrdinalIgnoreCase' out pos_input).Trim (); " is 184.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	HtmlNode name_node = HTMLPage.DocumentNode.SelectSingleNode ("//div[@id]/table[@width='100%']/tr[starts-with(@id''trSong_')]/td[2]/div"); " is 137.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	String name = HttpUtility.HtmlDecode (name_node.ChildNodes.Single (nd => nd.Name == "span" && nd.Attributes.Count > 0 && nd.Attributes.Contains ("itemprop") && nd.Attributes ["itemprop"].Value == "name").InnerText.CleanString ().Trim ()); " is 238.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	HtmlNode link_node = body_node.SelectSingleNode ("//div[@class='centerblock gr']/div[starts-with(@class' 'in2')]/div/table[@style and @class]/tr/td[2][@class='infoSong']/meta[@itemprop='url' and @content]"); " is 207.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseOneSongHeader,The length of the statement  "	OneSongHeader song = new OneSongHeader (1' caption' name' artist' album' genre' duration' size' bitrate' format' uploader' CoreInternal.TryGrabImageUri (HTMLPage)' link_URI' is_available); " is 188.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "			if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) { " is 251.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "				ErrorMessage = String.Format ("Значения некоторых хидеров некорректны. " + "Content-Disposition: {0}; Content-Type: {1}; Content-Length: {2}."' content_disposition.ToStringS ("NULL")' content_type.ToStringS ("NULL")' raw_content_length.ToStringS ("NULL")); " is 256.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "			if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false && content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) { " is 185.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "			String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase); " is 204.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "			String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos); " is 169.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "			String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext; " is 231.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The length of the statement  "		ErrorMessage = String.Format ("Ошибка при попытке скачать файл. Статус ответа сервера: {0}. Сообщение об ошибке: {1}."' wex.Status.ToString ()' wex.TotalMessage ()); " is 165.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The length of the statement  "			if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) { " is 251.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The length of the statement  "			if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false || content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) { " is 185.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The length of the statement  "			String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase); " is 204.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The length of the statement  "			String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos); " is 169.
Long Statement,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The length of the statement  "			String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext; " is 231.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "	Task<HtmlAgilityPack.HtmlDocument> temp_task = Task.Run<HtmlAgilityPack.HtmlDocument> (() => CoreInternal.TryGrabPageWithCancellation (PageURI' UserAgent' CancToken)' CancToken); " is 178.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "			Core.OnException.Invoke (new InvalidOperationException (String.Format ("Страница' полученная по URI '{0}' с кодировкой '{1}'' не может быть распознана как страница альбома или песни"' PageURI.ToString ()' HTML_doc.Encoding.ToString ()))); " is 238.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "				Core.OnException.Invoke (new InvalidOperationException (String.Format ("Произошла ошибка при парсинге страницы альбома' полученной по URI '{0}'"' PageURI)' ex)); " is 161.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "				Core.OnException.Invoke (new InvalidOperationException (String.Format ("Произошла ошибка при парсинге страницы песни' полученной по URI '{0}'"' PageURI)' ex)); " is 159.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "				Core.OnException.Invoke (new InvalidOperationException (String.Format ("Произошла ошибка при парсинге списка песен для альбома' полученного по URI '{0}'"' PageURI)' ex)); " is 170.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "				Core.OnException.Invoke (new InvalidOperationException (String.Format ("Произошла ошибка при парсинге ссылки на скачку файла песни' страница которой получена по URI '{0}'"' PageURI)' ex)); " is 188.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePage,The length of the statement  "				Core.OnException.Invoke (new InvalidOperationException (String.Format ("Произошла ошибка при парсинге ссылки на страницу альбома песни' страница которой получена по URI '{0}'"' PageURI)' ex)); " is 192.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryGrabAndParsePageAsync,The length of the statement  "	Task<ACommonData> t = Task.Factory.StartNew<ACommonData> (() => Core.TryGrabAndParsePage (PageURI' UserAgent' DownloadCover' InvokeEvents' CancToken)' CancToken' TaskCreationOptions.LongRunning' TaskScheduler.Default); " is 218.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAllSongs,The length of the statement  "	ConcurrentDictionary<OneSongHeader' DownloadedFile> output_files = new ConcurrentDictionary<OneSongHeader' DownloadedFile> (Songs.Count' Songs.Count); " is 150.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAllSongs,The length of the statement  "			errors.Add (String.Format ("Невозможно скачать HTML-документ по ссылке '{0}': {1}"' song.SongPageURI.ToString ()' err_mess)); " is 125.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAllSongs,The length of the statement  "			errors.Add (String.Format ("Невозможно скачать файл песни '{0}.{1}' (альбом {2}) по ссылке '{3}': {4}"' song.Number' song.Name' song.Album' download_link.ToString ()' err_mess)); " is 178.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongs,The length of the statement  "	return Core.TryDownloadAndSaveAllSongs (Songs' UserAgent' FolderPath' GenerateNewFilenames' FilenameTemplate' CancellationToken.None' MaxDegreeOfParallelism); " is 158.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongs,The length of the statement  "	ConcurrentDictionary<OneSongHeader' Exception> intermediate = new ConcurrentDictionary<OneSongHeader' Exception> (MaxDegreeOfParallelism' Songs.Count); " is 151.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongs,The length of the statement  "		KeyValuePair<OneSongHeader' Exception> res = Core.DownloadAndSaveOneSong (song' UserAgent' GenerateNewFilenames' FilenameTemplate' FolderPath' (Int32)i + 1); " is 157.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The length of the statement  "		return new KeyValuePair<OneSongHeader' Exception> (Song' new InvalidOperationException (String.Format ("Невозможно скачать HTML-документ по ссылке '{0}' на итерации {1}: {2}"' Song.SongPageURI.ToString ()' IterationNumber' err_mess))); " is 235.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The length of the statement  "		return new KeyValuePair<OneSongHeader' Exception> (Song' new InvalidOperationException ("Невозможно извлечь ссылку на скачивание песни из HTML-документа на итерации " + IterationNumber' ex)); " is 191.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The length of the statement  "		return new KeyValuePair<OneSongHeader' Exception> (Song' new InvalidOperationException (String.Format ("Невозможно скачать файл песни '{0}.{1}' (альбом {2}) из страницы '{3}' по ссылке '{4}' на итерации {5}: {6}"' Song.Number' Song.Name' Song.Album' Song.SongPageURI.ToString ()' download_link.ToString ()' IterationNumber' err_mess))); " is 336.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The length of the statement  "		return new KeyValuePair<OneSongHeader' Exception> (Song' new InvalidOperationException (String.Format ("Невозможно сохранить файл песни '{0}.{1}' (альбом {2}) на диск с полным именем файла '{3}' на итерации {4}"' Song.Number' Song.Name' Song.Album' new_filename' IterationNumber)' ex)); " is 286.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryDownloadAndSaveAllSongsAsync,The length of the statement  "	return await Task.Factory.StartNew<IDictionary<OneSongHeader' Exception>> (() => Core.TryDownloadAndSaveAllSongs (Songs' UserAgent' FolderPath' GenerateNewFilenames' FilenameTemplate' CancToken' MaxDegreeOfParallelism)' CancToken' TaskCreationOptions.LongRunning' TaskScheduler.Default); " is 287.
Long Statement,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TrySaveDownloadedFileToDiskAsync,The length of the statement  "		using (FileStream fs = new FileStream (full_filename' FileMode.Create' FileAccess.Write' FileShare.None' buffer_size' FileOptions.Asynchronous)) { " is 146.
Long Statement,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,CreateTask,The length of the statement  "		throw new ArgumentException ("Путь для сохранения файлов песен = '" + FolderPath.ToStringS ("NULL") + "' некорректен"' "FolderPath"); " is 133.
Long Statement,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,Start,The length of the statement  "	ConcurrentDictionary<OneSongHeader' Exception> intermediate = new ConcurrentDictionary<OneSongHeader' Exception> (MaxDegreeOfParallelism' this._songs.Length); " is 158.
Long Statement,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,Start,The length of the statement  "		ParallelLoopResult p_res = Parallel.ForEach (this._songs' opt' (OneSongHeader song' ParallelLoopState pls' Int64 i) =>  { " is 121.
Long Statement,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,Start,The length of the statement  "			KeyValuePair<OneSongHeader' Exception> res = Core.DownloadAndSaveOneSong (song' this._userAgent' this._generateNewFilenames' this._filenameTemplate' this._folderPath' (Int32)i + 1); " is 181.
Long Statement,MyzukaRuGrabberCore,ReactiveDownloader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\ReactiveDownloader.cs,StartAsync,The length of the statement  "	return await Task.Factory.StartNew<IDictionary<OneSongHeader' Exception>> (() => this.Start (CancToken' MaxDegreeOfParallelism)' CancToken' TaskCreationOptions.LongRunning' TaskScheduler.Default); " is 196.
Long Statement,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,Equals,The length of the statement  "	Boolean result = this._albumPageURI == other._albumPageURI && this._albumImageURI.Authority.Equals (other._albumImageURI.Authority' StringComparison.OrdinalIgnoreCase) && this._songsCount == other._songsCount && string.Equals (this._description' other._description' StringComparison.OrdinalIgnoreCase) && string.Equals (this._updater' other._updater' StringComparison.OrdinalIgnoreCase) && string.Equals (this._uploader' other._uploader' StringComparison.OrdinalIgnoreCase) && string.Equals (this._format' other._format' StringComparison.OrdinalIgnoreCase) && string.Equals (this._type' other._type' StringComparison.OrdinalIgnoreCase) && string.Equals (this._releaseDate' other._releaseDate' StringComparison.OrdinalIgnoreCase) && string.Equals (this._artist' other._artist' StringComparison.OrdinalIgnoreCase) && string.Equals (this._genre' other._genre' StringComparison.OrdinalIgnoreCase) && string.Equals (this._title' other._title' StringComparison.OrdinalIgnoreCase); " is 974.
Long Statement,MyzukaRuGrabberCore.DataModels,DownloadedFile,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\DownloadedFile.cs,Equals,The length of the statement  "	Boolean result = string.Equals (this._filename' other._filename' StringComparison.OrdinalIgnoreCase) && this._contentLength == other._contentLength && this._fileBody.Length == other._fileBody.Length; " is 199.
Long Statement,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,Equals,The length of the statement  "	Boolean result = this._header.Equals (other._header) && this._songs.EqualsExact (other._songs) && this._coverFile.Equals (other._coverFile); " is 140.
Long Statement,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,Equals,The length of the statement  "	Boolean result = this._header.Equals (other._header) && this._albumLink == other._albumLink && this._downloadLink == other._downloadLink && this._coverFile.Equals (other._coverFile) && this._coverImage.Size == other._coverImage.Size; " is 233.
Long Statement,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GenerateSongFilename,The length of the statement  "	String filename_without_ext = this.Number.ToString (CultureInfo.InvariantCulture) + ". " + this.Artist + " - " + this.Name + " [" + this.Album + "]"; " is 149.
Long Statement,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GenerateSongFilename,The length of the statement  "	String output = FilenameTemplate.Replace ("%number%"' this.Number.ToString (CultureInfo.InvariantCulture)).Replace ("%title%"' this.Name).Replace ("%artist%"' this.Artist).Replace ("%album%"' this.Album) + ((ext.HasAlphaNumericChars () == true) ? "." + ext : ".mp3"); " is 267.
Long Statement,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,Equals,The length of the statement  "	Boolean result = this.Album == Other.Album && this.Artist == Other.Artist && this.Bitrate == Other.Bitrate && this.Duration == Other.Duration && this.Format == Other.Format && this.Genre == Other.Genre && this.Name == Other.Name && this.Number == Other.Number && this.Size == Other.Size && this.SongImageURI.Authority.Equals (Other.SongImageURI.Authority' StringComparison.OrdinalIgnoreCase) && this.SongPageURI == Other.SongPageURI; " is 433.
Complex Conditional,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The conditional expression  "content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true"  is complex.
Complex Conditional,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The conditional expression  "content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true"  is complex.
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The following statement contains a magic number: if (album_symptom == 5 && song_symptom == 0) {  	return ParsedItemType.Album;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,DetectItemType,The following statement contains a magic number: if (song_symptom == 5 && album_symptom == 0) {  	return ParsedItemType.Song;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The following statement contains a magic number: if (uploader_and_updater.Count == 2) {  	updater = uploader_and_updater [1].InnerText.Trim ();  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The following statement contains a magic number: if (caption.StartsWith (artist' StringComparison.OrdinalIgnoreCase) == true) {  	caption = caption.TrimStart (artist' StringComparison.OrdinalIgnoreCase' false);  	caption = caption.TrimStart (new char[2] {  		' ''  		'-'  	});  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,ParseAlbumHeader,The following statement contains a magic number: caption = caption.TrimStart (new char[2] {  	' ''  	'-'  });  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The following statement contains a magic number: try {  	using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {  		if (response.StatusCode != HttpStatusCode.OK) {  			ErrorMessage = "Код ответа сервера не является 200 OK: " + response.StatusCode.ToString ();  			return null;  		}  		String content_disposition = response.Headers ["Content-Disposition"];  		String content_type = response.Headers ["Content-Type"];  		String raw_content_length = response.Headers ["Content-Length"];  		Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  		if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  			ErrorMessage = String.Format ("Значения некоторых хидеров некорректны. " + "Content-Disposition: {0}; Content-Type: {1}; Content-Length: {2}."' content_disposition.ToStringS ("NULL")' content_type.ToStringS ("NULL")' raw_content_length.ToStringS ("NULL"));  			return null;  		}  		if (content_length == -10) {  			ErrorMessage = "Значение HTTP-хидера Content-Length некорректно и является : " + raw_content_length;  			return null;  		}  		////application/mp3  		//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  		//{  		//    ErrorMessage = "Значение HTTP-хидера Content-Type некорректно и является : " + content_type;  		//    return null;  		//}  		if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false && content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  			ErrorMessage = "Значение HTTP-хидера Content-Disposition некорректно и является : " + content_disposition;  			return null;  		}  		String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  		Int32 out_pos;  		String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  		String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  		MemoryStream file_body = new MemoryStream (content_length);  		using (Stream receiveStream = response.GetResponseStream ()) {  			StreamTools.CopyStream (receiveStream' file_body' false' false);  		}  		DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  		return output;  	}  }  catch (WebException wex) {  	ErrorMessage = String.Format ("Ошибка при попытке скачать файл. Статус ответа сервера: {0}. Сообщение об ошибке: {1}."' wex.Status.ToString ()' wex.TotalMessage ());  	return null;  }  catch (Exception ex) {  	ErrorMessage = "Прозошло неизвестное исключение: " + ex.TotalMessage ();  	return null;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The following statement contains a magic number: try {  	using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {  		if (response.StatusCode != HttpStatusCode.OK) {  			ErrorMessage = "Код ответа сервера не является 200 OK: " + response.StatusCode.ToString ();  			return null;  		}  		String content_disposition = response.Headers ["Content-Disposition"];  		String content_type = response.Headers ["Content-Type"];  		String raw_content_length = response.Headers ["Content-Length"];  		Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  		if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  			ErrorMessage = String.Format ("Значения некоторых хидеров некорректны. " + "Content-Disposition: {0}; Content-Type: {1}; Content-Length: {2}."' content_disposition.ToStringS ("NULL")' content_type.ToStringS ("NULL")' raw_content_length.ToStringS ("NULL"));  			return null;  		}  		if (content_length == -10) {  			ErrorMessage = "Значение HTTP-хидера Content-Length некорректно и является : " + raw_content_length;  			return null;  		}  		////application/mp3  		//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  		//{  		//    ErrorMessage = "Значение HTTP-хидера Content-Type некорректно и является : " + content_type;  		//    return null;  		//}  		if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false && content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  			ErrorMessage = "Значение HTTP-хидера Content-Disposition некорректно и является : " + content_disposition;  			return null;  		}  		String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  		Int32 out_pos;  		String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  		String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  		MemoryStream file_body = new MemoryStream (content_length);  		using (Stream receiveStream = response.GetResponseStream ()) {  			StreamTools.CopyStream (receiveStream' file_body' false' false);  		}  		DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  		return output;  	}  }  catch (WebException wex) {  	ErrorMessage = String.Format ("Ошибка при попытке скачать файл. Статус ответа сервера: {0}. Сообщение об ошибке: {1}."' wex.Status.ToString ()' wex.TotalMessage ());  	return null;  }  catch (Exception ex) {  	ErrorMessage = "Прозошло неизвестное исключение: " + ex.TotalMessage ();  	return null;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {  	if (response.StatusCode != HttpStatusCode.OK) {  		ErrorMessage = "Код ответа сервера не является 200 OK: " + response.StatusCode.ToString ();  		return null;  	}  	String content_disposition = response.Headers ["Content-Disposition"];  	String content_type = response.Headers ["Content-Type"];  	String raw_content_length = response.Headers ["Content-Length"];  	Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  	if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  		ErrorMessage = String.Format ("Значения некоторых хидеров некорректны. " + "Content-Disposition: {0}; Content-Type: {1}; Content-Length: {2}."' content_disposition.ToStringS ("NULL")' content_type.ToStringS ("NULL")' raw_content_length.ToStringS ("NULL"));  		return null;  	}  	if (content_length == -10) {  		ErrorMessage = "Значение HTTP-хидера Content-Length некорректно и является : " + raw_content_length;  		return null;  	}  	////application/mp3  	//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  	//{  	//    ErrorMessage = "Значение HTTP-хидера Content-Type некорректно и является : " + content_type;  	//    return null;  	//}  	if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false && content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  		ErrorMessage = "Значение HTTP-хидера Content-Disposition некорректно и является : " + content_disposition;  		return null;  	}  	String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  	Int32 out_pos;  	String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  	String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  	MemoryStream file_body = new MemoryStream (content_length);  	using (Stream receiveStream = response.GetResponseStream ()) {  		StreamTools.CopyStream (receiveStream' file_body' false' false);  	}  	DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  	return output;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)request.GetResponse ()) {  	if (response.StatusCode != HttpStatusCode.OK) {  		ErrorMessage = "Код ответа сервера не является 200 OK: " + response.StatusCode.ToString ();  		return null;  	}  	String content_disposition = response.Headers ["Content-Disposition"];  	String content_type = response.Headers ["Content-Type"];  	String raw_content_length = response.Headers ["Content-Length"];  	Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  	if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  		ErrorMessage = String.Format ("Значения некоторых хидеров некорректны. " + "Content-Disposition: {0}; Content-Type: {1}; Content-Length: {2}."' content_disposition.ToStringS ("NULL")' content_type.ToStringS ("NULL")' raw_content_length.ToStringS ("NULL"));  		return null;  	}  	if (content_length == -10) {  		ErrorMessage = "Значение HTTP-хидера Content-Length некорректно и является : " + raw_content_length;  		return null;  	}  	////application/mp3  	//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  	//{  	//    ErrorMessage = "Значение HTTP-хидера Content-Type некорректно и является : " + content_type;  	//    return null;  	//}  	if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false && content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  		ErrorMessage = "Значение HTTP-хидера Content-Disposition некорректно и является : " + content_disposition;  		return null;  	}  	String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  	Int32 out_pos;  	String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  	String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  	MemoryStream file_body = new MemoryStream (content_length);  	using (Stream receiveStream = response.GetResponseStream ()) {  		StreamTools.CopyStream (receiveStream' file_body' false' false);  	}  	DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  	return output;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFile,The following statement contains a magic number: if (content_length == -10) {  	ErrorMessage = "Значение HTTP-хидера Content-Length некорректно и является : " + raw_content_length;  	return null;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The following statement contains a magic number: try {  	using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync ()) {  		if (response.StatusCode != HttpStatusCode.OK) {  			return null;  		}  		String content_disposition = response.Headers ["Content-Disposition"];  		String content_type = response.Headers ["Content-Type"];  		String raw_content_length = response.Headers ["Content-Length"];  		Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  		if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  			return null;  		}  		if (content_length == -10) {  			return null;  		}  		////application/mp3  		//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  		//{  		//    return null;  		//}  		if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false || content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  			return null;  		}  		String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  		Int32 out_pos;  		String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  		String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  		MemoryStream file_body = new MemoryStream (content_length);  		using (Stream receiveStream = response.GetResponseStream ()) {  			if (receiveStream == null) {  				return null;  			}  			await receiveStream.CopyToAsync (file_body);  		}  		DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  		return output;  	}  }  catch {  	return null;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The following statement contains a magic number: try {  	using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync ()) {  		if (response.StatusCode != HttpStatusCode.OK) {  			return null;  		}  		String content_disposition = response.Headers ["Content-Disposition"];  		String content_type = response.Headers ["Content-Type"];  		String raw_content_length = response.Headers ["Content-Length"];  		Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  		if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  			return null;  		}  		if (content_length == -10) {  			return null;  		}  		////application/mp3  		//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  		//{  		//    return null;  		//}  		if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false || content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  			return null;  		}  		String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  		Int32 out_pos;  		String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  		String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  		MemoryStream file_body = new MemoryStream (content_length);  		using (Stream receiveStream = response.GetResponseStream ()) {  			if (receiveStream == null) {  				return null;  			}  			await receiveStream.CopyToAsync (file_body);  		}  		DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  		return output;  	}  }  catch {  	return null;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync ()) {  	if (response.StatusCode != HttpStatusCode.OK) {  		return null;  	}  	String content_disposition = response.Headers ["Content-Disposition"];  	String content_type = response.Headers ["Content-Type"];  	String raw_content_length = response.Headers ["Content-Length"];  	Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  	if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  		return null;  	}  	if (content_length == -10) {  		return null;  	}  	////application/mp3  	//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  	//{  	//    return null;  	//}  	if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false || content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  		return null;  	}  	String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  	Int32 out_pos;  	String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  	String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  	MemoryStream file_body = new MemoryStream (content_length);  	using (Stream receiveStream = response.GetResponseStream ()) {  		if (receiveStream == null) {  			return null;  		}  		await receiveStream.CopyToAsync (file_body);  	}  	DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  	return output;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The following statement contains a magic number: using (HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync ()) {  	if (response.StatusCode != HttpStatusCode.OK) {  		return null;  	}  	String content_disposition = response.Headers ["Content-Disposition"];  	String content_type = response.Headers ["Content-Type"];  	String raw_content_length = response.Headers ["Content-Length"];  	Int32 content_length = raw_content_length.TryParseNumber<Int32> (NumberStyles.Integer' null' -10);  	if (content_disposition.HasAlphaNumericChars () == false || content_type.HasAlphaNumericChars () == false || raw_content_length.HasAlphaNumericChars () == false || raw_content_length.Equals ("0"' StringComparison.InvariantCultureIgnoreCase) == true) {  		return null;  	}  	if (content_length == -10) {  		return null;  	}  	////application/mp3  	//if (content_type.Equals("application/octet-stream"' StringComparison.OrdinalIgnoreCase) == false)  	//{  	//    return null;  	//}  	if (content_disposition.Contains ("attachment"' StringComparison.OrdinalIgnoreCase) == false || content_disposition.Contains ("filename"' StringComparison.OrdinalIgnoreCase) == false) {  		return null;  	}  	String original_filename_without_ext = StringTools.SubstringHelpers.GetSubstringToToken (content_disposition' "filename="' false' StringTools.Direction.FromEndToStart' StringComparison.OrdinalIgnoreCase);  	Int32 out_pos;  	String ext = StringTools.SubstringHelpers.GetInnerStringBetweenTokens (response.ResponseUri.ToString ()' "ex="' "&"' 0' StringComparison.OrdinalIgnoreCase' out out_pos);  	String original_filename_full = ext.HasAlphaNumericChars () == false || original_filename_without_ext.EndsWith (ext' StringComparison.OrdinalIgnoreCase) == true ? original_filename_without_ext : original_filename_without_ext + ext;  	MemoryStream file_body = new MemoryStream (content_length);  	using (Stream receiveStream = response.GetResponseStream ()) {  		if (receiveStream == null) {  			return null;  		}  		await receiveStream.CopyToAsync (file_body);  	}  	DownloadedFile output = new DownloadedFile (original_filename_full' content_length' file_body);  	return output;  }  
Magic Number,MyzukaRuGrabberCore,CoreInternal,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\CoreInternal.cs,TryDownloadFileAsync,The following statement contains a magic number: if (content_length == -10) {  	return null;  }  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,TryParseURI,The following statement contains a magic number: if (input_URI.Segments.Length < 4) {  	ErrorMessage = "URI is invalid";  	return null;  }  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The following statement contains a magic number: try {  	using (FileStream fs = new FileStream (new_filename' FileMode.Create' FileAccess.Write' FileShare.None)) {  		song_file.FileBody.Position = 0;  		song_file.FileBody.CopyTo (fs' 1024 * 8);  	}  	return new KeyValuePair<OneSongHeader' Exception> (Song' null);  }  catch (Exception ex) {  	return new KeyValuePair<OneSongHeader' Exception> (Song' new InvalidOperationException (String.Format ("Невозможно сохранить файл песни '{0}.{1}' (альбом {2}) на диск с полным именем файла '{3}' на итерации {4}"' Song.Number' Song.Name' Song.Album' new_filename' IterationNumber)' ex));  }  finally {  	song_file.Dispose ();  	song_file = null;  }  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The following statement contains a magic number: try {  	using (FileStream fs = new FileStream (new_filename' FileMode.Create' FileAccess.Write' FileShare.None)) {  		song_file.FileBody.Position = 0;  		song_file.FileBody.CopyTo (fs' 1024 * 8);  	}  	return new KeyValuePair<OneSongHeader' Exception> (Song' null);  }  catch (Exception ex) {  	return new KeyValuePair<OneSongHeader' Exception> (Song' new InvalidOperationException (String.Format ("Невозможно сохранить файл песни '{0}.{1}' (альбом {2}) на диск с полным именем файла '{3}' на итерации {4}"' Song.Number' Song.Name' Song.Album' new_filename' IterationNumber)' ex));  }  finally {  	song_file.Dispose ();  	song_file = null;  }  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The following statement contains a magic number: using (FileStream fs = new FileStream (new_filename' FileMode.Create' FileAccess.Write' FileShare.None)) {  	song_file.FileBody.Position = 0;  	song_file.FileBody.CopyTo (fs' 1024 * 8);  }  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The following statement contains a magic number: using (FileStream fs = new FileStream (new_filename' FileMode.Create' FileAccess.Write' FileShare.None)) {  	song_file.FileBody.Position = 0;  	song_file.FileBody.CopyTo (fs' 1024 * 8);  }  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The following statement contains a magic number: song_file.FileBody.CopyTo (fs' 1024 * 8);  
Magic Number,MyzukaRuGrabberCore,Core,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\Core.cs,DownloadAndSaveOneSong,The following statement contains a magic number: song_file.FileBody.CopyTo (fs' 1024 * 8);  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _albumPageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  	hashCode = (hashCode * 397) ^ _description.GetHashCode ();  	hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  	hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  	hashCode = (hashCode * 397) ^ _format.GetHashCode ();  	hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  	hashCode = (hashCode * 397) ^ _type.GetHashCode ();  	hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  	hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  	hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  	hashCode = (hashCode * 397) ^ _title.GetHashCode ();  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _albumImageURI.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _description.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _updater.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _uploader.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _format.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _songsCount.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _type.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _releaseDate.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _artist.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _genre.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,AlbumHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\AlbumHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _title.GetHashCode ();  
Magic Number,MyzukaRuGrabberCore.DataModels,DownloadedFile,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\DownloadedFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_filename != null ? _filename.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ _contentLength;  	hashCode = (hashCode * 397) ^ (_fileBody != null ? _fileBody.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,DownloadedFile,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\DownloadedFile.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_filename != null ? _filename.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ _contentLength;  	hashCode = (hashCode * 397) ^ (_fileBody != null ? _fileBody.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,DownloadedFile,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\DownloadedFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _contentLength;  
Magic Number,MyzukaRuGrabberCore.DataModels,DownloadedFile,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\DownloadedFile.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_fileBody != null ? _fileBody.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songs != null ? _songs.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songs != null ? _songs.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songs != null ? _songs.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_songs != null ? _songs.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedAlbum,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedAlbum.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_albumLink != null ? _albumLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_downloadLink != null ? _downloadLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_albumLink != null ? _albumLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_downloadLink != null ? _downloadLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_albumLink != null ? _albumLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_downloadLink != null ? _downloadLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (_header != null ? _header.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_albumLink != null ? _albumLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_downloadLink != null ? _downloadLink.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_albumLink != null ? _albumLink.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_downloadLink != null ? _downloadLink.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_coverFile != null ? _coverFile.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,ParsedSong,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\ParsedSong.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_coverImage != null ? _coverImage.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = _number.GetHashCode ();  	hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  	return hashCode;  }  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_title != null ? _title.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_name != null ? _name.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_artist != null ? _artist.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_album != null ? _album.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_genre != null ? _genre.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_duration != null ? _duration.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_size != null ? _size.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_bitrate != null ? _bitrate.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_format != null ? _format.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_uploader != null ? _uploader.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_songImageURI != null ? _songImageURI.GetHashCode () : 0);  
Magic Number,MyzukaRuGrabberCore.DataModels,OneSongHeader,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberCore\DataModels\OneSongHeader.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (_songPageURI != null ? _songPageURI.GetHashCode () : 0);  
