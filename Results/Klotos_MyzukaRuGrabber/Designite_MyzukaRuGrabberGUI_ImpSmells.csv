Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,Cyclomatic complexity of the method is 36
Complex Method,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,SwitchStopButtonStatus,Cyclomatic complexity of the method is 10
Complex Method,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,LockOrUnlockFooterButtons,Cyclomatic complexity of the method is 10
Complex Method,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,Cyclomatic complexity of the method is 8
Complex Method,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,TransactionalApply,Cyclomatic complexity of the method is 8
Long Parameter List,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The method has 5 parameters.
Long Parameter List,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The method has 13 parameters.
Long Parameter List,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,ProgramSettings,The method has 6 parameters.
Long Parameter List,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,TransactionalApply,The method has 12 parameters.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,IncrementProgressBarAndCounter,The length of the statement  "			throw new InvalidOperationException ("Произошла внутренняя ошибка - невозможно получить из Label'а " + "текущее количество обработанных песен '" + this.lbl_ProcessedCount.Text + "'"); " is 183.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_Grab_Click,The length of the statement  "	Task<ACommonData> t = Core.TryGrabAndParsePageAsync (input_URI' ProgramSettings.Instance.UserAgent' true' true' this._cancelGrabbingPage.Token); " is 144.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_Grab_Click,The length of the statement  "			this.AddToLog ("Возникло необработанное неожиданное исключение при скачивании парсинге страницы: " + ex.TotalMessage ()); " is 121.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Event3,The length of the statement  "	this.AddToLog ("Этап 3: Выполнен успешный парсинг хидера. Исполнитель - " + header.Artist + "' название - " + header.Title); " is 124.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Event4,The length of the statement  "	this.AddToLog (String.Format ("Этап 4: Обложка успешно скачана и преобразована в изображение. " + "Название - {0}' размер - {1} байт' тип - {2}' линейные размеры - {3}."' file.Filename' file.Contentlength' ImageTools.GetImageFormat (bmp).ToString ()' bmp.Size.ToString ())); " is 274.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderAlbum,The length of the statement  "				this.SetOrAppendMessage (true' String.Format ("Все {0} песни в данном альбоме помечены на сайте как таковые' файлы которых утеряны"' album.Songs.Count)); " is 153.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderAlbum,The length of the statement  "				this.SetOrAppendMessage (true' String.Format ("Из {0} песен {1} помечены на сайте как таковые' файл которых утерян"' album.Songs.Count' failed_count)); " is 151.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderSong,The length of the statement  "		this.dgv_List.Rows.Add (song.Header.Number' song.Header.Artist' song.Header.Name' song.Header.Duration' song.Header.Size' song.Header.Bitrate' true); " is 149.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderSong,The length of the statement  "			this.SetOrAppendMessage (true' String.Format ("Песня '{0}. {1}' помечена на сайте как таковая' файл которой утерян"' song.Header.Number' song.Header.Name)); " is 156.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderImage,The length of the statement  "			this.lbl_ImageInfo.Text = String.Format ("{0} | {1} | {2} x {3} px"' ImageTools.GetImageFormat (Data.CoverImage)' KlotosLib.ByteQuantity.FromBytes (Data.CoverFile.Contentlength).ToStringWithBinaryPrefix (2' true)' Data.CoverImage.Size.Width' Data.CoverImage.Size.Height); " is 271.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_SaveImage_Click,The length of the statement  "	Task<String> result = Core.TrySaveDownloadedFileToDiskAsync (this._parsedItem.CoverFile' ProgramSettings.PrepareSavePath (this._parsedItem.Album)' new_filename); " is 161.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The length of the statement  "			this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false))); " is 165.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The length of the statement  "			String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate); " is 185.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The length of the statement  "			this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName); " is 140.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The length of the statement  "	ReactiveDownloader rd = ReactiveDownloader.CreateTask (SongsForDownload' ProgramSettings.Instance.UserAgent' ProgramSettings.PrepareSavePath (this._parsedItem.Album)' !ProgramSettings.Instance.UseServerFilenames' ProgramSettings.Instance.FilenameTemplate); " is 256.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The length of the statement  "		this.AddToLog (String.Format ("Получен результат песни '{0}.{1}' - {2}"' header.Number' header.Name' exception == null ? "Ok" : exception.TotalMessage ())); " is 156.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The length of the statement  "	Task<IDictionary<OneSongHeader' Exception>> res_task = rd.StartAsync (this._cancelSongsDownload.Token' ProgramSettings.Instance.MaxDownloadThreads); " is 148.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The length of the statement  "			message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n ")); " is 264.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The length of the statement  "			message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n ")); " is 250.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_StopProcess_Click,The length of the statement  "			this.SetOrAppendMessage (true' "Выполняется отмена операции скачивания и сохранения песен. Те песни' которые уже начали скачиваться или сохраняться на диск' будут докачаны и сохранены."); " is 187.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_About_Click,The length of the statement  "	String about_text = String.Format (this.GetProgramName () + "\r\nCopyright © Klotos\r\n" + "Created with C# 5.0' .NET Framework 4.5' VS 2012\r\n\r\nEnvironment information\r\n" + "Logical processors count: {0} \r\nMachine name: {1}\r\nOperating system: {2}" + "\r\nRunning as 64-bit application: {3}\r\nCurrent folder: {4}\r\n\r\nAssemblies info:\r\n{5}"' Environment.ProcessorCount' Environment.MachineName' Environment.OSVersion.ToString () + " " + (Environment.Is64BitOperatingSystem == true ? "64-bit" : "32-bit")' Environment.Is64BitProcess == true ? "Yes" : "No"' ProgramSettings.Default.SavedFilesPath' ass_info_final); " is 626.
Long Statement,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,GetProgramName,The length of the statement  "	return String.Format ("Myzuka.ru Grabber ver.{0}.{1}"' this.GetType ().Assembly.GetName ().Version.Major' this.GetType ().Assembly.GetName ().Version.Minor); " is 157.
Long Statement,MyzukaRuGrabberGUI,frm_Options,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Options.cs,TransactionalApply,The length of the statement  "	Dictionary<String' String> err = ProgramSettings.TransactionalApply (this.rb_DistinctFolder.Checked' this.rb_Internal.Checked' this.tb_MaxDownloadThreads.Text' this.tb_SaveFilePath.Text' this.tb_UserAgent.Text' this.tb_FilenameTemplate.Text); " is 242.
Long Statement,MyzukaRuGrabberGUI,frm_Options,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Options.cs,TransactionalApply,The length of the statement  "	String message = String.Format ("Some data are invalid: \r\n{0}."' err.ConcatToString (key => key' value => value' ": "' "; \r\n")); " is 132.
Long Statement,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,TransactionalApply,The length of the statement  "		output.Add (FilenameTemplate.MemberName (_ => FilenameTemplate) + "1"' "Filename template contains next invalid characters: " + intersects.ConcatToString ("' ") + "."); " is 168.
Long Statement,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,TransactionalApply,The length of the statement  "	if (FilenameTemplate.Contains (_TITLE_TOKEN' StringComparison.Ordinal) == false && FilenameTemplate.Contains (_NUMBER_TOKEN' StringComparison.Ordinal) == false) { " is 162.
Long Statement,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,TransactionalApply,The length of the statement  "		output.Add (FilenameTemplate.MemberName (_ => FilenameTemplate) + "2"' "Filename template must contain " + _TITLE_TOKEN + " or " + _NUMBER_TOKEN + " token"); " is 157.
Long Statement,MyzukaRuGrabberGUI,ProgramSettings,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\ProgramSettings.cs,TransactionalApply,The length of the statement  "	ProgramSettings._instance = new ProgramSettings (UseDistinctFolder' UseServerFilenames' value' SavedFilesPath.Trim ()' UserAgent.Trim ()' FilenameTemplate.Trim ()); " is 164.
Long Statement,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The length of the statement  "		Tools._IMAGE_FILE_HEADER coffHeader = (Tools._IMAGE_FILE_HEADER)Marshal.PtrToStructure (pinnedBuffer.AddrOfPinnedObject ()' typeof(Tools._IMAGE_FILE_HEADER)); " is 158.
Long Statement,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The length of the statement  "		return TimeZone.CurrentTimeZone.ToLocalTime (new DateTime (1970' 1' 1) + new TimeSpan (coffHeader.TimeDateStamp * TimeSpan.TicksPerSecond)); " is 140.
Long Statement,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetAssemblyDescription,The length of the statement  "	where name.IsIn (StringComparison.Ordinal' "HtmlAgilityPack"' "KlotosLib") || name.StartsWith ("MyzukaRuGrabber"' StringComparison.OrdinalIgnoreCase) " is 149.
Long Statement,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetAssemblyDescription,The length of the statement  "	select ass.GetName ().Name + gac + "Compiled with .NET " + ass.ImageRuntimeVersion + "\r\nVersion: " + ver.ToString () + ". Build date: " + b2; " is 143.
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: if (this.InvokeRequired == false) {  	switch (StatusCode) {  	case 1:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  		this.lbl_ProcStatusText.Text = "Ready";  		this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  		break;  	case 2:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  		this.lbl_ProcStatusText.Text = "Wait...";  		this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  		break;  	case 3:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  		this.lbl_ProcStatusText.Text = "Success";  		this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  		break;  	case 4:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  		this.lbl_ProcStatusText.Text = "Error";  		this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  		break;  	case 5:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  		this.lbl_ProcStatusText.Text = "Some errors";  		this.lbl_ProcStatusText.ForeColor = Color.Coral;  		break;  	case 6:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  		this.lbl_ProcStatusText.Text = "Stopped";  		this.lbl_ProcStatusText.ForeColor = Color.Blue;  		break;  	case 7:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  		this.lbl_ProcStatusText.Text = "Cancelling";  		this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  		break;  	}  }  else {  	this.Invoke ((Action<Byte>)UpdateStatus' StatusCode);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: if (this.InvokeRequired == false) {  	switch (StatusCode) {  	case 1:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  		this.lbl_ProcStatusText.Text = "Ready";  		this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  		break;  	case 2:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  		this.lbl_ProcStatusText.Text = "Wait...";  		this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  		break;  	case 3:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  		this.lbl_ProcStatusText.Text = "Success";  		this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  		break;  	case 4:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  		this.lbl_ProcStatusText.Text = "Error";  		this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  		break;  	case 5:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  		this.lbl_ProcStatusText.Text = "Some errors";  		this.lbl_ProcStatusText.ForeColor = Color.Coral;  		break;  	case 6:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  		this.lbl_ProcStatusText.Text = "Stopped";  		this.lbl_ProcStatusText.ForeColor = Color.Blue;  		break;  	case 7:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  		this.lbl_ProcStatusText.Text = "Cancelling";  		this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  		break;  	}  }  else {  	this.Invoke ((Action<Byte>)UpdateStatus' StatusCode);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: if (this.InvokeRequired == false) {  	switch (StatusCode) {  	case 1:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  		this.lbl_ProcStatusText.Text = "Ready";  		this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  		break;  	case 2:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  		this.lbl_ProcStatusText.Text = "Wait...";  		this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  		break;  	case 3:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  		this.lbl_ProcStatusText.Text = "Success";  		this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  		break;  	case 4:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  		this.lbl_ProcStatusText.Text = "Error";  		this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  		break;  	case 5:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  		this.lbl_ProcStatusText.Text = "Some errors";  		this.lbl_ProcStatusText.ForeColor = Color.Coral;  		break;  	case 6:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  		this.lbl_ProcStatusText.Text = "Stopped";  		this.lbl_ProcStatusText.ForeColor = Color.Blue;  		break;  	case 7:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  		this.lbl_ProcStatusText.Text = "Cancelling";  		this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  		break;  	}  }  else {  	this.Invoke ((Action<Byte>)UpdateStatus' StatusCode);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: if (this.InvokeRequired == false) {  	switch (StatusCode) {  	case 1:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  		this.lbl_ProcStatusText.Text = "Ready";  		this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  		break;  	case 2:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  		this.lbl_ProcStatusText.Text = "Wait...";  		this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  		break;  	case 3:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  		this.lbl_ProcStatusText.Text = "Success";  		this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  		break;  	case 4:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  		this.lbl_ProcStatusText.Text = "Error";  		this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  		break;  	case 5:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  		this.lbl_ProcStatusText.Text = "Some errors";  		this.lbl_ProcStatusText.ForeColor = Color.Coral;  		break;  	case 6:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  		this.lbl_ProcStatusText.Text = "Stopped";  		this.lbl_ProcStatusText.ForeColor = Color.Blue;  		break;  	case 7:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  		this.lbl_ProcStatusText.Text = "Cancelling";  		this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  		break;  	}  }  else {  	this.Invoke ((Action<Byte>)UpdateStatus' StatusCode);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: if (this.InvokeRequired == false) {  	switch (StatusCode) {  	case 1:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  		this.lbl_ProcStatusText.Text = "Ready";  		this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  		break;  	case 2:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  		this.lbl_ProcStatusText.Text = "Wait...";  		this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  		break;  	case 3:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  		this.lbl_ProcStatusText.Text = "Success";  		this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  		break;  	case 4:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  		this.lbl_ProcStatusText.Text = "Error";  		this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  		break;  	case 5:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  		this.lbl_ProcStatusText.Text = "Some errors";  		this.lbl_ProcStatusText.ForeColor = Color.Coral;  		break;  	case 6:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  		this.lbl_ProcStatusText.Text = "Stopped";  		this.lbl_ProcStatusText.ForeColor = Color.Blue;  		break;  	case 7:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  		this.lbl_ProcStatusText.Text = "Cancelling";  		this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  		break;  	}  }  else {  	this.Invoke ((Action<Byte>)UpdateStatus' StatusCode);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: if (this.InvokeRequired == false) {  	switch (StatusCode) {  	case 1:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  		this.lbl_ProcStatusText.Text = "Ready";  		this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  		break;  	case 2:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  		this.lbl_ProcStatusText.Text = "Wait...";  		this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  		break;  	case 3:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  		this.lbl_ProcStatusText.Text = "Success";  		this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  		break;  	case 4:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  		this.lbl_ProcStatusText.Text = "Error";  		this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  		break;  	case 5:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  		this.lbl_ProcStatusText.Text = "Some errors";  		this.lbl_ProcStatusText.ForeColor = Color.Coral;  		break;  	case 6:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  		this.lbl_ProcStatusText.Text = "Stopped";  		this.lbl_ProcStatusText.ForeColor = Color.Blue;  		break;  	case 7:  		this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  		this.lbl_ProcStatusText.Text = "Cancelling";  		this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  		break;  	}  }  else {  	this.Invoke ((Action<Byte>)UpdateStatus' StatusCode);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following statement contains a magic number: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,IncrementProgressBarAndCounter,The following statement contains a magic number: if (this.InvokeRequired == false) {  	this.prbr_Processing.PerformStep ();  	Byte current_count = this.lbl_ProcessedCount.Text.TryParseNumber<Byte> (NumberStyles.None' null' 255);  	if (current_count == 255) {  		throw new InvalidOperationException ("Произошла внутренняя ошибка - невозможно получить из Label'а " + "текущее количество обработанных песен '" + this.lbl_ProcessedCount.Text + "'");  	}  	this.lbl_ProcessedCount.Text = (current_count + 1).ToString (CultureInfo.InvariantCulture);  }  else {  	this.Invoke ((Action)this.IncrementProgressBarAndCounter);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,IncrementProgressBarAndCounter,The following statement contains a magic number: if (this.InvokeRequired == false) {  	this.prbr_Processing.PerformStep ();  	Byte current_count = this.lbl_ProcessedCount.Text.TryParseNumber<Byte> (NumberStyles.None' null' 255);  	if (current_count == 255) {  		throw new InvalidOperationException ("Произошла внутренняя ошибка - невозможно получить из Label'а " + "текущее количество обработанных песен '" + this.lbl_ProcessedCount.Text + "'");  	}  	this.lbl_ProcessedCount.Text = (current_count + 1).ToString (CultureInfo.InvariantCulture);  }  else {  	this.Invoke ((Action)this.IncrementProgressBarAndCounter);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,IncrementProgressBarAndCounter,The following statement contains a magic number: if (current_count == 255) {  	throw new InvalidOperationException ("Произошла внутренняя ошибка - невозможно получить из Label'а " + "текущее количество обработанных песен '" + this.lbl_ProcessedCount.Text + "'");  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_Grab_Click,The following statement contains a magic number: this.UpdateStatus (2);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_Grab_Click,The following statement contains a magic number: this._cancelGrabbingPage = new CancellationTokenSource (TimeSpan.FromSeconds (60));  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: if (this._parsedItem.IsNull () == true) {  	this.CleanLayout ();  	this.UpdateStatus (4);  	return;  }  else if (this._parsedItem is ParsedAlbum) {  	this.UpdateStatus (3);  	this.RenderAlbum ((ParsedAlbum)this._parsedItem);  	this.AddToLog ("Данные альбома загружены");  }  else {  	this.UpdateStatus (3);  	this.RenderSong ((ParsedSong)this._parsedItem);  	this.AddToLog ("Данные песни загружены");  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: if (this._parsedItem.IsNull () == true) {  	this.CleanLayout ();  	this.UpdateStatus (4);  	return;  }  else if (this._parsedItem is ParsedAlbum) {  	this.UpdateStatus (3);  	this.RenderAlbum ((ParsedAlbum)this._parsedItem);  	this.AddToLog ("Данные альбома загружены");  }  else {  	this.UpdateStatus (3);  	this.RenderSong ((ParsedSong)this._parsedItem);  	this.AddToLog ("Данные песни загружены");  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: if (this._parsedItem.IsNull () == true) {  	this.CleanLayout ();  	this.UpdateStatus (4);  	return;  }  else if (this._parsedItem is ParsedAlbum) {  	this.UpdateStatus (3);  	this.RenderAlbum ((ParsedAlbum)this._parsedItem);  	this.AddToLog ("Данные альбома загружены");  }  else {  	this.UpdateStatus (3);  	this.RenderSong ((ParsedSong)this._parsedItem);  	this.AddToLog ("Данные песни загружены");  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: this.UpdateStatus (4);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: if (this._parsedItem is ParsedAlbum) {  	this.UpdateStatus (3);  	this.RenderAlbum ((ParsedAlbum)this._parsedItem);  	this.AddToLog ("Данные альбома загружены");  }  else {  	this.UpdateStatus (3);  	this.RenderSong ((ParsedSong)this._parsedItem);  	this.AddToLog ("Данные песни загружены");  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: if (this._parsedItem is ParsedAlbum) {  	this.UpdateStatus (3);  	this.RenderAlbum ((ParsedAlbum)this._parsedItem);  	this.AddToLog ("Данные альбома загружены");  }  else {  	this.UpdateStatus (3);  	this.RenderSong ((ParsedSong)this._parsedItem);  	this.AddToLog ("Данные песни загружены");  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: this.UpdateStatus (3);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Finished,The following statement contains a magic number: this.UpdateStatus (3);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,Cancelled,The following statement contains a magic number: this.UpdateStatus (6);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderAlbum,The following statement contains a magic number: if (this.InvokeRequired == false) {  	this.gb_SongHeader.Visible = false;  	this.gb_Album_Header.Visible = true;  	this.tb_RO_Title.Text = album.Header.Title;  	this.tb_RO_Genre.Text = album.Genre;  	this.tb_RO_Artist.Text = album.Artist;  	this.tb_RO_Format.Text = album.Header.Format;  	this.tb_RO_Uploader.Text = album.Uploader;  	this.tb_RO_Date_Album.Text = album.Header.ReleaseDate;  	this.tb_RO_Type_Album.Text = album.Header.Type;  	this.tb_RO_Count_Album.Text = album.Header.SongsCount.ToString ();  	this.tb_RO_Description_Album.Text = album.Header.Description;  	this.tb_RO_Updater_Album.Text = album.Header.Updater;  	this.RenderImage (album);  	this.dgv_List.Rows.Clear ();  	Int32 failed_count = 0;  	for (Int32 i = 0; i < album.Songs.Count; i++) {  		OneSongHeader song = album.Songs [i];  		this.dgv_List.Rows.Add (song.Number' song.Artist' song.Title' song.Duration' song.Size' song.Bitrate);  		if (song.IsAvailableForDownload == false) {  			DataGridViewRow drvr = this.dgv_List.Rows [i];  			drvr.DefaultCellStyle = new DataGridViewCellStyle () {  				BackColor = Color.LightPink  			};  			drvr.Cells ["col_Download"].ReadOnly = true;  			drvr.Cells ["col_Download"].Value = false;  			failed_count++;  		}  	}  	if (failed_count > 0) {  		if (failed_count == album.Songs.Count) {  			this.gb_FooterButtons.Enabled = false;  			this.SetOrAppendMessage (true' String.Format ("Все {0} песни в данном альбоме помечены на сайте как таковые' файлы которых утеряны"' album.Songs.Count));  		}  		else {  			this.SetOrAppendMessage (true' String.Format ("Из {0} песен {1} помечены на сайте как таковые' файл которых утерян"' album.Songs.Count' failed_count));  		}  		this.UpdateStatus (5);  	}  }  else {  	Action<ParsedAlbum> a = RenderAlbum;  	this.Invoke (a' album);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderAlbum,The following statement contains a magic number: if (failed_count > 0) {  	if (failed_count == album.Songs.Count) {  		this.gb_FooterButtons.Enabled = false;  		this.SetOrAppendMessage (true' String.Format ("Все {0} песни в данном альбоме помечены на сайте как таковые' файлы которых утеряны"' album.Songs.Count));  	}  	else {  		this.SetOrAppendMessage (true' String.Format ("Из {0} песен {1} помечены на сайте как таковые' файл которых утерян"' album.Songs.Count' failed_count));  	}  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderAlbum,The following statement contains a magic number: this.UpdateStatus (5);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderSong,The following statement contains a magic number: if (this.InvokeRequired == false) {  	this.gb_Album_Header.Visible = false;  	this.gb_SongHeader.Visible = true;  	this.btn_GoToAlbumPage.Enabled = true;  	this.tb_RO_Title.Text = song.Header.Album;  	this.tb_RO_Genre.Text = song.Genre;  	this.tb_RO_Artist.Text = song.Artist;  	this.tb_RO_Format.Text = song.Header.Format;  	this.tb_RO_Uploader.Text = song.Uploader;  	this.tb_RO_AlbumURI.Text = song.AlbumLink.ToString ();  	this.RenderImage (song);  	this.dgv_List.Rows.Clear ();  	this.dgv_List.Rows.Add (song.Header.Number' song.Header.Artist' song.Header.Name' song.Header.Duration' song.Header.Size' song.Header.Bitrate' true);  	if (song.Header.IsAvailableForDownload == false) {  		this.gb_FooterButtons.Enabled = false;  		DataGridViewRow drvr = this.dgv_List.Rows [0];  		drvr.DefaultCellStyle = new DataGridViewCellStyle () {  			BackColor = Color.LightPink  		};  		drvr.Cells ["col_Download"].ReadOnly = true;  		drvr.Cells ["col_Download"].Value = false;  		this.SetOrAppendMessage (true' String.Format ("Песня '{0}. {1}' помечена на сайте как таковая' файл которой утерян"' song.Header.Number' song.Header.Name));  		this.UpdateStatus (5);  	}  }  else {  	this.Invoke ((Action<ParsedSong>)this.RenderSong' song);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderSong,The following statement contains a magic number: if (song.Header.IsAvailableForDownload == false) {  	this.gb_FooterButtons.Enabled = false;  	DataGridViewRow drvr = this.dgv_List.Rows [0];  	drvr.DefaultCellStyle = new DataGridViewCellStyle () {  		BackColor = Color.LightPink  	};  	drvr.Cells ["col_Download"].ReadOnly = true;  	drvr.Cells ["col_Download"].Value = false;  	this.SetOrAppendMessage (true' String.Format ("Песня '{0}. {1}' помечена на сайте как таковая' файл которой утерян"' song.Header.Number' song.Header.Name));  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderSong,The following statement contains a magic number: this.UpdateStatus (5);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderImage,The following statement contains a magic number: if (this.InvokeRequired == false) {  	if (Data.CoverImage == null) {  		this.pb_ItemImage.Image = null;  		this.btn_SaveImage.Enabled = false;  		this.lbl_ImageInfo.Text = "";  	}  	else {  		this.pb_ItemImage.Image = Data.CoverImage;  		this.btn_SaveImage.Enabled = true;  		this.lbl_ImageInfo.Text = String.Format ("{0} | {1} | {2} x {3} px"' ImageTools.GetImageFormat (Data.CoverImage)' KlotosLib.ByteQuantity.FromBytes (Data.CoverFile.Contentlength).ToStringWithBinaryPrefix (2' true)' Data.CoverImage.Size.Width' Data.CoverImage.Size.Height);  	}  }  else {  	this.Invoke ((Action<ACommonData>)this.RenderImage' Data);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderImage,The following statement contains a magic number: if (Data.CoverImage == null) {  	this.pb_ItemImage.Image = null;  	this.btn_SaveImage.Enabled = false;  	this.lbl_ImageInfo.Text = "";  }  else {  	this.pb_ItemImage.Image = Data.CoverImage;  	this.btn_SaveImage.Enabled = true;  	this.lbl_ImageInfo.Text = String.Format ("{0} | {1} | {2} x {3} px"' ImageTools.GetImageFormat (Data.CoverImage)' KlotosLib.ByteQuantity.FromBytes (Data.CoverFile.Contentlength).ToStringWithBinaryPrefix (2' true)' Data.CoverImage.Size.Width' Data.CoverImage.Size.Height);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,RenderImage,The following statement contains a magic number: this.lbl_ImageInfo.Text = String.Format ("{0} | {1} | {2} x {3} px"' ImageTools.GetImageFormat (Data.CoverImage)' KlotosLib.ByteQuantity.FromBytes (Data.CoverFile.Contentlength).ToStringWithBinaryPrefix (2' true)' Data.CoverImage.Size.Width' Data.CoverImage.Size.Height);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (this._parsedItem is ParsedSong) {  	this.SwitchStopButtonStatus (false);  	ParsedSong song = (ParsedSong)this._parsedItem;  	Object raw = this.dgv_List.Rows [0].Cells [6].Value;  	if (raw.IsNull () == true || (Boolean)raw == false) {  		String message = String.Format ("Песня {0} не была выбрана для скачивания"' song.Header.Name);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.AddToLog ("Выполнение задания по скачиванию и сохранению песни '" + song.Header.Name + "' началось");  	Task<DownloadedFile> task_song_file = Core.DownloadOneSongAsync (song' ProgramSettings.Instance.UserAgent);  	task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  		DownloadedFile file = already_downloaded.Result;  		if (file == null) {  			this.LockOrUnlockInterface (false);  			const string message = "Невозможно скачать файл песни с сервера";  			this.SetOrAppendMessage (true' message);  			this.AddToLog (message);  			this.UpdateStatus (4);  			return;  		}  		this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  		String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  		Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  		res.ContinueWith ((Task<String> res2) =>  {  			this.LockOrUnlockInterface (false);  			String message = res2.Result;  			this.SetOrAppendMessage (true' message);  			if (message == null) {  				this.AddToLog ("Песня успешно сохранена");  				this.SetOrAppendMessage (true' null);  				this.UpdateStatus (3);  			}  			else {  				this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  				this.UpdateStatus (4);  			}  			return;  		});  	});  }  else {  	ParsedAlbum album = this._parsedItem as ParsedAlbum;  	if (album == null) {  		this.SetOrAppendMessage (true' "Произошла внутренняя ошибка");  		this.AddToLog ("Внутренняя ошибка - распарсенная ранее сущность не может быть успешно преобразована в тип " + typeof(ParsedAlbum).FullName);  		this.LockOrUnlockInterface (false);  		return;  	}  	List<OneSongHeader> selected_for_download = new List<OneSongHeader> (album.Songs.Count);  	foreach (DataGridViewRow row in this.dgv_List.Rows) {  		Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  		if (selected == true) {  			Byte number = (Byte)row.Cells [0].Value;  			String name = row.Cells [2].Value.ToStringS ();  			OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  			selected_for_download.Add (selected_song);  		}  	}  	if (selected_for_download.Count == 0) {  		String message = String.Format ("Не было выбрано ни одной из {0} доступных песен"' album.Songs.Count);  		this.AddToLog (message);  		this.SetOrAppendMessage (true' message);  		this.LockOrUnlockInterface (false);  		return;  	}  	this.UpdateStatus (2);  	this.SwitchStopButtonStatus (true);  	this.DownloadAndSave (selected_for_download);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: this.UpdateStatus (2);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  	DownloadedFile file = already_downloaded.Result;  	if (file == null) {  		this.LockOrUnlockInterface (false);  		const string message = "Невозможно скачать файл песни с сервера";  		this.SetOrAppendMessage (true' message);  		this.AddToLog (message);  		this.UpdateStatus (4);  		return;  	}  	this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  	String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  	Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  	res.ContinueWith ((Task<String> res2) =>  {  		this.LockOrUnlockInterface (false);  		String message = res2.Result;  		this.SetOrAppendMessage (true' message);  		if (message == null) {  			this.AddToLog ("Песня успешно сохранена");  			this.SetOrAppendMessage (true' null);  			this.UpdateStatus (3);  		}  		else {  			this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.UpdateStatus (4);  		}  		return;  	});  });  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  	DownloadedFile file = already_downloaded.Result;  	if (file == null) {  		this.LockOrUnlockInterface (false);  		const string message = "Невозможно скачать файл песни с сервера";  		this.SetOrAppendMessage (true' message);  		this.AddToLog (message);  		this.UpdateStatus (4);  		return;  	}  	this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  	String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  	Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  	res.ContinueWith ((Task<String> res2) =>  {  		this.LockOrUnlockInterface (false);  		String message = res2.Result;  		this.SetOrAppendMessage (true' message);  		if (message == null) {  			this.AddToLog ("Песня успешно сохранена");  			this.SetOrAppendMessage (true' null);  			this.UpdateStatus (3);  		}  		else {  			this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.UpdateStatus (4);  		}  		return;  	});  });  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  	DownloadedFile file = already_downloaded.Result;  	if (file == null) {  		this.LockOrUnlockInterface (false);  		const string message = "Невозможно скачать файл песни с сервера";  		this.SetOrAppendMessage (true' message);  		this.AddToLog (message);  		this.UpdateStatus (4);  		return;  	}  	this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  	String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  	Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  	res.ContinueWith ((Task<String> res2) =>  {  		this.LockOrUnlockInterface (false);  		String message = res2.Result;  		this.SetOrAppendMessage (true' message);  		if (message == null) {  			this.AddToLog ("Песня успешно сохранена");  			this.SetOrAppendMessage (true' null);  			this.UpdateStatus (3);  		}  		else {  			this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.UpdateStatus (4);  		}  		return;  	});  });  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: task_song_file.ContinueWith ((Task<DownloadedFile> already_downloaded) =>  {  	DownloadedFile file = already_downloaded.Result;  	if (file == null) {  		this.LockOrUnlockInterface (false);  		const string message = "Невозможно скачать файл песни с сервера";  		this.SetOrAppendMessage (true' message);  		this.AddToLog (message);  		this.UpdateStatus (4);  		return;  	}  	this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  	String song_filename = ProgramSettings.Instance.UseServerFilenames == true ? file.Filename : song.Header.GenerateSongFilename (file.Filename' ProgramSettings.Instance.FilenameTemplate);  	Task<String> res = Core.TrySaveDownloadedFileToDiskAsync (file' save_path' song_filename);  	res.ContinueWith ((Task<String> res2) =>  {  		this.LockOrUnlockInterface (false);  		String message = res2.Result;  		this.SetOrAppendMessage (true' message);  		if (message == null) {  			this.AddToLog ("Песня успешно сохранена");  			this.SetOrAppendMessage (true' null);  			this.UpdateStatus (3);  		}  		else {  			this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  			this.UpdateStatus (4);  		}  		return;  	});  });  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (file == null) {  	this.LockOrUnlockInterface (false);  	const string message = "Невозможно скачать файл песни с сервера";  	this.SetOrAppendMessage (true' message);  	this.AddToLog (message);  	this.UpdateStatus (4);  	return;  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: this.UpdateStatus (4);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: this.AddToLog (String.Format ("Файл песни {0} размером {1} скачан"' file.Filename' ByteQuantity.FromBytes (file.Contentlength).ToStringWithBinaryPrefix (3' false)));  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: res.ContinueWith ((Task<String> res2) =>  {  	this.LockOrUnlockInterface (false);  	String message = res2.Result;  	this.SetOrAppendMessage (true' message);  	if (message == null) {  		this.AddToLog ("Песня успешно сохранена");  		this.SetOrAppendMessage (true' null);  		this.UpdateStatus (3);  	}  	else {  		this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  		this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  		this.UpdateStatus (4);  	}  	return;  });  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: res.ContinueWith ((Task<String> res2) =>  {  	this.LockOrUnlockInterface (false);  	String message = res2.Result;  	this.SetOrAppendMessage (true' message);  	if (message == null) {  		this.AddToLog ("Песня успешно сохранена");  		this.SetOrAppendMessage (true' null);  		this.UpdateStatus (3);  	}  	else {  		this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  		this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  		this.UpdateStatus (4);  	}  	return;  });  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (message == null) {  	this.AddToLog ("Песня успешно сохранена");  	this.SetOrAppendMessage (true' null);  	this.UpdateStatus (3);  }  else {  	this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  	this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  	this.UpdateStatus (4);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (message == null) {  	this.AddToLog ("Песня успешно сохранена");  	this.SetOrAppendMessage (true' null);  	this.UpdateStatus (3);  }  else {  	this.SetOrAppendMessage (true' "Произошла ошибка при сохранении скачанной песни на диск. " + message);  	this.AddToLog ("Произошла ошибка при сохранении скачанной песни на диск. " + message);  	this.UpdateStatus (4);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: this.UpdateStatus (3);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: this.UpdateStatus (4);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: foreach (DataGridViewRow row in this.dgv_List.Rows) {  	Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  	if (selected == true) {  		Byte number = (Byte)row.Cells [0].Value;  		String name = row.Cells [2].Value.ToStringS ();  		OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  		selected_for_download.Add (selected_song);  	}  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: foreach (DataGridViewRow row in this.dgv_List.Rows) {  	Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  	if (selected == true) {  		Byte number = (Byte)row.Cells [0].Value;  		String name = row.Cells [2].Value.ToStringS ();  		OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  		selected_for_download.Add (selected_song);  	}  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: foreach (DataGridViewRow row in this.dgv_List.Rows) {  	Boolean selected = row.Cells [6].Value.IsNull () != true && (Boolean)row.Cells [6].Value;  	if (selected == true) {  		Byte number = (Byte)row.Cells [0].Value;  		String name = row.Cells [2].Value.ToStringS ();  		OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  		selected_for_download.Add (selected_song);  	}  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: if (selected == true) {  	Byte number = (Byte)row.Cells [0].Value;  	String name = row.Cells [2].Value.ToStringS ();  	OneSongHeader selected_song = album.Songs.Single ((OneSongHeader song) => song.Number == number && song.Name == name);  	selected_for_download.Add (selected_song);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_DownloadSelected_Click,The following statement contains a magic number: this.UpdateStatus (2);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: res_task.ContinueWith ((Task<IDictionary<OneSongHeader' Exception>> r) =>  {  	IDictionary<OneSongHeader' Exception> result = r.Result;  	Dictionary<OneSongHeader' Exception> failed = result.Where (kvp => kvp.Value != null).ConvertToDictionary ();  	String message;  	if (failed.IsNullOrEmpty () == true) {  		message = String.Format ("Скачивание и сохранение на диск всех {0} песен успешно завершено"' result.Count);  		this.UpdateStatus (3);  	}  	else if (failed.Count == result.Count) {  		message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  		this.UpdateStatus (4);  	}  	else {  		message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  		this.UpdateStatus (5);  	}  	this.AddToLog (message);  	this.SetOrAppendMessage (true' message);  	this.LockOrUnlockInterface (false);  	this.SwitchStopButtonStatus (false);  	this._cancelSongsDownload.Dispose ();  	this._cancelSongsDownload = null;  }' TaskContinuationOptions.NotOnCanceled);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: res_task.ContinueWith ((Task<IDictionary<OneSongHeader' Exception>> r) =>  {  	IDictionary<OneSongHeader' Exception> result = r.Result;  	Dictionary<OneSongHeader' Exception> failed = result.Where (kvp => kvp.Value != null).ConvertToDictionary ();  	String message;  	if (failed.IsNullOrEmpty () == true) {  		message = String.Format ("Скачивание и сохранение на диск всех {0} песен успешно завершено"' result.Count);  		this.UpdateStatus (3);  	}  	else if (failed.Count == result.Count) {  		message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  		this.UpdateStatus (4);  	}  	else {  		message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  		this.UpdateStatus (5);  	}  	this.AddToLog (message);  	this.SetOrAppendMessage (true' message);  	this.LockOrUnlockInterface (false);  	this.SwitchStopButtonStatus (false);  	this._cancelSongsDownload.Dispose ();  	this._cancelSongsDownload = null;  }' TaskContinuationOptions.NotOnCanceled);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: res_task.ContinueWith ((Task<IDictionary<OneSongHeader' Exception>> r) =>  {  	IDictionary<OneSongHeader' Exception> result = r.Result;  	Dictionary<OneSongHeader' Exception> failed = result.Where (kvp => kvp.Value != null).ConvertToDictionary ();  	String message;  	if (failed.IsNullOrEmpty () == true) {  		message = String.Format ("Скачивание и сохранение на диск всех {0} песен успешно завершено"' result.Count);  		this.UpdateStatus (3);  	}  	else if (failed.Count == result.Count) {  		message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  		this.UpdateStatus (4);  	}  	else {  		message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  		this.UpdateStatus (5);  	}  	this.AddToLog (message);  	this.SetOrAppendMessage (true' message);  	this.LockOrUnlockInterface (false);  	this.SwitchStopButtonStatus (false);  	this._cancelSongsDownload.Dispose ();  	this._cancelSongsDownload = null;  }' TaskContinuationOptions.NotOnCanceled);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: if (failed.IsNullOrEmpty () == true) {  	message = String.Format ("Скачивание и сохранение на диск всех {0} песен успешно завершено"' result.Count);  	this.UpdateStatus (3);  }  else if (failed.Count == result.Count) {  	message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (4);  }  else {  	message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: if (failed.IsNullOrEmpty () == true) {  	message = String.Format ("Скачивание и сохранение на диск всех {0} песен успешно завершено"' result.Count);  	this.UpdateStatus (3);  }  else if (failed.Count == result.Count) {  	message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (4);  }  else {  	message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: if (failed.IsNullOrEmpty () == true) {  	message = String.Format ("Скачивание и сохранение на диск всех {0} песен успешно завершено"' result.Count);  	this.UpdateStatus (3);  }  else if (failed.Count == result.Count) {  	message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (4);  }  else {  	message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: this.UpdateStatus (3);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: if (failed.Count == result.Count) {  	message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (4);  }  else {  	message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: if (failed.Count == result.Count) {  	message = String.Format ("Не удалось скачать или сохранить на диск ни одну из {0} песен. Список ошибок: \r\n{1}"' result.Count' failed.ConcatToString (key => "'" + key.Number.ToString () + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (4);  }  else {  	message = String.Format ("Из {0} выбранных песен не удалось скачать {1}. Список ошибок: \r\n{2}"' result.Count' failed.Count' failed.ConcatToString (key => "'" + key.Number + ". " + key.Name + "'"' value => value.TotalMessage ()' " --> "' ";\r\n "));  	this.UpdateStatus (5);  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: this.UpdateStatus (4);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: this.UpdateStatus (5);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: res_task.ContinueWith ((Task<IDictionary<OneSongHeader' Exception>> r) =>  {  	this.LockOrUnlockInterface (false);  	this.SwitchStopButtonStatus (false);  	this.UpdateStatus (6);  	String message = "Отмена операции скачивания и сохранения успешно завершена";  	this.AddToLog (message);  	this.SetOrAppendMessage (true' message);  }' TaskContinuationOptions.OnlyOnCanceled);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,DownloadAndSave,The following statement contains a magic number: this.UpdateStatus (6);  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_StopProcess_Click,The following statement contains a magic number: if (this._cancelGrabbingPage != null) {  	this._cancelGrabbingPage.Cancel ();  	this._cancelGrabbingPage.Dispose ();  	this._cancelGrabbingPage = null;  }  else if (this._cancelSongsDownload != null) {  	this._cancelSongsDownload.Cancel ();  	this._cancelSongsDownload.Dispose ();  	this._cancelSongsDownload = null;  	{  		this.UpdateStatus (7);  		this.AddToLog ("Запрошена отмена операции скачивания и сохранения песен");  		this.SetOrAppendMessage (true' "Выполняется отмена операции скачивания и сохранения песен. Те песни' которые уже начали скачиваться или сохраняться на диск' будут докачаны и сохранены.");  	}  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_StopProcess_Click,The following statement contains a magic number: if (this._cancelSongsDownload != null) {  	this._cancelSongsDownload.Cancel ();  	this._cancelSongsDownload.Dispose ();  	this._cancelSongsDownload = null;  	{  		this.UpdateStatus (7);  		this.AddToLog ("Запрошена отмена операции скачивания и сохранения песен");  		this.SetOrAppendMessage (true' "Выполняется отмена операции скачивания и сохранения песен. Те песни' которые уже начали скачиваться или сохраняться на диск' будут докачаны и сохранены.");  	}  }  
Magic Number,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,btn_StopProcess_Click,The following statement contains a magic number: this.UpdateStatus (7);  
Magic Number,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The following statement contains a magic number: using (FileStream fileStream = new FileStream (assembly.Location' FileMode.Open' FileAccess.Read)) {  	fileStream.Position = 0x3C;  	fileStream.Read (buffer' 0' 4);  	fileStream.Position = BitConverter.ToUInt32 (buffer' 0);  	// COFF header offset  	fileStream.Read (buffer' 0' 4);  	// "PE\0\0"  	fileStream.Read (buffer' 0' buffer.Length);  }  
Magic Number,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The following statement contains a magic number: using (FileStream fileStream = new FileStream (assembly.Location' FileMode.Open' FileAccess.Read)) {  	fileStream.Position = 0x3C;  	fileStream.Read (buffer' 0' 4);  	fileStream.Position = BitConverter.ToUInt32 (buffer' 0);  	// COFF header offset  	fileStream.Read (buffer' 0' 4);  	// "PE\0\0"  	fileStream.Read (buffer' 0' buffer.Length);  }  
Magic Number,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The following statement contains a magic number: fileStream.Read (buffer' 0' 4);  
Magic Number,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The following statement contains a magic number: fileStream.Read (buffer' 0' 4);  
Magic Number,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The following statement contains a magic number: try {  	Tools._IMAGE_FILE_HEADER coffHeader = (Tools._IMAGE_FILE_HEADER)Marshal.PtrToStructure (pinnedBuffer.AddrOfPinnedObject ()' typeof(Tools._IMAGE_FILE_HEADER));  	return TimeZone.CurrentTimeZone.ToLocalTime (new DateTime (1970' 1' 1) + new TimeSpan (coffHeader.TimeDateStamp * TimeSpan.TicksPerSecond));  }  finally {  	pinnedBuffer.Free ();  }  
Magic Number,MyzukaRuGrabberGUI,Tools,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\Tools.cs,GetBuildDateTime,The following statement contains a magic number: return TimeZone.CurrentTimeZone.ToLocalTime (new DateTime (1970' 1' 1) + new TimeSpan (coffHeader.TimeDateStamp * TimeSpan.TicksPerSecond));  
Missing Default,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,UpdateStatus,The following switch statement is missing a default case: switch (StatusCode) {  case 1:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageReady;  	this.lbl_ProcStatusText.Text = "Ready";  	this.lbl_ProcStatusText.ForeColor = Color.BurlyWood;  	break;  case 2:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerProcessing;  	this.lbl_ProcStatusText.Text = "Wait...";  	this.lbl_ProcStatusText.ForeColor = Color.CornflowerBlue;  	break;  case 3:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFinished;  	this.lbl_ProcStatusText.Text = "Success";  	this.lbl_ProcStatusText.ForeColor = Color.Aquamarine;  	break;  case 4:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageFailed;  	this.lbl_ProcStatusText.Text = "Error";  	this.lbl_ProcStatusText.ForeColor = Color.OrangeRed;  	break;  case 5:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSomeErrors;  	this.lbl_ProcStatusText.Text = "Some errors";  	this.lbl_ProcStatusText.ForeColor = Color.Coral;  	break;  case 6:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageStopped;  	this.lbl_ProcStatusText.Text = "Stopped";  	this.lbl_ProcStatusText.ForeColor = Color.Blue;  	break;  case 7:  	this.pb_ProcStatusImage.Image = Properties.Resources.ImageSpinnerCancelling;  	this.lbl_ProcStatusText.Text = "Cancelling";  	this.lbl_ProcStatusText.ForeColor = Color.DarkKhaki;  	break;  }  
Missing Default,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,SwitchStopButtonStatus,The following switch statement is missing a default case: switch (NewStatus) {  case true:  	this.btn_StopProcess.Enabled = true;  	break;  case false:  	this.btn_StopProcess.Enabled = false;  	break;  case null:  	this.btn_StopProcess.Enabled = !this.btn_StopProcess.Enabled;  	break;  }  
Missing Default,MyzukaRuGrabberGUI,frm_Main,C:\repos\Klotos_MyzukaRuGrabber\Solution\MyzukaRuGrabberGUI\frm_Main.cs,LockOrUnlockFooterButtons,The following switch statement is missing a default case: switch (Lock) {  case true:  	this.gb_FooterButtons.Enabled = false;  	break;  case false:  	this.gb_FooterButtons.Enabled = true;  	break;  case null:  	this.gb_FooterButtons.Enabled = !this.gb_FooterButtons.Enabled;  	break;  }  
