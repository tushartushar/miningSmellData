Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,The method has 110 lines of code.
Long Method,SIPLib.SIP,Header,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Header.cs,Parse,The method has 121 lines of code.
Long Method,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,Parse,The method has 124 lines of code.
Long Method,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The method has 165 lines of code.
Complex Method,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,Cyclomatic complexity of the method is 15
Complex Method,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,CreateRequest,Cyclomatic complexity of the method is 9
Complex Method,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthenticate,Cyclomatic complexity of the method is 8
Complex Method,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,Cyclomatic complexity of the method is 14
Complex Method,SIPLib.SIP,Header,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Header.cs,Parse,Cyclomatic complexity of the method is 16
Complex Method,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,SIPLib.SIP,SDPMedia,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Media.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,CreateAnswer,Cyclomatic complexity of the method is 12
Complex Method,SIPLib.SIP,SIPURI,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPURI.cs,nonRegExpInit,Cyclomatic complexity of the method is 9
Complex Method,SIPLib.SIP,SIPURI,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPURI.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,Cyclomatic complexity of the method is 9
Complex Method,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,UserAgent,Cyclomatic complexity of the method is 8
Complex Method,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,CreateRequest,Cyclomatic complexity of the method is 12
Complex Method,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,SendRequest,Cyclomatic complexity of the method is 13
Complex Method,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,Cyclomatic complexity of the method is 9
Complex Method,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,SendResponse,Cyclomatic complexity of the method is 8
Complex Method,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,Authenticate,Cyclomatic complexity of the method is 8
Long Parameter List,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,SendResponse,The method has 5 parameters. Parameters: response' responseText' content' contentType' createDialog
Long Parameter List,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,CreateRequest,The method has 6 parameters. Parameters: method' dest' stateless' recordRoute' headers' route
Long Parameter List,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,The method has 7 parameters. Parameters: challenge' username' password' uri' method' entityBody' context
Long Parameter List,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,SendResponse,The method has 5 parameters. Parameters: response' responseText' content' contentType' createDialog
Long Parameter List,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,CreateResponse,The method has 5 parameters. Parameters: responseCode' responseText' headers' content' originalRequest
Long Parameter List,SIPLib.SIP,Transaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Transaction.cs,CreateServer,The method has 6 parameters. Parameters: stack' app' request' transport' tag' start
Long Parameter List,SIPLib.SIP,Transaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Transaction.cs,CreateClient,The method has 5 parameters. Parameters: stack' app' request' transport' remote
Long Parameter List,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,SendResponse,The method has 5 parameters. Parameters: response' responseText' content' contentType' createDialog
Long Statement,SIPLib.SIP,TestMyThreadSafetyCheck,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\MyThreadSafetyCheck.cs,OnEntry,The length of the statement  "                    Console.Write(string.Format("Error E20120320-1349. Could not add an initial key to the \"DetectThreadingIssues\" dictionary.\n")); " is 130.
Long Statement,SIPLib.SIP,TestMyThreadSafetyCheck,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\MyThreadSafetyCheck.cs,OnEntry,The length of the statement  "                    Console.WriteLine(string.Format("{0}Warning: ThreadID {1} then {2} accessed \"{3}\" ({4}). To remove warning' manually check thread safety' then add \"[MyThreadSafetyCheck(AttributeExclude = true)]\".\n"' " is 204.
Long Statement,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,ToString,The length of the statement  "				Debug.Assert(false' String.Format("2 Error converting message to string {0} \n {1} \n {2}"' ex' Headers.ToList()' Headers.Values.ToList() )); " is 141.
Long Statement,SIPLib.SIP,SIPURI,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPURI.cs,regExInit,The length of the statement  "                @"^(?<scheme>[a-zA-Z][a-zA-Z0-9\+\-\.]*):(((?<user>[a-zA-Z0-9\-_\.\!\~\*\'\(\)&=\+\$';\?\/\%]+)(:(?<password>[^:@;\?]+))?)@)?(((?<host>[^;\?:]*)(:(?<port>[\d]+))?))(;(?<params>[^\?]*))?(\?(?<headers>.*))?$"; " is 207.
Long Statement,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,Authenticate,The length of the statement  "                //string value = createAuthorization(a.value' a.attributes["username"]' a.attributes["password"]' request.uri.ToString()' this.request.method' this.request.body' this.auth); " is 173.
Complex Conditional,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The conditional expression  "(transaction != null) && Transaction != null && Transaction != transaction &&                      request.Method.ToUpper() != "CANCEL""  is complex.
Complex Conditional,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The conditional expression  "string.IsNullOrEmpty(request.Uri.User) && IsLocal(request.Uri) && request.Uri.Parameters != null &&                      request.First("Route") != null"  is complex.
Complex Conditional,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedResponse,The conditional expression  "response.Is2XX() && response.Headers.ContainsKey("Contact") && transaction != null &&                  transaction.Request.Method == "INVITE""  is complex.
Complex Conditional,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedResponse,The conditional expression  "Autoack && response.Is2XX() &&                  (transaction != null && transaction.Request.Method == "INVITE" ||                   response.First("CSeq").Method == "INVITE")"  is complex.
Complex Conditional,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,CreateAnswer,The conditional expression  "(0 <= mymfpt && mymfpt < 32 && 0 <= yourmfpt && yourmfpt <= 32 && mymfpt == yourmfpt)                                  || (mymfpt < 0 && yourmfpt < 0 && mymfpt == yourmfpt)                                  || (mymf.Name == yourmf.Name && mymf.Rate == yourmf.Rate && mymf.Count == yourmf.Count)"  is complex.
Complex Conditional,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,Send,The conditional expression  "!(Helpers.IsRequest(m) &&                                ((m.Method.ToLower().Contains("register") ||                                  (m.Method.ToLower().Contains("ack") || (m.Method.ToLower().Contains("bye"))))))"  is complex.
Complex Conditional,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,The conditional expression  "(transaction != null) && (Transaction != null) && (transaction != Transaction) &&                  (request.Method != "CANCEL")"  is complex.
Complex Conditional,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,Authenticate,The conditional expression  "a.Attributes["realm"] == h.Attributes["realm"] &&                          (a.Name == "WWW-Authenticate" && h.Name == "Authorization" ||                           a.Name == "Proxy-Authenticate" && h.Name == "Proxy-Authorization")"  is complex.
Empty Catch Block,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,SendRequest,The method has an empty catch block.
Empty Catch Block,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,Authenticate,The method has an empty catch block.
Magic Number,SIPLib.SIP,Address,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Address.cs,Displayable,The following statement contains a magic number: if (name.Length > 26)              {                  name = name.Substring(0' 22);                  name = name + "...";              }
Magic Number,SIPLib.SIP,Address,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Address.cs,Displayable,The following statement contains a magic number: if (name.Length > 26)              {                  name = name.Substring(0' 22);                  name = name + "...";              }
Magic Number,SIPLib.SIP,TestMyThreadSafetyCheck,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\MyThreadSafetyCheck.cs,RuntimeInitialize,The following statement contains a magic number: this.LastTotalMilliseconds = -1000000;
Magic Number,SIPLib.SIP,TestMyThreadSafetyCheck,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\MyThreadSafetyCheck.cs,OnEntry,The following statement contains a magic number: if (lastThreadID != Thread.CurrentThread.ManagedThreadId)              {                  // Check 2: Are we printing more than one message per second?                  if ((sw.ElapsedMilliseconds - this.LastTotalMilliseconds) > 1000)                  {                      Console.WriteLine("Begin");                      Console.WriteLine(System.Environment.StackTrace);                      Console.WriteLine(string.Format("{0}Warning: ThreadID {1} then {2} accessed \"{3}\" ({4}). To remove warning' manually check thread safety' then add \"[MyThreadSafetyCheck(AttributeExclude = true)]\".\n"'                          "X"' lastThreadID' Thread.CurrentThread.ManagedThreadId' this.MethodName' classInstanceID));                      Console.WriteLine("End");                      this.LastTotalMilliseconds = sw.ElapsedMilliseconds;                  }              }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The following statement contains a magic number: if (!request.Uri.Scheme.ToLower().Equals("sip"))                  {                      SendResponse(416' "Unsupported URI scheme");                      return;                  }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The following statement contains a magic number: if (request.First("Max-Forwards") != null &&                      int.Parse(request.First("Max-Forwards").Value.ToString()) < 0)                  {                      SendResponse(483' "Too many hops");                      return;                  }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The following statement contains a magic number: if (request.First("Proxy-Require") != null)                  {                      if (!request.Method.ToUpper().Contains("CANCEL") && !request.Method.ToUpper().Contains("ACK"))                      {                          Message response = CreateResponse(420' "Bad extension");                          Header unsupported = request.First("Proxy-Require");                          unsupported.Name = "Unsupported";                          response.InsertHeader(unsupported);                          SendResponse(unsupported);                          return;                      }                  }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The following statement contains a magic number: if (request.Method.ToUpper() == "CANCEL")                  {                      string branch;                      if (request.First("Via") != null && request.First("Via").Attributes.ContainsKey("branch"))                      {                          branch = request.First("Via").Attributes["branch"];                      }                      else                      {                          branch = Transaction.CreateBranch(request' true);                      }                      Transaction original = Stack.FindTransaction(Transaction.CreateId(branch' "INVITE"));                      if (original != null)                      {                          if (original.State == "proceeding" || original.State == "trying")                          {                              original.SendResponse(original.CreateResponse(487' "Request terminated"));                          }                          transaction = Transaction.CreateServer(Stack' this' request' Stack.Transport'                                                                 Stack.Tag' false);                          transaction.SendResponse(transaction.CreateResponse(200' "OK"));                      }                      SendCancel();                      return;                  }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,ReceivedRequest,The following statement contains a magic number: if (request.Method.ToUpper() == "CANCEL")                  {                      string branch;                      if (request.First("Via") != null && request.First("Via").Attributes.ContainsKey("branch"))                      {                          branch = request.First("Via").Attributes["branch"];                      }                      else                      {                          branch = Transaction.CreateBranch(request' true);                      }                      Transaction original = Stack.FindTransaction(Transaction.CreateId(branch' "INVITE"));                      if (original != null)                      {                          if (original.State == "proceeding" || original.State == "trying")                          {                              original.SendResponse(original.CreateResponse(487' "Request terminated"));                          }                          transaction = Transaction.CreateServer(Stack' this' request' Stack.Transport'                                                                 Stack.Tag' false);                          transaction.SendResponse(transaction.CreateResponse(200' "OK"));                      }                      SendCancel();                      return;                  }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,IsLocal,The following statement contains a magic number: if (uri.Port <= 0)              {                  if (Stack.Transport.Port == 5060)                  {                      port = true;                  }              }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,SendRequest,The following statement contains a magic number: if (target.Port <= 0)              {                  dest.Port = 5060;              }              else              {                  dest.Port = target.Port;              }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,TimeOut,The following statement contains a magic number: if (branch.RemoteCandidates != null && branch.RemoteCandidates.Count > 0)              {                  RetryNextCandidate(branch);              }              else              {                  ReceivedResponse(null' Message.CreateResponse(408' "Request timeout"' null' null' branch.Request));              }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,Error,The following statement contains a magic number: if (transaction == null)              {                  Transaction = null;                  if (!Request.Method.ToUpper().Contains("ACK"))                  {                      Message response = Message.CreateResponse(503' "Service unavailable - " + error' null' null'                                                                Request);                      SendResponse(response);                      return;                  }                  Debug.Assert(false' "Warning' dropping ACK");              }
Magic Number,SIPLib.SIP,Proxy,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Proxy.cs,Error,The following statement contains a magic number: if (branch.RemoteCandidates != null && branch.RemoteCandidates.Count > 0)              {                  RetryNextCandidate(branch);              }              else              {                  ReceivedResponse(null'                                   Message.CreateResponse(503' "Service unavailable - " + error' null' null'                                                          branch.Request));              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 100 && (statusCode) < 200)              {                  return StatusCodes.Informational;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 100 && (statusCode) < 200)              {                  return StatusCodes.Informational;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 200 && (statusCode) < 300)              {                  return StatusCodes.Successful;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 200 && (statusCode) < 300)              {                  return StatusCodes.Successful;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 300 && (statusCode) < 400)              {                  return StatusCodes.Redirection;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 300 && (statusCode) < 400)              {                  return StatusCodes.Redirection;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 400 && (statusCode) < 500)              {                  return StatusCodes.ClientFailure;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 400 && (statusCode) < 500)              {                  return StatusCodes.ClientFailure;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 500 && (statusCode) < 600)              {                  return StatusCodes.ServerFailure;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 500 && (statusCode) < 600)              {                  return StatusCodes.ServerFailure;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 600 && (statusCode) < 700)              {                  return StatusCodes.GlobalFailure;              }
Magic Number,SIPLib.SIP,Types,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Types.cs,GetStatusType,The following statement contains a magic number: if ((statusCode) >= 600 && (statusCode) < 700)              {                  return StatusCodes.GlobalFailure;              }
Magic Number,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,The following statement contains a magic number: string[] values = challenge.Split(" ".ToCharArray()' 2);
Magic Number,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,The following statement contains a magic number: if (authMethod.ToLower() == "digest")              {                  if (rest.Length > 0)                  {                      foreach (string pairs in rest.Split('''))                      {                          string[] sides = pairs.Trim().Split('=');                          ch[sides[0].ToLower().Trim()] = Helpers.Unquote(sides[1].Trim());                      }                  }                  foreach (string s in new[] {"username"' "realm"' "nonce"' "opaque"' "algorithm"})                  {                      if (ch.ContainsKey(s))                      {                          cr[s] = ch[s];                      }                  }                  if (uri != null)                  {                      cr["uri"] = uri;                  }                  if (method != null)                  {                      cr["httpMethod"] = method;                  }                  if (ch.ContainsKey("qop"))                  {                      string cnonce;                      int nc;                      if (context != null && context.ContainsKey("cnonce"))                      {                          cnonce = context["cnonce"];                          nc = Int32.Parse(context["nc"]) + 1;                      }                      else                      {                          int randomInt = Random.Next(0' 2147483647);                          cnonce = H(randomInt.ToString());                          nc = 1;                      }                      if (context != null)                      {                          context["cnonce"] = cnonce;                          context["nc"] = nc.ToString();                      }                      cr["qop"] = "auth";                      cr["cnonce"] = cnonce;                      cr["nc"] = Convert.ToString(nc' 10).PadLeft(8' '0');                  }                  cr["response"] = Digest(cr);                  Dictionary<string' string> items = (from kvp in cr                                                      let filter =                                                          new[]                                                              {                                                                  "name"' "authMethod"' "value"' "httpMethod"'                                                                  "entityBody"'                                                                  "password"                                                              }                                                      where !filter.Contains(kvp.Key)                                                      select kvp).ToDictionary(kvp => kvp.Key' kvp => kvp.Value);                  StringBuilder sb = new StringBuilder();                  sb.Append(authMethod + " ");                    foreach (KeyValuePair<string' string> kvp in items)                  {                      if (kvp.Key == "cnonce")                      {                          // TODO re-enable cnonce values                      }                      else if (kvp.Key == "algorithm")                      {                          sb.Append("' ");                          sb.Append(kvp.Key);                          sb.Append("=");                          sb.Append(kvp.Value);                      }                      else if (!(kvp.Key == "qop" || kvp.Key == "nc"))                      {                          sb.Append("' ");                          sb.Append(kvp.Key);                          sb.Append("=");                          sb.Append(Helpers.Quote(kvp.Value));                      }                      else                      {                          // TODO re-enable qop/nc values                          //sb.Append("' ");                          //sb.Append(kvp.Key);                          //sb.Append("=");                          //sb.Append(kvp.Value);                      }                  }                  sb.Replace(authMethod + " ' "' authMethod + " ");                  return sb.ToString();              }
Magic Number,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,The following statement contains a magic number: if (authMethod.ToLower() == "digest")              {                  if (rest.Length > 0)                  {                      foreach (string pairs in rest.Split('''))                      {                          string[] sides = pairs.Trim().Split('=');                          ch[sides[0].ToLower().Trim()] = Helpers.Unquote(sides[1].Trim());                      }                  }                  foreach (string s in new[] {"username"' "realm"' "nonce"' "opaque"' "algorithm"})                  {                      if (ch.ContainsKey(s))                      {                          cr[s] = ch[s];                      }                  }                  if (uri != null)                  {                      cr["uri"] = uri;                  }                  if (method != null)                  {                      cr["httpMethod"] = method;                  }                  if (ch.ContainsKey("qop"))                  {                      string cnonce;                      int nc;                      if (context != null && context.ContainsKey("cnonce"))                      {                          cnonce = context["cnonce"];                          nc = Int32.Parse(context["nc"]) + 1;                      }                      else                      {                          int randomInt = Random.Next(0' 2147483647);                          cnonce = H(randomInt.ToString());                          nc = 1;                      }                      if (context != null)                      {                          context["cnonce"] = cnonce;                          context["nc"] = nc.ToString();                      }                      cr["qop"] = "auth";                      cr["cnonce"] = cnonce;                      cr["nc"] = Convert.ToString(nc' 10).PadLeft(8' '0');                  }                  cr["response"] = Digest(cr);                  Dictionary<string' string> items = (from kvp in cr                                                      let filter =                                                          new[]                                                              {                                                                  "name"' "authMethod"' "value"' "httpMethod"'                                                                  "entityBody"'                                                                  "password"                                                              }                                                      where !filter.Contains(kvp.Key)                                                      select kvp).ToDictionary(kvp => kvp.Key' kvp => kvp.Value);                  StringBuilder sb = new StringBuilder();                  sb.Append(authMethod + " ");                    foreach (KeyValuePair<string' string> kvp in items)                  {                      if (kvp.Key == "cnonce")                      {                          // TODO re-enable cnonce values                      }                      else if (kvp.Key == "algorithm")                      {                          sb.Append("' ");                          sb.Append(kvp.Key);                          sb.Append("=");                          sb.Append(kvp.Value);                      }                      else if (!(kvp.Key == "qop" || kvp.Key == "nc"))                      {                          sb.Append("' ");                          sb.Append(kvp.Key);                          sb.Append("=");                          sb.Append(Helpers.Quote(kvp.Value));                      }                      else                      {                          // TODO re-enable qop/nc values                          //sb.Append("' ");                          //sb.Append(kvp.Key);                          //sb.Append("=");                          //sb.Append(kvp.Value);                      }                  }                  sb.Replace(authMethod + " ' "' authMethod + " ");                  return sb.ToString();              }
Magic Number,SIPLib.SIP,Authenticate,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Authenticate.cs,CreateAuthorization,The following statement contains a magic number: if (authMethod.ToLower() == "digest")              {                  if (rest.Length > 0)                  {                      foreach (string pairs in rest.Split('''))                      {                          string[] sides = pairs.Trim().Split('=');                          ch[sides[0].ToLower().Trim()] = Helpers.Unquote(sides[1].Trim());                      }                  }                  foreach (string s in new[] {"username"' "realm"' "nonce"' "opaque"' "algorithm"})                  {                      if (ch.ContainsKey(s))                      {                          cr[s] = ch[s];                      }                  }                  if (uri != null)                  {                      cr["uri"] = uri;                  }                  if (method != null)                  {                      cr["httpMethod"] = method;                  }                  if (ch.ContainsKey("qop"))                  {                      string cnonce;                      int nc;                      if (context != null && context.ContainsKey("cnonce"))                      {                          cnonce = context["cnonce"];                          nc = Int32.Parse(context["nc"]) + 1;                      }                      else                      {                          int randomInt = Random.Next(0' 2147483647);                          cnonce = H(randomInt.ToString());                          nc = 1;                      }                      if (context != null)                      {                          context["cnonce"] = cnonce;                          context["nc"] = nc.ToString();                      }                      cr["qop"] = "auth";                      cr["cnonce"] = cnonce;                      cr["nc"] = Convert.ToString(nc' 10).PadLeft(8' '0');                  }                  cr["response"] = Digest(cr);                  Dictionary<string' string> items = (from kvp in cr                                                      let filter =                                                          new[]                                                              {                                                                  "name"' "authMethod"' "value"' "httpMethod"'                                                                  "entityBody"'                                                                  "password"                                                              }                                                      where !filter.Contains(kvp.Key)                                                      select kvp).ToDictionary(kvp => kvp.Key' kvp => kvp.Value);                  StringBuilder sb = new StringBuilder();                  sb.Append(authMethod + " ");                    foreach (KeyValuePair<string' string> kvp in items)                  {                      if (kvp.Key == "cnonce")                      {                          // TODO re-enable cnonce values                      }                      else if (kvp.Key == "algorithm")                      {                          sb.Append("' ");                          sb.Append(kvp.Key);                          sb.Append("=");                          sb.Append(kvp.Value);                      }                      else if (!(kvp.Key == "qop" || kvp.Key == "nc"))                      {                          sb.Append("' ");                          sb.Append(kvp.Key);                          sb.Append("=");                          sb.Append(Helpers.Quote(kvp.Value));                      }                      else                      {                          // TODO re-enable qop/nc values                          //sb.Append("' ");                          //sb.Append(kvp.Key);                          //sb.Append("=");                          //sb.Append(kvp.Value);                      }                  }                  sb.Replace(authMethod + " ' "' authMethod + " ");                  return sb.ToString();              }
Magic Number,SIPLib.SIP,ClientTransaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\ClientTransaction.cs,Timeout,The following statement contains a magic number: if (State == "trying" | State == "proceeding")              {                  if (name == "E")                  {                      timeout = State == "trying" ? Math.Min(2*timeout' Timer.T2) : Timer.T2;                      StartTimer("E"' timeout);                      Stack.Send(Request' Remote' Transport);                  }                  else if (name == "F")                  {                      State = "terminated";                      App.Timeout(this);                  }              }              else if (State == "completed")              {                  if (name == "K")                  {                      State = "terminated";                  }              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,CreateResponse,The following statement contains a magic number: if (response.ResponseCode != 100 && !response.Headers["To"][0].Attributes.ContainsKey("tag"))              {                  response.Headers["To"][0].Attributes["tag"] = LocalTag;              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,SendResponse,The following statement contains a magic number: if (code > 200)              {                  Servers.RemoveAt(0);              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedRequest,The following statement contains a magic number: if (RemoteSeq != 0 && request.Headers["CSeq"][0].Number < RemoteSeq)              {                  Message m = transaction.CreateResponse(500' "Internal server error - invalid CSeq");                  SendResponse(m);                  Debug.Assert(false'                               String.Format("Dialog.receivedRequest() CSeq is old {0} < {1}"'                                             request.Headers["CSeq"][0].Number' RemoteSeq));                  return;              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedResponse,The following statement contains a magic number: if (response.ResponseCode == 408 || response.ResponseCode == 481)              {                  Close();              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedResponse,The following statement contains a magic number: if (response.ResponseCode == 408 || response.ResponseCode == 481)              {                  Close();              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedResponse,The following statement contains a magic number: if (response.ResponseCode == 401 || response.ResponseCode == 407)              {                  if (Authenticate(response' transaction))                  {                      Stack.ReceivedResponse(this' response);                  }              }              else if (transaction != null)              {                  Stack.ReceivedResponse(this' response);              }
Magic Number,SIPLib.SIP,Dialog,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Dialog.cs,ReceivedResponse,The following statement contains a magic number: if (response.ResponseCode == 401 || response.ResponseCode == 407)              {                  if (Authenticate(response' transaction))                  {                      Stack.ReceivedResponse(this' response);                  }              }              else if (transaction != null)              {                  Stack.ReceivedResponse(this' response);              }
Magic Number,SIPLib.SIP,Header,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Header.cs,Unquote,The following statement contains a magic number: if (input.StartsWith("\"") && input.EndsWith("\""))              {                  return input.Substring(1' input.Length - 2);              }
Magic Number,SIPLib.SIP,Header,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Header.cs,Parse,The following statement contains a magic number: if (name.ToLower() == "via")              {                  string[] parts = value.Split(' ');                  string proto = parts[0];                  string addr = parts[1].Split(';')[0];                  string type = proto.Split('/')[2].ToLower();                  ViaUri = new SIPURI("sip:" + addr + ";transport=" + type);                  if (ViaUri.Port == 0)                  {                      ViaUri.Port = 5060;                  }                  if (Attributes.Keys.Contains("rport"))                  {                      int tempPort = 5060;                      int.TryParse(Attributes["rport"]' out tempPort);                      ViaUri.Port = tempPort;                  }                  if ((type != "tcp") && (type != "sctp") && (type != "tls"))                  {                      if (Attributes.Keys.Contains("maddr"))                      {                          ViaUri.Host = Attributes["maddr"];                      }                      else if (Attributes.Keys.Contains("received"))                      {                          ViaUri.Host = Attributes["received"];                      }                  }              }
Magic Number,SIPLib.SIP,Header,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Header.cs,Parse,The following statement contains a magic number: if (name.ToLower() == "via")              {                  string[] parts = value.Split(' ');                  string proto = parts[0];                  string addr = parts[1].Split(';')[0];                  string type = proto.Split('/')[2].ToLower();                  ViaUri = new SIPURI("sip:" + addr + ";transport=" + type);                  if (ViaUri.Port == 0)                  {                      ViaUri.Port = 5060;                  }                  if (Attributes.Keys.Contains("rport"))                  {                      int tempPort = 5060;                      int.TryParse(Attributes["rport"]' out tempPort);                      ViaUri.Port = tempPort;                  }                  if ((type != "tcp") && (type != "sctp") && (type != "tls"))                  {                      if (Attributes.Keys.Contains("maddr"))                      {                          ViaUri.Host = Attributes["maddr"];                      }                      else if (Attributes.Keys.Contains("received"))                      {                          ViaUri.Host = Attributes["received"];                      }                  }              }
Magic Number,SIPLib.SIP,Header,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Header.cs,Parse,The following statement contains a magic number: if (name.ToLower() == "via")              {                  string[] parts = value.Split(' ');                  string proto = parts[0];                  string addr = parts[1].Split(';')[0];                  string type = proto.Split('/')[2].ToLower();                  ViaUri = new SIPURI("sip:" + addr + ";transport=" + type);                  if (ViaUri.Port == 0)                  {                      ViaUri.Port = 5060;                  }                  if (Attributes.Keys.Contains("rport"))                  {                      int tempPort = 5060;                      int.TryParse(Attributes["rport"]' out tempPort);                      ViaUri.Port = tempPort;                  }                  if ((type != "tcp") && (type != "sctp") && (type != "tls"))                  {                      if (Attributes.Keys.Contains("maddr"))                      {                          ViaUri.Host = Attributes["maddr"];                      }                      else if (Attributes.Keys.Contains("received"))                      {                          ViaUri.Host = Attributes["received"];                      }                  }              }
Magic Number,SIPLib.SIP,InviteClientTransaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\InviteClientTransaction.cs,Timeout,The following statement contains a magic number: if (State == "calling")              {                  if (name == "A")                  {                      StartTimer("A"' 2*timeout);                      Stack.Send(Request' Remote' Transport);                  }                  else if (name == "B")                  {                      State = "terminated";                      App.Timeout(this);                  }              }              else if (State == "completed")              {                  if (name == "D")                  {                      State = "terminated";                  }              }
Magic Number,SIPLib.SIP,InviteServerTransaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\InviteServerTransaction.cs,Timeout,The following statement contains a magic number: if (State == "completed")              {                  if (name == "G")                  {                      StartTimer("G"' Math.Min(2*timeout' Timer.T2));                      Stack.Send(LastResponse' Remote' Transport);                  }                  else if (name == "H")                  {                      State = "terminated";                      App.Timeout(this);                  }              }              else if (State == "confirmed")              {                  if (name == "I")                  {                      State = "terminated";                  }              }
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,The following statement contains a magic number: string headers = firstheaders.Substring(index + 2);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,The following statement contains a magic number: string[] parts = firstline.Split(" ".ToCharArray()' 3);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,The following statement contains a magic number: if (parts.Length < 3)              {                  Debug.Assert(false' String.Format("First line has less than 3 parts \n{0}\n"' firstline));              }
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,The following statement contains a magic number: if (int.TryParse(parts[1]' out tempResponseCode))              {                  ResponseCode = tempResponseCode;                  ResponseText = parts[2];                  Protocol = parts[0];                  StatusCodeType = Types.GetStatusType(ResponseCode);              }              else              {                  Method = parts[0];                  Uri = new SIPURI(parts[1]);                  Protocol = parts[2];              }
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,The following statement contains a magic number: if (int.TryParse(parts[1]' out tempResponseCode))              {                  ResponseCode = tempResponseCode;                  ResponseText = parts[2];                  Protocol = parts[0];                  StatusCodeType = Types.GetStatusType(ResponseCode);              }              else              {                  Method = parts[0];                  Uri = new SIPURI(parts[1]);                  Protocol = parts[2];              }
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Parse,The following statement contains a magic number: Debug.Assert(Math.Abs(body.Length - bodylength) < 3'                           String.Format("Invalid content-length {0} != {1}\n"' body.Length' bodylength));
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,ToString,The following statement contains a magic number: try              {  				foreach (KeyValuePair<string' List<Header>> keyValuePair in Headers.ToList())  				{  					if (keyValuePair.Value.Count <= 0)  					{  						Headers.Remove(keyValuePair.Key);  					}  				}                  string m = "";                  if (Method != null)                  {                      m = Method + " " + Uri + " " + Protocol + "\r\n";                  }                  else if (ResponseText.Length > 0)                  {                      m = Protocol + " " + ResponseCode.ToString() + " " + ResponseText + "\r\n";                  }                  string contentLength = "";                  foreach (List<Header> headers in Headers.Values.ToList())                  {                      try                      {                          if (headers.First().Name == "Via")                          {                              m = m + HandleVia(headers);                          }                          else                          {                              if (headers.Count > 0)                              {                                  string current = headers[0].Name + ": ";                                  foreach (Header h in headers)                                  {                                      current = current + h + "' ";                                  }                                  current = current.Remove(current.Length - 2);                                  current = current + "\r\n";                                  if (current.ToLower().Contains("content-length"))                                  {                                      contentLength = current;                                  }                                  else m = m + current;                              }                          }                      }                      catch (Exception ex)                      {  						// Get stack trace for the exception with source file information  						var st = new StackTrace(ex' true);  						// Get the top stack frame  						var frame = st.GetFrame(0);  						// Get the line number from the stack frame  						var line = frame.GetFileLineNumber();  						Debug.Assert(false' String.Format("1 Error converting message to string {0} \n {1} \n {2}"' ex' line' Headers));                      }                  }                  m = m + contentLength;                  m = m + "\r\n";                  if (Body.Length > 0)                  {                      m = m + Body;                  }                  return m;              }              catch (Exception ex)              {  				Debug.Assert(false' String.Format("2 Error converting message to string {0} \n {1} \n {2}"' ex' Headers.ToList()' Headers.Values.ToList() ));              }
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is1XX,The following statement contains a magic number: return (ResponseCode/100 == 1);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is2XX,The following statement contains a magic number: return (ResponseCode/100 == 2);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is2XX,The following statement contains a magic number: return (ResponseCode/100 == 2);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is3XX,The following statement contains a magic number: return (ResponseCode/100 == 3);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is3XX,The following statement contains a magic number: return (ResponseCode/100 == 3);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is4XX,The following statement contains a magic number: return (ResponseCode/100 == 4);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is4XX,The following statement contains a magic number: return (ResponseCode/100 == 4);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is5XX,The following statement contains a magic number: return (ResponseCode/100 == 5);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is5XX,The following statement contains a magic number: return (ResponseCode/100 == 5);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is6XX,The following statement contains a magic number: return (ResponseCode/100 == 6);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is6XX,The following statement contains a magic number: return (ResponseCode/100 == 6);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is7XX,The following statement contains a magic number: return (ResponseCode/100 == 7);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,Is7XX,The following statement contains a magic number: return (ResponseCode/100 == 7);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,IsFinal,The following statement contains a magic number: return (ResponseCode >= 200);
Magic Number,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,CreateResponse,The following statement contains a magic number: if (originalRequest != null)              {                  m.Headers["To"] = originalRequest.Headers["To"];                  m.Headers["From"] = originalRequest.Headers["From"];                  m.Headers["CSeq"] = originalRequest.Headers["CSeq"];                  m.Headers["Call-ID"] = originalRequest.Headers["Call-ID"];                  m.Headers["Via"] = originalRequest.Headers["Via"];                  if (originalRequest.Headers.ContainsKey("Route"))                  {                      //Todo check this                      //m.Headers["Route"] = originalRequest.Headers["Route"];                  }                    if (responseCode == 100 && m.Headers.ContainsKey("Timestamp"))                  {                      m.Headers["Timestamp"] = originalRequest.Headers["Timestamp"];                  }              }
Magic Number,SIPLib.SIP,SDPConnection,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Connection.cs,SDPConnection,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Nettype = values[0];                  Addrtype = values[1];                  string rest = values[2];                  string[] rest2 = rest.Split('/');                  switch (rest2.Length)                  {                      case 1:                          Address = rest2[0];                          break;                      case 2:                          Address = rest2[0];                          TTL = rest2[1];                          break;                      default:                          Address = rest2[0];                          TTL = rest2[1];                          Count = rest2[2];                          break;                  }              }              else if (attrDict != null && attrDict.ContainsKey("address"))              {                  Address = attrDict["address"];                  Nettype = attrDict.ContainsKey("nettype") ? attrDict["nettype"] : "IN";                  Addrtype = attrDict.ContainsKey("addrtype") ? attrDict["addrtype"] : "IP4";                  TTL = attrDict.ContainsKey("ttl") ? attrDict["ttl"] : null;                  Count = attrDict.ContainsKey("count") ? attrDict["count"] : null;              }
Magic Number,SIPLib.SIP,SDPConnection,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Connection.cs,SDPConnection,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Nettype = values[0];                  Addrtype = values[1];                  string rest = values[2];                  string[] rest2 = rest.Split('/');                  switch (rest2.Length)                  {                      case 1:                          Address = rest2[0];                          break;                      case 2:                          Address = rest2[0];                          TTL = rest2[1];                          break;                      default:                          Address = rest2[0];                          TTL = rest2[1];                          Count = rest2[2];                          break;                  }              }              else if (attrDict != null && attrDict.ContainsKey("address"))              {                  Address = attrDict["address"];                  Nettype = attrDict.ContainsKey("nettype") ? attrDict["nettype"] : "IN";                  Addrtype = attrDict.ContainsKey("addrtype") ? attrDict["addrtype"] : "IP4";                  TTL = attrDict.ContainsKey("ttl") ? attrDict["ttl"] : null;                  Count = attrDict.ContainsKey("count") ? attrDict["count"] : null;              }
Magic Number,SIPLib.SIP,SDPConnection,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Connection.cs,SDPConnection,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Nettype = values[0];                  Addrtype = values[1];                  string rest = values[2];                  string[] rest2 = rest.Split('/');                  switch (rest2.Length)                  {                      case 1:                          Address = rest2[0];                          break;                      case 2:                          Address = rest2[0];                          TTL = rest2[1];                          break;                      default:                          Address = rest2[0];                          TTL = rest2[1];                          Count = rest2[2];                          break;                  }              }              else if (attrDict != null && attrDict.ContainsKey("address"))              {                  Address = attrDict["address"];                  Nettype = attrDict.ContainsKey("nettype") ? attrDict["nettype"] : "IN";                  Addrtype = attrDict.ContainsKey("addrtype") ? attrDict["addrtype"] : "IP4";                  TTL = attrDict.ContainsKey("ttl") ? attrDict["ttl"] : null;                  Count = attrDict.ContainsKey("count") ? attrDict["count"] : null;              }
Magic Number,SIPLib.SIP,SDPMedia,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Media.cs,SDPMedia,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(" ".ToCharArray()' 4);                  Media = values[0];                  Port = values[1];                  Proto = values[2];                  string rest = values[3];                  Mediaformats = new List<SDPMediaFormat>();                  foreach (string s in rest.Split(' '))                  {                      SDPMediaFormat fmt = new SDPMediaFormat {Pt = s};                      Mediaformats.Add(fmt);                  }              }              else if (attrDict != null && attrDict.ContainsKey("media"))              {                  Media = attrDict["media"];                  Port = attrDict.ContainsKey("port") ? attrDict["port"] : "0";                  Proto = attrDict.ContainsKey("proto") ? attrDict["proto"] : "RTP/AVP";                  Mediaformats = new List<SDPMediaFormat>();                  if (attrDict.ContainsKey("fmt"))                  {                      foreach (string s in attrDict["fmt"].Split(' '))                      {                          SDPMediaFormat fmt = new SDPMediaFormat {Pt = s};                          Mediaformats.Add(fmt);                      }                  }              }
Magic Number,SIPLib.SIP,SDPMedia,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Media.cs,SDPMedia,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(" ".ToCharArray()' 4);                  Media = values[0];                  Port = values[1];                  Proto = values[2];                  string rest = values[3];                  Mediaformats = new List<SDPMediaFormat>();                  foreach (string s in rest.Split(' '))                  {                      SDPMediaFormat fmt = new SDPMediaFormat {Pt = s};                      Mediaformats.Add(fmt);                  }              }              else if (attrDict != null && attrDict.ContainsKey("media"))              {                  Media = attrDict["media"];                  Port = attrDict.ContainsKey("port") ? attrDict["port"] : "0";                  Proto = attrDict.ContainsKey("proto") ? attrDict["proto"] : "RTP/AVP";                  Mediaformats = new List<SDPMediaFormat>();                  if (attrDict.ContainsKey("fmt"))                  {                      foreach (string s in attrDict["fmt"].Split(' '))                      {                          SDPMediaFormat fmt = new SDPMediaFormat {Pt = s};                          Mediaformats.Add(fmt);                      }                  }              }
Magic Number,SIPLib.SIP,SDPMedia,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Media.cs,SDPMedia,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(" ".ToCharArray()' 4);                  Media = values[0];                  Port = values[1];                  Proto = values[2];                  string rest = values[3];                  Mediaformats = new List<SDPMediaFormat>();                  foreach (string s in rest.Split(' '))                  {                      SDPMediaFormat fmt = new SDPMediaFormat {Pt = s};                      Mediaformats.Add(fmt);                  }              }              else if (attrDict != null && attrDict.ContainsKey("media"))              {                  Media = attrDict["media"];                  Port = attrDict.ContainsKey("port") ? attrDict["port"] : "0";                  Proto = attrDict.ContainsKey("proto") ? attrDict["proto"] : "RTP/AVP";                  Mediaformats = new List<SDPMediaFormat>();                  if (attrDict.ContainsKey("fmt"))                  {                      foreach (string s in attrDict["fmt"].Split(' '))                      {                          SDPMediaFormat fmt = new SDPMediaFormat {Pt = s};                          Mediaformats.Add(fmt);                      }                  }              }
Magic Number,SIPLib.SIP,SDPOriginator,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Originator.cs,SDPOriginator,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Username = values[0];                  Sessionid = values[1];                  Version = values[2];                  Nettype = values[3];                  Addrtype = values[4];                  Address = values[5];              }              else              {                  string hostname = Dns.GetHostName();                  IPHostEntry ip = Dns.GetHostEntry(hostname);                  string ipAddress = ip.ToString();                  Username = "-";                  Sessionid = Helpers.ToUnixTime(DateTime.Now).ToString();                  Version = Helpers.ToUnixTime(DateTime.Now).ToString();                  Nettype = "IN";                  Addrtype = "IP4";                  Address = ipAddress;              }
Magic Number,SIPLib.SIP,SDPOriginator,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Originator.cs,SDPOriginator,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Username = values[0];                  Sessionid = values[1];                  Version = values[2];                  Nettype = values[3];                  Addrtype = values[4];                  Address = values[5];              }              else              {                  string hostname = Dns.GetHostName();                  IPHostEntry ip = Dns.GetHostEntry(hostname);                  string ipAddress = ip.ToString();                  Username = "-";                  Sessionid = Helpers.ToUnixTime(DateTime.Now).ToString();                  Version = Helpers.ToUnixTime(DateTime.Now).ToString();                  Nettype = "IN";                  Addrtype = "IP4";                  Address = ipAddress;              }
Magic Number,SIPLib.SIP,SDPOriginator,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Originator.cs,SDPOriginator,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Username = values[0];                  Sessionid = values[1];                  Version = values[2];                  Nettype = values[3];                  Addrtype = values[4];                  Address = values[5];              }              else              {                  string hostname = Dns.GetHostName();                  IPHostEntry ip = Dns.GetHostEntry(hostname);                  string ipAddress = ip.ToString();                  Username = "-";                  Sessionid = Helpers.ToUnixTime(DateTime.Now).ToString();                  Version = Helpers.ToUnixTime(DateTime.Now).ToString();                  Nettype = "IN";                  Addrtype = "IP4";                  Address = ipAddress;              }
Magic Number,SIPLib.SIP,SDPOriginator,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP-Originator.cs,SDPOriginator,The following statement contains a magic number: if (value != null)              {                  string[] values = value.Split(' ');                  Username = values[0];                  Sessionid = values[1];                  Version = values[2];                  Nettype = values[3];                  Addrtype = values[4];                  Address = values[5];              }              else              {                  string hostname = Dns.GetHostName();                  IPHostEntry ip = Dns.GetHostEntry(hostname);                  string ipAddress = ip.ToString();                  Username = "-";                  Sessionid = Helpers.ToUnixTime(DateTime.Now).ToString();                  Version = Helpers.ToUnixTime(DateTime.Now).ToString();                  Nettype = "IN";                  Addrtype = "IP4";                  Address = ipAddress;              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,Parse,The following statement contains a magic number: foreach (String line in sdp.Split('\n'))              {                  //Per line parsing                  string[] values = line.Split("=".ToCharArray()' 2);                  string k = values[0];                  string currentObject = "";                  switch (k)                  {                      case "o":                          Originator = new SDPOriginator(values[1]);                          currentObject = Originator.ToString();                          break;                      case "c":                          Connection = new SDPConnection(values[1]);                          currentObject = Connection.ToString();                          break;                      case "m":                          {                              SDPMedia currentMedia = new SDPMedia(values[1]);                              Media.Add(currentMedia);                              currentObject = currentMedia.ToString();                          }                          break;                      default:                          currentObject = values[1];                          break;                  }                    if (k == "m")                  {                      SDPMedia obj = Media.Last();                  }                  else if (Media.Count > 0)                  {                      SDPMedia obj = Media.Last();                      if (k == "a" && values[1].StartsWith("rtpmap:"))                      {                          string[] split = values[1].Remove(0' 7).Split(" ".ToCharArray()' 2);                          string pt = split[0];                          string[] rest = split[1].Split("/".ToCharArray()' 2);                          string name = rest[0];                          string rate = null;                          string parameters = null;                          if (rest.Length > 1)                          {                              string[] final = rest[1].Split("/".ToCharArray()' 2);                              rate = final[0];                                parameters = null;                              if (final.Length > 1)                              {                                  parameters = final[1];                              }                          }                            foreach (SDPMediaFormat f in obj.Mediaformats)                          {                              if (f.Pt == pt)                              {                                  f.Name = name;                                  if (rate != null)                                  {                                      f.Rate = rate;                                  }                                  if (parameters != null)                                  {                                      f.Parameters = parameters;                                  }                              }                          }                      }                      else                      {                          if (!Multiple.Contains(k))                          {                              obj.OtherAttributes.Add(k' currentObject);                          }                          else                          {                              if (!obj.OtherAttributes.ContainsKey(k))                              {                                  obj.OtherAttributes.Add(k' currentObject);                              }                                //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }                  else                  {                      if (k != "o" && k != "c")                      {                          SDP obj = this;                          if (!Multiple.Contains(k))                          {                              obj.Other.Add(k' currentObject);                          }                          else                          {                              obj.Other.Add(k' currentObject);                              //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,Parse,The following statement contains a magic number: foreach (String line in sdp.Split('\n'))              {                  //Per line parsing                  string[] values = line.Split("=".ToCharArray()' 2);                  string k = values[0];                  string currentObject = "";                  switch (k)                  {                      case "o":                          Originator = new SDPOriginator(values[1]);                          currentObject = Originator.ToString();                          break;                      case "c":                          Connection = new SDPConnection(values[1]);                          currentObject = Connection.ToString();                          break;                      case "m":                          {                              SDPMedia currentMedia = new SDPMedia(values[1]);                              Media.Add(currentMedia);                              currentObject = currentMedia.ToString();                          }                          break;                      default:                          currentObject = values[1];                          break;                  }                    if (k == "m")                  {                      SDPMedia obj = Media.Last();                  }                  else if (Media.Count > 0)                  {                      SDPMedia obj = Media.Last();                      if (k == "a" && values[1].StartsWith("rtpmap:"))                      {                          string[] split = values[1].Remove(0' 7).Split(" ".ToCharArray()' 2);                          string pt = split[0];                          string[] rest = split[1].Split("/".ToCharArray()' 2);                          string name = rest[0];                          string rate = null;                          string parameters = null;                          if (rest.Length > 1)                          {                              string[] final = rest[1].Split("/".ToCharArray()' 2);                              rate = final[0];                                parameters = null;                              if (final.Length > 1)                              {                                  parameters = final[1];                              }                          }                            foreach (SDPMediaFormat f in obj.Mediaformats)                          {                              if (f.Pt == pt)                              {                                  f.Name = name;                                  if (rate != null)                                  {                                      f.Rate = rate;                                  }                                  if (parameters != null)                                  {                                      f.Parameters = parameters;                                  }                              }                          }                      }                      else                      {                          if (!Multiple.Contains(k))                          {                              obj.OtherAttributes.Add(k' currentObject);                          }                          else                          {                              if (!obj.OtherAttributes.ContainsKey(k))                              {                                  obj.OtherAttributes.Add(k' currentObject);                              }                                //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }                  else                  {                      if (k != "o" && k != "c")                      {                          SDP obj = this;                          if (!Multiple.Contains(k))                          {                              obj.Other.Add(k' currentObject);                          }                          else                          {                              obj.Other.Add(k' currentObject);                              //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,Parse,The following statement contains a magic number: foreach (String line in sdp.Split('\n'))              {                  //Per line parsing                  string[] values = line.Split("=".ToCharArray()' 2);                  string k = values[0];                  string currentObject = "";                  switch (k)                  {                      case "o":                          Originator = new SDPOriginator(values[1]);                          currentObject = Originator.ToString();                          break;                      case "c":                          Connection = new SDPConnection(values[1]);                          currentObject = Connection.ToString();                          break;                      case "m":                          {                              SDPMedia currentMedia = new SDPMedia(values[1]);                              Media.Add(currentMedia);                              currentObject = currentMedia.ToString();                          }                          break;                      default:                          currentObject = values[1];                          break;                  }                    if (k == "m")                  {                      SDPMedia obj = Media.Last();                  }                  else if (Media.Count > 0)                  {                      SDPMedia obj = Media.Last();                      if (k == "a" && values[1].StartsWith("rtpmap:"))                      {                          string[] split = values[1].Remove(0' 7).Split(" ".ToCharArray()' 2);                          string pt = split[0];                          string[] rest = split[1].Split("/".ToCharArray()' 2);                          string name = rest[0];                          string rate = null;                          string parameters = null;                          if (rest.Length > 1)                          {                              string[] final = rest[1].Split("/".ToCharArray()' 2);                              rate = final[0];                                parameters = null;                              if (final.Length > 1)                              {                                  parameters = final[1];                              }                          }                            foreach (SDPMediaFormat f in obj.Mediaformats)                          {                              if (f.Pt == pt)                              {                                  f.Name = name;                                  if (rate != null)                                  {                                      f.Rate = rate;                                  }                                  if (parameters != null)                                  {                                      f.Parameters = parameters;                                  }                              }                          }                      }                      else                      {                          if (!Multiple.Contains(k))                          {                              obj.OtherAttributes.Add(k' currentObject);                          }                          else                          {                              if (!obj.OtherAttributes.ContainsKey(k))                              {                                  obj.OtherAttributes.Add(k' currentObject);                              }                                //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }                  else                  {                      if (k != "o" && k != "c")                      {                          SDP obj = this;                          if (!Multiple.Contains(k))                          {                              obj.Other.Add(k' currentObject);                          }                          else                          {                              obj.Other.Add(k' currentObject);                              //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,Parse,The following statement contains a magic number: foreach (String line in sdp.Split('\n'))              {                  //Per line parsing                  string[] values = line.Split("=".ToCharArray()' 2);                  string k = values[0];                  string currentObject = "";                  switch (k)                  {                      case "o":                          Originator = new SDPOriginator(values[1]);                          currentObject = Originator.ToString();                          break;                      case "c":                          Connection = new SDPConnection(values[1]);                          currentObject = Connection.ToString();                          break;                      case "m":                          {                              SDPMedia currentMedia = new SDPMedia(values[1]);                              Media.Add(currentMedia);                              currentObject = currentMedia.ToString();                          }                          break;                      default:                          currentObject = values[1];                          break;                  }                    if (k == "m")                  {                      SDPMedia obj = Media.Last();                  }                  else if (Media.Count > 0)                  {                      SDPMedia obj = Media.Last();                      if (k == "a" && values[1].StartsWith("rtpmap:"))                      {                          string[] split = values[1].Remove(0' 7).Split(" ".ToCharArray()' 2);                          string pt = split[0];                          string[] rest = split[1].Split("/".ToCharArray()' 2);                          string name = rest[0];                          string rate = null;                          string parameters = null;                          if (rest.Length > 1)                          {                              string[] final = rest[1].Split("/".ToCharArray()' 2);                              rate = final[0];                                parameters = null;                              if (final.Length > 1)                              {                                  parameters = final[1];                              }                          }                            foreach (SDPMediaFormat f in obj.Mediaformats)                          {                              if (f.Pt == pt)                              {                                  f.Name = name;                                  if (rate != null)                                  {                                      f.Rate = rate;                                  }                                  if (parameters != null)                                  {                                      f.Parameters = parameters;                                  }                              }                          }                      }                      else                      {                          if (!Multiple.Contains(k))                          {                              obj.OtherAttributes.Add(k' currentObject);                          }                          else                          {                              if (!obj.OtherAttributes.ContainsKey(k))                              {                                  obj.OtherAttributes.Add(k' currentObject);                              }                                //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }                  else                  {                      if (k != "o" && k != "c")                      {                          SDP obj = this;                          if (!Multiple.Contains(k))                          {                              obj.Other.Add(k' currentObject);                          }                          else                          {                              obj.Other.Add(k' currentObject);                              //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,Parse,The following statement contains a magic number: foreach (String line in sdp.Split('\n'))              {                  //Per line parsing                  string[] values = line.Split("=".ToCharArray()' 2);                  string k = values[0];                  string currentObject = "";                  switch (k)                  {                      case "o":                          Originator = new SDPOriginator(values[1]);                          currentObject = Originator.ToString();                          break;                      case "c":                          Connection = new SDPConnection(values[1]);                          currentObject = Connection.ToString();                          break;                      case "m":                          {                              SDPMedia currentMedia = new SDPMedia(values[1]);                              Media.Add(currentMedia);                              currentObject = currentMedia.ToString();                          }                          break;                      default:                          currentObject = values[1];                          break;                  }                    if (k == "m")                  {                      SDPMedia obj = Media.Last();                  }                  else if (Media.Count > 0)                  {                      SDPMedia obj = Media.Last();                      if (k == "a" && values[1].StartsWith("rtpmap:"))                      {                          string[] split = values[1].Remove(0' 7).Split(" ".ToCharArray()' 2);                          string pt = split[0];                          string[] rest = split[1].Split("/".ToCharArray()' 2);                          string name = rest[0];                          string rate = null;                          string parameters = null;                          if (rest.Length > 1)                          {                              string[] final = rest[1].Split("/".ToCharArray()' 2);                              rate = final[0];                                parameters = null;                              if (final.Length > 1)                              {                                  parameters = final[1];                              }                          }                            foreach (SDPMediaFormat f in obj.Mediaformats)                          {                              if (f.Pt == pt)                              {                                  f.Name = name;                                  if (rate != null)                                  {                                      f.Rate = rate;                                  }                                  if (parameters != null)                                  {                                      f.Parameters = parameters;                                  }                              }                          }                      }                      else                      {                          if (!Multiple.Contains(k))                          {                              obj.OtherAttributes.Add(k' currentObject);                          }                          else                          {                              if (!obj.OtherAttributes.ContainsKey(k))                              {                                  obj.OtherAttributes.Add(k' currentObject);                              }                                //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }                  else                  {                      if (k != "o" && k != "c")                      {                          SDP obj = this;                          if (!Multiple.Contains(k))                          {                              obj.Other.Add(k' currentObject);                          }                          else                          {                              obj.Other.Add(k' currentObject);                              //TODO HANDLE multiple attributes of the same type;                              //if (obj.properties.ContainsKey(k))                              //{                              //    obj[k' true].Add(current_attribute);                              //}                              //else                              //{                              //    obj[k' true] = new List<AttributeClass>();                              //    obj[k' true].Add(current_attribute);                              //}                          }                      }                  }              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,CreateAnswer,The following statement contains a magic number: foreach (SDPMedia yourMedia in offer.Media)              {                  SDPMedia myMedia = null;                  foreach (SDPMedia t in streams)                  {                      if (t.Media != yourMedia.Media) continue;                      myMedia = new SDPMedia(t.ToString());                      //streams.RemoveAt(i);                      List<KeyValuePair<SDPMediaFormat' SDPMediaFormat>> found =                          new List<KeyValuePair<SDPMediaFormat' SDPMediaFormat>>();                      foreach (SDPMediaFormat yourmf in yourMedia.Mediaformats)                      {                          foreach (SDPMediaFormat mymf in myMedia.Mediaformats)                          {                              int mymfpt = -1;                              int yourmfpt = -1;                              try                              {                                  mymfpt = Int32.Parse(mymf.Pt);                                  yourmfpt = Int32.Parse(yourmf.Pt);                              }                              catch (Exception)                              {                                  mymfpt = -1;                                  yourmfpt = -1;                              }                              if ((0 <= mymfpt && mymfpt < 32 && 0 <= yourmfpt && yourmfpt <= 32 && mymfpt == yourmfpt)                                  || (mymfpt < 0 && yourmfpt < 0 && mymfpt == yourmfpt)                                  || (mymf.Name == yourmf.Name && mymf.Rate == yourmf.Rate && mymf.Count == yourmf.Count))                              {                                  found.Add(new KeyValuePair<SDPMediaFormat' SDPMediaFormat>(yourmf' mymf));                                  break;                              }                          }                      }                      if (found.Count > 0)                      {                          foreach (KeyValuePair<SDPMediaFormat' SDPMediaFormat> kvp in found)                          {                              myMedia.Mediaformats.Add(kvp.Key);                          }                      }                      else                      {                          myMedia.Mediaformats.Clear();                          SDPMediaFormat temp = new SDPMediaFormat {Pt = "0"};                          myMedia.Mediaformats.Add(temp);                          myMedia.Port = "0";                      }                  }                  if (myMedia == null)                  {                      myMedia = new SDPMedia(yourMedia.ToString()) {Port = "0"};                  }                  s.Media.Add(myMedia);              }
Magic Number,SIPLib.SIP,SDP,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SDP.cs,CreateAnswer,The following statement contains a magic number: foreach (SDPMedia yourMedia in offer.Media)              {                  SDPMedia myMedia = null;                  foreach (SDPMedia t in streams)                  {                      if (t.Media != yourMedia.Media) continue;                      myMedia = new SDPMedia(t.ToString());                      //streams.RemoveAt(i);                      List<KeyValuePair<SDPMediaFormat' SDPMediaFormat>> found =                          new List<KeyValuePair<SDPMediaFormat' SDPMediaFormat>>();                      foreach (SDPMediaFormat yourmf in yourMedia.Mediaformats)                      {                          foreach (SDPMediaFormat mymf in myMedia.Mediaformats)                          {                              int mymfpt = -1;                              int yourmfpt = -1;                              try                              {                                  mymfpt = Int32.Parse(mymf.Pt);                                  yourmfpt = Int32.Parse(yourmf.Pt);                              }                              catch (Exception)                              {                                  mymfpt = -1;                                  yourmfpt = -1;                              }                              if ((0 <= mymfpt && mymfpt < 32 && 0 <= yourmfpt && yourmfpt <= 32 && mymfpt == yourmfpt)                                  || (mymfpt < 0 && yourmfpt < 0 && mymfpt == yourmfpt)                                  || (mymf.Name == yourmf.Name && mymf.Rate == yourmf.Rate && mymf.Count == yourmf.Count))                              {                                  found.Add(new KeyValuePair<SDPMediaFormat' SDPMediaFormat>(yourmf' mymf));                                  break;                              }                          }                      }                      if (found.Count > 0)                      {                          foreach (KeyValuePair<SDPMediaFormat' SDPMediaFormat> kvp in found)                          {                              myMedia.Mediaformats.Add(kvp.Key);                          }                      }                      else                      {                          myMedia.Mediaformats.Clear();                          SDPMediaFormat temp = new SDPMediaFormat {Pt = "0"};                          myMedia.Mediaformats.Add(temp);                          myMedia.Port = "0";                      }                  }                  if (myMedia == null)                  {                      myMedia = new SDPMedia(yourMedia.ToString()) {Port = "0"};                  }                  s.Media.Add(myMedia);              }
Magic Number,SIPLib.SIP,SIPURI,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPURI.cs,nonRegExpInit,The following statement contains a magic number: if (strings.Length > 2)              {                  string port = strings[2].Split(';')[0];                  int.TryParse(port' out tempPort);              }
Magic Number,SIPLib.SIP,SIPURI,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPURI.cs,nonRegExpInit,The following statement contains a magic number: if (strings.Length > 2)              {                  string port = strings[2].Split(';')[0];                  int.TryParse(port' out tempPort);              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,Init,The following statement contains a magic number: Tag = _random.Next(0' 2147483647).ToString();
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,NewCallId,The following statement contains a magic number: return _random.Next(0' 2147483647).ToString() + "@" + (Transport.Host);
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,Received,The following statement contains a magic number: Debug.Assert(src.Length == 2' String.Format("Received called with src.len !=2' len {0}' src {1}"' src.Length' src));
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,Received,The following statement contains a magic number: if (data.Length > 2)              {                  if (data.Contains("INVITE"))                  {                      //Hook to log particular types of messages                      _log.Debug(new Message(data));                  }                  //try                  //{                      Message m = new Message(data);                      SIPURI uri = new SIPURI("sip" + ":" + src[0] + ":" + src[1]);                      if (m.Method != null)                      {                          if (!m.Headers.ContainsKey("Via"))                          {                              Debug.Assert(false' String.Format("No Via header in request \n{0}\n"' m));                          }                          Header via = m.Headers["Via"].First();                          if (via.ViaUri.Host != src[0] || !src[1].Equals(via.ViaUri.Port))                          {                              via.Attributes.Add("received"' src[0]);                              via.ViaUri.Host = src[0];                          }                          if (via.Attributes.ContainsKey("rport"))                          {                              via.Attributes["rport"] = src[1];                          }                          via.ViaUri.Port = Convert.ToInt32(src[1]);                          ReceivedRequest(m' uri);                      }                      else if (m.ResponseCode > 0)                      {                          ReceivedResponse(m' uri);                      }                      else                      {                          Debug.Assert(false' String.Format("Received invalid message \n{0}\n"' m));                      }                  //}                  //catch (Exception ex)                  //{                  //    Debug.Assert(false'                  //                 String.Format("Error in received message \n{0}\n with error message {1}"' data'                  //                               ex.Message));                  //}              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The following statement contains a magic number: if (t == null)              {                  UserAgent app = null; // Huh ?                  if ((m.Method != "CANCEL") && (m.Headers["To"][0].Attributes.ContainsKey("tag")))                  {                      //In dialog request                      Dialog d = FindDialog(m);                      if (d == null)                      {                          if (m.Method != "ACK")                          {                              //Updated from latest code TODO                              UserAgent u = CreateServer(m' uri);                              if (u != null)                              {                                  app = u;                              }                              else                              {                                  // TODO: FIX NOTIFY ON SUBSCRIBE HANDLING                                  if (m.Method != "NOTIFY")                                  {                                      Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                      return;                                  }                                  else                                  {                                      string branchID = m.Headers["Via"][0].Attributes["branch"];                                      if (_seenNotifys.ContainsKey(branchID) && _seenNotifys[branchID] > 1)                                      {                                          Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                          return;                                      }                                      else                                      {                                          if (_seenNotifys.ContainsKey(branchID))                                          {                                              _seenNotifys[branchID] = _seenNotifys[branchID] + 1;                                          }                                          else                                          {                                              _seenNotifys[branchID] = 1;                                          }                                      }                                  }                                  return;                              }                          }                          else                          {                              _log.Info("No dialog for ACK' finding transaction");                              if (t == null && branch != "0")                              {                                  t = FindTransaction(Transaction.CreateId(branch' "INVITE"));                              }                              if (t != null && t.State != "terminated")                              {                                  t.ReceivedRequest(m);                                  return;                              }                              else                              {                                  _log.Info("No existing transaction for ACK \n");                                  UserAgent u = CreateServer(m' uri);                                  if (u != null)                                  {                                      app = u;                                  }                                  else return;                              }                          }                      }                      else                      {                          app = d;                      }                  }                  else if (m.Method != "CANCEL")                  {                      //Out of dialog request                      UserAgent u = CreateServer(m' uri);                      if (u != null)                      {                          //TODO error.....                          app = u;                      }                      else if (m.Method == "OPTIONS")                      {                          //Handle OPTIONS                          Message reply = Message.CreateResponse(200' "OK"' null' null' m);                          reply.InsertHeader(new Header("INVITE'ACK'CANCEL'BYE'OPTION'MESSAGE'PUBLISH"' "Allow"));                          Send(m);                          return;                      }                      else if (m.Method == "MESSAGE")                      {                          //Handle MESSAGE                          UserAgent ua = new UserAgent(this) {Request = m};                          /*Message reply = ua.CreateResponse(200' "OK");                          Send(reply);*/                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method == "PUBLISH")                      {                          UserAgent ua = new UserAgent(this) {Request = m};                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method != "ACK")                      {                          Send(Message.CreateResponse(405' "Method not allowed"' null' null' m));                          return;                      }                  }                  else                  {                      //Cancel Request                      Transaction o =                          FindTransaction(Transaction.CreateId(m.Headers["Via"][0].Attributes["branch"]' "INVITE"));                      if (o == null)                      {                          Send(Message.CreateResponse(481' "Original transaction does not exist"' null' null' m));                          return;                      }                      app = o.App;                  }                    if (app != null)                  {                      //t = Transaction.CreateServer(app.Stack' app' app.Request' app.Stack.Transport' app.Stack.Tag);                      // TODO: Check app or this ?                      t = Transaction.CreateServer(this' app' m' Transport' Tag);                  }                  else if (m.Method != "ACK")                  {                      Send(Message.CreateResponse(404' "Not found"' null' null' m));                  }              }              else              {                  t.ReceivedRequest(m);              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The following statement contains a magic number: if (t == null)              {                  UserAgent app = null; // Huh ?                  if ((m.Method != "CANCEL") && (m.Headers["To"][0].Attributes.ContainsKey("tag")))                  {                      //In dialog request                      Dialog d = FindDialog(m);                      if (d == null)                      {                          if (m.Method != "ACK")                          {                              //Updated from latest code TODO                              UserAgent u = CreateServer(m' uri);                              if (u != null)                              {                                  app = u;                              }                              else                              {                                  // TODO: FIX NOTIFY ON SUBSCRIBE HANDLING                                  if (m.Method != "NOTIFY")                                  {                                      Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                      return;                                  }                                  else                                  {                                      string branchID = m.Headers["Via"][0].Attributes["branch"];                                      if (_seenNotifys.ContainsKey(branchID) && _seenNotifys[branchID] > 1)                                      {                                          Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                          return;                                      }                                      else                                      {                                          if (_seenNotifys.ContainsKey(branchID))                                          {                                              _seenNotifys[branchID] = _seenNotifys[branchID] + 1;                                          }                                          else                                          {                                              _seenNotifys[branchID] = 1;                                          }                                      }                                  }                                  return;                              }                          }                          else                          {                              _log.Info("No dialog for ACK' finding transaction");                              if (t == null && branch != "0")                              {                                  t = FindTransaction(Transaction.CreateId(branch' "INVITE"));                              }                              if (t != null && t.State != "terminated")                              {                                  t.ReceivedRequest(m);                                  return;                              }                              else                              {                                  _log.Info("No existing transaction for ACK \n");                                  UserAgent u = CreateServer(m' uri);                                  if (u != null)                                  {                                      app = u;                                  }                                  else return;                              }                          }                      }                      else                      {                          app = d;                      }                  }                  else if (m.Method != "CANCEL")                  {                      //Out of dialog request                      UserAgent u = CreateServer(m' uri);                      if (u != null)                      {                          //TODO error.....                          app = u;                      }                      else if (m.Method == "OPTIONS")                      {                          //Handle OPTIONS                          Message reply = Message.CreateResponse(200' "OK"' null' null' m);                          reply.InsertHeader(new Header("INVITE'ACK'CANCEL'BYE'OPTION'MESSAGE'PUBLISH"' "Allow"));                          Send(m);                          return;                      }                      else if (m.Method == "MESSAGE")                      {                          //Handle MESSAGE                          UserAgent ua = new UserAgent(this) {Request = m};                          /*Message reply = ua.CreateResponse(200' "OK");                          Send(reply);*/                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method == "PUBLISH")                      {                          UserAgent ua = new UserAgent(this) {Request = m};                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method != "ACK")                      {                          Send(Message.CreateResponse(405' "Method not allowed"' null' null' m));                          return;                      }                  }                  else                  {                      //Cancel Request                      Transaction o =                          FindTransaction(Transaction.CreateId(m.Headers["Via"][0].Attributes["branch"]' "INVITE"));                      if (o == null)                      {                          Send(Message.CreateResponse(481' "Original transaction does not exist"' null' null' m));                          return;                      }                      app = o.App;                  }                    if (app != null)                  {                      //t = Transaction.CreateServer(app.Stack' app' app.Request' app.Stack.Transport' app.Stack.Tag);                      // TODO: Check app or this ?                      t = Transaction.CreateServer(this' app' m' Transport' Tag);                  }                  else if (m.Method != "ACK")                  {                      Send(Message.CreateResponse(404' "Not found"' null' null' m));                  }              }              else              {                  t.ReceivedRequest(m);              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The following statement contains a magic number: if (t == null)              {                  UserAgent app = null; // Huh ?                  if ((m.Method != "CANCEL") && (m.Headers["To"][0].Attributes.ContainsKey("tag")))                  {                      //In dialog request                      Dialog d = FindDialog(m);                      if (d == null)                      {                          if (m.Method != "ACK")                          {                              //Updated from latest code TODO                              UserAgent u = CreateServer(m' uri);                              if (u != null)                              {                                  app = u;                              }                              else                              {                                  // TODO: FIX NOTIFY ON SUBSCRIBE HANDLING                                  if (m.Method != "NOTIFY")                                  {                                      Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                      return;                                  }                                  else                                  {                                      string branchID = m.Headers["Via"][0].Attributes["branch"];                                      if (_seenNotifys.ContainsKey(branchID) && _seenNotifys[branchID] > 1)                                      {                                          Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                          return;                                      }                                      else                                      {                                          if (_seenNotifys.ContainsKey(branchID))                                          {                                              _seenNotifys[branchID] = _seenNotifys[branchID] + 1;                                          }                                          else                                          {                                              _seenNotifys[branchID] = 1;                                          }                                      }                                  }                                  return;                              }                          }                          else                          {                              _log.Info("No dialog for ACK' finding transaction");                              if (t == null && branch != "0")                              {                                  t = FindTransaction(Transaction.CreateId(branch' "INVITE"));                              }                              if (t != null && t.State != "terminated")                              {                                  t.ReceivedRequest(m);                                  return;                              }                              else                              {                                  _log.Info("No existing transaction for ACK \n");                                  UserAgent u = CreateServer(m' uri);                                  if (u != null)                                  {                                      app = u;                                  }                                  else return;                              }                          }                      }                      else                      {                          app = d;                      }                  }                  else if (m.Method != "CANCEL")                  {                      //Out of dialog request                      UserAgent u = CreateServer(m' uri);                      if (u != null)                      {                          //TODO error.....                          app = u;                      }                      else if (m.Method == "OPTIONS")                      {                          //Handle OPTIONS                          Message reply = Message.CreateResponse(200' "OK"' null' null' m);                          reply.InsertHeader(new Header("INVITE'ACK'CANCEL'BYE'OPTION'MESSAGE'PUBLISH"' "Allow"));                          Send(m);                          return;                      }                      else if (m.Method == "MESSAGE")                      {                          //Handle MESSAGE                          UserAgent ua = new UserAgent(this) {Request = m};                          /*Message reply = ua.CreateResponse(200' "OK");                          Send(reply);*/                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method == "PUBLISH")                      {                          UserAgent ua = new UserAgent(this) {Request = m};                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method != "ACK")                      {                          Send(Message.CreateResponse(405' "Method not allowed"' null' null' m));                          return;                      }                  }                  else                  {                      //Cancel Request                      Transaction o =                          FindTransaction(Transaction.CreateId(m.Headers["Via"][0].Attributes["branch"]' "INVITE"));                      if (o == null)                      {                          Send(Message.CreateResponse(481' "Original transaction does not exist"' null' null' m));                          return;                      }                      app = o.App;                  }                    if (app != null)                  {                      //t = Transaction.CreateServer(app.Stack' app' app.Request' app.Stack.Transport' app.Stack.Tag);                      // TODO: Check app or this ?                      t = Transaction.CreateServer(this' app' m' Transport' Tag);                  }                  else if (m.Method != "ACK")                  {                      Send(Message.CreateResponse(404' "Not found"' null' null' m));                  }              }              else              {                  t.ReceivedRequest(m);              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The following statement contains a magic number: if (t == null)              {                  UserAgent app = null; // Huh ?                  if ((m.Method != "CANCEL") && (m.Headers["To"][0].Attributes.ContainsKey("tag")))                  {                      //In dialog request                      Dialog d = FindDialog(m);                      if (d == null)                      {                          if (m.Method != "ACK")                          {                              //Updated from latest code TODO                              UserAgent u = CreateServer(m' uri);                              if (u != null)                              {                                  app = u;                              }                              else                              {                                  // TODO: FIX NOTIFY ON SUBSCRIBE HANDLING                                  if (m.Method != "NOTIFY")                                  {                                      Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                      return;                                  }                                  else                                  {                                      string branchID = m.Headers["Via"][0].Attributes["branch"];                                      if (_seenNotifys.ContainsKey(branchID) && _seenNotifys[branchID] > 1)                                      {                                          Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                          return;                                      }                                      else                                      {                                          if (_seenNotifys.ContainsKey(branchID))                                          {                                              _seenNotifys[branchID] = _seenNotifys[branchID] + 1;                                          }                                          else                                          {                                              _seenNotifys[branchID] = 1;                                          }                                      }                                  }                                  return;                              }                          }                          else                          {                              _log.Info("No dialog for ACK' finding transaction");                              if (t == null && branch != "0")                              {                                  t = FindTransaction(Transaction.CreateId(branch' "INVITE"));                              }                              if (t != null && t.State != "terminated")                              {                                  t.ReceivedRequest(m);                                  return;                              }                              else                              {                                  _log.Info("No existing transaction for ACK \n");                                  UserAgent u = CreateServer(m' uri);                                  if (u != null)                                  {                                      app = u;                                  }                                  else return;                              }                          }                      }                      else                      {                          app = d;                      }                  }                  else if (m.Method != "CANCEL")                  {                      //Out of dialog request                      UserAgent u = CreateServer(m' uri);                      if (u != null)                      {                          //TODO error.....                          app = u;                      }                      else if (m.Method == "OPTIONS")                      {                          //Handle OPTIONS                          Message reply = Message.CreateResponse(200' "OK"' null' null' m);                          reply.InsertHeader(new Header("INVITE'ACK'CANCEL'BYE'OPTION'MESSAGE'PUBLISH"' "Allow"));                          Send(m);                          return;                      }                      else if (m.Method == "MESSAGE")                      {                          //Handle MESSAGE                          UserAgent ua = new UserAgent(this) {Request = m};                          /*Message reply = ua.CreateResponse(200' "OK");                          Send(reply);*/                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method == "PUBLISH")                      {                          UserAgent ua = new UserAgent(this) {Request = m};                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method != "ACK")                      {                          Send(Message.CreateResponse(405' "Method not allowed"' null' null' m));                          return;                      }                  }                  else                  {                      //Cancel Request                      Transaction o =                          FindTransaction(Transaction.CreateId(m.Headers["Via"][0].Attributes["branch"]' "INVITE"));                      if (o == null)                      {                          Send(Message.CreateResponse(481' "Original transaction does not exist"' null' null' m));                          return;                      }                      app = o.App;                  }                    if (app != null)                  {                      //t = Transaction.CreateServer(app.Stack' app' app.Request' app.Stack.Transport' app.Stack.Tag);                      // TODO: Check app or this ?                      t = Transaction.CreateServer(this' app' m' Transport' Tag);                  }                  else if (m.Method != "ACK")                  {                      Send(Message.CreateResponse(404' "Not found"' null' null' m));                  }              }              else              {                  t.ReceivedRequest(m);              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The following statement contains a magic number: if (t == null)              {                  UserAgent app = null; // Huh ?                  if ((m.Method != "CANCEL") && (m.Headers["To"][0].Attributes.ContainsKey("tag")))                  {                      //In dialog request                      Dialog d = FindDialog(m);                      if (d == null)                      {                          if (m.Method != "ACK")                          {                              //Updated from latest code TODO                              UserAgent u = CreateServer(m' uri);                              if (u != null)                              {                                  app = u;                              }                              else                              {                                  // TODO: FIX NOTIFY ON SUBSCRIBE HANDLING                                  if (m.Method != "NOTIFY")                                  {                                      Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                      return;                                  }                                  else                                  {                                      string branchID = m.Headers["Via"][0].Attributes["branch"];                                      if (_seenNotifys.ContainsKey(branchID) && _seenNotifys[branchID] > 1)                                      {                                          Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                          return;                                      }                                      else                                      {                                          if (_seenNotifys.ContainsKey(branchID))                                          {                                              _seenNotifys[branchID] = _seenNotifys[branchID] + 1;                                          }                                          else                                          {                                              _seenNotifys[branchID] = 1;                                          }                                      }                                  }                                  return;                              }                          }                          else                          {                              _log.Info("No dialog for ACK' finding transaction");                              if (t == null && branch != "0")                              {                                  t = FindTransaction(Transaction.CreateId(branch' "INVITE"));                              }                              if (t != null && t.State != "terminated")                              {                                  t.ReceivedRequest(m);                                  return;                              }                              else                              {                                  _log.Info("No existing transaction for ACK \n");                                  UserAgent u = CreateServer(m' uri);                                  if (u != null)                                  {                                      app = u;                                  }                                  else return;                              }                          }                      }                      else                      {                          app = d;                      }                  }                  else if (m.Method != "CANCEL")                  {                      //Out of dialog request                      UserAgent u = CreateServer(m' uri);                      if (u != null)                      {                          //TODO error.....                          app = u;                      }                      else if (m.Method == "OPTIONS")                      {                          //Handle OPTIONS                          Message reply = Message.CreateResponse(200' "OK"' null' null' m);                          reply.InsertHeader(new Header("INVITE'ACK'CANCEL'BYE'OPTION'MESSAGE'PUBLISH"' "Allow"));                          Send(m);                          return;                      }                      else if (m.Method == "MESSAGE")                      {                          //Handle MESSAGE                          UserAgent ua = new UserAgent(this) {Request = m};                          /*Message reply = ua.CreateResponse(200' "OK");                          Send(reply);*/                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method == "PUBLISH")                      {                          UserAgent ua = new UserAgent(this) {Request = m};                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method != "ACK")                      {                          Send(Message.CreateResponse(405' "Method not allowed"' null' null' m));                          return;                      }                  }                  else                  {                      //Cancel Request                      Transaction o =                          FindTransaction(Transaction.CreateId(m.Headers["Via"][0].Attributes["branch"]' "INVITE"));                      if (o == null)                      {                          Send(Message.CreateResponse(481' "Original transaction does not exist"' null' null' m));                          return;                      }                      app = o.App;                  }                    if (app != null)                  {                      //t = Transaction.CreateServer(app.Stack' app' app.Request' app.Stack.Transport' app.Stack.Tag);                      // TODO: Check app or this ?                      t = Transaction.CreateServer(this' app' m' Transport' Tag);                  }                  else if (m.Method != "ACK")                  {                      Send(Message.CreateResponse(404' "Not found"' null' null' m));                  }              }              else              {                  t.ReceivedRequest(m);              }
Magic Number,SIPLib.SIP,SIPStack,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\SIPStack.cs,ReceivedRequest,The following statement contains a magic number: if (t == null)              {                  UserAgent app = null; // Huh ?                  if ((m.Method != "CANCEL") && (m.Headers["To"][0].Attributes.ContainsKey("tag")))                  {                      //In dialog request                      Dialog d = FindDialog(m);                      if (d == null)                      {                          if (m.Method != "ACK")                          {                              //Updated from latest code TODO                              UserAgent u = CreateServer(m' uri);                              if (u != null)                              {                                  app = u;                              }                              else                              {                                  // TODO: FIX NOTIFY ON SUBSCRIBE HANDLING                                  if (m.Method != "NOTIFY")                                  {                                      Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                      return;                                  }                                  else                                  {                                      string branchID = m.Headers["Via"][0].Attributes["branch"];                                      if (_seenNotifys.ContainsKey(branchID) && _seenNotifys[branchID] > 1)                                      {                                          Send(Message.CreateResponse(481' "Dialog does not exist"' null' null' m));                                          return;                                      }                                      else                                      {                                          if (_seenNotifys.ContainsKey(branchID))                                          {                                              _seenNotifys[branchID] = _seenNotifys[branchID] + 1;                                          }                                          else                                          {                                              _seenNotifys[branchID] = 1;                                          }                                      }                                  }                                  return;                              }                          }                          else                          {                              _log.Info("No dialog for ACK' finding transaction");                              if (t == null && branch != "0")                              {                                  t = FindTransaction(Transaction.CreateId(branch' "INVITE"));                              }                              if (t != null && t.State != "terminated")                              {                                  t.ReceivedRequest(m);                                  return;                              }                              else                              {                                  _log.Info("No existing transaction for ACK \n");                                  UserAgent u = CreateServer(m' uri);                                  if (u != null)                                  {                                      app = u;                                  }                                  else return;                              }                          }                      }                      else                      {                          app = d;                      }                  }                  else if (m.Method != "CANCEL")                  {                      //Out of dialog request                      UserAgent u = CreateServer(m' uri);                      if (u != null)                      {                          //TODO error.....                          app = u;                      }                      else if (m.Method == "OPTIONS")                      {                          //Handle OPTIONS                          Message reply = Message.CreateResponse(200' "OK"' null' null' m);                          reply.InsertHeader(new Header("INVITE'ACK'CANCEL'BYE'OPTION'MESSAGE'PUBLISH"' "Allow"));                          Send(m);                          return;                      }                      else if (m.Method == "MESSAGE")                      {                          //Handle MESSAGE                          UserAgent ua = new UserAgent(this) {Request = m};                          /*Message reply = ua.CreateResponse(200' "OK");                          Send(reply);*/                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method == "PUBLISH")                      {                          UserAgent ua = new UserAgent(this) {Request = m};                          App.ReceivedRequest(ua' m' this);                          return;                      }                      else if (m.Method != "ACK")                      {                          Send(Message.CreateResponse(405' "Method not allowed"' null' null' m));                          return;                      }                  }                  else                  {                      //Cancel Request                      Transaction o =                          FindTransaction(Transaction.CreateId(m.Headers["Via"][0].Attributes["branch"]' "INVITE"));                      if (o == null)                      {                          Send(Message.CreateResponse(481' "Original transaction does not exist"' null' null' m));                          return;                      }                      app = o.App;                  }                    if (app != null)                  {                      //t = Transaction.CreateServer(app.Stack' app' app.Request' app.Stack.Transport' app.Stack.Tag);                      // TODO: Check app or this ?                      t = Transaction.CreateServer(this' app' m' Transport' Tag);                  }                  else if (m.Method != "ACK")                  {                      Send(Message.CreateResponse(404' "Not found"' null' null' m));                  }              }              else              {                  t.ReceivedRequest(m);              }
Magic Number,SIPLib.SIP,Timer,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Timer.cs,B,The following statement contains a magic number: return 64*T1;
Magic Number,SIPLib.SIP,Timer,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Timer.cs,D,The following statement contains a magic number: return Math.Max(64*T1' 32000);
Magic Number,SIPLib.SIP,Timer,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Timer.cs,D,The following statement contains a magic number: return Math.Max(64*T1' 32000);
Magic Number,SIPLib.SIP,Transaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Transaction.cs,CreateBranch,The following statement contains a magic number: if (request is Message)              {                  Message requestMessage = (Message)(request);                  to = requestMessage.First("To").Value.ToString();                  from = requestMessage.First("From").Value.ToString();                  callId = requestMessage.First("Call-ID").Value.ToString();                  cSeq = requestMessage.First("CSeq").Number.ToString();              }              else if (request is Dictionary<string' object>)              {                  Dictionary<string' object> dict = (Dictionary<string' object>)request;                  object[] headers = dict.Values.ToArray();                  to = headers[0].ToString();                  from = headers[1].ToString();                  callId = headers[2].ToString();                  cSeq = headers[3].ToString();              }
Magic Number,SIPLib.SIP,Transaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Transaction.cs,CreateBranch,The following statement contains a magic number: if (request is Message)              {                  Message requestMessage = (Message)(request);                  to = requestMessage.First("To").Value.ToString();                  from = requestMessage.First("From").Value.ToString();                  callId = requestMessage.First("Call-ID").Value.ToString();                  cSeq = requestMessage.First("CSeq").Number.ToString();              }              else if (request is Dictionary<string' object>)              {                  Dictionary<string' object> dict = (Dictionary<string' object>)request;                  object[] headers = dict.Values.ToArray();                  to = headers[0].ToString();                  from = headers[1].ToString();                  callId = headers[2].ToString();                  cSeq = headers[3].ToString();              }
Magic Number,SIPLib.SIP,Transaction,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Transaction.cs,CreateResponse,The following statement contains a magic number: if (Request != null && Server)              {                  m = Message.CreateResponse(responseCode' responseText' null' null' Request);                  if (responseCode != 100 && !m.Headers["To"][0].Attributes.ContainsKey("tag"))                  {                      m.Headers["To"][0].Attributes.Add("tag"' Tag);                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,UserAgent,The following statement contains a magic number: LocalTag = stack.Tag + _random.Next(0' 2147483647).ToString();
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,UserAgent,The following statement contains a magic number: RemoteTag = stack.Tag + _random.Next(0' 2147483647).ToString();
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,UserAgent,The following statement contains a magic number: MaxForwards = 70;
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,SendRequest,The following statement contains a magic number: if (target != null)              {                  SIPURI dest = target.Dup();                  if (dest.Port == 0)                  {                      dest.Port = 5060;                  }                    if (Helpers.IsIPv4(dest.Host))                  {                      RemoteCandidates = new List<SIPURI> {dest};                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,Timeout,The following statement contains a magic number: if (Server == false)              {                  if ((RemoteCandidates != null) && (RemoteCandidates.Count > 0))                  {                      RetryNextCandidate();                  }                  else                  {                      ReceivedResponse(null' Message.CreateResponse(408' "Request Timeout"' null' null' Request));                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,Error,The following statement contains a magic number: if (Server == false)              {                  if ((RemoteCandidates != null) && (RemoteCandidates.Count > 0))                  {                      RetryNextCandidate();                  }                  else                  {                      ReceivedResponse(null'                                       Message.CreateResponse(503' "Service unavailable - " + error' null' null' Request));                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedResponse,The following statement contains a magic number: if (response.Is1XX())              {                  if (CancelRequest != null)                  {                      Transaction cancel = Transaction.CreateClient(Stack' this' CancelRequest' transaction.Transport'                                                                    transaction.Remote);                      CancelRequest = null;                  }                  else                  {                      Stack.ReceivedResponse(this' response);                  }              }              else if ((response.ResponseCode == 401) || (response.ResponseCode == 407))              {                  if (!Authenticate(response' Transaction))                  {                      Stack.ReceivedResponse(this' response);                  }              }              else              {                  if (CanCreateDialog(Request' response))                  {                      Dialog dialog = Dialog.CreateClient(Stack' Request' response' transaction);                      dialog.App = this;                      Stack.DialogCreated(dialog' this);                      Stack.ReceivedResponse(dialog' response);                      if ((Autoack) && (Request.Method == "INVITE"))                      {                          Message ack = dialog.CreateRequest("ACK");                          // TODO: Check dialog RouteSet creation (the manual hack below works)                          //if (response.Headers.ContainsKey("Record-Route"))                          //{                          //    ack.Headers["Route"] = response.Headers["Record-Route"];                          //    ack.Headers["Route"].Reverse();                          //foreach (Header h in Headers["Route"])                          //{                          //    h.Name = "Route";                          //}                          //}                          dialog.SendRequest(ack);                      }                  }                  else                  {                      Stack.ReceivedResponse(this' response);                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedResponse,The following statement contains a magic number: if (response.Is1XX())              {                  if (CancelRequest != null)                  {                      Transaction cancel = Transaction.CreateClient(Stack' this' CancelRequest' transaction.Transport'                                                                    transaction.Remote);                      CancelRequest = null;                  }                  else                  {                      Stack.ReceivedResponse(this' response);                  }              }              else if ((response.ResponseCode == 401) || (response.ResponseCode == 407))              {                  if (!Authenticate(response' Transaction))                  {                      Stack.ReceivedResponse(this' response);                  }              }              else              {                  if (CanCreateDialog(Request' response))                  {                      Dialog dialog = Dialog.CreateClient(Stack' Request' response' transaction);                      dialog.App = this;                      Stack.DialogCreated(dialog' this);                      Stack.ReceivedResponse(dialog' response);                      if ((Autoack) && (Request.Method == "INVITE"))                      {                          Message ack = dialog.CreateRequest("ACK");                          // TODO: Check dialog RouteSet creation (the manual hack below works)                          //if (response.Headers.ContainsKey("Record-Route"))                          //{                          //    ack.Headers["Route"] = response.Headers["Record-Route"];                          //    ack.Headers["Route"].Reverse();                          //foreach (Header h in Headers["Route"])                          //{                          //    h.Name = "Route";                          //}                          //}                          dialog.SendRequest(ack);                      }                  }                  else                  {                      Stack.ReceivedResponse(this' response);                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,The following statement contains a magic number: if (request.Uri.Scheme != "sip")              {                  transaction.SendResponse(transaction.CreateResponse(416' "Unsupported URI scheme"));                  return;              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,The following statement contains a magic number: if (!request.Headers["To"][0].ToString().Contains("tag"))              {                  if (Stack.FindOtherTransactions(request' transaction) != null)                  {                      transaction.SendResponse(transaction.CreateResponse(482' "Loop Detected - found another transaction"));                  }              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,The following statement contains a magic number: if (request.Method == "CANCEL")              {                  Transaction original = Stack.FindTransaction(Transaction.CreateId(transaction.Branch' "Invite"));                  if (original == null)                  {                      transaction.SendResponse(transaction.CreateResponse(481' "Cannot find transaction??"));                      return;                  }                  if (original.State == "proceeding" || original.State == "trying")                  {                      original.SendResponse(original.CreateResponse(487' "Request terminated"));                  }                  transaction.SendResponse(transaction.CreateResponse(200' "OK"));                  // TODO: The To tag must be the same in the two responses              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,The following statement contains a magic number: if (request.Method == "CANCEL")              {                  Transaction original = Stack.FindTransaction(Transaction.CreateId(transaction.Branch' "Invite"));                  if (original == null)                  {                      transaction.SendResponse(transaction.CreateResponse(481' "Cannot find transaction??"));                      return;                  }                  if (original.State == "proceeding" || original.State == "trying")                  {                      original.SendResponse(original.CreateResponse(487' "Request terminated"));                  }                  transaction.SendResponse(transaction.CreateResponse(200' "OK"));                  // TODO: The To tag must be the same in the two responses              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,ReceivedRequest,The following statement contains a magic number: if (request.Method == "CANCEL")              {                  Transaction original = Stack.FindTransaction(Transaction.CreateId(transaction.Branch' "Invite"));                  if (original == null)                  {                      transaction.SendResponse(transaction.CreateResponse(481' "Cannot find transaction??"));                      return;                  }                  if (original.State == "proceeding" || original.State == "trying")                  {                      original.SendResponse(original.CreateResponse(487' "Request terminated"));                  }                  transaction.SendResponse(transaction.CreateResponse(200' "OK"));                  // TODO: The To tag must be the same in the two responses              }
Magic Number,SIPLib.SIP,UserAgent,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\UserAgent.cs,CreateResponse,The following statement contains a magic number: if (responseMessage.ResponseCode != 100 && !responseMessage.Headers["To"][0].ToString().Contains("tag"))              {                  responseMessage.Headers["To"][0].Attributes.Add("tag"' LocalTag);              }
Missing Default,SIPLib.SIP,Message,C:\repos\richardspiers_C-Sharp-Sip-Lib\SIPLib\src\SIP\Message.cs,InsertHeader,The following switch statement is missing a default case: switch (method)                  {                      case "append":                          {                              Headers[name].Add(header);                              break;                          }                      case "replace":                          {                              List<Header> headers = new List<Header> {header};                              Headers[name] = headers;                              break;                          }                      case "insert":                          {                              Headers[name].Insert(0' header);                              break;                          }                  }
