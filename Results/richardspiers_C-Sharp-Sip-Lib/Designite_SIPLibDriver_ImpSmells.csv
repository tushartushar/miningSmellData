Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,ReceiveDataCB,The length of the statement  "                this.Transport.Socket.BeginReceiveFrom(this.TempBuffer' 0' this.TempBuffer.Length' SocketFlags.None' ref sendEP' new AsyncCallback(this.ReceiveDataCB)' sendEP);" is 160.
Long Statement,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,Send,The length of the statement  "            stack.Transport.Socket.BeginSendTo(send_data' 0' send_data.Length' SocketFlags.None' destEP' new AsyncCallback(this.SendDataCB)' destEP);" is 137.
Magic Number,SIPLibDriver,Program,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\Program.cs,CreateStack,The following statement contains a magic number: myStack.ProxyPort = (proxyPort == -1) ? 5060 : proxyPort;
Magic Number,SIPLibDriver,Program,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\Program.cs,Main,The following statement contains a magic number: int port = rnd.Next(5090'6090);
Magic Number,SIPLibDriver,Program,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\Program.cs,Main,The following statement contains a magic number: int port = rnd.Next(5090'6090);
Magic Number,SIPLibDriver,Program,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\Program.cs,Main,The following statement contains a magic number: SIPStack stack = CreateStack(app'"alice"'"172.30.0.161"' 5060);
Magic Number,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,SIPApp,The following statement contains a magic number: this.TempBuffer = new byte[4096];
Magic Number,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,ReceivedResponse,The following statement contains a magic number: switch (response.ResponseCode)             {                 case 180:                     {                          break;                     }                 case 200:                     {                          break;                     }                 case 401:                     {                         _log.Error("Transaction layer did not handle registration - APP received  401");                         //UserAgent ua = new UserAgent(this.stack' null' false);                         //ua.authenticate(response' transaction);                         break;                     }                 default:                     {                         _log.Info("Response code of " + response.ResponseCode + " is unhandled ");                     }                     break;             }
Magic Number,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,ReceivedResponse,The following statement contains a magic number: switch (response.ResponseCode)             {                 case 180:                     {                          break;                     }                 case 200:                     {                          break;                     }                 case 401:                     {                         _log.Error("Transaction layer did not handle registration - APP received  401");                         //UserAgent ua = new UserAgent(this.stack' null' false);                         //ua.authenticate(response' transaction);                         break;                     }                 default:                     {                         _log.Info("Response code of " + response.ResponseCode + " is unhandled ");                     }                     break;             }
Magic Number,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,ReceivedResponse,The following statement contains a magic number: switch (response.ResponseCode)             {                 case 180:                     {                          break;                     }                 case 200:                     {                          break;                     }                 case 401:                     {                         _log.Error("Transaction layer did not handle registration - APP received  401");                         //UserAgent ua = new UserAgent(this.stack' null' false);                         //ua.authenticate(response' transaction);                         break;                     }                 default:                     {                         _log.Info("Response code of " + response.ResponseCode + " is unhandled ");                     }                     break;             }
Magic Number,SIPLibDriver,SIPApp,C:\research\architectureSmells\repos\richardspiers_C-Sharp-Sip-Lib\SIPLibDriver\SIPApp.cs,ReceivedRequest,The following statement contains a magic number: switch (request.Method.ToUpper())             {                 case "INVITE":                     {                         // Auto accepts any SIP INVITE request                         _log.Info("Generating 200 OK response for INVITE");                         Message m = ua.CreateResponse(200' "OK");                         ua.SendResponse(m);                         break;                     }                 case "CANCEL":                     {                         break;                     }                 case "ACK":                     {                         break;                     }                 case "BYE":                     {                         break;                     }                 case "MESSAGE":                     {                         // Logs any received request                         _log.Info("MESSAGE: " + request.Body);                                                  // Can also echo back any received message for testing purposes                         //Address from = (Address) request.first("From").value;                         //this.Message(from.uri.ToString()' request.body);                         break;                     }                 case "OPTIONS":                 case "REFER":                 case "SUBSCRIBE":                 case "NOTIFY":                 case "PUBLISH":                 case "INFO":                 default:                     {                         _log.Info("Request with method " + request.Method.ToUpper() + " is unhandled");                         break;                     }             }
