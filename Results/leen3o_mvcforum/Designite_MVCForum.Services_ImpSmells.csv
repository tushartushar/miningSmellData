Implementation smell,Namespace,Class,File,Method,Description
Long Method,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The method has 114 lines of code.
Long Method,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,ScrubUsers,The method has 225 lines of code.
Long Method,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The method has 123 lines of code.
Long Method,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The method has 337 lines of code.
Complex Method,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,GetBadgesByReflection,Cyclomatic complexity of the method is 8
Complex Method,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,SyncBadges,Cyclomatic complexity of the method is 16
Complex Method,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,ProcessBadge,Cyclomatic complexity of the method is 9
Complex Method,MVCForum.Services,EmailService,C:\repos\leen3o_mvcforum\MVCForum.Services\EmailService.cs,ProcessMail,Cyclomatic complexity of the method is 8
Complex Method,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,Cyclomatic complexity of the method is 9
Complex Method,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,ValidateUser,Cyclomatic complexity of the method is 8
Complex Method,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,Cyclomatic complexity of the method is 14
Complex Method,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,ScrubUsers,Cyclomatic complexity of the method is 33
Complex Method,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,Delete,Cyclomatic complexity of the method is 8
Complex Method,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,Delete,Cyclomatic complexity of the method is 10
Complex Method,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,Cyclomatic complexity of the method is 26
Long Parameter List,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,BadgeService,The method has 6 parameters. Parameters: loggingService' localizationService' membershipUserPointsService' reflectionService' context' cacheService
Long Parameter List,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,CategoryService,The method has 5 parameters. Parameters: context' roleService' categoryNotificationService' categoryPermissionForRoleService' cacheService
Long Parameter List,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,MembershipService,The method has 22 parameters. Parameters: context' settingsService' emailService' localizationService' activityService' privateMessageService' membershipUserPointsService' topicNotificationService' voteService' badgeService' categoryNotificationService' loggingService' uploadedFileService' postService' pollVoteService' pollAnswerService' pollService' topicService' favouriteService' categoryService' postEditService' cacheService
Long Parameter List,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,PostService,The method has 11 parameters. Parameters: context' membershipUserPointsService' settingsService' roleService' localizationService' voteService' uploadedFileService' favouriteService' configService' postEditService' cacheService
Long Parameter List,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,SearchPosts,The method has 5 parameters. Parameters: pageIndex' pageSize' amountToTake' searchTerm' allowedCategories
Long Parameter List,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPagedPostsByTopic,The method has 5 parameters. Parameters: pageIndex' pageSize' amountToTake' topicId' order
Long Parameter List,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,RoleService,The method has 5 parameters. Parameters: context' categoryPermissionForRoleService' permissionService' globalPermissionForRoleService' cacheService
Long Parameter List,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,TopicService,The method has 10 parameters. Parameters: context' membershipUserPointsService' settingsService' topicNotificationService' favouriteService' postService' roleService' pollService' pollAnswerService' cacheService
Long Parameter List,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsByTag,The method has 5 parameters. Parameters: pageIndex' pageSize' amountToTake' tag' allowedCategories
Long Parameter List,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByCsv,The method has 5 parameters. Parameters: pageIndex' pageSize' amountToTake' topicIds' allowedCategories
Long Parameter List,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetMembersActivity,The method has 5 parameters. Parameters: pageIndex' pageSize' amountToTake' memberGuid' allowedCategories
Long Identifier,MVCForum.Services,PermissionService,C:\repos\leen3o_mvcforum\MVCForum.Services\PermissionService.cs,PermissionService,The length of the parameter categoryPermissionForRoleService is 32.
Long Identifier,MVCForum.Services,PermissionService,C:\repos\leen3o_mvcforum\MVCForum.Services\PermissionService.cs,,The length of the parameter _categoryPermissionForRoleService is 33.
Long Identifier,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,CategoryService,The length of the parameter categoryPermissionForRoleService is 32.
Long Identifier,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,,The length of the parameter _categoryPermissionForRoleService is 33.
Long Identifier,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,CreateUser,The length of the parameter memberEmailAuthorisationNeeded is 30.
Long Identifier,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,RoleService,The length of the parameter categoryPermissionForRoleService is 32.
Long Identifier,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,RoleService,The length of the parameter globalPermissionForRoleService is 30.
Long Identifier,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,,The length of the parameter _categoryPermissionForRoleService is 33.
Long Identifier,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,,The length of the parameter _globalPermissionForRoleService is 31.
Long Statement,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,BadgeCanBeAwarded,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Badge.StartsWith' "BadgeCanBeAwarded-"' user.Id' "-"' badgeMapping.GetHashCode()); " is 121.
Long Statement,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,GetBadgesByReflection,The length of the statement  "                        $"Unable to load assembly. Probably not an event assembly' loader exception was: '{rtle.LoaderExceptions[0].GetType()}':'{rtle.LoaderExceptions[0].Message}'."; " is 159.
Long Statement,MVCForum.Services,BadgeService,C:\repos\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,SearchPagedGroupedTags,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Badge.StartsWith' "SearchPagedGroupedTags-"' search' "-"' pageIndex' "-"' pageSize); " is 123.
Long Statement,MVCForum.Services,BannedEmailService,C:\repos\leen3o_mvcforum\MVCForum.Services\BannedEmailService.cs,GetAllWildCards,The length of the statement  "            return _cacheService.CachePerRequest(cacheKey' () => _context.BannedEmail.Where(x => x.Email.StartsWith("*@")).ToList()); " is 121.
Long Statement,MVCForum.Services,BannedEmailService,C:\repos\leen3o_mvcforum\MVCForum.Services\BannedEmailService.cs,GetAllNonWildCards,The length of the statement  "            return _cacheService.CachePerRequest(cacheKey' () => _context.BannedEmail.Where(x => !x.Email.StartsWith("*@")).ToList()); " is 122.
Long Statement,MVCForum.Services,CategoryNotificationService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryNotificationService.cs,GetByUserAndCategory,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.CategoryNotification.StartsWith' "GetByUserAndCategory-"' user.Id' "-"' category.Id' "-"' addTracking); " is 142.
Long Statement,MVCForum.Services,CategoryNotificationService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryNotificationService.cs,Get,The length of the statement  "            return _cacheService.CachePerRequest(cacheKey' () => _context.CategoryNotification.FirstOrDefault(cat => cat.Id == id)); " is 120.
Long Statement,MVCForum.Services,ActivityService,C:\repos\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GenerateBadgeActivity,The length of the statement  "                    _loggingService.Error($"A badge activity record with id '{activity.Id}' has a badge id '{badgeId}' that is not found in the badge table."); " is 139.
Long Statement,MVCForum.Services,ActivityService,C:\repos\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GenerateBadgeActivity,The length of the statement  "                    _loggingService.Error($"A badge activity record with id '{activity.Id}' has a user id '{userId}' that is not found in the user table."); " is 136.
Long Statement,MVCForum.Services,ActivityService,C:\repos\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GenerateProfileUpdatedActivity,The length of the statement  "                    _loggingService.Error($"A profile updated activity record with id '{activity.Id}' has a user id '{userId}' that is not found in the user table."); " is 146.
Long Statement,MVCForum.Services,ActivityService,C:\repos\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GenerateMemberJoinedActivity,The length of the statement  "                    _loggingService.Error($"A member joined activity record with id '{activity.Id}' has a user id '{userId}' that is not found in the user table."); " is 144.
Long Statement,MVCForum.Services,ActivityService,C:\repos\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,ConvertToSpecificActivities,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Activity.StartsWith' "ConvertToSpecificActivities-"' activities.GetHashCode()' "-"' pageIndex' "-"' pageSize); " is 149.
Long Statement,MVCForum.Services,ActivityService,C:\repos\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,SearchPagedGroupedActivities,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Activity.StartsWith' "SearchPagedGroupedActivities-"' search' "-"' pageIndex' "-"' pageSize); " is 132.
Long Statement,MVCForum.Services,BannedWordService,C:\repos\leen3o_mvcforum\MVCForum.Services\BannedWordService.cs,GetAll,The length of the statement  "                    return _context.BannedWord.AsNoTracking().Where(x => x.IsStopWord == true).OrderByDescending(x => x.DateAdded).ToList(); " is 120.
Long Statement,MVCForum.Services,BannedWordService,C:\repos\leen3o_mvcforum\MVCForum.Services\BannedWordService.cs,GetAll,The length of the statement  "                return _context.BannedWord.AsNoTracking().Where(x => x.IsStopWord != true).OrderByDescending(x => x.DateAdded).ToList(); " is 120.
Long Statement,MVCForum.Services,ConfigService,C:\repos\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The length of the statement  "                    if (inputText.Length - i >= emote.Length && emote.Equals(inputText.Substring(i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) " is 140.
Long Statement,MVCForum.Services,GlobalPermissionForRoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\GlobalPermissionForRoleService.cs,GetAll,The length of the statement  "                var catRowList = _context.GlobalPermissionForRole.Include(x => x.MembershipRole).Where(x => x.MembershipRole.Id == role.Id).ToList(); " is 133.
Long Statement,MVCForum.Services,PollVoteService,C:\repos\leen3o_mvcforum\MVCForum.Services\PollVoteService.cs,HasUserVotedAlready,The length of the statement  "                var vote = _context.PollVote.Include(x => x.PollAnswer).Include(x => x.User).FirstOrDefault(x => x.PollAnswer.Id == answerId && x.User.Id == userId); " is 149.
Long Statement,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,Write,The length of the statement  "                            tw.WriteLine("{0} | {1} | {2} | {3} | {4} | {5}"' DateTime.UtcNow.ToString(DateTimeFormat)' callStack.GetMethod().Module.Name' callStack.GetMethod().Name' callStack.GetMethod().DeclaringType' callStack.GetFileLineNumber()' message); " is 232.
Long Statement,MVCForum.Services,MembershipUserPointsService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,Delete,The length of the statement  "            var points = _context.MembershipUserPoints.Include(x => x.User).FirstOrDefault(x => x.Points == amount && x.User.Id == user.Id); " is 128.
Long Statement,MVCForum.Services,MembershipUserPointsService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,Delete,The length of the statement  "            var mp = _context.MembershipUserPoints.Include(x => x.User).Where(x => x.User.Id == user.Id && x.PointsFor == type && x.PointsForId == referenceId); " is 148.
Long Statement,MVCForum.Services,MembershipUserPointsService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,Add,The length of the statement  "                    var alreadyHasThisPoint = GetByUser(points.User).Any(x => x.PointsFor == points.PointsFor && x.PointsForId == points.PointsForId); " is 130.
Long Statement,MVCForum.Services,MembershipUserPointsService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,UserPoints,The length of the statement  "            return _cacheService.CachePerRequest(cacheKey' () => _context.MembershipUserPoints.Include(x => x.User).AsNoTracking().Where(x => x.User.Id == user.Id).Sum(x => x.Points)); " is 172.
Long Statement,MVCForum.Services,PrivateMessageService,C:\repos\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetUsersPrivateMessages,The length of the statement  "                .Where(x => (x.UserTo.Id == user.Id && x.IsSentMessage != true) || (x.UserFrom.Id == user.Id && x.IsSentMessage == true)) " is 121.
Long Statement,MVCForum.Services,PrivateMessageService,C:\repos\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetUsersPrivateMessages,The length of the statement  "               .Where(x => (x.UserFrom.Id == fromUser.Id && x.UserTo.Id == toUser.Id && x.IsSentMessage != true) || (x.UserFrom.Id == toUser.Id && x.UserTo.Id == fromUser.Id && x.IsSentMessage == true)) " is 187.
Long Statement,MVCForum.Services,PrivateMessageService,C:\repos\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetMatchingSentPrivateMessage,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.PrivateMessage.StartsWith' "GetMatchingSentPrivateMessage-"' date.ToString("d")' "-"' senderId' "-"' receiverId); " is 152.
Long Statement,MVCForum.Services,PrivateMessageService,C:\repos\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetMatchingSentPrivateMessage,The length of the statement  "                                .FirstOrDefault(x => x.DateSent == date && x.UserFrom.Id == senderId && x.UserTo.Id == receiverId && x.IsSentMessage == true)); " is 127.
Long Statement,MVCForum.Services,ReportService,C:\repos\leen3o_mvcforum\MVCForum.Services\ReportService.cs,PostReport,The length of the statement  "            sb.AppendFormat("<p>{2}: <a href=\"{0}\">{1}</a></p>"' string.Concat(_settingsService.GetSettings().ForumUrl.TrimEnd('/')' report.Reporter.NiceUrl)'  " is 148.
Long Statement,MVCForum.Services,ReportService,C:\repos\leen3o_mvcforum\MVCForum.Services\ReportService.cs,PostReport,The length of the statement  "            var urlOfPost =$"{_settingsService.GetSettings().ForumUrl.TrimEnd('/')}{report.ReportedPost.Topic.NiceUrl}?order=all#comment-{report.ReportedPost.Id}"; " is 151.
Long Statement,MVCForum.Services,ReportService,C:\repos\leen3o_mvcforum\MVCForum.Services\ReportService.cs,PostReport,The length of the statement  "            sb.AppendFormat("<p>{2}: <a href=\"{0}\">{1}</a></p>"' urlOfPost' report.ReportedPost.Topic.Name' _localizationService.GetResourceString("Report.PostReported")); " is 161.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,CheckExists,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.CategoryPermissionForRole.StartsWith' "CheckExists-"' categoryPermissionForRole.Id); " is 123.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValuesForKey,The length of the statement  "        new { LocaleStringResource = strRes' LocaleResourceKey = resKey }).Count(joinResult => joinResult.LocaleStringResource.Language.Id == languageId && " is 147.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValuesForKey,The length of the statement  "                        (strRes' resKey) => new { LocaleStringResource = strRes' LocaleResourceKey = resKey } // A function to create a result element from two matching elements. " is 154.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,Update,The length of the statement  "                throw new ApplicationException("Object already exists in context - you do not need to call Update. Save occurs on Commit"); " is 123.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,Update,The length of the statement  "                throw new ApplicationException("Object already exists in context - you do not need to call Update. Save occurs on Commit"); " is 123.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllValues,The length of the statement  "                        (strRes' resKey) => new { LocaleStringResource = strRes' LocaleResourceKey = resKey } // A function to create a result element from two matching elements. " is 154.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceKeys,The length of the statement  "                        (strRes' resKey) => new { LocaleStringResource = strRes' LocaleResourceKey = resKey } // A function to create a result element from two matching elements. " is 154.
Long Statement,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The length of the statement  "                    var stringResource = language.LocaleStringResources.FirstOrDefault(res => res.LocaleResourceKey.Name == resourceKey.Name); " is 122.
Long Statement,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetSubCategories,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Category.StartsWith' "GetSubCategories"' "-"' category.GetHashCode()' "-"' level); " is 121.
Long Statement,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetSubCategories,The length of the statement  "                var cats = allCategories.Where(x => x.ParentCategory != null && x.ParentCategory.Id == category.Id).OrderBy(x => x.SortOrder); " is 126.
Long Statement,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetBaseSelectListCategories,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Category.StartsWith' "GetBaseSelectListCategories"' "-"' allowedCategories.GetHashCode()); " is 129.
Long Statement,MVCForum.Services,CategoryService,C:\repos\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,Add,The length of the statement  "            category.Slug = ServiceHelpers.GenerateSlug(category.Name' GetBySlugLike(ServiceHelpers.CreateUrl(category.Name))' null); " is 121.
Long Statement,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,CreateUser,The length of the statement  "                    newUser.Slug = ServiceHelpers.GenerateSlug(newUser.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(newUser.UserName))' null); " is 130.
Long Statement,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,CreateUser,The length of the statement  "                            sb.Append($"<p>{string.Format(_localizationService.GetResourceString("Members.NewMemberRegistered")' settings.ForumName' settings.ForumUrl)}</p>"); " is 147.
Long Statement,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,GetUsersByDaysPostsPoints,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Member.StartsWith' "GetUsersByDaysPostsPoints-"' amoutOfDaysSinceRegistered' "-"' amoutOfPosts); " is 135.
Long Statement,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,GetLowestPointUsers,The length of the statement  "                            (user' userPoints) => new { MembershipUser = user' UserPoints = userPoints } // A function to create a result element from two matching elements. " is 145.
Long Statement,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The length of the statement  "                    userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug); " is 158.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetByMember,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Post.StartsWith' "GetByMember-"' amountToTake' "-"' allowedCategories.GetHashCode()); " is 124.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetReplyToPosts,The length of the statement  "                // We don't allow topic starters in the list OR solutions. As if it's marked as a solution' it's a solution for that topic " is 122.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetReplyToPosts,The length of the statement  "                return _context.Post.Where(x => x.InReplyTo != null & x.InReplyTo == postId && !x.IsTopicStarter && !x.IsSolution).ToList(); " is 124.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByFavouriteCount,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Post.StartsWith' "GetPostsByFavouriteCount-"' postsByMemberId' "-"' minAmountOfFavourites); " is 130.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByFavouriteCount,The length of the statement  "                       .Where(x => x.User.Id == postsByMemberId && x.Favourites.Count(c => c.Member.Id != postsByMemberId) >= minAmountOfFavourites); " is 126.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPagedPostsByTopic,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Post.StartsWith' "GetPagedPostsByTopic-"' pageIndex' "-"' pageSize' "-"' amountToTake' "-"'topicId' "-"' order); " is 151.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPendingPosts,The length of the statement  "            var allPendingPosts = _context.Post.AsNoTracking().Include(x => x.Topic.Category).Where(x => x.Pending == true && allowedCatIds.Contains(x.Topic.Category.Id)).ToList(); " is 168.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPendingPostsCount,The length of the statement  "                return _context.Post.AsNoTracking().Include(x => x.Topic.Category).Count(x => x.Pending == true && allowedCatIds.Contains(x.Topic.Category.Id)); " is 144.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetSolutionsByMember,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Post.StartsWith' "GetSolutionsByMember-"' memberId' "-"' allowedCategories.GetHashCode()); " is 129.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByTopics,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Post.StartsWith' "GetPostsByTopics-"' topicIds.GetHashCode()' "-"' allowedCategories.GetHashCode()); " is 139.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,AddNewPost,The length of the statement  "            if (permissions[SiteConstants.Instance.PermissionDenyAccess].IsTicked || permissions[SiteConstants.Instance.PermissionReadOnly].IsTicked) " is 137.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,SortSearchField,The length of the statement  "                formattedSearchField = !string.IsNullOrEmpty(formattedSearchField) ? string.Concat(formattedSearchField' " "' sb.ToString()) : sb.ToString(); " is 141.
Long Statement,MVCForum.Services,PostService,C:\repos\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByMember,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Post.StartsWith' "GetPostsByMember-"' memberId' "-"' allowedCategories.GetHashCode()); " is 125.
Long Statement,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetAdminPermissions,The length of the statement  "                        IsTicked = (permission.Name != SiteConstants.Instance.PermissionDenyAccess && permission.Name != SiteConstants.Instance.PermissionReadOnly)' " is 140.
Long Statement,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetGuestPermissions,The length of the statement  "                var categoryPermissionForRole = categoryPermissions.FirstOrDefault(x => x.Permission.Name == SiteConstants.Instance.PermissionDenyAccess); " is 138.
Long Statement,MVCForum.Services,RoleService,C:\repos\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetOtherPermissions,The length of the statement  "                                        : new CategoryPermissionForRole { Category = category' MembershipRole = role' IsTicked = false' Permission = permission }); " is 123.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetAllSelectList,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Topic.StartsWith' "GetAllSelectList-"' allowedCategories.GetHashCode()' "-"' amount); " is 124.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPendingTopics,The length of the statement  "            var cacheKey = string.Concat(CacheKeys.Topic.StartsWith' "GetPendingTopics-"' allowedCategories.GetHashCode()' "-"' usersRole.Id); " is 130.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPendingTopics,The length of the statement  "                var allPendingTopics = _context.Topic.AsNoTracking().Include(x => x.Category).Where(x => x.Pending == true && allowedCatIds.Contains(x.Category.Id)).ToList(); " is 158.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPendingTopicsCount,The length of the statement  "                return _context.Topic.AsNoTracking().Include(x => x.Category).Count(x => x.Pending == true && allowedCatIds.Contains(x.Category.Id)); " is 133.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsByTag,The length of the statement  "            var total = _context.Topic.AsNoTracking().Count(e => e.Tags.Any(t => t.Slug == tag) && allowedCatIds.Contains(e.Category.Id)); " is 126.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,SearchTopics,The length of the statement  "                topics = topics.Where(x => x.Posts.Any(p => p.PostContent.ToUpper().Contains(sTerm)) || x.Name.ToUpper().Contains(sTerm)); " is 122.
Long Statement,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetMembersActivity,The length of the statement  "                            .AsNoTracking().Where(x => x.User.Id == memberGuid && x.Pending != true && allowedCatIds.Contains(x.Topic.Category.Id)).DistinctBy(x => x.Topic.Id).Count(); " is 156.
Long Statement,MVCForum.Services.Data.Context,MVCForumContext,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Context\MVCForumContext.cs,OnModelCreating,The length of the statement  "            // http://stackoverflow.com/questions/7924758/entity-framework-creates-a-plural-table-name-but-the-view-expects-a-singular-ta " is 125.
Long Statement,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The length of the statement  "<p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> " is 144.
Long Statement,MVCForum.Services.Data.UnitOfWork,UnitOfWork,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\UnitOfWork\UnitOfWork.cs,Rollback,The length of the statement  "                        // rather than the FK. I know this is a pain–it would be great if it could be made easier in the future' but for now it is what it is. " is 134.
Empty Catch Block,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,Write,The method has an empty catch block.
Magic Number,MVCForum.Services,ConfigService,C:\repos\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: for (var i = 0; i < inputText.Length; i++)              {                  var strEmote = string.Empty;                  foreach (string emote in emoticons.Keys)                  {                      if (inputText.Length - i >= emote.Length && emote.Equals(inputText.Substring(i' emote.Length)' StringComparison.InvariantCultureIgnoreCase))                      {                          // Do custom checks in subStringExtraValue to stop emoticons replacing Html                          var startIndex = (i >= 3 ? 3 : i);                          var length = (startIndex * 2);                          var subStringExtraValue = inputText.Substring(i - startIndex' emote.Length + length);                            // Not brilliant' but for now will stop most cases                          if (!subStringExtraValue.Contains("//"))                          {                              strEmote = emote;                              break;                          }                      }                  }                    if (strEmote.Length != 0)                  {                      sb.Append($"<img src=\"{emoticonFolder}{emoticons[strEmote]}\" alt=\"\" class=\"emoticon\" />");                      i += strEmote.Length - 1;                  }                  else                  {                      sb.Append(inputText[i]);                  }              }
Magic Number,MVCForum.Services,ConfigService,C:\repos\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: for (var i = 0; i < inputText.Length; i++)              {                  var strEmote = string.Empty;                  foreach (string emote in emoticons.Keys)                  {                      if (inputText.Length - i >= emote.Length && emote.Equals(inputText.Substring(i' emote.Length)' StringComparison.InvariantCultureIgnoreCase))                      {                          // Do custom checks in subStringExtraValue to stop emoticons replacing Html                          var startIndex = (i >= 3 ? 3 : i);                          var length = (startIndex * 2);                          var subStringExtraValue = inputText.Substring(i - startIndex' emote.Length + length);                            // Not brilliant' but for now will stop most cases                          if (!subStringExtraValue.Contains("//"))                          {                              strEmote = emote;                              break;                          }                      }                  }                    if (strEmote.Length != 0)                  {                      sb.Append($"<img src=\"{emoticonFolder}{emoticons[strEmote]}\" alt=\"\" class=\"emoticon\" />");                      i += strEmote.Length - 1;                  }                  else                  {                      sb.Append(inputText[i]);                  }              }
Magic Number,MVCForum.Services,ConfigService,C:\repos\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: for (var i = 0; i < inputText.Length; i++)              {                  var strEmote = string.Empty;                  foreach (string emote in emoticons.Keys)                  {                      if (inputText.Length - i >= emote.Length && emote.Equals(inputText.Substring(i' emote.Length)' StringComparison.InvariantCultureIgnoreCase))                      {                          // Do custom checks in subStringExtraValue to stop emoticons replacing Html                          var startIndex = (i >= 3 ? 3 : i);                          var length = (startIndex * 2);                          var subStringExtraValue = inputText.Substring(i - startIndex' emote.Length + length);                            // Not brilliant' but for now will stop most cases                          if (!subStringExtraValue.Contains("//"))                          {                              strEmote = emote;                              break;                          }                      }                  }                    if (strEmote.Length != 0)                  {                      sb.Append($"<img src=\"{emoticonFolder}{emoticons[strEmote]}\" alt=\"\" class=\"emoticon\" />");                      i += strEmote.Length - 1;                  }                  else                  {                      sb.Append(inputText[i]);                  }              }
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,Write,The following statement contains a magic number: if (message != "File does not exist.")              {                  try                  {                      // Note there is a lock here. This class is only suitable for error logging'                      // not ANY form of trace logging...                      lock (LogLock)                      {                          if (Length() >= _maxLogSize)                          {                              ArchiveLog();                          }                            using (var tw = TextWriter.Synchronized(File.AppendText(_logFileName)))                          {                              var callStack = new StackFrame(2' true); // Go back one stack frame to get module info                                tw.WriteLine("{0} | {1} | {2} | {3} | {4} | {5}"' DateTime.UtcNow.ToString(DateTimeFormat)' callStack.GetMethod().Module.Name' callStack.GetMethod().Name' callStack.GetMethod().DeclaringType' callStack.GetFileLineNumber()' message);                          }                      }                  }                  catch                  {                      // Not much to do if logging failed...                  }               }
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,LogLineFormatter,The following statement contains a magic number: try              {                  var lineSplit = line.Split('|');                    return new LogEntry                                {                                    Date = DateTime.ParseExact(lineSplit[0].Trim()' DateTimeFormat' CultureInfo.InvariantCulture)'                                    Module = lineSplit[1].Trim()'                                    Method = lineSplit[2].Trim()'                                    DeclaringType = lineSplit[3].Trim()'                                    LineNumber = lineSplit[4].Trim()'                                    ErrorMessage = lineSplit[5].Trim()'                                };                              }              catch (Exception)              {                  return null;              }
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,LogLineFormatter,The following statement contains a magic number: try              {                  var lineSplit = line.Split('|');                    return new LogEntry                                {                                    Date = DateTime.ParseExact(lineSplit[0].Trim()' DateTimeFormat' CultureInfo.InvariantCulture)'                                    Module = lineSplit[1].Trim()'                                    Method = lineSplit[2].Trim()'                                    DeclaringType = lineSplit[3].Trim()'                                    LineNumber = lineSplit[4].Trim()'                                    ErrorMessage = lineSplit[5].Trim()'                                };                              }              catch (Exception)              {                  return null;              }
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,LogLineFormatter,The following statement contains a magic number: try              {                  var lineSplit = line.Split('|');                    return new LogEntry                                {                                    Date = DateTime.ParseExact(lineSplit[0].Trim()' DateTimeFormat' CultureInfo.InvariantCulture)'                                    Module = lineSplit[1].Trim()'                                    Method = lineSplit[2].Trim()'                                    DeclaringType = lineSplit[3].Trim()'                                    LineNumber = lineSplit[4].Trim()'                                    ErrorMessage = lineSplit[5].Trim()'                                };                              }              catch (Exception)              {                  return null;              }
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,LogLineFormatter,The following statement contains a magic number: try              {                  var lineSplit = line.Split('|');                    return new LogEntry                                {                                    Date = DateTime.ParseExact(lineSplit[0].Trim()' DateTimeFormat' CultureInfo.InvariantCulture)'                                    Module = lineSplit[1].Trim()'                                    Method = lineSplit[2].Trim()'                                    DeclaringType = lineSplit[3].Trim()'                                    LineNumber = lineSplit[4].Trim()'                                    ErrorMessage = lineSplit[5].Trim()'                                };                              }              catch (Exception)              {                  return null;              }
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,ReadLogFile,The following statement contains a magic number: return logs.OrderByDescending(x => x.Date).Take(100).ToList();
Magic Number,MVCForum.Services,LoggingService,C:\repos\leen3o_mvcforum\MVCForum.Services\LoggingService.cs,Error,The following statement contains a magic number: const int maxExceptionDepth = 5;
Magic Number,MVCForum.Services,MembershipUserPointsService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetCurrentWeeksPoints,The following statement contains a magic number: return _cacheService.CachePerRequest(cacheKey' () =>              {                    amountToTake = amountToTake ?? int.MaxValue;                  var date = DateTime.UtcNow;                  var start = date.Date.AddDays(-(int)date.DayOfWeek);                  var end = start.AddDays(7);                    var results = _context.MembershipUserPoints                      .Include(x => x.User)                      .Where(x => x.DateAdded >= start && x.DateAdded < end)                      .ToList();                    return results.GroupBy(x => x.User)                              .ToDictionary(x => x.Key' x => x.Select(p => p.Points).Sum())                              .OrderByDescending(x => x.Value)                              .Take((int)amountToTake)                              .ToDictionary(x => x.Key' x => x.Value);              });
Magic Number,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: try              {                  //var allResourceKeys = GetAllResourceKeys();                  var lineCounter = 0;                  foreach (var line in allLines)                  {                      lineCounter++;                        //var keyValuePair = line.Split(commaSeparator);                      var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                        if (keyValuePair.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: a key and a value are required."                          });                            continue;                      }                        var key = keyValuePair[0];                        if (string.IsNullOrEmpty(key))                      {                          // Ignore empty keys                          continue;                      }                      key = key.Trim();                        var value = keyValuePair[1];                        var resourceKey = GetResourceKey(key);                        if (language == null)                      {                          throw new ApplicationException("Unable to create language");                      }                        // If key does not exist' it is a new one to be created                      if (resourceKey == null)                      {                          resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                            Add(resourceKey);                          report.Warnings.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.NewKeyCreated'                              Message =                                  $"A new key named '{key}' has been created' and will require a value in all languages."                          });                      }                        // In the new language (only) set the value for the resource                      var stringResource = language.LocaleStringResources.FirstOrDefault(res => res.LocaleResourceKey.Name == resourceKey.Name);                      if (stringResource != null)                      {                          if (!stringResource.ResourceValue.Equals(value))                          {                              stringResource.ResourceValue = value;                             }                                           }                      else                      {                          // No string resources have been created' so most probably                          // this is the installer creating the keys so we need to create the                           // string resource to go with it and add it                          stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          Add(stringResource);                      }                  }              }              catch (Exception ex)              {                  report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });              }
Magic Number,MVCForum.Services,LocalizationService,C:\repos\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: try              {                  //var allResourceKeys = GetAllResourceKeys();                  var lineCounter = 0;                  foreach (var line in allLines)                  {                      lineCounter++;                        //var keyValuePair = line.Split(commaSeparator);                      var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                        if (keyValuePair.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: a key and a value are required."                          });                            continue;                      }                        var key = keyValuePair[0];                        if (string.IsNullOrEmpty(key))                      {                          // Ignore empty keys                          continue;                      }                      key = key.Trim();                        var value = keyValuePair[1];                        var resourceKey = GetResourceKey(key);                        if (language == null)                      {                          throw new ApplicationException("Unable to create language");                      }                        // If key does not exist' it is a new one to be created                      if (resourceKey == null)                      {                          resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                            Add(resourceKey);                          report.Warnings.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.NewKeyCreated'                              Message =                                  $"A new key named '{key}' has been created' and will require a value in all languages."                          });                      }                        // In the new language (only) set the value for the resource                      var stringResource = language.LocaleStringResources.FirstOrDefault(res => res.LocaleResourceKey.Name == resourceKey.Name);                      if (stringResource != null)                      {                          if (!stringResource.ResourceValue.Equals(value))                          {                              stringResource.ResourceValue = value;                             }                                           }                      else                      {                          // No string resources have been created' so most probably                          // this is the installer creating the keys so we need to create the                           // string resource to go with it and add it                          stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          Add(stringResource);                      }                  }              }              catch (Exception ex)              {                  report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,MembershipService,C:\repos\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines)              {                  try                  {                      lineCounter++;                        // Each line is made up of n items in a predefined order                        var values = line.Split(commaSeparator);                        if (values.Length < 2)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: insufficient values supplied."                          });                            continue;                      }                        var userName = values[0];                        if (userName.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no username supplied."                          });                            continue;                      }                        var email = values[1];                      if (email.IsNullEmpty())                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'                              Message = $"Line {lineCounter}: no email supplied."                          });                            continue;                      }                        // get the user                      var userToImport = GetUser(userName);                        if (userToImport != null)                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in forum."                          });                            continue;                      }                        if (usersProcessed.Contains(userName))                      {                          report.Errors.Add(new CsvErrorWarning                          {                              ErrorWarningType = CsvErrorWarningType.AlreadyExists'                              Message = $"Line {lineCounter}: user already exists in import file."                          });                            continue;                      }                        usersProcessed.Add(userName);                        userToImport = CreateEmptyUser();                      userToImport.UserName = userName;                      userToImport.Slug = ServiceHelpers.GenerateSlug(userToImport.UserName' GetUserBySlugLike(ServiceHelpers.CreateUrl(userToImport.UserName))' userToImport.Slug);                      userToImport.Email = email;                      userToImport.IsApproved = true;                      userToImport.PasswordSalt = StringUtils.CreateSalt(AppConstants.SaltSize);                        string createDateStr = null;                      if (values.Length >= 3)                      {                          createDateStr = values[2];                      }                      userToImport.CreateDate = createDateStr.IsNullEmpty() ? DateTime.UtcNow : DateTime.Parse(createDateStr);                        if (values.Length >= 4)                      {                          userToImport.Age = Int32.Parse(values[3]);                      }                      if (values.Length >= 5)                      {                          userToImport.Location = values[4];                      }                      if (values.Length >= 6)                      {                          userToImport.Website = values[5];                      }                      if (values.Length >= 7)                      {                          userToImport.Facebook = values[6];                      }                      if (values.Length >= 8)                      {                          userToImport.Signature = values[7];                      }                      userToImport.Roles = new List<MembershipRole> { settings.NewMemberStartingRole };                      Add(userToImport);                  }                  catch (Exception ex)                  {                      report.Errors.Add(new CsvErrorWarning { ErrorWarningType = CsvErrorWarningType.GeneralError' Message = ex.Message });                  }              }
Magic Number,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPopularTopics,The following statement contains a magic number: if (from == null)              {                  from = DateTime.UtcNow.AddDays(-14);              }
Magic Number,MVCForum.Services,TopicService,C:\repos\leen3o_mvcforum\MVCForum.Services\TopicService.cs,PassedTopicFloodTest,The following statement contains a magic number: var floodWindow = timeNow.AddMinutes(-2);
Magic Number,MVCForum.Services.Data.Mapping,ActivityMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\ActivityMapping.cs,ActivityMapping,The following statement contains a magic number: Property(x => x.Type).IsRequired().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property(x => x.Name).IsRequired().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property(x => x.Type).IsRequired().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property(x => x.Image).IsOptional().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property(x => x.DisplayName).IsRequired().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,BadgeTypeTimeLastCheckedMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeTypeTimeLastCheckedMapping.cs,BadgeTypeTimeLastCheckedMapping,The following statement contains a magic number: Property(x => x.BadgeType).IsRequired().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,BannedEmailMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BannedEmailMapping.cs,BannedEmailMapping,The following statement contains a magic number: Property(x => x.Email).IsRequired().HasMaxLength(200);
Magic Number,MVCForum.Services.Data.Mapping,BannedWordMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BannedWordMapping.cs,BannedWordMapping,The following statement contains a magic number: Property(x => x.Word).IsRequired().HasMaxLength(75);
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.Name).IsRequired().HasMaxLength(450);
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.Slug).IsRequired().HasMaxLength(450)                                  .HasColumnAnnotation("Index"'                                  new IndexAnnotation(new IndexAttribute("IX_Category_Slug"' 1) { IsUnique = true }));
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.PageTitle).IsOptional().HasMaxLength(80);
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.MetaDescription).IsOptional().HasMaxLength(200);
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.Path).IsOptional().HasMaxLength(2500);
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.Colour).IsOptional().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property(x => x.Image).IsOptional().HasMaxLength(200);
Magic Number,MVCForum.Services.Data.Mapping,EmailMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\EmailMapping.cs,EmailMapping,The following statement contains a magic number: Property(x => x.EmailTo).IsRequired().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,EmailMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\EmailMapping.cs,EmailMapping,The following statement contains a magic number: Property(x => x.Subject).IsRequired().HasMaxLength(200);
Magic Number,MVCForum.Services.Data.Mapping,EmailMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\EmailMapping.cs,EmailMapping,The following statement contains a magic number: Property(x => x.NameTo).IsRequired().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,LanguageMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LanguageMapping.cs,LanguageMapping,The following statement contains a magic number: Property(x => x.Name).IsRequired().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,LanguageMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LanguageMapping.cs,LanguageMapping,The following statement contains a magic number: Property(x => x.LanguageCulture).IsRequired().HasMaxLength(20);
Magic Number,MVCForum.Services.Data.Mapping,LanguageMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LanguageMapping.cs,LanguageMapping,The following statement contains a magic number: Property(x => x.FlagImageFileName).IsOptional().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,LocaleResourceKeyMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LocaleResourceKeyMapping.cs,LocaleResourceKeyMapping,The following statement contains a magic number: Property(x => x.Name).IsRequired().HasMaxLength(200);
Magic Number,MVCForum.Services.Data.Mapping,LocaleStringResourceMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LocaleStringResourceMapping.cs,LocaleStringResourceMapping,The following statement contains a magic number: Property(x => x.ResourceValue).IsRequired().HasMaxLength(1000);
Magic Number,MVCForum.Services.Data.Mapping,MembershipRoleMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipRoleMapping.cs,MembershipRoleMapping,The following statement contains a magic number: Property(x => x.RoleName).IsRequired().HasMaxLength(256);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.UserName).IsRequired().HasMaxLength(150)                                      .HasColumnAnnotation("Index"'                                      new IndexAnnotation(new IndexAttribute("IX_MembershipUser_UserName"' 1) { IsUnique = true }));
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Password).IsRequired().HasMaxLength(128);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.PasswordSalt).IsOptional().HasMaxLength(128);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Email).IsOptional().HasMaxLength(256);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.PasswordQuestion).IsOptional().HasMaxLength(256);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.PasswordAnswer).IsOptional().HasMaxLength(256);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.PasswordResetToken).HasMaxLength(150).IsOptional();
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Slug).IsRequired().HasMaxLength(150)                                      .HasColumnAnnotation("Index"'                                      new IndexAnnotation(new IndexAttribute("IX_MembershipUser_Slug"' 1) { IsUnique = true }));
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Signature).IsOptional().HasMaxLength(1000);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Location).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Website).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Twitter).IsOptional().HasMaxLength(60);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Facebook).IsOptional().HasMaxLength(60);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Avatar).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.FacebookAccessToken).IsOptional().HasMaxLength(300);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.MicrosoftAccessToken).IsOptional().HasMaxLength(450);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.TwitterAccessToken).IsOptional().HasMaxLength(300);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.TwitterId).IsOptional().HasMaxLength(150);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.GoogleAccessToken).IsOptional().HasMaxLength(300);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.GoogleId).IsOptional().HasMaxLength(150);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.MiscAccessToken).IsOptional().HasMaxLength(250);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Latitude).IsOptional().HasMaxLength(40);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property(x => x.Longitude).IsOptional().HasMaxLength(40);
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserPointsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserPointsMapping.cs,MembershipUserPointsMapping,The following statement contains a magic number: Property(x => x.Notes).IsOptional().HasMaxLength(400);
Magic Number,MVCForum.Services.Data.Mapping,PermissionMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PermissionMapping.cs,PermissionMapping,The following statement contains a magic number: Property(x => x.Name).IsRequired().HasMaxLength(150);
Magic Number,MVCForum.Services.Data.Mapping,PollAnswerMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PollAnswerMapping.cs,PollAnswerMapping,The following statement contains a magic number: Property(x => x.Answer).IsRequired().HasMaxLength(600);
Magic Number,MVCForum.Services.Data.Mapping,PostEditMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PostEditMapping.cs,PostEditMapping,The following statement contains a magic number: Property(x => x.OriginalPostTitle).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,PostEditMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PostEditMapping.cs,PostEditMapping,The following statement contains a magic number: Property(x => x.EditedPostTitle).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,PostMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PostMapping.cs,PostMapping,The following statement contains a magic number: Property(x => x.IpAddress).IsOptional().HasMaxLength(50);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.ForumName).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.ForumUrl).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.AdminEmailAddress).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.NotificationReplyEmail).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.SMTP).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.SMTPUsername).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.SMTPPort).IsOptional().HasMaxLength(10);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.SMTPPassword).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.Theme).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.AkismentKey).IsOptional().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.CurrentDatabaseVersion).IsOptional().HasMaxLength(10);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.SpamQuestion).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.SpamAnswer).IsOptional().HasMaxLength(500);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.PageTitle).IsOptional().HasMaxLength(80);
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property(x => x.MetaDesc).IsOptional().HasMaxLength(200);
Magic Number,MVCForum.Services.Data.Mapping,TopicMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicMapping.cs,TopicMapping,The following statement contains a magic number: Property(x => x.Name).IsRequired().HasMaxLength(450);
Magic Number,MVCForum.Services.Data.Mapping,TopicMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicMapping.cs,TopicMapping,The following statement contains a magic number: Property(x => x.Slug).IsRequired().HasMaxLength(450).HasColumnAnnotation("Index"'                                      new IndexAnnotation(new IndexAttribute("IX_Topic_Slug"' 1) { IsUnique = true }));
Magic Number,MVCForum.Services.Data.Mapping,TopicTagMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicTagMapping.cs,TopicTagMapping,The following statement contains a magic number: Property(x => x.Tag).IsRequired().HasMaxLength(100);
Magic Number,MVCForum.Services.Data.Mapping,TopicTagMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicTagMapping.cs,TopicTagMapping,The following statement contains a magic number: Property(x => x.Slug).IsRequired().HasMaxLength(100).HasColumnAnnotation("Index"'                                      new IndexAnnotation(new IndexAttribute("IX_Tag_Slug"' 1) { IsUnique = true }));
Magic Number,MVCForum.Services.Data.Mapping,UploadedFileMapping,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\Mapping\UploadedFileMapping.cs,UploadedFileMapping,The following statement contains a magic number: Property(x => x.Filename).IsRequired().HasMaxLength(200);
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Magic Number,MVCForum.Services.Migrations,Configuration,C:\repos\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null)              {                    //isFirstInstall = true;                  var cultureInfo = LanguageUtils.GetCulture(langCulture);                  language = new Language                  {                      Name = cultureInfo.EnglishName'                      LanguageCulture = cultureInfo.Name'                  };                  context.Language.Add(language);                    // Save the language                  context.SaveChanges();                    // Now add the default language strings                  var file = HostingEnvironment.MapPath(@"~/Installer/en-GB.csv");                  var commaSeparator = new[] {'''};                  if (file != null)                  {                      // Unpack the data                      var allLines = new List<string>();                      using (var streamReader = new StreamReader(file' Encoding.UTF8' true))                      {                          while (streamReader.Peek() >= 0)                          {                              allLines.Add(streamReader.ReadLine());                          }                      }                        // Read the CSV file and import all the keys and values                      var lineCounter = 0;                      foreach (var csvline in allLines)                      {                          var line = csvline;                          if (line.StartsWith("\""))                          {                              line = line.Replace("\""' "");                          }                            lineCounter++;                            // Only split on the first comma' so the value strings can have commas in                          var keyValuePair = line.Split(commaSeparator' 2' StringSplitOptions.None);                            // Get the key and value                          var key = keyValuePair[0];                          var value = keyValuePair[1];                            if (string.IsNullOrEmpty(key))                          {                              // Ignore empty keys                              continue;                          }                            if (string.IsNullOrEmpty(value))                          {                              // Ignore empty values                              continue;                          }                            // Trim both the key and value                          key = key.Trim();                          value = value.Trim();                            // Create the resource key                          var resourceKey = new LocaleResourceKey                          {                              Name = key'                              DateAdded = DateTime.UtcNow'                          };                          context.LocaleResourceKey.Add(resourceKey);                            // Set the value for the resource                          var stringResource = new LocaleStringResource                          {                              Language = language'                              LocaleResourceKey = resourceKey'                              ResourceValue = value                          };                          context.LocaleStringResource.Add(stringResource);                      }                        // Save the language strings                      context.SaveChanges();                  }                        var saveRoles = false;                  // Create the admin role if it doesn't exist                  var adminRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.AdminRoleName);                  if (adminRole == null)                  {                      adminRole = new MembershipRole {RoleName = AppConstants.AdminRoleName};                      context.MembershipRole.Add(adminRole);                      saveRoles = true;                  }                    // Create the Standard role if it doesn't exist                  var standardRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == SiteConstants.Instance.StandardMembers);                  if (standardRole == null)                  {                      standardRole = new MembershipRole {RoleName = SiteConstants.Instance.StandardMembers };                      context.MembershipRole.Add(standardRole);                      saveRoles = true;                  }                    // Create the Guest role if it doesn't exist                  var guestRole = context.MembershipRole.FirstOrDefault(x => x.RoleName == AppConstants.GuestRoleName);                  if (guestRole == null)                  {                      guestRole = new MembershipRole {RoleName = AppConstants.GuestRoleName};                      context.MembershipRole.Add(guestRole);                      saveRoles = true;                  }                    if (saveRoles)                  {                      context.SaveChanges();                  }                    // Create an example Category                    if (!context.Category.Any())                  {                      // Doesn't exist so add the example category                      const string exampleCatName = "Example Category";                      var exampleCat = new Category                      {                          Name = exampleCatName'                          ModeratePosts = false'                          ModerateTopics = false'                          Slug = ServiceHelpers.CreateUrl(exampleCatName)'                          DateCreated = DateTime.UtcNow                      };                        context.Category.Add(exampleCat);                      context.SaveChanges();                  }                    // if the settings already exist then do nothing                  // If not then add default settings                  var currentSettings = context.Setting.FirstOrDefault();                  if (currentSettings == null)                  {                      // create the settings                      var settings = new Settings                      {                          ForumName = "MVCForum"'                          ForumUrl = "http://www.mydomain.com"'                          IsClosed = false'                          EnableRSSFeeds = true'                          DisplayEditedBy = true'                          EnablePostFileAttachments = false'                          EnableMarkAsSolution = true'                          EnableSpamReporting = true'                          EnableMemberReporting = true'                          EnableEmailSubscriptions = true'                          ManuallyAuthoriseNewMembers = false'                          EmailAdminOnNewMemberSignUp = true'                          TopicsPerPage = 20'                          PostsPerPage = 20'                          EnablePrivateMessages = true'                          MaxPrivateMessagesPerMember = 50'                          PrivateMessageFloodControl = 1'                          EnableSignatures = false'                          EnablePoints = true'                          PointsAllowedToVoteAmount = 1'                          PointsAllowedForExtendedProfile = 1'                          PointsAddedPerPost = 1'                          PointsAddedForSolution = 4'                          PointsDeductedNagativeVote = 2'                          PointsAddedPostiveVote = 2'                          AdminEmailAddress = "my@email.com"'                          NotificationReplyEmail = "noreply@myemail.com"'                          SMTPEnableSSL = false'                          Theme = "Metro"'                          NewMemberStartingRole = standardRole'                          DefaultLanguage = language'                          ActivitiesPerPage = 20'                          EnableAkisment = false'                          EnableSocialLogins = false'                          EnablePolls = true'                          MarkAsSolutionReminderTimeFrame = 7'                          EnableEmoticons = true'                          DisableStandardRegistration = false                      };                        context.Setting.Add(settings);                      context.SaveChanges();                  }                    // Create the initial category permissions                    // Edit Posts                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null)                  {                      var permission = new Permission {Name = SiteConstants.Instance.PermissionEditPosts};                      context.Permission.Add(permission);                        // NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions                        // Read Only                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionReadOnly};                          context.Permission.Add(p);                      }                        // Delete Posts                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDeletePosts};                          context.Permission.Add(p);                      }                        // Sticky Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateStickyTopics};                          context.Permission.Add(p);                      }                        // Lock Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionLockTopics};                          context.Permission.Add(p);                      }                        // Vote In Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionVoteInPolls};                          context.Permission.Add(p);                      }                        // Create Polls                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreatePolls};                          context.Permission.Add(p);                      }                        // Create Topics                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionCreateTopics};                          context.Permission.Add(p);                      }                        // Attach Files                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionAttachFiles};                          context.Permission.Add(p);                      }                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionDenyAccess};                          context.Permission.Add(p);                      }                        // === Global Permissions === //                        // Deny Access                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionEditMembers' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Insert Editor Images                      if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) ==                          null)                      {                          var p = new Permission {Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true};                          context.Permission.Add(p);                      }                        // Save to the database                      context.SaveChanges();                  }                    // If the admin user exists then don't do anything else                  const string adminUsername = "admin";                  if (context.MembershipUser.FirstOrDefault(x => x.UserName == adminUsername) == null)                  {                      // create the admin user and put him in the admin role                      var admin = new MembershipUser                      {                          Email = "you@email.com"'                          UserName = adminUsername'                          Password = "password"'                          IsApproved = true'                          DisableEmailNotifications = false'                          DisablePosting = false'                          DisablePrivateMessages = false'                          CreateDate = DateTime.UtcNow'                          LastLockoutDate = (DateTime) SqlDateTime.MinValue'                          LastPasswordChangedDate = (DateTime) SqlDateTime.MinValue'                          LastLoginDate = DateTime.UtcNow'                          LastActivityDate = null'                          IsLockedOut = false'                          Slug = ServiceHelpers.CreateUrl(adminUsername)                      };                        // Hash the password                      var salt = StringUtils.CreateSalt(AppConstants.SaltSize);                      var hash = StringUtils.GenerateSaltedHash(admin.Password' salt);                      admin.Password = hash;                      admin.PasswordSalt = salt;                        // Put the admin in the admin role                      admin.Roles = new List<MembershipRole> {adminRole};                        context.MembershipUser.Add(admin);                      context.SaveChanges();                        // Now add read me                      const string name = "Read Me";                      var category = context.Category.FirstOrDefault();                      var topic = new Topic                      {                          Category = category'                          CreateDate = DateTime.UtcNow'                          User = admin'                          IsSticky = true'                          Name = name'                          Slug = ServiceHelpers.CreateUrl(name)                      };                        context.Topic.Add(topic);                      context.SaveChanges();                        const string readMeText = @"<h2>Administration</h2>  <p>We have auto created an admin user for you to manage the site</p>  <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p>  <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p>  <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>  <h2>Documentation</h2>  <p>We have documentation on Github in the WIKI</p>  <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p>  <p>You can also grab the source code from Github too.</p>";                        var post = new Post                      {                          DateCreated = DateTime.UtcNow'                          DateEdited = DateTime.UtcNow'                          Topic = topic'                          IsTopicStarter = true'                          User = admin'                          PostContent = readMeText'                          SearchField = name                      };                        topic.LastPost = post;                        context.Post.Add(post);                      context.SaveChanges();                  }                }              else              {                  // ---- Do Data Updates here                    // Data to update on versions v1.7+                    // Insert Editor Images                  if (context.Permission.FirstOrDefault(x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null)                  {                      var p = new Permission { Name = SiteConstants.Instance.PermissionInsertEditorImages' IsGlobal = true };                      context.Permission.Add(p);                  }              }
Missing Default,MVCForum.Services.Data.UnitOfWork,UnitOfWork,C:\repos\leen3o_mvcforum\MVCForum.Services\Data\UnitOfWork\UnitOfWork.cs,Rollback,The following switch statement is missing a default case: switch (entry.State)                  {                      case System.Data.Entity.EntityState.Modified:                          entry.State = System.Data.Entity.EntityState.Unchanged;                          break;                      case System.Data.Entity.EntityState.Added:                          entry.State = System.Data.Entity.EntityState.Detached;                          break;                      case System.Data.Entity.EntityState.Deleted:                          // Note - problem with deleted entities:                          // When an entity is deleted its relationships to other entities are severed.                           // This includes setting FKs to null for nullable FKs or marking the FKs as conceptually null (don’t ask!)                           // if the FK property is not nullable. You’ll need to reset the FK property values to                           // the values that they had previously in order to re-form the relationships.                           // This may include FK properties in other entities for relationships where the                           // deleted entity is the principal of the relationship–e.g. has the PK                           // rather than the FK. I know this is a pain–it would be great if it could be made easier in the future' but for now it is what it is.                          entry.State = System.Data.Entity.EntityState.Unchanged;                          break;                  }
