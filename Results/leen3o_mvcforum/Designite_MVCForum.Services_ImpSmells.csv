Implementation smell,Namespace,Class,File,Method,Description
Long Method,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The method has 334 lines of code.
Complex Method,MVCForum.Services,EmailService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\EmailService.cs,ProcessMail,Cyclomatic complexity of the method is 9
Complex Method,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,Cyclomatic complexity of the method is 10
Complex Method,MVCForum.Services,MembershipService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,ErrorCodeToString,Cyclomatic complexity of the method is 10
Complex Method,MVCForum.Services,MembershipService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,ValidateUser,Cyclomatic complexity of the method is 8
Complex Method,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,Delete,Cyclomatic complexity of the method is 8
Complex Method,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,Delete,Cyclomatic complexity of the method is 10
Complex Method,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,Cyclomatic complexity of the method is 30
Complex Method,MVCForum.Services.Data.UnitOfWork,UnitOfWork,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\UnitOfWork\UnitOfWork.cs,Rollback,Cyclomatic complexity of the method is 10
Long Parameter List,MVCForum.Services,BadgeService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,BadgeService,The method has 6 parameters.
Long Parameter List,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,CategoryService,The method has 5 parameters.
Long Parameter List,MVCForum.Services,MembershipService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipService.cs,MembershipService,The method has 22 parameters.
Long Parameter List,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,PostService,The method has 11 parameters.
Long Parameter List,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,SearchPosts,The method has 5 parameters.
Long Parameter List,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPagedPostsByTopic,The method has 5 parameters.
Long Parameter List,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,RoleService,The method has 5 parameters.
Long Parameter List,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,TopicService,The method has 10 parameters.
Long Parameter List,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsByTag,The method has 5 parameters.
Long Parameter List,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByCsv,The method has 5 parameters.
Long Parameter List,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetMembersActivity,The method has 5 parameters.
Long Identifier,MVCForum.Services,PermissionService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PermissionService.cs,PermissionService,The length of the parameter categoryPermissionForRoleService is 32.
Long Identifier,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,CategoryService,The length of the parameter categoryPermissionForRoleService is 32.
Long Identifier,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,RoleService,The length of the parameter categoryPermissionForRoleService is 32.
Long Identifier,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,RoleService,The length of the parameter globalPermissionForRoleService is 30.
Long Statement,MVCForum.Services,BadgeService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BadgeService.cs,BadgeCanBeAwarded,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Badge.StartsWith' "BadgeCanBeAwarded-"' user.Id' "-"' badgeMapping.GetHashCode ()); " is 123.
Long Statement,MVCForum.Services,BannedEmailService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedEmailService.cs,GetAllPaged,The length of the statement  "		var results = _context.BannedEmail.Where (x => x.Email.ToLower ().Contains (search.ToLower ())).OrderByDescending (x => x.Email).Skip ((pageIndex - 1) * pageSize).Take (pageSize); " is 179.
Long Statement,MVCForum.Services,BannedEmailService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedEmailService.cs,GetAllWildCards,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.BannedEmail.Where (x => x.Email.StartsWith ("*@")).ToList ()); " is 125.
Long Statement,MVCForum.Services,BannedEmailService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedEmailService.cs,GetAllNonWildCards,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.BannedEmail.Where (x => !x.Email.StartsWith ("*@")).ToList ()); " is 126.
Long Statement,MVCForum.Services,CategoryNotificationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryNotificationService.cs,GetByCategory,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.CategoryNotification.AsNoTracking ().Where (x => x.Category.Id == category.Id).ToList ()); " is 153.
Long Statement,MVCForum.Services,CategoryNotificationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryNotificationService.cs,GetByUser,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.CategoryNotification.Where (x => x.User.Id == user.Id).ToList ()); " is 129.
Long Statement,MVCForum.Services,CategoryNotificationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryNotificationService.cs,GetByUserAndCategory,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.CategoryNotification.StartsWith' "GetByUserAndCategory-"' user.Id' "-"' category.Id' "-"' addTracking); " is 143.
Long Statement,MVCForum.Services,CategoryNotificationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryNotificationService.cs,Get,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.CategoryNotification.FirstOrDefault (cat => cat.Id == id)); " is 122.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GenerateProfileUpdatedActivity,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Activity.StartsWith' "GenerateProfileUpdatedActivity-"' activity.GetHashCode ()); " is 121.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,ConvertToSpecificActivities,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Activity.StartsWith' "ConvertToSpecificActivities-"' activities.GetHashCode ()' "-"' pageIndex' "-"' pageSize); " is 151.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,ConvertToSpecificActivities,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Activity.StartsWith' "ConvertToSpecificActivities-"' activities.GetHashCode ()); " is 120.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GetPagedGroupedActivities,The length of the statement  "		var results = _context.Activity.OrderByDescending (x => x.Timestamp).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 129.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,GetDataFieldByGuid,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Activity.Where (x => x.Data.Contains (guid.ToString ()))); " is 121.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,SearchPagedGroupedActivities,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Activity.StartsWith' "SearchPagedGroupedActivities-"' search' "-"' pageIndex' "-"' pageSize); " is 133.
Long Statement,MVCForum.Services,ActivityService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ActivityService.cs,SearchPagedGroupedActivities,The length of the statement  "		var results = _context.Activity.Where (x => x.Type.ToUpper ().Contains (search.ToUpper ())).OrderByDescending (x => x.Timestamp).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 189.
Long Statement,MVCForum.Services,BannedWordService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedWordService.cs,GetAll,The length of the statement  "			return _context.BannedWord.AsNoTracking ().Where (x => x.IsStopWord == true).OrderByDescending (x => x.DateAdded).ToList (); " is 124.
Long Statement,MVCForum.Services,BannedWordService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedWordService.cs,GetAll,The length of the statement  "		return _context.BannedWord.AsNoTracking ().Where (x => x.IsStopWord != true).OrderByDescending (x => x.DateAdded).ToList (); " is 124.
Long Statement,MVCForum.Services,BannedWordService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedWordService.cs,GetAllPaged,The length of the statement  "		var results = _context.BannedWord.AsNoTracking ().OrderBy (x => x.Word).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 132.
Long Statement,MVCForum.Services,BannedWordService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\BannedWordService.cs,GetAllPaged,The length of the statement  "		var results = _context.BannedWord.Where (x => x.Word.ToLower ().Contains (search.ToLower ())).OrderBy (x => x.Word).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 176.
Long Statement,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The length of the statement  "			if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) { " is 144.
Long Statement,MVCForum.Services,GlobalPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\GlobalPermissionForRoleService.cs,GetAll,The length of the statement  "		var catRowList = _context.GlobalPermissionForRole.Include (x => x.MembershipRole).Where (x => x.MembershipRole.Id == role.Id).ToList (); " is 136.
Long Statement,MVCForum.Services,GlobalPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\GlobalPermissionForRoleService.cs,Get,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.GlobalPermissionForRole.Include (x => x.MembershipRole).FirstOrDefault (x => x.Permission.Id == permId && x.MembershipRole.Id == roleId)); " is 201.
Long Statement,MVCForum.Services,GlobalPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\GlobalPermissionForRoleService.cs,Get,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.GlobalPermissionForRole.Include (x => x.MembershipRole).FirstOrDefault (x => x.Id == permId)); " is 157.
Long Statement,MVCForum.Services,FavouriteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\FavouriteService.cs,GetAll,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Favourite.Include (x => x.Post).Include (x => x.Topic.Category).Include (x => x.Member).ToList ()); " is 162.
Long Statement,MVCForum.Services,FavouriteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\FavouriteService.cs,Get,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Favourite.Include (x => x.Post.User).Include (x => x.Topic.Category).Include (x => x.Member).FirstOrDefault (x => x.Id == id)); " is 190.
Long Statement,MVCForum.Services,FavouriteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\FavouriteService.cs,GetAllByMember,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Favourite.Include (x => x.Post).Include (x => x.Topic.Category).Include (x => x.Member).Where (x => x.Member.Id == memberId).ToList ()); " is 199.
Long Statement,MVCForum.Services,FavouriteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\FavouriteService.cs,GetByMemberAndPost,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Favourite.Include (x => x.Post).Include (x => x.Topic.Category).Include (x => x.Member).FirstOrDefault (x => x.Member.Id == memberId && x.Post.Id == postId)); " is 221.
Long Statement,MVCForum.Services,FavouriteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\FavouriteService.cs,GetByTopic,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Favourite.Include (x => x.Post).Include (x => x.Topic.Category).Include (x => x.Member).AsNoTracking ().Where (x => x.Topic.Id == topicId).ToList ()); " is 213.
Long Statement,MVCForum.Services,FavouriteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\FavouriteService.cs,GetAllPostFavourites,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Favourite.Include (x => x.Post).Include (x => x.Topic.Category).Include (x => x.Member).Where (x => postIds.Contains (x.Post.Id)).ToList ()); " is 204.
Long Statement,MVCForum.Services,PostEditService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostEditService.cs,Get,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PostEdit.Include (x => x.EditedBy).Include (x => x.Post.User).FirstOrDefault (x => x.Id == id)); " is 159.
Long Statement,MVCForum.Services,PostEditService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostEditService.cs,GetByPost,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PostEdit.AsNoTracking ().Include (x => x.EditedBy).Include (x => x.Post.User).Where (x => x.Post.Id == postId).OrderByDescending (x => x.DateEdited).ToList ()); " is 223.
Long Statement,MVCForum.Services,PostEditService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostEditService.cs,GetByMember,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PostEdit.AsNoTracking ().Include (x => x.EditedBy).Include (x => x.Post.User).Where (x => x.EditedBy.Id == memberId).OrderByDescending (x => x.DateEdited).ToList ()); " is 229.
Long Statement,MVCForum.Services,TagNotificationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TagNotificationService.cs,GetByTag,The length of the statement  "	return _context.TagNotification.Include (x => x.User).Where (x => tagIds.Contains (x.Tag.Id)).AsNoTracking ().ToList (); " is 120.
Long Statement,MVCForum.Services,PollAnswerService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PollAnswerService.cs,GetAllPollAnswersByPoll,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PollAnswer.Include (x => x.Poll).AsNoTracking ().Where (x => x.Poll.Id == poll.Id).ToList ()); " is 157.
Long Statement,MVCForum.Services,PollVoteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PollVoteService.cs,HasUserVotedAlready,The length of the statement  "		var vote = _context.PollVote.Include (x => x.PollAnswer).Include (x => x.User).FirstOrDefault (x => x.PollAnswer.Id == answerId && x.User.Id == userId); " is 152.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,Delete,The length of the statement  "	var points = _context.MembershipUserPoints.Include (x => x.User).FirstOrDefault (x => x.Points == amount && x.User.Id == user.Id); " is 130.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,Delete,The length of the statement  "	var mp = _context.MembershipUserPoints.Include (x => x.User).Where (x => x.User.Id == user.Id && x.PointsFor == type && x.PointsForId == referenceId); " is 150.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,Add,The length of the statement  "			var alreadyHasThisPoint = GetByUser (points.User).Any (x => x.PointsFor == points.PointsFor && x.PointsForId == points.PointsForId); " is 132.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetCurrentWeeksPoints,The length of the statement  "		var results = _context.MembershipUserPoints.Include (x => x.User).Where (x => x.DateAdded >= start && x.DateAdded < end).ToList (); " is 131.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetCurrentWeeksPoints,The length of the statement  "		return results.GroupBy (x => x.User).ToDictionary (x => x.Key' x => x.Select (p => p.Points).Sum ()).OrderByDescending (x => x.Value).Take ((int)amountToTake).ToDictionary (x => x.Key' x => x.Value); " is 199.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetThisYearsPoints,The length of the statement  "		return results.GroupBy (x => x.User).ToDictionary (x => x.Key' x => x.Select (p => p.Points).Sum ()).OrderByDescending (x => x.Value).Take ((int)amountToTake).ToDictionary (x => x.Key' x => x.Value); " is 199.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetAllTimePoints,The length of the statement  "		return results.GroupBy (x => x.User).ToDictionary (x => x.Key' x => x.Select (p => p.Points).Sum ()).OrderByDescending (x => x.Value).Take ((int)amountToTake).ToDictionary (x => x.Key' x => x.Value); " is 199.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetAllTimePointsNegative,The length of the statement  "		return results.GroupBy (x => x.User).ToDictionary (x => x.Key' x => x.Select (p => p.Points).Sum ()).OrderBy (x => x.Value).Take ((int)amountToTake).ToDictionary (x => x.Key' x => x.Value); " is 189.
Long Statement,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,UserPoints,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.MembershipUserPoints.Include (x => x.User).AsNoTracking ().Where (x => x.User.Id == user.Id).Sum (x => x.Points)); " is 177.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,Get,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.Include (x => x.UserTo).Include (x => x.UserFrom).FirstOrDefault (x => x.Id == id)); " is 162.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetUsersPrivateMessages,The length of the statement  "	var query = _context.PrivateMessage.AsNoTracking ().Include (x => x.UserFrom).Include (x => x.UserTo).Where (x => (x.UserTo.Id == user.Id && x.IsSentMessage != true) || (x.UserFrom.Id == user.Id && x.IsSentMessage == true)).Select (x => new PrivateMessageListItem { " is 265.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetUsersPrivateMessages,The length of the statement  "	}).GroupBy (x => x.User.Id).Select (x => x.OrderByDescending (d => d.Date).FirstOrDefault ()).OrderByDescending (x => x.Date); " is 126.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetUsersPrivateMessages,The length of the statement  "	var query = _context.PrivateMessage.AsNoTracking ().Include (x => x.UserFrom).Include (x => x.UserTo).Where (x => (x.UserFrom.Id == fromUser.Id && x.UserTo.Id == toUser.Id && x.IsSentMessage != true) || (x.UserFrom.Id == toUser.Id && x.UserTo.Id == fromUser.Id && x.IsSentMessage == true)).OrderByDescending (x => x.DateSent); " is 326.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetLastSentPrivateMessage,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.AsNoTracking ().Include (x => x.UserTo).Include (x => x.UserFrom).FirstOrDefault (x => x.UserFrom.Id == id)); " is 187.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetMatchingSentPrivateMessage,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.PrivateMessage.StartsWith' "GetMatchingSentPrivateMessage-"' date.ToString ("d")' "-"' senderId' "-"' receiverId); " is 154.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetMatchingSentPrivateMessage,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.Include (x => x.UserTo).Include (x => x.UserFrom).FirstOrDefault (x => x.DateSent == date && x.UserFrom.Id == senderId && x.UserTo.Id == receiverId && x.IsSentMessage == true)); " is 255.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetAllSentByUser,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.AsNoTracking ().Include (x => x.UserTo).Include (x => x.UserFrom).Where (x => x.UserFrom.Id == id).OrderByDescending (x => x.DateSent).ToList ()); " is 224.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,NewPrivateMessageCount,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.AsNoTracking ().Include (x => x.UserTo).Include (x => x.UserFrom).Where (x => x.UserTo.Id == userId && !x.IsRead && x.IsSentMessage != true).GroupBy (x => x.UserFrom.Id).Count ()); " is 258.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetAllReceivedByUser,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.AsNoTracking ().Where (x => x.UserTo.Id == id).OrderByDescending (x => x.DateSent).ToList ()); " is 172.
Long Statement,MVCForum.Services,PrivateMessageService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PrivateMessageService.cs,GetAllByUserToAnotherUser,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.PrivateMessage.AsNoTracking ().Include (x => x.UserTo).Include (x => x.UserFrom).Where (x => x.UserFrom.Id == senderId && x.UserTo.Id == receiverId).OrderByDescending (x => x.DateSent).ToList ()); " is 259.
Long Statement,MVCForum.Services,TopicTagService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicTagService.cs,GetContains,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.TopicTag.AsNoTracking ().Where (x => x.Tag.ToUpper ().Contains (term.ToUpper ())).Take (amountToTake).ToList ()); " is 176.
Long Statement,MVCForum.Services,TopicTagService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicTagService.cs,GetPagedGroupedTags,The length of the statement  "	var results = _context.TopicTag.OrderByDescending (x => x.Tag).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 123.
Long Statement,MVCForum.Services,TopicTagService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicTagService.cs,SearchPagedGroupedTags,The length of the statement  "	var results = _context.TopicTag.Where (x => x.Tag.Contains (search)).OrderBy (x => x.Tag).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 150.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,CheckExists,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.CategoryPermissionForRole.StartsWith' "CheckExists-"' categoryPermissionForRole.Id); " is 124.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,CheckExists,The length of the statement  "		if (categoryPermissionForRole.Permission != null && categoryPermissionForRole.Category != null && categoryPermissionForRole.MembershipRole != null) { " is 149.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,CheckExists,The length of the statement  "			return _context.CategoryPermissionForRole.Include (x => x.MembershipRole).Include (x => x.Category).FirstOrDefault (x => x.Category.Id == categoryPermissionForRole.Category.Id && x.Permission.Id == categoryPermissionForRole.Permission.Id && x.MembershipRole.Id == categoryPermissionForRole.MembershipRole.Id); " is 309.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,GetCategoryRow,The length of the statement  "		var catRowList = _context.CategoryPermissionForRole.Include (x => x.MembershipRole).Include (x => x.Category).Include (x => x.Permission).AsNoTracking ().Where (x => x.Category.Id == cat.Id && x.MembershipRole.Id == role.Id).ToList (); " is 235.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,GetByCategory,The length of the statement  "		return _context.CategoryPermissionForRole.Include (x => x.MembershipRole).Include (x => x.Category).Include (x => x.Permission).Where (x => x.Category.Id == categoryId).ToList (); " is 179.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,GetByRole,The length of the statement  "		return _context.CategoryPermissionForRole.Include (x => x.MembershipRole).Include (x => x.Category).Include (x => x.Permission).Where (x => x.MembershipRole.Id == roleId); " is 171.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,GetByPermission,The length of the statement  "		return _context.CategoryPermissionForRole.Include (x => x.MembershipRole).Include (x => x.Category).Include (x => x.Permission).Where (x => x.Permission.Id == permId); " is 167.
Long Statement,MVCForum.Services,CategoryPermissionForRoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryPermissionForRoleService.cs,Get,The length of the statement  "		return _context.CategoryPermissionForRole.Include (x => x.MembershipRole).Include (x => x.Category).Include (x => x.Permission).FirstOrDefault (cat => cat.Id == id); " is 165.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValuesForKey,The length of the statement  "	var totalCount = _context.LocaleStringResource.Join (_context.LocaleResourceKey' strRes => strRes.LocaleResourceKey.Id' resKey => resKey.Id' (strRes' resKey) => new { " is 166.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValuesForKey,The length of the statement  "	}).Count (joinResult => joinResult.LocaleStringResource.Language.Id == languageId && joinResult.LocaleResourceKey.Name.ToUpper ().Contains (search.ToUpper ())); " is 160.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValuesForKey,The length of the statement  "	var results = _context.LocaleStringResource.Join (_context.LocaleResourceKey' // The sequence to join to the first sequence. " is 124.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValuesForKey,The length of the statement  "	).Where (joinResult => joinResult.LocaleStringResource.Language.Id == languageId && joinResult.LocaleResourceKey.Name.ToUpper ().Contains (search.ToUpper ())).OrderBy (joinResult => joinResult.LocaleResourceKey.Name).Skip ((pageIndex - 1) * pageSize).Take (pageSize).Select (item => item.LocaleStringResource).ToList (); " is 320.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,Update,The length of the statement  "		throw new ApplicationException ("Object already exists in context - you do not need to call Update. Save occurs on Commit"); " is 124.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,Update,The length of the statement  "		throw new ApplicationException ("Object already exists in context - you do not need to call Update. Save occurs on Commit"); " is 124.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllValues,The length of the statement  "	var totalCount = _context.LocaleStringResource.Join (_context.LocaleResourceKey' strRes => strRes.LocaleResourceKey.Id' resKey => resKey.Id' (strRes' resKey) => new { " is 166.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllValues,The length of the statement  "	var results = _context.LocaleStringResource.Join (_context.LocaleResourceKey' strRes => strRes.LocaleResourceKey.Id' resKey => resKey.Id' (strRes' resKey) => new { " is 163.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllValues,The length of the statement  "	}).Where (joinResult => joinResult.LocaleStringResource.Language.Id == languageId).OrderBy (joinResult => joinResult.LocaleResourceKey.Name).Skip ((pageIndex - 1) * pageSize).Take (pageSize).Select (item => item.LocaleStringResource).ToList (); " is 244.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllValuesForKey,The length of the statement  "	return _context.LocaleStringResource.Include (x => x.Language).Include (x => x.LocaleResourceKey).Where (strRes => strRes.LocaleResourceKey.Id == resourceKeyId).Select (strRes => strRes).ToList (); " is 197.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllResourceKeys,The length of the statement  "	var results = _context.LocaleResourceKey.OrderBy (x => x.Name).Skip ((pageIndex - 1) * pageSize).Take (pageSize).Select (item => item).ToList (); " is 145.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceValues,The length of the statement  "	var results = _context.LocaleStringResource.Include (x => x.Language).Include (x => x.LocaleResourceKey).Where (x => x.Language.Id == languageId).Where (x => x.ResourceValue.ToUpper ().Contains (search.ToUpper ())).OrderBy (x => x.ResourceValue).Skip ((pageIndex - 1) * pageSize).Take (pageSize).Select (item => item).ToList (); " is 328.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceKeys,The length of the statement  "	var results = _context.LocaleResourceKey.Where (resKey => resKey.Name.ToUpper ().Contains (search.ToUpper ())).OrderBy (resKey => resKey.Name).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 203.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceKeys,The length of the statement  "	var totalCount = _context.LocaleStringResource.Join (_context.LocaleResourceKey' strRes => strRes.LocaleResourceKey.Id' resKey => resKey.Id' (strRes' resKey) => new { " is 166.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceKeys,The length of the statement  "	}).Count (joinResult => joinResult.LocaleStringResource.Language.Id == languageId && joinResult.LocaleResourceKey.Name.ToUpper ().Contains (search.ToUpper ())); " is 160.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceKeys,The length of the statement  "	var results = _context.LocaleStringResource.Join (_context.LocaleResourceKey' strRes => strRes.LocaleResourceKey.Id' resKey => resKey.Id' (strRes' resKey) => new { " is 163.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,SearchResourceKeys,The length of the statement  "	}).Where (joinResult => joinResult.LocaleStringResource.Language.Id == languageId && joinResult.LocaleResourceKey.Name.ToUpper ().Contains (search.ToUpper ())).OrderBy (joinResult => joinResult.LocaleResourceKey.Name).Skip ((pageIndex - 1) * pageSize).Take (pageSize).Select (item => item.LocaleStringResource).ToList (); " is 321.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The length of the statement  "			var stringResource = language.LocaleStringResources.FirstOrDefault (res => res.LocaleResourceKey.Name == resourceKey.Name); " is 123.
Long Statement,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,GetAllLanguageStringsByLangauge,The length of the statement  "	var results = _context.LocaleStringResource.Include (x => x.Language).Include (x => x.LocaleResourceKey).Where (x => x.Language.Id == languageId).Join (_context.LocaleResourceKey' strRes => strRes.LocaleResourceKey.Id' resKey => resKey.Id' (strRes' resKey) => new { " is 265.
Long Statement,MVCForum.Services,PermissionService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PermissionService.cs,GetAll,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Permission.AsNoTracking ().OrderBy (x => x.Name).ToList ()); " is 123.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetSubCategories,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Category.StartsWith' "GetSubCategories"' "-"' category.GetHashCode ()' "-"' level); " is 123.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetSubCategories,The length of the statement  "		var cats = allCategories.Where (x => x.ParentCategory != null && x.ParentCategory.Id == category.Id).OrderBy (x => x.SortOrder); " is 128.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetBaseSelectListCategories,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Category.StartsWith' "GetBaseSelectListCategories"' "-"' allowedCategories.GetHashCode ()); " is 131.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetAllMainCategories,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Category.Include (x => x.ParentCategory).Include (x => x.Topics.Select (l => l.LastPost)).Include (x => x.Topics.Select (l => l.Posts)).Where (cat => cat.ParentCategory == null).OrderBy (x => x.SortOrder).ToList ()); " is 279.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,Add,The length of the statement  "	category.Slug = ServiceHelpers.GenerateSlug (category.Name' GetBySlugLike (ServiceHelpers.CreateUrl (category.Name))' null); " is 124.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,Get,The length of the statement  "			categories = _context.Category.AsNoTracking ().Include (x => x.Topics.Select (l => l.LastPost.User)).Include (x => x.ParentCategory).Where (x => ids.Contains (x.Id)).ToList (); " is 176.
Long Statement,MVCForum.Services,CategoryService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\CategoryService.cs,GetAllDeepSubCategories,The length of the statement  "		return _context.Category.Where (x => x.Path != null && x.Path.ToLower ().Contains (catGuid)).OrderBy (x => x.SortOrder).ToList (); " is 130.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetTopicStarterPost,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.Post.Include (x => x.Topic.Category).Include (x => x.User).FirstOrDefault (x => x.Topic.Id == topicId && x.IsTopicStarter)); " is 187.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetLowestVotedPost,The length of the statement  "		return _context.Post.Include (x => x.Topic).Include (x => x.User).Where (x => x.VoteCount < 0 && x.Pending != true).OrderBy (x => x.VoteCount).Take (amountToTake).ToList (); " is 173.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetHighestVotedPost,The length of the statement  "		return _context.Post.Include (x => x.Topic).Include (x => x.User).Where (x => x.VoteCount > 0 && x.Pending != true).OrderByDescending (x => x.VoteCount).Take (amountToTake).ToList (); " is 183.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetByMember,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Post.StartsWith' "GetByMember-"' amountToTake' "-"' allowedCategories.GetHashCode ()); " is 126.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetByMember,The length of the statement  "		return _context.Post.Include (x => x.Topic.LastPost.User).Include (x => x.Topic.Category).Include (x => x.User).Where (x => x.User.Id == memberId && x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)).OrderByDescending (x => x.DateCreated).Take (amountToTake).ToList (); " is 295.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetReplyToPosts,The length of the statement  "		// We don't allow topic starters in the list OR solutions. As if it's marked as a solution' it's a solution for that topic " is 122.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetReplyToPosts,The length of the statement  "		return _context.Post.Where (x => x.InReplyTo != null & x.InReplyTo == postId && !x.IsTopicStarter && !x.IsSolution).ToList (); " is 126.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByFavouriteCount,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Post.StartsWith' "GetPostsByFavouriteCount-"' postsByMemberId' "-"' minAmountOfFavourites); " is 131.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByFavouriteCount,The length of the statement  "		return _context.Post.Include (x => x.Topic.LastPost.User).Include (x => x.Topic.Category).Include (x => x.User).Include (x => x.Favourites.Select (f => f.Member)).Where (x => x.User.Id == postsByMemberId && x.Favourites.Count (c => c.Member.Id != postsByMemberId) >= minAmountOfFavourites); " is 290.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsFavouritedByOtherMembers,The length of the statement  "		return _context.Post.Include (x => x.Topic.LastPost.User).Include (x => x.Topic.Category).Include (x => x.User).Include (x => x.Favourites.Select (f => f.Member)).Where (x => x.User.Id == postsByMemberId && x.Favourites.Any (c => c.Member.Id != postsByMemberId)); " is 263.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,SearchPosts,The length of the statement  "	var query = _context.Post.AsExpandable ().Include (x => x.Topic.Category).Include (x => x.User).AsNoTracking ().Where (x => x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)); " is 201.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,SearchPosts,The length of the statement  "		postFilter = postFilter.Or (x => x.PostContent.ToUpper ().Contains (sTerm) || x.SearchField.ToUpper ().Contains (sTerm)); " is 121.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPagedPostsByTopic,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Post.StartsWith' "GetPagedPostsByTopic-"' pageIndex' "-"' pageSize' "-"' amountToTake' "-"' topicId' "-"' order); " is 153.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPagedPostsByTopic,The length of the statement  "		var results = _context.Post.Include (x => x.User).Include (x => x.Topic).AsNoTracking ().Where (x => x.Topic.Id == topicId && !x.IsTopicStarter && x.Pending != true); " is 166.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPagedPendingPosts,The length of the statement  "	var results = _context.Post.Include (x => x.Topic.Category).Include (x => x.User).AsNoTracking ().Where (x => x.Pending == true && allowedCatIds.Contains (x.Topic.Category.Id)).OrderBy (x => x.DateCreated).Skip ((pageIndex - 1) * pageSize).Take (pageSize); " is 256.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPendingPosts,The length of the statement  "	var allPendingPosts = _context.Post.AsNoTracking ().Include (x => x.Topic.Category).Where (x => x.Pending == true && allowedCatIds.Contains (x.Topic.Category.Id)).ToList (); " is 173.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPendingPostsCount,The length of the statement  "		return _context.Post.AsNoTracking ().Include (x => x.Topic.Category).Count (x => x.Pending == true && allowedCatIds.Contains (x.Topic.Category.Id)); " is 148.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetSolutionsByMember,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Post.StartsWith' "GetSolutionsByMember-"' memberId' "-"' allowedCategories.GetHashCode ()); " is 131.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetSolutionsByMember,The length of the statement  "		return _context.Post.Include (x => x.Topic.Category).Include (x => x.Topic.LastPost.User).Include (x => x.User).Where (x => x.User.Id == memberId).Where (x => x.IsSolution && x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)).OrderByDescending (x => x.DateCreated).ToList (); " is 301.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,PostCount,The length of the statement  "		return _context.Post.Include (x => x.Topic).AsNoTracking ().Count (x => x.Pending != true && x.Topic.Pending != true && allowedCatIds.Contains (x.Topic.Category.Id)); " is 166.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,Get,The length of the statement  "		return _context.Post.Include (x => x.Topic.Category).Include (x => x.Topic.LastPost.User).Include (x => x.User).FirstOrDefault (x => x.Id == postId); " is 149.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByTopics,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Post.StartsWith' "GetPostsByTopics-"' topicIds.GetHashCode ()' "-"' allowedCategories.GetHashCode ()); " is 142.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByTopics,The length of the statement  "		return _context.Post.Include (x => x.Topic.Category).Include (x => x.Topic.LastPost).Include (x => x.User).AsNoTracking ().Where (x => topicIds.Contains (x.Topic.Id) && x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)).OrderByDescending (x => x.DateCreated).ToList (); " is 295.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,AddNewPost,The length of the statement  "	if (permissions [SiteConstants.Instance.PermissionDenyAccess].IsTicked || permissions [SiteConstants.Instance.PermissionReadOnly].IsTicked) { " is 141.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,SortSearchField,The length of the statement  "		formattedSearchField = !string.IsNullOrEmpty (formattedSearchField) ? string.Concat (formattedSearchField' " "' sb.ToString ()) : sb.ToString (); " is 145.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByMember,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Post.StartsWith' "GetPostsByMember-"' memberId' "-"' allowedCategories.GetHashCode ()); " is 127.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByMember,The length of the statement  "		return _context.Post.Include (x => x.Topic.Category).Include (x => x.User).AsNoTracking ().Where (x => x.User.Id == memberId && x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)).OrderByDescending (x => x.DateCreated).ToList (); " is 254.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetAllSolutionPosts,The length of the statement  "		return _context.Post.Include (x => x.Topic.Category).Include (x => x.User).AsNoTracking ().Where (x => x.IsSolution && x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)).OrderByDescending (x => x.DateCreated).ToList (); " is 245.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetPostsByTopic,The length of the statement  "		return _context.Post.Include (x => x.Topic).Include (x => x.User).Where (x => x.Topic.Id == topicId && x.Pending != true).OrderByDescending (x => x.DateCreated).ToList (); " is 171.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,GetAllWithTopics,The length of the statement  "		return _context.Post.Include (x => x.Topic.Category).Include (x => x.User).Where (x => x.Pending != true).Where (x => allowedCatIds.Contains (x.Topic.Category.Id)); " is 164.
Long Statement,MVCForum.Services,PostService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\PostService.cs,PassedPostFloodTest,The length of the statement  "	return _context.Post.Include (x => x.User).Count (x => x.User.Id == user.Id && x.DateCreated >= floodWindow && !x.IsTopicStarter) <= 0; " is 135.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,AllRoles,The length of the statement  "	return _cacheService.CachePerRequest (cacheKey' () => _context.MembershipRole.OrderByDescending (x => x.RoleName).ToList ()); " is 125.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetRole,The length of the statement  "			return _context.MembershipRole.Include (x => x.CategoryPermissionForRoles.Select (p => p.Permission)).Include (x => x.CategoryPermissionForRoles.Select (p => p.Category)).Include (x => x.GlobalPermissionForRole.Select (p => p.Permission)).AsNoTracking ().FirstOrDefault (y => y.RoleName.Contains (rolename)); " is 308.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetAdminPermissions,The length of the statement  "				IsTicked = (permission.Name != SiteConstants.Instance.PermissionDenyAccess && permission.Name != SiteConstants.Instance.PermissionReadOnly)' " is 140.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetGuestPermissions,The length of the statement  "		var denyAccessPermission = role.CategoryPermissionForRoles.FirstOrDefault (x => x.Category.Id == category.Id && x.Permission.Name == SiteConstants.Instance.PermissionDenyAccess && x.MembershipRole.Id == role.Id); " is 212.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetGuestPermissions,The length of the statement  "		var categoryPermissionForRole = categoryPermissions.FirstOrDefault (x => x.Permission.Name == SiteConstants.Instance.PermissionDenyAccess); " is 139.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetOtherPermissions,The length of the statement  "			categoryPermissions.Add (categoryRowPermissions.ContainsKey (permission.Id) ? categoryRowPermissions [permission.Id].Value : new CategoryPermissionForRole { " is 156.
Long Statement,MVCForum.Services,RoleService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\RoleService.cs,GetOtherPermissions,The length of the statement  "		globalPermissions.Add (globalRowPermissions.ContainsKey (permission.Id) ? globalRowPermissions [permission.Id].Value : new GlobalPermissionForRole { " is 148.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetAll,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Where (x => allowedCatIds.Contains (x.Category.Id) && x.Pending != true).ToList (); " is 206.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetAllSelectList,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Topic.StartsWith' "GetAllSelectList-"' allowedCategories.GetHashCode ()' "-"' amount); " is 126.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetAllSelectList,The length of the statement  "		return _context.Topic.AsNoTracking ().Include (x => x.Category).Where (x => allowedCatIds.Contains (x.Category.Id) && x.Pending != true).OrderByDescending (x => x.CreateDate).Take (amount).Select (x => new SelectListItem { " is 222.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetHighestViewedTopics,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).AsNoTracking ().Where (x => x.Pending != true).Where (x => allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.Views).Take (amountToTake).ToList (); " is 285.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPopularTopics,The length of the statement  "	var topics = _context.Topic.Include (x => x.Category).Include (x => x.LastPost).Include (x => x.Posts).Include (x => x.User).Where (x => allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.Posts.Count (c => c.DateCreated >= from && c.DateCreated <= to)).ThenByDescending (x => x.Posts.Select (v => v.VoteCount).Sum ()).ThenByDescending (x => x.Views).Take (amountToShow).ToList (); " is 395.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,Add,The length of the statement  "	topic.Slug = ServiceHelpers.GenerateSlug (topic.Name' GetTopicBySlugLike (ServiceHelpers.CreateUrl (topic.Name))' null); " is 120.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTodaysTopics,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).AsNoTracking ().Where (c => c.CreateDate >= DateTime.Today && c.Pending != true).Where (x => allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.CreateDate).Take (amountToTake).ToList (); " is 302.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetMarkAsSolutionReminderList,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.User).Include (x => x.Posts).Where (x => x.CreateDate <= datefrom && !x.Solved && x.Posts.Count > 1 && x.SolvedReminderSent != true).Select (x => new MarkAsSolutionReminder { " is 238.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetRecentTopics,The length of the statement  "	var results = _context.Topic.AsNoTracking ().Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.LastPost.DateCreated).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 327.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetRecentRssTopics,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).AsNoTracking ().Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).OrderByDescending (s => s.CreateDate).Take (amountToTake).ToList (); " is 265.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByUser,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).AsNoTracking ().Where (x => x.User.Id == memberId).Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).ToList (); " is 264.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByLastPost,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Where (x => postIds.Contains (x.LastPost.Id) && allowedCatIds.Contains (x.Category.Id)).Where (x => x.Pending != true).ToList (); " is 230.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsByCategory,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).AsNoTracking ().Where (x => x.Category.Id == categoryId).Where (x => x.Pending != true).OrderByDescending (x => x.IsSticky).ThenByDescending (x => x.LastPost.DateCreated).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 361.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedPendingTopics,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).AsNoTracking ().Where (x => x.Pending == true && allowedCatIds.Contains (x.Category.Id)).OrderBy (x => x.LastPost.DateCreated).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 317.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPendingTopics,The length of the statement  "	var cacheKey = string.Concat (CacheKeys.Topic.StartsWith' "GetPendingTopics-"' allowedCategories.GetHashCode ()' "-"' usersRole.Id); " is 132.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPendingTopics,The length of the statement  "		var allPendingTopics = _context.Topic.AsNoTracking ().Include (x => x.Category).Where (x => x.Pending == true && allowedCatIds.Contains (x.Category.Id)).ToList (); " is 163.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPendingTopicsCount,The length of the statement  "		return _context.Topic.AsNoTracking ().Include (x => x.Category).Count (x => x.Pending == true && allowedCatIds.Contains (x.Category.Id)); " is 137.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetRssTopicsByCategory,The length of the statement  "	var topics = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Where (x => x.Category.Id == categoryId).Where (x => x.Pending != true).OrderByDescending (x => x.LastPost.DateCreated).Take (amountToTake).ToList (); " is 279.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsByTag,The length of the statement  "	var total = _context.Topic.AsNoTracking ().Count (e => e.Tags.Any (t => t.Slug == tag) && allowedCatIds.Contains (e.Category.Id)); " is 130.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsByTag,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Include (x => x.Tags).AsNoTracking ().Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.IsSticky).ThenByDescending (x => x.LastPost.DateCreated).Where (e => e.Tags.Any (t => t.Slug.Equals (tag))).Take (pageSize).Skip ((pageIndex - 1) * pageSize).ToList (); " is 435.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,SearchTopics,The length of the statement  "	var topics = _context.Topic.Include (x => x.Posts).Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).AsNoTracking ().Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).Where (x => x.Posts.Any (p => p.Pending != true)); " is 269.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,SearchTopics,The length of the statement  "		topics = topics.Where (x => x.Posts.Any (p => p.PostContent.ToUpper ().Contains (sTerm)) || x.Name.ToUpper ().Contains (sTerm)); " is 128.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByCsv,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Join (topicIds' topic => topic.Id' guidFromCsv => guidFromCsv' (topic' guidFromCsv) => new { " is 222.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByCsv,The length of the statement  "	}).Where (x => x.guidFromCsv == x.topic.Id).Where (x => x.topic.Pending != true && allowedCatIds.Contains (x.topic.Category.Id)).OrderByDescending (x => x.topic.LastPost.DateCreated).Skip ((pageIndex - 1) * pageSize).Take (pageSize).Select (x => x.topic).ToList (); " is 265.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetMembersActivity,The length of the statement  "	var total = _context.Post.Include (x => x.Topic.Category).Include (x => x.Topic.LastPost.User).Include (x => x.Topic.Poll).Include (x => x.User).AsNoTracking ().Where (x => x.User.Id == memberGuid && x.Pending != true && allowedCatIds.Contains (x.Topic.Category.Id)).DistinctBy (x => x.Topic.Id).Count (); " is 305.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetMembersActivity,The length of the statement  "	var results = _context.Post.Include (x => x.Topic.Category).Include (x => x.Topic.LastPost.User).Include (x => x.Topic.Poll).Include (x => x.User).AsNoTracking ().Where (x => x.User.Id == memberGuid && x.Pending != true && allowedCatIds.Contains (x.Topic.Category.Id)).DistinctBy (x => x.Topic.Id).OrderByDescending (x => x.DateCreated).Skip ((pageIndex - 1) * pageSize).Take (pageSize).ToList (); " is 397.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicsByCsv,The length of the statement  "	var topics = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Where (x => topicIds.Contains (x.Id)).Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.LastPost.DateCreated).Take (amountToTake).ToList (); " is 318.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicBySlug,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).FirstOrDefault (x => x.Slug == slug); " is 160.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,Get,The length of the statement  "		var topic = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).FirstOrDefault (x => x.Id == topicId); " is 166.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,Get,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Where (x => topicIds.Contains (x.Id) && allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.LastPost.DateCreated).ToList (); " is 261.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,TopicCount,The length of the statement  "		return _context.Topic.Include (x => x.Category).AsNoTracking ().Count (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)); " is 137.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetSolvedTopicsByMember,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Include (x => x.Posts).AsNoTracking ().Where (x => x.User.Id == memberId).Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).ToList (); " is 287.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetAllTopicsByCategory,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).AsNoTracking ().Where (x => x.Category.Id == categoryId).Where (x => x.Pending != true).ToList (); " is 228.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPagedTopicsAll,The length of the statement  "	var results = _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).AsNoTracking ().Where (x => x.Pending != true && allowedCatIds.Contains (x.Category.Id)).OrderByDescending (x => x.IsSticky).ThenByDescending (x => x.LastPost.DateCreated).Take (pageSize).Skip ((pageIndex - 1) * pageSize).ToList (); " is 362.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetTopicBySlugLike,The length of the statement  "	return _context.Topic.Include (x => x.Category).Include (x => x.LastPost.User).Include (x => x.User).Include (x => x.Poll).Where (x => x.Slug.Contains (slug)).ToList (); " is 169.
Long Statement,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,PassedTopicFloodTest,The length of the statement  "	var matchingTopicTitles = _context.Topic.Include (x => x.User).AsNoTracking ().Count (x => x.User.Id == user.Id && x.Name.Equals (topicTitle) && x.CreateDate >= floodWindow); " is 174.
Long Statement,MVCForum.Services,VoteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\VoteService.cs,GetVotesByPosts,The length of the statement  "		return _context.Vote.Include (x => x.VotedByMembershipUser).Include (x => x.User).Include (x => x.Post).AsNoTracking ().Where (x => postIds.Contains (x.Post.Id)).ToList (); " is 172.
Long Statement,MVCForum.Services,VoteService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\VoteService.cs,GetVotesByPost,The length of the statement  "	return _context.Vote.Include (x => x.VotedByMembershipUser).Include (x => x.User).Include (x => x.Post).Where (x => x.Post.Id == postId).ToList (); " is 147.
Long Statement,MVCForum.Services.Data.Context,MVCForumContext,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Context\MVCForumContext.cs,OnModelCreating,The length of the statement  "	// http://stackoverflow.com/questions/7924758/entity-framework-creates-a-plural-table-name-but-the-view-expects-a-singular-ta " is 125.
Long Statement,MVCForum.Services.Data.Context,MVCForumContext,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Context\MVCForumContext.cs,OnModelCreating,The length of the statement  "	var typesToRegister = Assembly.GetExecutingAssembly ().GetTypes ().Where (type => !string.IsNullOrEmpty (type.Namespace)).Where (type => type.BaseType != null && type.BaseType.IsGenericType && type.BaseType.GetGenericTypeDefinition () == typeof(EntityTypeConfiguration<>)); " is 273.
Long Statement,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The length of the statement  "<p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p>" is 144.
Long Statement,MVCForum.Services.Data.UnitOfWork,UnitOfWork,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\UnitOfWork\UnitOfWork.cs,Rollback,The length of the statement  "			// rather than the FK. I know this is a pain–it would be great if it could be made easier in the future' but for now it is what it is. " is 134.
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: for (var i = 0; i < inputText.Length; i++) {  	var strEmote = string.Empty;  	foreach (string emote in emoticons.Keys) {  		if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  			var startIndex = (i >= 3 ? 3 : i);  			var length = (startIndex * 2);  			var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  			if (!subStringExtraValue.Contains ("//")) {  				strEmote = emote;  				break;  			}  		}  	}  	if (strEmote.Length != 0) {  		sb.Append ();  		i += strEmote.Length - 1;  	} else {  		sb.Append (inputText [i]);  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: for (var i = 0; i < inputText.Length; i++) {  	var strEmote = string.Empty;  	foreach (string emote in emoticons.Keys) {  		if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  			var startIndex = (i >= 3 ? 3 : i);  			var length = (startIndex * 2);  			var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  			if (!subStringExtraValue.Contains ("//")) {  				strEmote = emote;  				break;  			}  		}  	}  	if (strEmote.Length != 0) {  		sb.Append ();  		i += strEmote.Length - 1;  	} else {  		sb.Append (inputText [i]);  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: for (var i = 0; i < inputText.Length; i++) {  	var strEmote = string.Empty;  	foreach (string emote in emoticons.Keys) {  		if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  			var startIndex = (i >= 3 ? 3 : i);  			var length = (startIndex * 2);  			var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  			if (!subStringExtraValue.Contains ("//")) {  				strEmote = emote;  				break;  			}  		}  	}  	if (strEmote.Length != 0) {  		sb.Append ();  		i += strEmote.Length - 1;  	} else {  		sb.Append (inputText [i]);  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: foreach (string emote in emoticons.Keys) {  	if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  		var startIndex = (i >= 3 ? 3 : i);  		var length = (startIndex * 2);  		var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  		if (!subStringExtraValue.Contains ("//")) {  			strEmote = emote;  			break;  		}  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: foreach (string emote in emoticons.Keys) {  	if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  		var startIndex = (i >= 3 ? 3 : i);  		var length = (startIndex * 2);  		var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  		if (!subStringExtraValue.Contains ("//")) {  			strEmote = emote;  			break;  		}  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: foreach (string emote in emoticons.Keys) {  	if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  		var startIndex = (i >= 3 ? 3 : i);  		var length = (startIndex * 2);  		var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  		if (!subStringExtraValue.Contains ("//")) {  			strEmote = emote;  			break;  		}  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  	var startIndex = (i >= 3 ? 3 : i);  	var length = (startIndex * 2);  	var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  	if (!subStringExtraValue.Contains ("//")) {  		strEmote = emote;  		break;  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  	var startIndex = (i >= 3 ? 3 : i);  	var length = (startIndex * 2);  	var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  	if (!subStringExtraValue.Contains ("//")) {  		strEmote = emote;  		break;  	}  }  
Magic Number,MVCForum.Services,ConfigService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\ConfigService.cs,Emotify,The following statement contains a magic number: if (inputText.Length - i >= emote.Length && emote.Equals (inputText.Substring (i' emote.Length)' StringComparison.InvariantCultureIgnoreCase)) {  	var startIndex = (i >= 3 ? 3 : i);  	var length = (startIndex * 2);  	var subStringExtraValue = inputText.Substring (i - startIndex' emote.Length + length);  	if (!subStringExtraValue.Contains ("//")) {  		strEmote = emote;  		break;  	}  }  
Magic Number,MVCForum.Services,MembershipUserPointsService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\MembershipUserPointsService.cs,GetCurrentWeeksPoints,The following statement contains a magic number: return _cacheService.CachePerRequest (cacheKey' () => {  	amountToTake = amountToTake ?? int.MaxValue;  	var date = DateTime.UtcNow;  	var start = date.Date.AddDays (-(int)date.DayOfWeek);  	var end = start.AddDays (7);  	var results = _context.MembershipUserPoints.Include (x => x.User).Where (x => x.DateAdded >= start && x.DateAdded < end).ToList ();  	return results.GroupBy (x => x.User).ToDictionary (x => x.Key' x => x.Select (p => p.Points).Sum ()).OrderByDescending (x => x.Value).Take ((int)amountToTake).ToDictionary (x => x.Key' x => x.Value);  });  
Magic Number,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: try {  	var lineCounter = 0;  	foreach (var line in allLines) {  		lineCounter++;  		var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  		if (keyValuePair.Length < 2) {  			report.Errors.Add (new CsvErrorWarning {  				ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'  				Message =   			});  			continue;  		}  		var key = keyValuePair [0];  		if (string.IsNullOrEmpty (key)) {  			continue;  		}  		key = key.Trim ();  		var value = keyValuePair [1];  		var resourceKey = GetResourceKey (key);  		if (language == null) {  			throw new ApplicationException ("Unable to create language");  		}  		if (resourceKey == null) {  			resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			Add (resourceKey);  			report.Warnings.Add (new CsvErrorWarning {  				ErrorWarningType = CsvErrorWarningType.NewKeyCreated'  				Message =   			});  		}  		var stringResource = language.LocaleStringResources.FirstOrDefault (res => res.LocaleResourceKey.Name == resourceKey.Name);  		if (stringResource != null) {  			if (!stringResource.ResourceValue.Equals (value)) {  				stringResource.ResourceValue = value;  			}  		} else {  			stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			Add (stringResource);  		}  	}  } catch (Exception ex) {  	report.Errors.Add (new CsvErrorWarning {  		ErrorWarningType = CsvErrorWarningType.GeneralError'  		Message = ex.Message  	});  }  
Magic Number,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: try {  	var lineCounter = 0;  	foreach (var line in allLines) {  		lineCounter++;  		var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  		if (keyValuePair.Length < 2) {  			report.Errors.Add (new CsvErrorWarning {  				ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'  				Message =   			});  			continue;  		}  		var key = keyValuePair [0];  		if (string.IsNullOrEmpty (key)) {  			continue;  		}  		key = key.Trim ();  		var value = keyValuePair [1];  		var resourceKey = GetResourceKey (key);  		if (language == null) {  			throw new ApplicationException ("Unable to create language");  		}  		if (resourceKey == null) {  			resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			Add (resourceKey);  			report.Warnings.Add (new CsvErrorWarning {  				ErrorWarningType = CsvErrorWarningType.NewKeyCreated'  				Message =   			});  		}  		var stringResource = language.LocaleStringResources.FirstOrDefault (res => res.LocaleResourceKey.Name == resourceKey.Name);  		if (stringResource != null) {  			if (!stringResource.ResourceValue.Equals (value)) {  				stringResource.ResourceValue = value;  			}  		} else {  			stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			Add (stringResource);  		}  	}  } catch (Exception ex) {  	report.Errors.Add (new CsvErrorWarning {  		ErrorWarningType = CsvErrorWarningType.GeneralError'  		Message = ex.Message  	});  }  
Magic Number,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines) {  	lineCounter++;  	var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  	if (keyValuePair.Length < 2) {  		report.Errors.Add (new CsvErrorWarning {  			ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'  			Message =   		});  		continue;  	}  	var key = keyValuePair [0];  	if (string.IsNullOrEmpty (key)) {  		continue;  	}  	key = key.Trim ();  	var value = keyValuePair [1];  	var resourceKey = GetResourceKey (key);  	if (language == null) {  		throw new ApplicationException ("Unable to create language");  	}  	if (resourceKey == null) {  		resourceKey = new LocaleResourceKey {  			Name = key'  			DateAdded = DateTime.UtcNow'  		};  		Add (resourceKey);  		report.Warnings.Add (new CsvErrorWarning {  			ErrorWarningType = CsvErrorWarningType.NewKeyCreated'  			Message =   		});  	}  	var stringResource = language.LocaleStringResources.FirstOrDefault (res => res.LocaleResourceKey.Name == resourceKey.Name);  	if (stringResource != null) {  		if (!stringResource.ResourceValue.Equals (value)) {  			stringResource.ResourceValue = value;  		}  	} else {  		stringResource = new LocaleStringResource {  			Language = language'  			LocaleResourceKey = resourceKey'  			ResourceValue = value  		};  		Add (stringResource);  	}  }  
Magic Number,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: foreach (var line in allLines) {  	lineCounter++;  	var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  	if (keyValuePair.Length < 2) {  		report.Errors.Add (new CsvErrorWarning {  			ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'  			Message =   		});  		continue;  	}  	var key = keyValuePair [0];  	if (string.IsNullOrEmpty (key)) {  		continue;  	}  	key = key.Trim ();  	var value = keyValuePair [1];  	var resourceKey = GetResourceKey (key);  	if (language == null) {  		throw new ApplicationException ("Unable to create language");  	}  	if (resourceKey == null) {  		resourceKey = new LocaleResourceKey {  			Name = key'  			DateAdded = DateTime.UtcNow'  		};  		Add (resourceKey);  		report.Warnings.Add (new CsvErrorWarning {  			ErrorWarningType = CsvErrorWarningType.NewKeyCreated'  			Message =   		});  	}  	var stringResource = language.LocaleStringResources.FirstOrDefault (res => res.LocaleResourceKey.Name == resourceKey.Name);  	if (stringResource != null) {  		if (!stringResource.ResourceValue.Equals (value)) {  			stringResource.ResourceValue = value;  		}  	} else {  		stringResource = new LocaleStringResource {  			Language = language'  			LocaleResourceKey = resourceKey'  			ResourceValue = value  		};  		Add (stringResource);  	}  }  
Magic Number,MVCForum.Services,LocalizationService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\LocalizationService.cs,FromCsv,The following statement contains a magic number: if (keyValuePair.Length < 2) {  	report.Errors.Add (new CsvErrorWarning {  		ErrorWarningType = CsvErrorWarningType.MissingKeyOrValue'  		Message =   	});  	continue;  }  
Magic Number,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPopularTopics,The following statement contains a magic number: if (from == null) {  	from = DateTime.UtcNow.AddDays (-14);  }  
Magic Number,MVCForum.Services,TopicService,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\TopicService.cs,GetPopularTopics,The following statement contains a magic number: from = DateTime.UtcNow.AddDays (-14);  
Magic Number,MVCForum.Services.Data.Mapping,ActivityMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\ActivityMapping.cs,ActivityMapping,The following statement contains a magic number: Property (x => x.Type).IsRequired ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property (x => x.Name).IsRequired ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property (x => x.Type).IsRequired ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property (x => x.Image).IsOptional ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,BadgeMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeMapping.cs,BadgeMapping,The following statement contains a magic number: Property (x => x.DisplayName).IsRequired ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,BadgeTypeTimeLastCheckedMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BadgeTypeTimeLastCheckedMapping.cs,BadgeTypeTimeLastCheckedMapping,The following statement contains a magic number: Property (x => x.BadgeType).IsRequired ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,BannedEmailMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BannedEmailMapping.cs,BannedEmailMapping,The following statement contains a magic number: Property (x => x.Email).IsRequired ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Data.Mapping,BannedWordMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\BannedWordMapping.cs,BannedWordMapping,The following statement contains a magic number: Property (x => x.Word).IsRequired ().HasMaxLength (75);  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.Name).IsRequired ().HasMaxLength (450);  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.Slug).IsRequired ().HasMaxLength (450).HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute ("IX_Category_Slug"' 1) {  	IsUnique = true  }));  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.PageTitle).IsOptional ().HasMaxLength (80);  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.MetaDescription).IsOptional ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.Path).IsOptional ().HasMaxLength (2500);  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.Colour).IsOptional ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,CategoryMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\CategoryMapping.cs,CategoryMapping,The following statement contains a magic number: Property (x => x.Image).IsOptional ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Data.Mapping,EmailMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\EmailMapping.cs,EmailMapping,The following statement contains a magic number: Property (x => x.EmailTo).IsRequired ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,EmailMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\EmailMapping.cs,EmailMapping,The following statement contains a magic number: Property (x => x.Subject).IsRequired ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Data.Mapping,EmailMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\EmailMapping.cs,EmailMapping,The following statement contains a magic number: Property (x => x.NameTo).IsRequired ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,LanguageMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LanguageMapping.cs,LanguageMapping,The following statement contains a magic number: Property (x => x.Name).IsRequired ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,LanguageMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LanguageMapping.cs,LanguageMapping,The following statement contains a magic number: Property (x => x.LanguageCulture).IsRequired ().HasMaxLength (20);  
Magic Number,MVCForum.Services.Data.Mapping,LanguageMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LanguageMapping.cs,LanguageMapping,The following statement contains a magic number: Property (x => x.FlagImageFileName).IsOptional ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,LocaleResourceKeyMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LocaleResourceKeyMapping.cs,LocaleResourceKeyMapping,The following statement contains a magic number: Property (x => x.Name).IsRequired ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Data.Mapping,LocaleStringResourceMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\LocaleStringResourceMapping.cs,LocaleStringResourceMapping,The following statement contains a magic number: Property (x => x.ResourceValue).IsRequired ().HasMaxLength (1000);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipRoleMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipRoleMapping.cs,MembershipRoleMapping,The following statement contains a magic number: Property (x => x.RoleName).IsRequired ().HasMaxLength (256);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.UserName).IsRequired ().HasMaxLength (150).HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute ("IX_MembershipUser_UserName"' 1) {  	IsUnique = true  }));  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Password).IsRequired ().HasMaxLength (128);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.PasswordSalt).IsOptional ().HasMaxLength (128);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Email).IsOptional ().HasMaxLength (256);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.PasswordQuestion).IsOptional ().HasMaxLength (256);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.PasswordAnswer).IsOptional ().HasMaxLength (256);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.PasswordResetToken).HasMaxLength (150).IsOptional ();  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Slug).IsRequired ().HasMaxLength (150).HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute ("IX_MembershipUser_Slug"' 1) {  	IsUnique = true  }));  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Signature).IsOptional ().HasMaxLength (1000);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Location).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Website).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Twitter).IsOptional ().HasMaxLength (60);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Facebook).IsOptional ().HasMaxLength (60);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Avatar).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.FacebookAccessToken).IsOptional ().HasMaxLength (300);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.MicrosoftAccessToken).IsOptional ().HasMaxLength (450);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.TwitterAccessToken).IsOptional ().HasMaxLength (300);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.TwitterId).IsOptional ().HasMaxLength (150);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.GoogleAccessToken).IsOptional ().HasMaxLength (300);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.GoogleId).IsOptional ().HasMaxLength (150);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.MiscAccessToken).IsOptional ().HasMaxLength (250);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Latitude).IsOptional ().HasMaxLength (40);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserMapping.cs,MembershipUserMapping,The following statement contains a magic number: Property (x => x.Longitude).IsOptional ().HasMaxLength (40);  
Magic Number,MVCForum.Services.Data.Mapping,MembershipUserPointsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\MembershipUserPointsMapping.cs,MembershipUserPointsMapping,The following statement contains a magic number: Property (x => x.Notes).IsOptional ().HasMaxLength (400);  
Magic Number,MVCForum.Services.Data.Mapping,PermissionMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PermissionMapping.cs,PermissionMapping,The following statement contains a magic number: Property (x => x.Name).IsRequired ().HasMaxLength (150);  
Magic Number,MVCForum.Services.Data.Mapping,PollAnswerMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PollAnswerMapping.cs,PollAnswerMapping,The following statement contains a magic number: Property (x => x.Answer).IsRequired ().HasMaxLength (600);  
Magic Number,MVCForum.Services.Data.Mapping,PostEditMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PostEditMapping.cs,PostEditMapping,The following statement contains a magic number: Property (x => x.OriginalPostTitle).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,PostEditMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PostEditMapping.cs,PostEditMapping,The following statement contains a magic number: Property (x => x.EditedPostTitle).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,PostMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\PostMapping.cs,PostMapping,The following statement contains a magic number: Property (x => x.IpAddress).IsOptional ().HasMaxLength (50);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.ForumName).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.ForumUrl).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.AdminEmailAddress).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.NotificationReplyEmail).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.SMTP).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.SMTPUsername).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.SMTPPort).IsOptional ().HasMaxLength (10);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.SMTPPassword).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.Theme).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.AkismentKey).IsOptional ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.CurrentDatabaseVersion).IsOptional ().HasMaxLength (10);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.SpamQuestion).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.SpamAnswer).IsOptional ().HasMaxLength (500);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.PageTitle).IsOptional ().HasMaxLength (80);  
Magic Number,MVCForum.Services.Data.Mapping,SettingsMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\SettingsMapping.cs,SettingsMapping,The following statement contains a magic number: Property (x => x.MetaDesc).IsOptional ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Data.Mapping,TopicMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicMapping.cs,TopicMapping,The following statement contains a magic number: Property (x => x.Name).IsRequired ().HasMaxLength (450);  
Magic Number,MVCForum.Services.Data.Mapping,TopicMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicMapping.cs,TopicMapping,The following statement contains a magic number: Property (x => x.Slug).IsRequired ().HasMaxLength (450).HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute ("IX_Topic_Slug"' 1) {  	IsUnique = true  }));  
Magic Number,MVCForum.Services.Data.Mapping,TopicTagMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicTagMapping.cs,TopicTagMapping,The following statement contains a magic number: Property (x => x.Tag).IsRequired ().HasMaxLength (100);  
Magic Number,MVCForum.Services.Data.Mapping,TopicTagMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\TopicTagMapping.cs,TopicTagMapping,The following statement contains a magic number: Property (x => x.Slug).IsRequired ().HasMaxLength (100).HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute ("IX_Tag_Slug"' 1) {  	IsUnique = true  }));  
Magic Number,MVCForum.Services.Data.Mapping,UploadedFileMapping,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\Mapping\UploadedFileMapping.cs,UploadedFileMapping,The following statement contains a magic number: Property (x => x.Filename).IsRequired ().HasMaxLength (200);  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (language == null) {  	//isFirstInstall = true;  	var cultureInfo = LanguageUtils.GetCulture (langCulture);  	language = new Language {  		Name = cultureInfo.EnglishName'  		LanguageCulture = cultureInfo.Name'  	};  	context.Language.Add (language);  	// Save the language  	context.SaveChanges ();  	// Now add the default language strings  	var file = HostingEnvironment.MapPath (@"~/Installer/en-GB.csv");  	var commaSeparator = new[] {  		'''  	};  	if (file != null) {  		// Unpack the data  		var allLines = new List<string> ();  		using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  			while (streamReader.Peek () >= 0) {  				allLines.Add (streamReader.ReadLine ());  			}  		}  		// Read the CSV file and import all the keys and values  		var lineCounter = 0;  		foreach (var csvline in allLines) {  			var line = csvline;  			if (line.StartsWith ("\"")) {  				line = line.Replace ("\""' "");  			}  			lineCounter++;  			// Only split on the first comma' so the value strings can have commas in  			var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  			// Get the key and value  			var key = keyValuePair [0];  			var value = keyValuePair [1];  			if (string.IsNullOrEmpty (key)) {  				// Ignore empty keys  				continue;  			}  			if (string.IsNullOrEmpty (value)) {  				// Ignore empty values  				continue;  			}  			// Trim both the key and value  			key = key.Trim ();  			value = value.Trim ();  			// Create the resource key  			var resourceKey = new LocaleResourceKey {  				Name = key'  				DateAdded = DateTime.UtcNow'  			};  			context.LocaleResourceKey.Add (resourceKey);  			// Set the value for the resource  			var stringResource = new LocaleStringResource {  				Language = language'  				LocaleResourceKey = resourceKey'  				ResourceValue = value  			};  			context.LocaleStringResource.Add (stringResource);  		}  		// Save the language strings  		context.SaveChanges ();  	}  	var saveRoles = false;  	// Create the admin role if it doesn't exist  	var adminRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.AdminRoleName);  	if (adminRole == null) {  		adminRole = new MembershipRole {  			RoleName = AppConstants.AdminRoleName  		};  		context.MembershipRole.Add (adminRole);  		saveRoles = true;  	}  	// Create the Standard role if it doesn't exist  	var standardRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == SiteConstants.Instance.StandardMembers);  	if (standardRole == null) {  		standardRole = new MembershipRole {  			RoleName = SiteConstants.Instance.StandardMembers  		};  		context.MembershipRole.Add (standardRole);  		saveRoles = true;  	}  	// Create the Guest role if it doesn't exist  	var guestRole = context.MembershipRole.FirstOrDefault (x => x.RoleName == AppConstants.GuestRoleName);  	if (guestRole == null) {  		guestRole = new MembershipRole {  			RoleName = AppConstants.GuestRoleName  		};  		context.MembershipRole.Add (guestRole);  		saveRoles = true;  	}  	if (saveRoles) {  		context.SaveChanges ();  	}  	// Create an example Category  	if (!context.Category.Any ()) {  		// Doesn't exist so add the example category  		const string exampleCatName = "Example Category";  		var exampleCat = new Category {  			Name = exampleCatName'  			ModeratePosts = false'  			ModerateTopics = false'  			Slug = ServiceHelpers.CreateUrl (exampleCatName)'  			DateCreated = DateTime.UtcNow  		};  		context.Category.Add (exampleCat);  		context.SaveChanges ();  	}  	// if the settings already exist then do nothing  	// If not then add default settings  	var currentSettings = context.Setting.FirstOrDefault ();  	if (currentSettings == null) {  		// create the settings  		var settings = new Settings {  			ForumName = "MVCForum"'  			ForumUrl = "http://www.mydomain.com"'  			IsClosed = false'  			EnableRSSFeeds = true'  			DisplayEditedBy = true'  			EnablePostFileAttachments = false'  			EnableMarkAsSolution = true'  			EnableSpamReporting = true'  			EnableMemberReporting = true'  			EnableEmailSubscriptions = true'  			ManuallyAuthoriseNewMembers = false'  			EmailAdminOnNewMemberSignUp = true'  			TopicsPerPage = 20'  			PostsPerPage = 20'  			EnablePrivateMessages = true'  			MaxPrivateMessagesPerMember = 50'  			PrivateMessageFloodControl = 1'  			EnableSignatures = false'  			EnablePoints = true'  			PointsAllowedToVoteAmount = 1'  			PointsAllowedForExtendedProfile = 1'  			PointsAddedPerPost = 1'  			PointsAddedForSolution = 4'  			PointsDeductedNagativeVote = 2'  			PointsAddedPostiveVote = 2'  			AdminEmailAddress = "my@email.com"'  			NotificationReplyEmail = "noreply@myemail.com"'  			SMTPEnableSSL = false'  			Theme = "Metro"'  			NewMemberStartingRole = standardRole'  			DefaultLanguage = language'  			ActivitiesPerPage = 20'  			EnableAkisment = false'  			EnableSocialLogins = false'  			EnablePolls = true'  			MarkAsSolutionReminderTimeFrame = 7'  			EnableEmoticons = true'  			DisableStandardRegistration = false  		};  		context.Setting.Add (settings);  		context.SaveChanges ();  	}  	// Create the initial category permissions  	// Edit Posts  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditPosts) == null) {  		var permission = new Permission {  			Name = SiteConstants.Instance.PermissionEditPosts  		};  		context.Permission.Add (permission);  		// NOTE: Because this is null - We assumed it's a new install so carry on checking and adding the other permissions  		// Read Only  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionReadOnly) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionReadOnly  			};  			context.Permission.Add (p);  		}  		// Delete Posts  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDeletePosts) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDeletePosts  			};  			context.Permission.Add (p);  		}  		// Sticky Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateStickyTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateStickyTopics  			};  			context.Permission.Add (p);  		}  		// Lock Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionLockTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionLockTopics  			};  			context.Permission.Add (p);  		}  		// Vote In Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionVoteInPolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionVoteInPolls  			};  			context.Permission.Add (p);  		}  		// Create Polls  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreatePolls) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreatePolls  			};  			context.Permission.Add (p);  		}  		// Create Topics  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionCreateTopics) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionCreateTopics  			};  			context.Permission.Add (p);  		}  		// Attach Files  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionAttachFiles) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionAttachFiles  			};  			context.Permission.Add (p);  		}  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionDenyAccess) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionDenyAccess  			};  			context.Permission.Add (p);  		}  		// === Global Permissions === //  		// Deny Access  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionEditMembers) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionEditMembers'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Insert Editor Images  		if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  			var p = new Permission {  				Name = SiteConstants.Instance.PermissionInsertEditorImages'  				IsGlobal = true  			};  			context.Permission.Add (p);  		}  		// Save to the database  		context.SaveChanges ();  	}  	// If the admin user exists then don't do anything else  	const string adminUsername = "admin";  	if (context.MembershipUser.FirstOrDefault (x => x.UserName == adminUsername) == null) {  		// create the admin user and put him in the admin role  		var admin = new MembershipUser {  			Email = "you@email.com"'  			UserName = adminUsername'  			Password = "password"'  			IsApproved = true'  			DisableEmailNotifications = false'  			DisablePosting = false'  			DisablePrivateMessages = false'  			CreateDate = DateTime.UtcNow'  			LastLockoutDate = (DateTime)SqlDateTime.MinValue'  			LastPasswordChangedDate = (DateTime)SqlDateTime.MinValue'  			LastLoginDate = DateTime.UtcNow'  			LastActivityDate = null'  			IsLockedOut = false'  			Slug = ServiceHelpers.CreateUrl (adminUsername)  		};  		// Hash the password  		var salt = StringUtils.CreateSalt (AppConstants.SaltSize);  		var hash = StringUtils.GenerateSaltedHash (admin.Password' salt);  		admin.Password = hash;  		admin.PasswordSalt = salt;  		// Put the admin in the admin role  		admin.Roles = new List<MembershipRole> {  			adminRole  		};  		context.MembershipUser.Add (admin);  		context.SaveChanges ();  		// Now add read me  		const string name = "Read Me";  		var category = context.Category.FirstOrDefault ();  		var topic = new Topic {  			Category = category'  			CreateDate = DateTime.UtcNow'  			User = admin'  			IsSticky = true'  			Name = name'  			Slug = ServiceHelpers.CreateUrl (name)  		};  		context.Topic.Add (topic);  		context.SaveChanges ();  		const string readMeText = @"<h2>Administration</h2> <p>We have auto created an admin user for you to manage the site</p> <p>Username: <strong>admin</strong><br />Password: <strong>password</strong></p> <p>Once you have logged in' you can manage the forum <a href=""/admin/"">through the admin section</a>. </p> <p><strong><font color=""#ff0000"">Important:</font> </strong>Please update the admin password (and username) before putting this site live.</p> <h2>Documentation</h2> <p>We have documentation on Github in the WIKI</p> <p><a href=""https://github.com/YodasMyDad/mvcforum/wiki"">https://github.com/YodasMyDad/mvcforum/wiki</a></p> <p>You can also grab the source code from Github too.</p>";  		var post = new Post {  			DateCreated = DateTime.UtcNow'  			DateEdited = DateTime.UtcNow'  			Topic = topic'  			IsTopicStarter = true'  			User = admin'  			PostContent = readMeText'  			SearchField = name  		};  		topic.LastPost = post;  		context.Post.Add (post);  		context.SaveChanges ();  	}  } else {  	// ---- Do Data Updates here  	// Data to update on versions v1.7+  	// Insert Editor Images  	if (context.Permission.FirstOrDefault (x => x.Name == SiteConstants.Instance.PermissionInsertEditorImages) == null) {  		var p = new Permission {  			Name = SiteConstants.Instance.PermissionInsertEditorImages'  			IsGlobal = true  		};  		context.Permission.Add (p);  	}  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (file != null) {  	// Unpack the data  	var allLines = new List<string> ();  	using (var streamReader = new StreamReader (file' Encoding.UTF8' true)) {  		while (streamReader.Peek () >= 0) {  			allLines.Add (streamReader.ReadLine ());  		}  	}  	// Read the CSV file and import all the keys and values  	var lineCounter = 0;  	foreach (var csvline in allLines) {  		var line = csvline;  		if (line.StartsWith ("\"")) {  			line = line.Replace ("\""' "");  		}  		lineCounter++;  		// Only split on the first comma' so the value strings can have commas in  		var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  		// Get the key and value  		var key = keyValuePair [0];  		var value = keyValuePair [1];  		if (string.IsNullOrEmpty (key)) {  			// Ignore empty keys  			continue;  		}  		if (string.IsNullOrEmpty (value)) {  			// Ignore empty values  			continue;  		}  		// Trim both the key and value  		key = key.Trim ();  		value = value.Trim ();  		// Create the resource key  		var resourceKey = new LocaleResourceKey {  			Name = key'  			DateAdded = DateTime.UtcNow'  		};  		context.LocaleResourceKey.Add (resourceKey);  		// Set the value for the resource  		var stringResource = new LocaleStringResource {  			Language = language'  			LocaleResourceKey = resourceKey'  			ResourceValue = value  		};  		context.LocaleStringResource.Add (stringResource);  	}  	// Save the language strings  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: foreach (var csvline in allLines) {  	var line = csvline;  	if (line.StartsWith ("\"")) {  		line = line.Replace ("\""' "");  	}  	lineCounter++;  	// Only split on the first comma' so the value strings can have commas in  	var keyValuePair = line.Split (commaSeparator' 2' StringSplitOptions.None);  	// Get the key and value  	var key = keyValuePair [0];  	var value = keyValuePair [1];  	if (string.IsNullOrEmpty (key)) {  		// Ignore empty keys  		continue;  	}  	if (string.IsNullOrEmpty (value)) {  		// Ignore empty values  		continue;  	}  	// Trim both the key and value  	key = key.Trim ();  	value = value.Trim ();  	// Create the resource key  	var resourceKey = new LocaleResourceKey {  		Name = key'  		DateAdded = DateTime.UtcNow'  	};  	context.LocaleResourceKey.Add (resourceKey);  	// Set the value for the resource  	var stringResource = new LocaleStringResource {  		Language = language'  		LocaleResourceKey = resourceKey'  		ResourceValue = value  	};  	context.LocaleStringResource.Add (stringResource);  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Magic Number,MVCForum.Services.Migrations,Configuration,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Migrations\Configuration.cs,Seed,The following statement contains a magic number: if (currentSettings == null) {  	// create the settings  	var settings = new Settings {  		ForumName = "MVCForum"'  		ForumUrl = "http://www.mydomain.com"'  		IsClosed = false'  		EnableRSSFeeds = true'  		DisplayEditedBy = true'  		EnablePostFileAttachments = false'  		EnableMarkAsSolution = true'  		EnableSpamReporting = true'  		EnableMemberReporting = true'  		EnableEmailSubscriptions = true'  		ManuallyAuthoriseNewMembers = false'  		EmailAdminOnNewMemberSignUp = true'  		TopicsPerPage = 20'  		PostsPerPage = 20'  		EnablePrivateMessages = true'  		MaxPrivateMessagesPerMember = 50'  		PrivateMessageFloodControl = 1'  		EnableSignatures = false'  		EnablePoints = true'  		PointsAllowedToVoteAmount = 1'  		PointsAllowedForExtendedProfile = 1'  		PointsAddedPerPost = 1'  		PointsAddedForSolution = 4'  		PointsDeductedNagativeVote = 2'  		PointsAddedPostiveVote = 2'  		AdminEmailAddress = "my@email.com"'  		NotificationReplyEmail = "noreply@myemail.com"'  		SMTPEnableSSL = false'  		Theme = "Metro"'  		NewMemberStartingRole = standardRole'  		DefaultLanguage = language'  		ActivitiesPerPage = 20'  		EnableAkisment = false'  		EnableSocialLogins = false'  		EnablePolls = true'  		MarkAsSolutionReminderTimeFrame = 7'  		EnableEmoticons = true'  		DisableStandardRegistration = false  	};  	context.Setting.Add (settings);  	context.SaveChanges ();  }  
Missing Default,MVCForum.Services.Data.UnitOfWork,UnitOfWork,F:\newReposMay17\leen3o_mvcforum\MVCForum.Services\Data\UnitOfWork\UnitOfWork.cs,Rollback,The following switch statement is missing a default case: switch (entry.State) {  case System.Data.Entity.EntityState.Modified:  	entry.State = System.Data.Entity.EntityState.Unchanged;  	break;  case System.Data.Entity.EntityState.Added:  	entry.State = System.Data.Entity.EntityState.Detached;  	break;  case System.Data.Entity.EntityState.Deleted:  	// Note - problem with deleted entities:  	// When an entity is deleted its relationships to other entities are severed.   	// This includes setting FKs to null for nullable FKs or marking the FKs as conceptually null (don’t ask!)   	// if the FK property is not nullable. You’ll need to reset the FK property values to   	// the values that they had previously in order to re-form the relationships.   	// This may include FK properties in other entities for relationships where the   	// deleted entity is the principal of the relationship–e.g. has the PK   	// rather than the FK. I know this is a pain–it would be great if it could be made easier in the future' but for now it is what it is.  	entry.State = System.Data.Entity.EntityState.Unchanged;  	break;  }  
