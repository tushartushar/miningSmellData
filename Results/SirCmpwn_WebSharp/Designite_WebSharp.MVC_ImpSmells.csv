Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WebSharp.MVC,MvcRouter,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,ResolveAction,Cyclomatic complexity of the method is 11
Complex Method,WebSharp.MVC,MvcRoute,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,Match,Cyclomatic complexity of the method is 9
Long Statement,WebSharp.MVC,MvcRouter,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,ResolveAction,The length of the statement  "                m.IsPublic && m.Name.Equals(values["action"]' CaseInsensitive ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture) && " is 143.
Long Statement,WebSharp.MVC,MvcRouter,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,ResolveAction,The length of the statement  "                    if (request.QueryString.Any(q => q.Name.Equals(name' CaseInsensitive ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture))) " is 149.
Long Statement,WebSharp.MVC,MvcRouter,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,ResolveAction,The length of the statement  "                                q => q.Name.Equals(name' CaseInsensitive ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture)).Value' " is 127.
Long Statement,WebSharp.MVC,MvcRouter,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,ResolveAction,The length of the statement  "                        if (request.Form.Any(q => q.Name.Equals(name' CaseInsensitive ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture))) " is 142.
Long Statement,WebSharp.MVC,MvcRouter,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,ResolveAction,The length of the statement  "                                    q => q.Name.Equals(name' CaseInsensitive ? StringComparison.CurrentCultureIgnoreCase : StringComparison.CurrentCulture)).Value; " is 127.
Long Statement,WebSharp.MVC,MvcRoute,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,Match,The length of the statement  "                var parts = localPath.Split(new[] { Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar }' StringSplitOptions.RemoveEmptyEntries); " is 138.
Long Statement,WebSharp.MVC,MvcRoute,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,Match,The length of the statement  "                var routeParts = Route.Split(new[] { Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar }' StringSplitOptions.RemoveEmptyEntries); " is 139.
Long Statement,WebSharp.MVC.Results,ViewResult,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Results\ViewResult.cs,HandleRequest,The length of the statement  "                throw new HttpNotFoundException(string.Format("Requested view not found. Looking for: <b>{0}</b>"' Path.Combine(Controller.Name' View))); " is 137.
Magic Number,WebSharp.MVC,MvcRoute,C:\repos\SirCmpwn_WebSharp\WebSharp.MVC\Routing\MvcRouter.cs,Match,The following statement contains a magic number: if (parts.Length != 0 || routeParts.Length != 0)                  {                      for (int i = 0; i < RouteParts.Length; i++)                      {                          if (RouteParts[i].StartsWith("{") && RouteParts[i].EndsWith("}"))                          {                              var key = RouteParts[i].Substring(1' RouteParts[i].Length - 2);                              if (i >= parts.Length)                              {                                  if (Defaults.ContainsKey(key))                                  {                                      if (!caseInsensitive)                                          values[key] = Defaults[key].ToString();                                      else                                          values[key] = Defaults[key].ToString().ToUpper();                                  }                                  else                                      return null;                              }                              else                              {                                  if (Defaults.ContainsKey(key) && Defaults[key].Equals(parts[i]))                                  {                                      if (!caseInsensitive)                                          values[key] = parts[i];                                      else                                          values[key] = parts[i].ToUpper();                                  }                                  else                                      return null;                                }                          }                          else                          {                              if (i >= parts.Length || parts[i] != RouteParts[i])                                  return null;                          }                      }                  }
