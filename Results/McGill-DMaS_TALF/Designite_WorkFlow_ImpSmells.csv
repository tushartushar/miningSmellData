Implementation smell,Namespace,Class,File,Method,Description
Long Method,WorkFlow,GetFileBuildFlowGraph,C:\repos\McGill-DMaS_TALF\WorkFlow\GetFileBuildFlowGraph.cs,GetFileGenerateFlowGraph,The method has 100 lines of code.
Long Method,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The method has 185 lines of code.
Long Method,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The method has 141 lines of code.
Long Method,WorkFlow,PforLocalSupCheckClass,C:\repos\McGill-DMaS_TALF\WorkFlow\PforLocalCheckClass.cs,PF,The method has 140 lines of code.
Complex Method,WorkFlow,BuildFlowTreeForVSClass,C:\repos\McGill-DMaS_TALF\WorkFlow\BuildFlowTreeForVSClass.cs,BuildFlowTreeForVSF,Cyclomatic complexity of the method is 14
Complex Method,WorkFlow,BuildTreeForMVSClass,C:\repos\McGill-DMaS_TALF\WorkFlow\BuildTreeForMVSClass.cs,BuildTreeForMVS,Cyclomatic complexity of the method is 14
Complex Method,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,Cyclomatic complexity of the method is 14
Complex Method,WorkFlow,UtilityClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of UtilityClass.cs,UF,Cyclomatic complexity of the method is 14
Complex Method,WorkFlow,GetFileBuildFlowGraph,C:\repos\McGill-DMaS_TALF\WorkFlow\GetFileBuildFlowGraph.cs,GetFileGenerateFlowGraph,Cyclomatic complexity of the method is 18
Complex Method,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,Cyclomatic complexity of the method is 22
Complex Method,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,Cyclomatic complexity of the method is 19
Complex Method,WorkFlow,MVSTMandTMPrimClass,C:\repos\McGill-DMaS_TALF\WorkFlow\MVSTMandTMPrimClass.cs,TmTmprimF,Cyclomatic complexity of the method is 11
Complex Method,WorkFlow,PforLocalSupCheckClass,C:\repos\McGill-DMaS_TALF\WorkFlow\PforLocalCheckClass.cs,PF,Cyclomatic complexity of the method is 32
Complex Method,WorkFlow,PrintClass,C:\repos\McGill-DMaS_TALF\WorkFlow\PrintClass.cs,print,Cyclomatic complexity of the method is 8
Complex Method,WorkFlow,RemoveSuperSeqClass,C:\repos\McGill-DMaS_TALF\WorkFlow\RemoveSuperSeqClass.cs,RemoveSupSeqF,Cyclomatic complexity of the method is 10
Complex Method,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunction,Cyclomatic complexity of the method is 9
Complex Method,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionNaiive,Cyclomatic complexity of the method is 9
Complex Method,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionULE1,Cyclomatic complexity of the method is 9
Complex Method,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionPGE1,Cyclomatic complexity of the method is 9
Complex Method,WorkFlow,SelfJoinForGeneratingQClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SelfJoinForGeneratingQClass.cs,SelfJoinF,Cyclomatic complexity of the method is 11
Complex Method,WorkFlow,UpdateScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\UpdateScoreClass.cs,UpdateScoreF,Cyclomatic complexity of the method is 16
Complex Method,WorkFlow,VPrimForAnonymizeAlgortihmClass,C:\repos\McGill-DMaS_TALF\WorkFlow\VPrimForAnonymizeAlgortihmClass.cs,VprimF,Cyclomatic complexity of the method is 8
Complex Method,WorkFlow,VS,C:\repos\McGill-DMaS_TALF\WorkFlow\VS.cs,VSF,Cyclomatic complexity of the method is 10
Long Parameter List,WorkFlow,AnonymizeAlgortimClass,C:\repos\McGill-DMaS_TALF\WorkFlow\AnonymizeAlgortimClass.cs,AnonymizeF,The method has 10 parameters.
Long Parameter List,WorkFlow,CheckLocalSupClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CheckLocalSupClass.cs,LocalSupFunction,The method has 6 parameters.
Long Parameter List,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,The method has 10 parameters.
Long Parameter List,WorkFlow,UtilityClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of UtilityClass.cs,UtilityClassNew,The method has 6 parameters.
Long Parameter List,WorkFlow,GetLKClass,C:\repos\McGill-DMaS_TALF\WorkFlow\GetLKClass.cs,GetLKF,The method has 7 parameters.
Long Parameter List,WorkFlow,LTPairs,C:\repos\McGill-DMaS_TALF\WorkFlow\LTPairs.cs,LTPairs,The method has 5 parameters.
Long Parameter List,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The method has 8 parameters.
Long Parameter List,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The method has 25 parameters.
Long Parameter List,WorkFlow,MVS,C:\repos\McGill-DMaS_TALF\WorkFlow\MVS.cs,MVSF,The method has 5 parameters.
Long Parameter List,WorkFlow,MVSTreeClass,C:\repos\McGill-DMaS_TALF\WorkFlow\MVSTreeClass.cs,MVSTreeClass,The method has 7 parameters.
Long Parameter List,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunction,The method has 5 parameters.
Long Parameter List,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionPGE1,The method has 5 parameters.
Long Parameter List,WorkFlow,SuppresPfromTmClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SuppresPfromTmClass.cs,SupPF,The method has 5 parameters.
Long Parameter List,WorkFlow,UpdateScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\UpdateScoreClass.cs,UpdateScoreF,The method has 8 parameters.
Long Parameter List,WorkFlow,UtilityClass,C:\repos\McGill-DMaS_TALF\WorkFlow\UtilityClass.cs,UtilityClass,The method has 6 parameters.
Long Parameter List,WorkFlow,VPrimForAnonymizeAlgortihmClass,C:\repos\McGill-DMaS_TALF\WorkFlow\VPrimForAnonymizeAlgortihmClass.cs,VprimF,The method has 5 parameters.
Long Parameter List,WorkFlow,VPrimVClass,C:\repos\McGill-DMaS_TALF\WorkFlow\VPrimVClass.cs,VFinder,The method has 5 parameters.
Long Parameter List,WorkFlow,VS,C:\repos\McGill-DMaS_TALF\WorkFlow\VS.cs,VSF,The method has 5 parameters.
Long Statement,WorkFlow,AnonymizeAlgortimClass,C:\repos\McGill-DMaS_TALF\WorkFlow\AnonymizeAlgortimClass.cs,AnonymizeF,The length of the statement  "			//PF.listBox1.Items.Add("Generating Flowgraph : " + elapsedTime.Minutes.ToString() + " Minutes " + elapsedTime.Seconds.ToString() + "  Seconds " + elapsedTime.Milliseconds.ToString() + " Milliseconds"); " is 202.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "	//Thread othThread = new Thread(new ThreadStart(program.FlowAnonymization(label1' comboBox1' textBox1' textBox2' textBox3' textBox4' textBox5' textBox6' listBox6' label14' listBox3' listBox5' label8' label10' label15' label16' label9'm))); " is 239.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "	listBox6.Items.Add ("Generating Flowgraph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 144.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "		listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 146.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "		listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 138.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "		listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 138.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "		listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 137.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "		listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 148.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "		listBox6.Items.Add ("Writing Anonymized Data to file: " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 154.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "			listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 149.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "			listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 139.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The length of the statement  "                            listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");" is 253.
Long Statement,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button1_Click,The length of the statement  "	label4.Visible = label13.Visible = label16.Visible = label7.Visible = label8.Visible = label9.Visible = label10.Visible = false; " is 128.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "	listBox6.Items.Add ("Generating Flowgraph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 144.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "		listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 146.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "		listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 138.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "		listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 138.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "		listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 137.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "		listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 148.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "			listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 149.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "			listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds "); " is 139.
Long Statement,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The length of the statement  "                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");" is 253.
Long Statement,WorkFlow,MVS,C:\repos\McGill-DMaS_TALF\WorkFlow\MVS.cs,MVSF,The length of the statement  "                PF.listBox1.Items.Add("Generating Flowgraph : " + elapsedTime.Minutes.ToString() + " Minutes " + elapsedTime.Seconds.ToString() + "  Seconds ");" is 144.
Long Statement,WorkFlow,MVS,C:\repos\McGill-DMaS_TALF\WorkFlow\MVS.cs,MVSF,The length of the statement  "		//PF.listBox1.Items.Add("Generating Flowgraph : " + elapsedTime.Minutes.ToString() + " Minutes " + elapsedTime.Seconds.ToString() + "  Seconds "); " is 146.
Long Statement,WorkFlow,MVS,C:\repos\McGill-DMaS_TALF\WorkFlow\MVS.cs,MVSF,The length of the statement  "                    PF.listBox1.Items.Add("Generating Flowgraph : " + elapsedTime.Minutes.ToString() + " Minutes " + elapsedTime.Seconds.ToString() + "  Seconds ");" is 144.
Long Statement,WorkFlow,MVS,C:\repos\McGill-DMaS_TALF\WorkFlow\MVS.cs,MVSF,The length of the statement  "			//PF.listBox1.Items.Add("Generating Flowgraph : " + elapsedTime.Minutes.ToString() + " Minutes " + elapsedTime.Seconds.ToString() + "  Seconds "); " is 146.
Long Statement,WorkFlow,PrintClass,C:\repos\McGill-DMaS_TALF\WorkFlow\PrintClass.cs,print,The length of the statement  "					str = str + ("(L" + temp3.location.ToString () + "'T" + temp3.time.ToString () + ")  " + temp3.counter.ToString () + " Time(s)" + " --> "); " is 139.
Long Statement,WorkFlow,PrintClass,C:\repos\McGill-DMaS_TALF\WorkFlow\PrintClass.cs,print,The length of the statement  "					str = str + ("(L" + temp3.location.ToString () + "'T" + temp3.time.ToString () + ")  " + temp3.counter.ToString () + " Time(s)"); " is 129.
Long Statement,WorkFlow,RemoveVprimFromPClass,C:\repos\McGill-DMaS_TALF\WorkFlow\RemoveVprimFromPClass.cs,RemoveVprimFromPF,The length of the statement  "				if (temp2.location == P [i].location && temp2.time == P [i].time && temp2.location != p.location && temp2.time != p.time) { " is 123.
Long Statement,WorkFlow,SelfJoinClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SelfJoinClass.cs,SelfJoinF,The length of the statement  "			if ((counter3 == temp1.Count - 1 && temp1 [counter3].time < temp2 [counter3].time))// if the code is not worrkin g I removed " || i==0 " from here " is 146.
Long Statement,WorkFlow,SelfJoinForGeneratingQClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SelfJoinForGeneratingQClass.cs,SelfJoinF,The length of the statement  "				if ((temp1 [counter3].location == p.location && temp1 [counter3].time == p.time) || (temp2 [counter3].location == p.location && temp2 [counter3].time == p.time)) " is 161.
Complex Conditional,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The conditional expression  "K == 0 || L == 0 || P == -1 || N == -1 || E == -1 || S == -1"  is complex.
Complex Conditional,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The conditional expression  "K == 0 || P == -1 || N == -1 || E == -1 || S == -1"  is complex.
Complex Conditional,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The conditional expression  "K == 0 || L == 0 || P == -1 || N == -1 || E == -1 || S == -1"  is complex.
Complex Conditional,WorkFlow,RemoveVprimFromPClass,C:\repos\McGill-DMaS_TALF\WorkFlow\RemoveVprimFromPClass.cs,RemoveVprimFromPF,The conditional expression  "temp2.location == P [i].location && temp2.time == P [i].time && temp2.location != p.location && temp2.time != p.time"  is complex.
Complex Conditional,WorkFlow,SelfJoinForGeneratingQClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SelfJoinForGeneratingQClass.cs,SelfJoinF,The conditional expression  "(temp1 [counter3].location == p.location && temp1 [counter3].time == p.time) || (temp2 [counter3].location == p.location && temp2 [counter3].time == p.time)"  is complex.
Empty Catch Block,WorkFlow,GetLKClass,C:\repos\McGill-DMaS_TALF\WorkFlow\GetLKClass.cs,GetLKF,The method has an empty catch block.
Empty Catch Block,WorkFlow,GetLKClass,C:\repos\McGill-DMaS_TALF\WorkFlow\GetLKClass.cs,GetLKF,The method has an empty catch block.
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: EdgCAvg = Math.Round (EdgCAvg / rawGraph.Count' 2);  
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: EdgOutAvg = Math.Round (EdgOutAvg / (rawGraph.Count - EdgeOutZero)' 2);  
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: NodAvg = Math.Round (NodAvg / rawGraph.Count' 2);  
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: return FinalRatio = Math.Round ((EdgCAvg * 0.2) + (EdgOutAvg * 0.3) + (NodAvg * 0.5)' 2);  
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: return FinalRatio = Math.Round ((EdgCAvg * 0.2) + (EdgOutAvg * 0.3) + (NodAvg * 0.5)' 2);  
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: return FinalRatio = Math.Round ((EdgCAvg * 0.2) + (EdgOutAvg * 0.3) + (NodAvg * 0.5)' 2);  
Magic Number,WorkFlow,CompareClass,C:\repos\McGill-DMaS_TALF\WorkFlow\CompareClass.cs,Compare,The following statement contains a magic number: return FinalRatio = Math.Round ((EdgCAvg * 0.2) + (EdgOutAvg * 0.3) + (NodAvg * 0.5)' 2);  
Magic Number,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,The following statement contains a magic number: ProbCAvg = Math.Round (ProbCAvg / ProbCnt' 2);  
Magic Number,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,The following statement contains a magic number: EdgCAvg = Math.Round (EdgCAvg / rawGraph.Count' 2);  
Magic Number,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,The following statement contains a magic number: EdgOutAvg = Math.Round (EdgOutAvg / (rawGraph.Count - EdgeOutZero)' 2);  
Magic Number,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,The following statement contains a magic number: NodAvg = Math.Round (NodAvg / rawGraph.Count' 2);  
Magic Number,WorkFlow,CompareClassNew,C:\repos\McGill-DMaS_TALF\WorkFlow\Copy of CompareClass.cs,Compare,The following statement contains a magic number: return FinalRatio = Math.Round ((EdgCAvg * s) + (EdgOutAvg * e) + (NodAvg * n) + (ProbCAvg * p)' 2);  
Magic Number,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following statement contains a magic number: if (Ttable != null && rootNode != null) {  	//List<List<LTClass>> TtableRaw = Ttable;  	UtilityLoss = new List<UtilityClass> ();  	UtilityClass ULF = new UtilityClass (0' 0' 0' 0' 0' 0);  	sw = Stopwatch.StartNew ();  	List<UtilityClass> FinalUL = ULF.UF (UtilityLoss' rootNode);  	UtilityLoss = FinalUL.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	ULF = null;  	FinalUL = null;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Utility Loss successful!");  	MVS MVSO = new MVS ();  	sw = Stopwatch.StartNew ();  	MVSO.MVSF (UtilityLoss' rootNode' Ttable' L' K);  	V = MVSO.V;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("MVS successful!");  	MVSO = null;  	ScoreClass ScoreObj = new ScoreClass (0' 0' 0' 0);  	ScoreArray = new List<ScoreClass> ();  	sw = Stopwatch.StartNew ();  	switch (sc) {  	case 0:  		ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 1:  		ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 2:  		ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 3:  		ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	}  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Score Function successful!");  	ScoreObj = null;  	PrintDataClass PO = new PrintDataClass ();  	BuildFlowTreeForVSClass BuildFlowGraph = new BuildFlowTreeForVSClass ();  	AnonymizeAlgortimClass AnonymizeO = new AnonymizeAlgortimClass ();  	sw = Stopwatch.StartNew ();  	Ttable = AnonymizeO.AnonymizeF (Ttable' ScoreArray' V' L' K' sc' N' E' S' listBox6);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Anonymization successful!");  	sw = Stopwatch.StartNew ();  	PO.PrintF (listBox1' Ttable);  	PO = null;  	ScoreArray = null;  	V = null;  	AnonymizeO = null;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Printing Anonymized Data successful!");  	sw = Stopwatch.StartNew ();  	WriteFile wf = new WriteFile ();  	wf.write (Ttable);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Writing Anonymized Data to file: " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Writing Anonymized Data to file successful!");  	sw = Stopwatch.StartNew ();  	rootNodeAnonymize = BuildFlowGraph.BuildFlowTreeForVSF (Ttable);  	BuildFlowGraph = null;  	string str = "";  	listBox3.Items.Clear ();  	List<LTPairs> prev = null;  	PrintClass p1 = new PrintClass ();  	if (rootNodeAnonymize.next [0] == null)  		MessageBox.Show ("ALL the records have been removed!"' "Warning!");  	else {  		p1.print (rootNodeAnonymize' str' prev' listBox3);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		//MessageBox.Show("Printing Anonymized Graph successful!");  		sw = Stopwatch.StartNew ();  		rawGraph = new List<UtilityClassNew> ();  		anonymizeGraph = new List<UtilityClassNew> ();  		UtilityClassNew ULFF = new UtilityClassNew (0' 0' 0' 0' 0' 0);  		FinalUL2 = ULFF.UF (anonymizeGraph' rootNodeAnonymize);  		anonymizeGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		FinalUL2 = ULFF.UF (rawGraph' rootNode);  		rawGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		CompareClassNew compp = new CompareClassNew ();  		Ratio = compp.Compare (rawGraph' anonymizeGraph' P' N' E' S);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		//MessageBox.Show("Comparison successful!");  		// int NumberOfStations = 0;  		/*foreach (ComparisonClass temp in Comp)                     {                         NumberOfStations++;                         if (temp.flag == 0)                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");                         else                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     is removed from the Graph!");                     }*/double raw = rawGraph.Count;  		double anon = anonymizeGraph.Count;  		listBox5.Items.Clear ();  		listBox5.Items.Add ("Total similarity between the two Flowgraphs is:   " + Ratio.ToString ());  		double ul = Math.Round (((raw - anon) / raw)' 2);  		listBox5.Items.Add ("Instance Utility Loss is: " + ul);  		label10.Visible = true;  		elapsedTime = sw.Elapsed;  		label8.Visible = true;  		label9.Visible = true;  		label16.Visible = true;  		label14.Visible = true;  		label4.Visible = true;  		label13.Visible = true;  		// label12.Text = "Minutes " + elapsedTime.Minutes.ToString() + "  Seconds " + elapsedTime.Seconds.ToString();  		label15.Text = rawGraph.Count.ToString ();  		///////  	}  }  
Magic Number,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following statement contains a magic number: if (Ttable != null && rootNode != null) {  	//List<List<LTClass>> TtableRaw = Ttable;  	UtilityLoss = new List<UtilityClass> ();  	UtilityClass ULF = new UtilityClass (0' 0' 0' 0' 0' 0);  	sw = Stopwatch.StartNew ();  	List<UtilityClass> FinalUL = ULF.UF (UtilityLoss' rootNode);  	UtilityLoss = FinalUL.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	ULF = null;  	FinalUL = null;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Utility Loss successful!");  	MVS MVSO = new MVS ();  	sw = Stopwatch.StartNew ();  	MVSO.MVSF (UtilityLoss' rootNode' Ttable' L' K);  	V = MVSO.V;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("MVS successful!");  	MVSO = null;  	ScoreClass ScoreObj = new ScoreClass (0' 0' 0' 0);  	ScoreArray = new List<ScoreClass> ();  	sw = Stopwatch.StartNew ();  	switch (sc) {  	case 0:  		ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 1:  		ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 2:  		ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 3:  		ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	}  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Score Function successful!");  	ScoreObj = null;  	PrintDataClass PO = new PrintDataClass ();  	BuildFlowTreeForVSClass BuildFlowGraph = new BuildFlowTreeForVSClass ();  	AnonymizeAlgortimClass AnonymizeO = new AnonymizeAlgortimClass ();  	sw = Stopwatch.StartNew ();  	Ttable = AnonymizeO.AnonymizeF (Ttable' ScoreArray' V' L' K' sc' N' E' S' listBox6);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Anonymization successful!");  	sw = Stopwatch.StartNew ();  	PO.PrintF (listBox1' Ttable);  	PO = null;  	ScoreArray = null;  	V = null;  	AnonymizeO = null;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Printing Anonymized Data successful!");  	sw = Stopwatch.StartNew ();  	WriteFile wf = new WriteFile ();  	wf.write (Ttable);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Writing Anonymized Data to file: " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Writing Anonymized Data to file successful!");  	sw = Stopwatch.StartNew ();  	rootNodeAnonymize = BuildFlowGraph.BuildFlowTreeForVSF (Ttable);  	BuildFlowGraph = null;  	string str = "";  	listBox3.Items.Clear ();  	List<LTPairs> prev = null;  	PrintClass p1 = new PrintClass ();  	if (rootNodeAnonymize.next [0] == null)  		MessageBox.Show ("ALL the records have been removed!"' "Warning!");  	else {  		p1.print (rootNodeAnonymize' str' prev' listBox3);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		//MessageBox.Show("Printing Anonymized Graph successful!");  		sw = Stopwatch.StartNew ();  		rawGraph = new List<UtilityClassNew> ();  		anonymizeGraph = new List<UtilityClassNew> ();  		UtilityClassNew ULFF = new UtilityClassNew (0' 0' 0' 0' 0' 0);  		FinalUL2 = ULFF.UF (anonymizeGraph' rootNodeAnonymize);  		anonymizeGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		FinalUL2 = ULFF.UF (rawGraph' rootNode);  		rawGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		CompareClassNew compp = new CompareClassNew ();  		Ratio = compp.Compare (rawGraph' anonymizeGraph' P' N' E' S);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		//MessageBox.Show("Comparison successful!");  		// int NumberOfStations = 0;  		/*foreach (ComparisonClass temp in Comp)                     {                         NumberOfStations++;                         if (temp.flag == 0)                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");                         else                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     is removed from the Graph!");                     }*/double raw = rawGraph.Count;  		double anon = anonymizeGraph.Count;  		listBox5.Items.Clear ();  		listBox5.Items.Add ("Total similarity between the two Flowgraphs is:   " + Ratio.ToString ());  		double ul = Math.Round (((raw - anon) / raw)' 2);  		listBox5.Items.Add ("Instance Utility Loss is: " + ul);  		label10.Visible = true;  		elapsedTime = sw.Elapsed;  		label8.Visible = true;  		label9.Visible = true;  		label16.Visible = true;  		label14.Visible = true;  		label4.Visible = true;  		label13.Visible = true;  		// label12.Text = "Minutes " + elapsedTime.Minutes.ToString() + "  Seconds " + elapsedTime.Seconds.ToString();  		label15.Text = rawGraph.Count.ToString ();  		///////  	}  }  
Magic Number,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following statement contains a magic number: if (Ttable != null && rootNode != null) {  	//List<List<LTClass>> TtableRaw = Ttable;  	UtilityLoss = new List<UtilityClass> ();  	UtilityClass ULF = new UtilityClass (0' 0' 0' 0' 0' 0);  	sw = Stopwatch.StartNew ();  	List<UtilityClass> FinalUL = ULF.UF (UtilityLoss' rootNode);  	UtilityLoss = FinalUL.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	ULF = null;  	FinalUL = null;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Utility Loss successful!");  	MVS MVSO = new MVS ();  	sw = Stopwatch.StartNew ();  	MVSO.MVSF (UtilityLoss' rootNode' Ttable' L' K);  	V = MVSO.V;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("MVS successful!");  	MVSO = null;  	ScoreClass ScoreObj = new ScoreClass (0' 0' 0' 0);  	ScoreArray = new List<ScoreClass> ();  	sw = Stopwatch.StartNew ();  	switch (sc) {  	case 0:  		ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 1:  		ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 2:  		ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 3:  		ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	}  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Score Function successful!");  	ScoreObj = null;  	PrintDataClass PO = new PrintDataClass ();  	BuildFlowTreeForVSClass BuildFlowGraph = new BuildFlowTreeForVSClass ();  	AnonymizeAlgortimClass AnonymizeO = new AnonymizeAlgortimClass ();  	sw = Stopwatch.StartNew ();  	Ttable = AnonymizeO.AnonymizeF (Ttable' ScoreArray' V' L' K' sc' N' E' S' listBox6);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Anonymization successful!");  	sw = Stopwatch.StartNew ();  	PO.PrintF (listBox1' Ttable);  	PO = null;  	ScoreArray = null;  	V = null;  	AnonymizeO = null;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Printing Anonymized Data successful!");  	sw = Stopwatch.StartNew ();  	WriteFile wf = new WriteFile ();  	wf.write (Ttable);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Writing Anonymized Data to file: " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Writing Anonymized Data to file successful!");  	sw = Stopwatch.StartNew ();  	rootNodeAnonymize = BuildFlowGraph.BuildFlowTreeForVSF (Ttable);  	BuildFlowGraph = null;  	string str = "";  	listBox3.Items.Clear ();  	List<LTPairs> prev = null;  	PrintClass p1 = new PrintClass ();  	if (rootNodeAnonymize.next [0] == null)  		MessageBox.Show ("ALL the records have been removed!"' "Warning!");  	else {  		p1.print (rootNodeAnonymize' str' prev' listBox3);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		//MessageBox.Show("Printing Anonymized Graph successful!");  		sw = Stopwatch.StartNew ();  		rawGraph = new List<UtilityClassNew> ();  		anonymizeGraph = new List<UtilityClassNew> ();  		UtilityClassNew ULFF = new UtilityClassNew (0' 0' 0' 0' 0' 0);  		FinalUL2 = ULFF.UF (anonymizeGraph' rootNodeAnonymize);  		anonymizeGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		FinalUL2 = ULFF.UF (rawGraph' rootNode);  		rawGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		CompareClassNew compp = new CompareClassNew ();  		Ratio = compp.Compare (rawGraph' anonymizeGraph' P' N' E' S);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		//MessageBox.Show("Comparison successful!");  		// int NumberOfStations = 0;  		/*foreach (ComparisonClass temp in Comp)                     {                         NumberOfStations++;                         if (temp.flag == 0)                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");                         else                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     is removed from the Graph!");                     }*/double raw = rawGraph.Count;  		double anon = anonymizeGraph.Count;  		listBox5.Items.Clear ();  		listBox5.Items.Add ("Total similarity between the two Flowgraphs is:   " + Ratio.ToString ());  		double ul = Math.Round (((raw - anon) / raw)' 2);  		listBox5.Items.Add ("Instance Utility Loss is: " + ul);  		label10.Visible = true;  		elapsedTime = sw.Elapsed;  		label8.Visible = true;  		label9.Visible = true;  		label16.Visible = true;  		label14.Visible = true;  		label4.Visible = true;  		label13.Visible = true;  		// label12.Text = "Minutes " + elapsedTime.Minutes.ToString() + "  Seconds " + elapsedTime.Seconds.ToString();  		label15.Text = rawGraph.Count.ToString ();  		///////  	}  }  
Magic Number,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following statement contains a magic number: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Magic Number,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following statement contains a magic number: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Magic Number,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following statement contains a magic number: if (rootNodeAnonymize.next [0] == null)  	MessageBox.Show ("ALL the records have been removed!"' "Warning!");  else {  	p1.print (rootNodeAnonymize' str' prev' listBox3);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Printing Anonymized Graph successful!");  	sw = Stopwatch.StartNew ();  	rawGraph = new List<UtilityClassNew> ();  	anonymizeGraph = new List<UtilityClassNew> ();  	UtilityClassNew ULFF = new UtilityClassNew (0' 0' 0' 0' 0' 0);  	FinalUL2 = ULFF.UF (anonymizeGraph' rootNodeAnonymize);  	anonymizeGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	FinalUL2 = ULFF.UF (rawGraph' rootNode);  	rawGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	CompareClassNew compp = new CompareClassNew ();  	Ratio = compp.Compare (rawGraph' anonymizeGraph' P' N' E' S);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	//MessageBox.Show("Comparison successful!");  	// int NumberOfStations = 0;  	/*foreach (ComparisonClass temp in Comp)                     {                         NumberOfStations++;                         if (temp.flag == 0)                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");                         else                             listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     is removed from the Graph!");                     }*/double raw = rawGraph.Count;  	double anon = anonymizeGraph.Count;  	listBox5.Items.Clear ();  	listBox5.Items.Add ("Total similarity between the two Flowgraphs is:   " + Ratio.ToString ());  	double ul = Math.Round (((raw - anon) / raw)' 2);  	listBox5.Items.Add ("Instance Utility Loss is: " + ul);  	label10.Visible = true;  	elapsedTime = sw.Elapsed;  	label8.Visible = true;  	label9.Visible = true;  	label16.Visible = true;  	label14.Visible = true;  	label4.Visible = true;  	label13.Visible = true;  	// label12.Text = "Minutes " + elapsedTime.Minutes.ToString() + "  Seconds " + elapsedTime.Seconds.ToString();  	label15.Text = rawGraph.Count.ToString ();  	///////  }  
Magic Number,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The following statement contains a magic number: if (Ttable != null && rootNode != null) {  	//List<List<LTClass>> TtableRaw = Ttable;  	List<UtilityClass> UtilityLoss = new List<UtilityClass> ();  	UtilityClass ULF = new UtilityClass (0' 0' 0' 0' 0' 0);  	sw = Stopwatch.StartNew ();  	List<UtilityClass> FinalUL = ULF.UF (UtilityLoss' rootNode);  	UtilityLoss = FinalUL.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	MVS MVSO = new MVS ();  	List<List<LTClass>> V;  	sw = Stopwatch.StartNew ();  	MVSO.MVSF (UtilityLoss' rootNode' Ttable' L' K);  	V = MVSO.V;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	ScoreClass ScoreObj = new ScoreClass (0' 0' 0' 0);  	List<ScoreClass> ScoreArray = new List<ScoreClass> ();  	sw = Stopwatch.StartNew ();  	switch (sc) {  	case 0:  		ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 1:  		ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 2:  		ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 3:  		ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	}  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	PrintDataClass PO = new PrintDataClass ();  	BuildFlowTreeForVSClass BuildFlowGraph = new BuildFlowTreeForVSClass ();  	AnonymizeAlgortimClass AnonymizeO = new AnonymizeAlgortimClass ();  	sw = Stopwatch.StartNew ();  	Ttable = AnonymizeO.AnonymizeF (Ttable' ScoreArray' V' L' K' sc' N' E' S' listBox6);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	sw = Stopwatch.StartNew ();  	//PO.PrintF(listBox1' Ttable);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	sw = Stopwatch.StartNew ();  	rootNodeAnonymize = BuildFlowGraph.BuildFlowTreeForVSF (Ttable);  	string str = "";  	listBox3.Items.Clear ();  	List<LTPairs> prev = null;  	PrintClass p1 = new PrintClass ();  	if (rootNodeAnonymize.next [0] == null)  		MessageBox.Show ("ALL the records have been removed!"' "Warning!");  	else {  		//p1.print(rootNodeAnonymize' str' prev' listBox3);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		sw = Stopwatch.StartNew ();  		List<UtilityClassNew> rawGraph = new List<UtilityClassNew> ();  		List<UtilityClassNew> anonymizeGraph = new List<UtilityClassNew> ();  		UtilityClassNew ULFF = new UtilityClassNew (0' 0' 0' 0' 0' 0);  		List<UtilityClassNew> FinalUL2 = ULFF.UF (anonymizeGraph' rootNodeAnonymize);  		anonymizeGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		FinalUL2 = ULFF.UF (rawGraph' rootNode);  		rawGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		CompareClassNew compp = new CompareClassNew ();  		double Ratio = compp.Compare (rawGraph' anonymizeGraph' P' N' E' S);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		// int NumberOfStations = 0;  		/* foreach (ComparisonClass temp in Comp)                      {                          NumberOfStations++;                          if (temp.flag == 0)                              listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");                          else                              listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     is removed from the Graph!");                      }*/listBox5.Items.Clear ();  		listBox5.Items.Add ("Total similarity between the two Flowgraphs is:   " + Ratio.ToString ());  		label10.Visible = true;  		elapsedTime = sw.Elapsed;  		label8.Visible = true;  		label9.Visible = true;  		label16.Visible = true;  		// label12.Text = "Minutes " + elapsedTime.Minutes.ToString() + "  Seconds " + elapsedTime.Seconds.ToString();  		label15.Text = rawGraph.Count.ToString ();  		///////  	}  }  
Magic Number,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The following statement contains a magic number: if (Ttable != null && rootNode != null) {  	//List<List<LTClass>> TtableRaw = Ttable;  	List<UtilityClass> UtilityLoss = new List<UtilityClass> ();  	UtilityClass ULF = new UtilityClass (0' 0' 0' 0' 0' 0);  	sw = Stopwatch.StartNew ();  	List<UtilityClass> FinalUL = ULF.UF (UtilityLoss' rootNode);  	UtilityLoss = FinalUL.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Calculating UtiliyLoss : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	MVS MVSO = new MVS ();  	List<List<LTClass>> V;  	sw = Stopwatch.StartNew ();  	MVSO.MVSF (UtilityLoss' rootNode' Ttable' L' K);  	V = MVSO.V;  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Generating MVS : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	ScoreClass ScoreObj = new ScoreClass (0' 0' 0' 0);  	List<ScoreClass> ScoreArray = new List<ScoreClass> ();  	sw = Stopwatch.StartNew ();  	switch (sc) {  	case 0:  		ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 1:  		ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 2:  		ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	case 3:  		ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  		ScoreArray = ScoreObj.ScoreArray;  		break;  	}  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Score Function : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	PrintDataClass PO = new PrintDataClass ();  	BuildFlowTreeForVSClass BuildFlowGraph = new BuildFlowTreeForVSClass ();  	AnonymizeAlgortimClass AnonymizeO = new AnonymizeAlgortimClass ();  	sw = Stopwatch.StartNew ();  	Ttable = AnonymizeO.AnonymizeF (Ttable' ScoreArray' V' L' K' sc' N' E' S' listBox6);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Anonymization : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	sw = Stopwatch.StartNew ();  	//PO.PrintF(listBox1' Ttable);  	sw.Stop ();  	elapsedTime = sw.Elapsed;  	listBox6.Items.Add ("Printing Anonymized Data : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  	sw = Stopwatch.StartNew ();  	rootNodeAnonymize = BuildFlowGraph.BuildFlowTreeForVSF (Ttable);  	string str = "";  	listBox3.Items.Clear ();  	List<LTPairs> prev = null;  	PrintClass p1 = new PrintClass ();  	if (rootNodeAnonymize.next [0] == null)  		MessageBox.Show ("ALL the records have been removed!"' "Warning!");  	else {  		//p1.print(rootNodeAnonymize' str' prev' listBox3);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Printing Anonymized Graph : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		sw = Stopwatch.StartNew ();  		List<UtilityClassNew> rawGraph = new List<UtilityClassNew> ();  		List<UtilityClassNew> anonymizeGraph = new List<UtilityClassNew> ();  		UtilityClassNew ULFF = new UtilityClassNew (0' 0' 0' 0' 0' 0);  		List<UtilityClassNew> FinalUL2 = ULFF.UF (anonymizeGraph' rootNodeAnonymize);  		anonymizeGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		FinalUL2 = ULFF.UF (rawGraph' rootNode);  		rawGraph = FinalUL2.OrderBy (x => x.time).ThenBy (x => x.location).ToList ();  		CompareClassNew compp = new CompareClassNew ();  		double Ratio = compp.Compare (rawGraph' anonymizeGraph' P' N' E' S);  		sw.Stop ();  		elapsedTime = sw.Elapsed;  		listBox6.Items.Add ("Comparison Part : " + elapsedTime.Minutes.ToString () + " Minutes " + elapsedTime.Seconds.ToString () + "  Seconds ");  		// int NumberOfStations = 0;  		/* foreach (ComparisonClass temp in Comp)                      {                          NumberOfStations++;                          if (temp.flag == 0)                              listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     Difference in number of Edges Out (" + temp.EdgesOut + ")       Difference in total nubmer Of Edges (" + temp.EdgeCounter + ")      Difference in number of Nodes (" + temp.Nodes + ")");                          else                              listBox5.Items.Add("(L" + temp.location + "'T" + temp.time + ")     is removed from the Graph!");                      }*/listBox5.Items.Clear ();  		listBox5.Items.Add ("Total similarity between the two Flowgraphs is:   " + Ratio.ToString ());  		label10.Visible = true;  		elapsedTime = sw.Elapsed;  		label8.Visible = true;  		label9.Visible = true;  		label16.Visible = true;  		// label12.Text = "Minutes " + elapsedTime.Minutes.ToString() + "  Seconds " + elapsedTime.Seconds.ToString();  		label15.Text = rawGraph.Count.ToString ();  		///////  	}  }  
Magic Number,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The following statement contains a magic number: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Magic Number,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The following statement contains a magic number: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Magic Number,WorkFlow,ProgBar,C:\repos\McGill-DMaS_TALF\WorkFlow\ProgBar.cs,ProgBar_Load,The following statement contains a magic number: progressBar1.Maximum = 110000;  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunction,The following statement contains a magic number: foreach (UtilityClass P in UtilityLoss) {  	foreach (List<LTClass> temp in V) {  		foreach (LTClass temp2 in temp) {  			if (temp2.location == P.location && temp2.time == P.time) {  				foreach (ScoreClass S in ScoreArray) {  					if (S.location == P.location && S.time == P.time) {  						S.PrivGain++;  						flag = 1;  						break;  					}  				}  				if (flag == 0) {  					ScoreArray.Add (new ScoreClass (P.location' P.time' 1' 0));  					flag = 1;  				}  				break;  			}  		}  	}  	if (flag == 1) {  		ScoreArray [i].Score = (ScoreArray [i].PrivGain) / (P.Nodes * n + P.EdgesOut * e + P.EdgeCounter * s);  		ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  	}  	else {  		ScoreArray.Add (new ScoreClass (P.location' P.time' 0' 0));  	}  	flag = 0;  	i++;  }  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunction,The following statement contains a magic number: if (flag == 1) {  	ScoreArray [i].Score = (ScoreArray [i].PrivGain) / (P.Nodes * n + P.EdgesOut * e + P.EdgeCounter * s);  	ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  }  else {  	ScoreArray.Add (new ScoreClass (P.location' P.time' 0' 0));  }  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunction,The following statement contains a magic number: ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionULE1,The following statement contains a magic number: foreach (UtilityClass P in UtilityLoss) {  	foreach (List<LTClass> temp in V) {  		foreach (LTClass temp2 in temp) {  			if (temp2.location == P.location && temp2.time == P.time) {  				foreach (ScoreClass S in ScoreArray) {  					if (S.location == P.location && S.time == P.time) {  						S.PrivGain++;  						flag = 1;  						break;  					}  				}  				if (flag == 0) {  					ScoreArray.Add (new ScoreClass (P.location' P.time' 1' 0));  					flag = 1;  				}  				break;  			}  		}  	}  	if (flag == 1) {  		ScoreArray [i].Score = (ScoreArray [i].PrivGain) / (1);  		ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  	}  	else {  		ScoreArray.Add (new ScoreClass (P.location' P.time' 0' 0));  	}  	flag = 0;  	i++;  }  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionULE1,The following statement contains a magic number: if (flag == 1) {  	ScoreArray [i].Score = (ScoreArray [i].PrivGain) / (1);  	ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  }  else {  	ScoreArray.Add (new ScoreClass (P.location' P.time' 0' 0));  }  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionULE1,The following statement contains a magic number: ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionPGE1,The following statement contains a magic number: foreach (UtilityClass P in UtilityLoss) {  	foreach (List<LTClass> temp in V) {  		foreach (LTClass temp2 in temp) {  			if (temp2.location == P.location && temp2.time == P.time) {  				foreach (ScoreClass S in ScoreArray) {  					if (S.location == P.location && S.time == P.time) {  						S.PrivGain++;  						flag = 1;  						break;  					}  				}  				if (flag == 0) {  					ScoreArray.Add (new ScoreClass (P.location' P.time' 1' 0));  					flag = 1;  				}  				break;  			}  		}  	}  	if (flag == 1) {  		ScoreArray [i].Score = (1) / (P.Nodes * n + P.EdgesOut * e + P.EdgeCounter * s);  		ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  	}  	else {  		ScoreArray.Add (new ScoreClass (P.location' P.time' 0' 0));  	}  	flag = 0;  	i++;  }  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionPGE1,The following statement contains a magic number: if (flag == 1) {  	ScoreArray [i].Score = (1) / (P.Nodes * n + P.EdgesOut * e + P.EdgeCounter * s);  	ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  }  else {  	ScoreArray.Add (new ScoreClass (P.location' P.time' 0' 0));  }  
Magic Number,WorkFlow,ScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\ScorClass.cs,ScoreFunctionPGE1,The following statement contains a magic number: ScoreArray [i].Score = Math.Round (ScoreArray [i].Score' 3);  
Magic Number,WorkFlow,SuppresAllPfromTClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SuppresAllPfromTClass.cs,SupPF,The following statement contains a magic number: for (int i = 0; i < PArray.Count; i = i + 2) {  	List<LTClass> temp = Ttable [PArray [i] - cnt];  	temp.RemoveAt (PArray [i + 1]);  	if (temp.Count == 0) {  		Ttable.Remove (temp);  		cnt++;  	}  }  
Magic Number,WorkFlow,SuppresAllPfromTClass,C:\repos\McGill-DMaS_TALF\WorkFlow\SuppresAllPfromTClass.cs,SupPF,The following statement contains a magic number: i = i + 2
Magic Number,WorkFlow,UpdateScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\UpdateScoreClass.cs,UpdateScoreF,The following statement contains a magic number: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' n' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' n' e' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' n' e' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Magic Number,WorkFlow,UpdateScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\UpdateScoreClass.cs,UpdateScoreF,The following statement contains a magic number: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' n' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' n' e' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' n' e' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Missing Default,WorkFlow,Form1,C:\repos\McGill-DMaS_TALF\WorkFlow\Form1.cs,button2_Click,The following switch statement is missing a default case: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Missing Default,WorkFlow,MainProgram,C:\repos\McGill-DMaS_TALF\WorkFlow\MainProgram.cs,FlowAnonymization,The following switch statement is missing a default case: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' N' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' N' E' S);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
Missing Default,WorkFlow,UpdateScoreClass,C:\repos\McGill-DMaS_TALF\WorkFlow\UpdateScoreClass.cs,UpdateScoreF,The following switch statement is missing a default case: switch (sc) {  case 0:  	ScoreObj.ScoreFunctionNaiive (V' UtilityLoss' n' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 1:  	ScoreObj.ScoreFunction (V' UtilityLoss' n' e' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 2:  	ScoreObj.ScoreFunctionULE1 (V' UtilityLoss);  	ScoreArray = ScoreObj.ScoreArray;  	break;  case 3:  	ScoreObj.ScoreFunctionPGE1 (V' UtilityLoss' n' e' s);  	ScoreArray = ScoreObj.ScoreArray;  	break;  }  
