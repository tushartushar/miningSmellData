Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,CallWrite,The length of the statement  "			return Expression.Call (typeof (Console).GetMethod ("WriteLine"' new [] { operand.GetType () })' Expression.Constant (operand)); " is 128.
Long Statement,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,DoWhile,The length of the statement  "						Expression.Call (typeof (Console).GetMethod ("WriteLine"' new [] { typeof (int) })' Expression.PostIncrementAssign (i))))' " is 122.
Long Statement,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,While,The length of the statement  "						Expression.Call (typeof (Console).GetMethod ("WriteLine"' new [] { typeof (int) })' Expression.PostIncrementAssign (i))))' " is 122.
Empty Catch Block,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachException,The method has an empty catch block.
Empty Catch Block,Mono.Linq.Expressions,UsingExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\UsingExpressionTest.cs,UsingException,The method has an empty catch block.
Magic Number,Mono.Linq.Expressions,BaseExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\BaseExpressionTest.cs,GetTestCaseName,The following statement contains a magic number: var stack_frame = stack_trace.GetFrame (2);
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,NewArrayBounds,The following statement contains a magic number: var lambda = Expression.Lambda<Func<string ['']>> (  				Expression.NewArrayBounds (  					typeof (string)'  					Expression.Constant (2)'  					Expression.Constant (2)'  					Expression.Constant (2)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,NewArrayBounds,The following statement contains a magic number: var lambda = Expression.Lambda<Func<string ['']>> (  				Expression.NewArrayBounds (  					typeof (string)'  					Expression.Constant (2)'  					Expression.Constant (2)'  					Expression.Constant (2)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,NewArrayBounds,The following statement contains a magic number: var lambda = Expression.Lambda<Func<string ['']>> (  				Expression.NewArrayBounds (  					typeof (string)'  					Expression.Constant (2)'  					Expression.Constant (2)'  					Expression.Constant (2)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,ListInitDict,The following statement contains a magic number: var expression = Expression.ListInit (  				Expression.New (typeof (Dictionary<string' int>))'  				Expression.ElementInit (dict_string_int_add' Expression.Constant ("foo")' Expression.Constant (1))'  				Expression.ElementInit (dict_string_int_add' Expression.Constant ("bar")' Expression.Constant (2)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,MemberInit,The following statement contains a magic number: var expression =  Expression.MemberInit (  				Expression.New (typeof (Foo))'  				Expression.Bind (typeof (Foo).GetProperty ("Bar")' Expression.Constant (42))'  				Expression.ListBind (typeof (Foo).GetProperty ("Baz")'  					Expression.ElementInit (list_int_add' Expression.Constant (4))'  					Expression.ElementInit (list_int_add' Expression.Constant (12)))'  				Expression.MemberBind (typeof (Foo).GetProperty ("Gaz")'  					Expression.Bind (typeof (Gazonk).GetProperty ("Identifier")' Expression.Constant (42))'  					Expression.Bind (typeof (Gazonk).GetProperty ("Name")' Expression.Constant ("Gazonka"))));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,MemberInit,The following statement contains a magic number: var expression =  Expression.MemberInit (  				Expression.New (typeof (Foo))'  				Expression.Bind (typeof (Foo).GetProperty ("Bar")' Expression.Constant (42))'  				Expression.ListBind (typeof (Foo).GetProperty ("Baz")'  					Expression.ElementInit (list_int_add' Expression.Constant (4))'  					Expression.ElementInit (list_int_add' Expression.Constant (12)))'  				Expression.MemberBind (typeof (Foo).GetProperty ("Gaz")'  					Expression.Bind (typeof (Gazonk).GetProperty ("Identifier")' Expression.Constant (42))'  					Expression.Bind (typeof (Gazonk).GetProperty ("Name")' Expression.Constant ("Gazonka"))));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,MemberInit,The following statement contains a magic number: var expression =  Expression.MemberInit (  				Expression.New (typeof (Foo))'  				Expression.Bind (typeof (Foo).GetProperty ("Bar")' Expression.Constant (42))'  				Expression.ListBind (typeof (Foo).GetProperty ("Baz")'  					Expression.ElementInit (list_int_add' Expression.Constant (4))'  					Expression.ElementInit (list_int_add' Expression.Constant (12)))'  				Expression.MemberBind (typeof (Foo).GetProperty ("Gaz")'  					Expression.Bind (typeof (Gazonk).GetProperty ("Identifier")' Expression.Constant (42))'  					Expression.Bind (typeof (Gazonk).GetProperty ("Name")' Expression.Constant ("Gazonka"))));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,MemberInit,The following statement contains a magic number: var expression =  Expression.MemberInit (  				Expression.New (typeof (Foo))'  				Expression.Bind (typeof (Foo).GetProperty ("Bar")' Expression.Constant (42))'  				Expression.ListBind (typeof (Foo).GetProperty ("Baz")'  					Expression.ElementInit (list_int_add' Expression.Constant (4))'  					Expression.ElementInit (list_int_add' Expression.Constant (12)))'  				Expression.MemberBind (typeof (Foo).GetProperty ("Gaz")'  					Expression.Bind (typeof (Gazonk).GetProperty ("Identifier")' Expression.Constant (42))'  					Expression.Bind (typeof (Gazonk).GetProperty ("Name")' Expression.Constant ("Gazonka"))));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,ExceptionHandling,The following statement contains a magic number: var body = Expression.Block (  				CallWrite (0)'  				Expression.MakeTry (null'  					CallWrite (1)'  					CallWrite (4)'  					null'  					new [] {  						Expression.Catch (typeof (OutOfMemoryException)' CallWrite (2)' Expression.GreaterThan (i' Expression.Constant (10)))'  						Expression.Catch (nre' CallWrite (3))  					}));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,ExceptionHandling,The following statement contains a magic number: var body = Expression.Block (  				CallWrite (0)'  				Expression.MakeTry (null'  					CallWrite (1)'  					CallWrite (4)'  					null'  					new [] {  						Expression.Catch (typeof (OutOfMemoryException)' CallWrite (2)' Expression.GreaterThan (i' Expression.Constant (10)))'  						Expression.Catch (nre' CallWrite (3))  					}));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,ExceptionHandling,The following statement contains a magic number: var body = Expression.Block (  				CallWrite (0)'  				Expression.MakeTry (null'  					CallWrite (1)'  					CallWrite (4)'  					null'  					new [] {  						Expression.Catch (typeof (OutOfMemoryException)' CallWrite (2)' Expression.GreaterThan (i' Expression.Constant (10)))'  						Expression.Catch (nre' CallWrite (3))  					}));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,ExceptionHandling,The following statement contains a magic number: var body = Expression.Block (  				CallWrite (0)'  				Expression.MakeTry (null'  					CallWrite (1)'  					CallWrite (4)'  					null'  					new [] {  						Expression.Catch (typeof (OutOfMemoryException)' CallWrite (2)' Expression.GreaterThan (i' Expression.Constant (10)))'  						Expression.Catch (nre' CallWrite (3))  					}));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,Loop,The following statement contains a magic number: var body = Expression.Block (  				new [] { i }'  				Expression.Assign (i' Expression.Constant (0))'  				Expression.Loop (  					Expression.Block (  						Expression.Condition (  							Expression.NotEqual (  								Expression.Modulo (i' Expression.Constant (2))'  								Expression.Constant (0))'  							Expression.Continue (@continue)'  							Expression.Call (typeof (Console).GetMethod ("WriteLine"' new [] { typeof (int) })' i))'  						Expression.Assign (i' Expression.Add (i' Expression.Constant (1)))'  						Expression.Condition (  							Expression.LessThan (i' Expression.Constant (10))'  							Expression.Continue (@continue)'  							Expression.Break (@break)))'  					@break'  					@continue));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,Loop,The following statement contains a magic number: var body = Expression.Block (  				new [] { i }'  				Expression.Assign (i' Expression.Constant (0))'  				Expression.Loop (  					Expression.Block (  						Expression.Condition (  							Expression.NotEqual (  								Expression.Modulo (i' Expression.Constant (2))'  								Expression.Constant (0))'  							Expression.Continue (@continue)'  							Expression.Call (typeof (Console).GetMethod ("WriteLine"' new [] { typeof (int) })' i))'  						Expression.Assign (i' Expression.Add (i' Expression.Constant (1)))'  						Expression.Condition (  							Expression.LessThan (i' Expression.Constant (10))'  							Expression.Continue (@continue)'  							Expression.Break (@break)))'  					@break'  					@continue));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,Switch,The following statement contains a magic number: var body = Expression.Switch (  				i'  				i'  				Expression.SwitchCase (  					Expression.Add (i' Expression.Constant (2))'  					Expression.Constant (0))'  				Expression.SwitchCase (  					Expression.Multiply (i' Expression.Constant (4))'  					Expression.Constant (2)'  					Expression.Constant (4)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,Switch,The following statement contains a magic number: var body = Expression.Switch (  				i'  				i'  				Expression.SwitchCase (  					Expression.Add (i' Expression.Constant (2))'  					Expression.Constant (0))'  				Expression.SwitchCase (  					Expression.Multiply (i' Expression.Constant (4))'  					Expression.Constant (2)'  					Expression.Constant (4)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,Switch,The following statement contains a magic number: var body = Expression.Switch (  				i'  				i'  				Expression.SwitchCase (  					Expression.Add (i' Expression.Constant (2))'  					Expression.Constant (0))'  				Expression.SwitchCase (  					Expression.Multiply (i' Expression.Constant (4))'  					Expression.Constant (2)'  					Expression.Constant (4)));
Magic Number,Mono.Linq.Expressions,CSharpWriterTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\CSharpWriterTest.cs,Switch,The following statement contains a magic number: var body = Expression.Switch (  				i'  				i'  				Expression.SwitchCase (  					Expression.Add (i' Expression.Constant (2))'  					Expression.Constant (0))'  				Expression.SwitchCase (  					Expression.Multiply (i' Expression.Constant (4))'  					Expression.Constant (2)'  					Expression.Constant (4)));
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhile,The following statement contains a magic number: hitcounter (counter' 0' 10);
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhile,The following statement contains a magic number: Assert.AreEqual (10' counter.Count);
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhileFalse,The following statement contains a magic number: hitcounter (counter' 100' 10);
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhileFalse,The following statement contains a magic number: hitcounter (counter' 100' 10);
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhileBreakContinue,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<Counter' int' int>> (  				CustomExpression.DoWhile (  					Expression.LessThan (i' l)'  					Expression.Block (  						Expression.Condition (  							Expression.LessThan (i' Expression.Constant (10))'  							Expression.Block (  								Expression.Call (c' typeof (Counter).GetMethod ("Hit"' Type.EmptyTypes))'  								Expression.PostIncrementAssign (i)'  								Expression.Goto (loop_continue))'  							Expression.Goto (loop_break)))'  					loop_break'  					loop_continue)'  				c' i' l).Compile ();
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhileBreakContinue,The following statement contains a magic number: hitcounter (counter' 0' 100);
Magic Number,Mono.Linq.Expressions,DoWhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\DoWhileExpressionTest.cs,DoWhileBreakContinue,The following statement contains a magic number: Assert.AreEqual (10' counter.Count);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachEnumerable,The following statement contains a magic number: var enumerable_counter = new EnumerableCounter (0' 10);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachEnumerable,The following statement contains a magic number: Assert.AreEqual (10' enumerable_counter.Count);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachArray,The following statement contains a magic number: var counters = Enumerable.Range (0' 3).Select (_ => new Counter()).ToArray ();
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachBreak,The following statement contains a magic number: var enumerable_counter = new EnumerableCounter (0' 100);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachBreak,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<EnumerableCounter>> (  				CustomExpression.ForEach (  					item'  					ec'  					Expression.Block (  						Expression.Condition (  							Expression.LessThanOrEqual (item' Expression.Constant (10))'  							Expression.Call (ec' typeof (EnumerableCounter).GetMethod ("Hit"' Type.EmptyTypes))'  							Expression.Goto (foreach_break)))'  					foreach_break)'  				ec).Compile ();
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachBreak,The following statement contains a magic number: Assert.AreEqual (10' enumerable_counter.Count);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachBreakAfterUpdate,The following statement contains a magic number: var enumerable_counter = new EnumerableCounter(0' 100);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachBreakAfterUpdate,The following statement contains a magic number: var foreach_body = Expression.Block(  						Expression.Call(ec' typeof(EnumerableCounter).GetMethod("Hit"' Type.EmptyTypes))'  						Expression.IfThen(  						Expression.GreaterThanOrEqual(item' Expression.Constant(10))'  							Expression.Goto(foreach_break)  							));
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachBreakAfterUpdate,The following statement contains a magic number: Assert.AreEqual(10' enumerable_counter.Count);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachContinue,The following statement contains a magic number: var enumerable_counter = new EnumerableCounter (0' 10);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachContinue,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<EnumerableCounter>> (  				CustomExpression.ForEach (  					item'  					ec'  					Expression.Block (  						Expression.Condition (  							Expression.Equal (Expression.Modulo (item' Expression.Constant (2))' Expression.Constant (0))'  							Expression.Call (ec' typeof (EnumerableCounter).GetMethod ("Hit"' Type.EmptyTypes))'  							Expression.Goto (foreach_continue)))'  					foreach_break'  					foreach_continue)'  				ec).Compile ();
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachContinue,The following statement contains a magic number: Assert.AreEqual (5' enumerable_counter.Count);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachException,The following statement contains a magic number: var enumerable_counter = new EnumerableCounter (0' 100);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachException,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<EnumerableCounter>> (  				CustomExpression.ForEach (  					item'  					ec'  					Expression.Block (  						Expression.Condition (  							Expression.LessThanOrEqual (item' Expression.Constant (10))'  							Expression.Call (ec' typeof (EnumerableCounter).GetMethod ("Hit"' Type.EmptyTypes))'  							Expression.Throw (Expression.New (typeof (TestException))))))'  				ec).Compile ();
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachException,The following statement contains a magic number: Assert.AreEqual (10' enumerable_counter.Count);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachNonGeneric,The following statement contains a magic number: var enumerable_counter = new NonGenericEnumerableCounter (0' 10);
Magic Number,Mono.Linq.Expressions,ForEachExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForEachExpressionTest.cs,ForEachNonGeneric,The following statement contains a magic number: Assert.AreEqual (10' enumerable_counter.Count);
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,For,The following statement contains a magic number: hitcounter (counter' 10);
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,For,The following statement contains a magic number: Assert.AreEqual (10' counter.Count);
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,ForBreak,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<Counter' int>> (  				CustomExpression.For (  					i'  					Expression.Constant (0)'  					Expression.LessThan (i' l)'  					Expression.PreIncrementAssign (i)'  					Expression.Block (  						Expression.Condition (  							Expression.LessThan (i' Expression.Constant (10))'  							Expression.Call (c' typeof (Counter).GetMethod ("Hit"' Type.EmptyTypes))'  							Expression.Goto (for_break)))'  					for_break)'  				c' l).Compile ();
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,ForBreak,The following statement contains a magic number: hitcounter (counter' 100);
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,ForBreak,The following statement contains a magic number: Assert.AreEqual (10' counter.Count);
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,ForContinue,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<Counter' int>> (  				CustomExpression.For (  					i'  					Expression.Constant (0)'  					Expression.LessThan (i' l)'  					Expression.PreIncrementAssign (i)'  					Expression.Block (  						Expression.Condition (  							Expression.Equal (Expression.Modulo (i' Expression.Constant (2))' Expression.Constant (0))'  							Expression.Call (c' typeof (Counter).GetMethod ("Hit"' Type.EmptyTypes))'  							Expression.Goto (for_continue)))'  					for_break'  					for_continue)'  				c' l).Compile ();
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,ForContinue,The following statement contains a magic number: hitcounter (counter' 10);
Magic Number,Mono.Linq.Expressions,ForExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\ForExpressionTest.cs,ForContinue,The following statement contains a magic number: Assert.AreEqual (5' counter.Count);
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,While,The following statement contains a magic number: hitcounter (counter' 0' 10);
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,While,The following statement contains a magic number: Assert.AreEqual (10' counter.Count);
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,WhileFalse,The following statement contains a magic number: hitcounter (counter' 100' 10);
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,WhileFalse,The following statement contains a magic number: hitcounter (counter' 100' 10);
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,WhileBreakContinue,The following statement contains a magic number: var hitcounter = Expression.Lambda<Action<Counter' int' int>> (  				CustomExpression.While (  					Expression.LessThan (i' l)'  					Expression.Block (  						Expression.Condition (  							Expression.LessThan (i' Expression.Constant (10))'  							Expression.Block (  								Expression.Call (c' typeof (Counter).GetMethod ("Hit"' Type.EmptyTypes))'  								Expression.PostIncrementAssign (i)'  								Expression.Goto (loop_continue))'  							Expression.Goto (loop_break)))'  					loop_break'  					loop_continue)'  				c' i' l).Compile ();
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,WhileBreakContinue,The following statement contains a magic number: hitcounter (counter' 0' 100);
Magic Number,Mono.Linq.Expressions,WhileExpressionTest,D:\research\architectureSmells\repos\jbevain_mono.linq.expressions\Test\Mono.Linq.Expressions\WhileExpressionTest.cs,WhileBreakContinue,The following statement contains a magic number: Assert.AreEqual (10' counter.Count);
