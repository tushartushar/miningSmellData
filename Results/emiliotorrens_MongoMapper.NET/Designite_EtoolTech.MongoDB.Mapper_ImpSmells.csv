Implementation smell,Namespace,Class,File,Method,Description
Long Method,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,RebuildClass,The method has 101 lines of code.
Complex Method,EtoolTech.MongoDB.Mapper,MongoQuery<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoQuery.cs,Eq,Cyclomatic complexity of the method is 10
Complex Method,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,CheckRelations,Cyclomatic complexity of the method is 8
Complex Method,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,CreateIndexes,Cyclomatic complexity of the method is 9
Long Parameter List,EtoolTech.MongoDB.Mapper.Attributes,MongoRelation,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Attributes\MongoRelation.cs,MongoRelation,The method has 5 parameters. Parameters: Name' CurrentFieldNames' RelationObjectName' RelationFieldNames' UpRelation
Long Identifier,EtoolTech.MongoDB.Mapper.Configuration,MongoMapperConfiguration,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\MongoMapperConfiguration.cs,GetConfig,The length of the parameter configurationKeyConfigSectionName is 33.
Long Identifier,EtoolTech.MongoDB.Mapper,PropertyValidator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\PropertyValidator.cs,,The length of the parameter BufferPropertyValidatorMethods is 30.
Long Identifier,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,,The length of the parameter LockObjectCustomDiscritminatorTypes is 35.
Long Identifier,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,,The length of the parameter LockObjectCustomCollectionNames is 31.
Long Statement,EtoolTech.MongoDB.Mapper.Configuration,ConfigManager,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\ConfigManager.cs,GetConfigurationKeyModeEnum,The length of the statement  "                return (ConfigurationKeyModeEnum)Enum.Parse(typeof(ConfigurationKeyModeEnum)' ConfigurationManager.AppSettings["MongoMapperConfigurationKeyMode"]); " is 147.
Long Statement,EtoolTech.MongoDB.Mapper.Configuration,ConfigManager,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\ConfigManager.cs,DataBaseName,The length of the statement  "                return String.IsNullOrEmpty(DatabasePrefix) ? cfg.Database.Name : string.Format("{0}_{1}"' DatabasePrefix' cfg.Database.Name); " is 126.
Long Statement,EtoolTech.MongoDB.Mapper.Configuration,ConfigManager,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\ConfigManager.cs,DataBaseName,The length of the statement  "            return String.IsNullOrEmpty(DatabasePrefix) ? Config.Database.Name : string.Format("{0}_{1}"' DatabasePrefix' Config.Database.Name);             " is 132.
Long Statement,EtoolTech.MongoDB.Mapper,CollectionsManager,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\CollectionsManager.cs,GetCollection,The length of the statement  "            string key = string.Format("{0}|{1}|{2}"' Name' typeof (T).FullName' Configuration.ConfigManager.GetConfigurationKey()); " is 120.
Long Statement,EtoolTech.MongoDB.Mapper,CollectionsManager,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\CollectionsManager.cs,CollectionExists,The length of the statement  "            var collections = MongoMapperHelper.Db(Name).ListCollectionsAsync(new ListCollectionsOptions { Filter = filter }).GetAwaiter().GetResult().ToListAsync().Result; " is 160.
Long Statement,EtoolTech.MongoDB.Mapper,MongoQuery<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoQuery.cs,Eq,The length of the statement  "                    query =  Builders<T>.Filter.Regex(FieldName' new BsonRegularExpression(string.Format("{0}i"' Value.ToString().Replace("%"' "")))); " is 130.
Long Statement,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,BuildSchema,The length of the statement  "            List<Type> types = String.IsNullOrEmpty(ClassName) ? Assembly.GetTypes().Where(T => T.BaseType != null && T.BaseType.Name == "MongoMapper`1").ToList() :  " is 152.
Long Statement,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,BuildSchema,The length of the statement  "                Assembly.GetTypes().Where(T => T.BaseType != null && T.BaseType.Name == "MongoMapper`1" && T.Name == ClassName).ToList(); " is 121.
Long Statement,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,DeteleExistingIndexesAndBuildNewOnes,The length of the statement  "            List<Type> types = String.IsNullOrEmpty(ClassName) ? Assembly.GetTypes().Where(T => T.BaseType != null && T.BaseType.Name == "MongoMapper`1").ToList() : " is 152.
Long Statement,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,DeteleExistingIndexesAndBuildNewOnes,The length of the statement  "              Assembly.GetTypes().Where(T => T.BaseType != null && T.BaseType.Name == "MongoMapper`1" && T.Name == ClassName).ToList(); " is 121.
Long Statement,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,CheckRelations,The length of the statement  "            List<Type> types = String.IsNullOrEmpty(ClassName) ? Assembly.GetTypes().Where(T => T.BaseType != null && T.BaseType.Name == "MongoMapper`1").ToList() : " is 152.
Long Statement,EtoolTech.MongoDB.Mapper,ReflectionUtility,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\ReflectionUtility.cs,CheckRelations,The length of the statement  "                Assembly.GetTypes().Where(T => T.BaseType != null && T.BaseType.Name == "MongoMapper`1" && T.Name == ClassName).ToList(); " is 121.
Long Statement,EtoolTech.MongoDB.Mapper,Finder,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Finder.cs,FindBsonDocumentById,The length of the statement  "            var result = CollectionsManager.GetCollection<T>(typeof(T).Name).Find(Builders<T>.Filter.Eq("_id"'Id)).Limit(1).ToListAsync().Result; " is 133.
Long Statement,EtoolTech.MongoDB.Mapper,Finder,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Finder.cs,FindById,The length of the statement  "            var result = CollectionsManager.GetCollection<T>(typeof(T).Name).Find(Builders<T>.Filter.Eq("_id"' Id)).Limit(1).ToListAsync().Result; " is 134.
Long Statement,EtoolTech.MongoDB.Mapper,Finder,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Finder.cs,FindIdByKey,The length of the statement  "            var query = Builders<T>.Filter.And(KeyValues.Select(KeyValue => Builders<T>.Filter.Eq(KeyValue.Key' KeyValue.Value)).ToArray()); " is 128.
Long Statement,EtoolTech.MongoDB.Mapper,Finder,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Finder.cs,FindIdByKey,The length of the statement  "            var result = CollectionsManager.GetCollection<T>(Type.Name).Find(Builders<T>.Filter.And(query)).Project(Builders<T>.Projection.Include("_id")).Limit(1).ToListAsync().Result; " is 173.
Long Statement,EtoolTech.MongoDB.Mapper,Finder,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Finder.cs,FindObjectByKey,The length of the statement  "            var query = Builders<T>.Filter.And(KeyValues.Select(KeyValue => Builders<T>.Filter.Eq(KeyValue.Key' KeyValue.Value)).ToArray()); " is 128.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,RebuildClass,The length of the statement  "                            var colNameAtt = (MongoCollectionName) ClassType.GetCustomAttributes(typeof (MongoCollectionName)' false).FirstOrDefault(); " is 123.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,RebuildClass,The length of the statement  "                Db(ClassType.Name).CreateCollectionAsync((CollectionsManager.GetCollectioName(ClassType.Name))).GetAwaiter().GetResult(); " is 121.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,RebuildClass,The length of the statement  "                        var properties = ClassType.GetProperties().Where(P => P.GetCustomAttributes(typeof(BsonDefaultValueAttribute)' true).Count() != 0); " is 131.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,RebuildClass,The length of the statement  "                            var att = (BsonDefaultValueAttribute)propertyInfo.GetCustomAttributes(typeof(BsonDefaultValueAttribute)' true).FirstOrDefault(); " is 128.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,RebuildClass,The length of the statement  "                        var properties = ClassType.GetProperties().Where(p => p.GetCustomAttributes(typeof(BsonElementAttribute)' true).Count() != 0); " is 126.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,CreateIndexes,The length of the statement  "                    var mongoIndex = Builders<BsonDocument>.IndexKeys.Geo2D(MongoMapperHelper.ConvertFieldName(ClassType.Name' index.Split('|')[1]).Trim()); " is 136.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,CreateIndexes,The length of the statement  "                    var indexFieldnames = MongoMapperHelper.ConvertFieldName(ClassType.Name' index.Split(''').ToList()).Select(IndexField => IndexField.Trim()); " is 140.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapperHelper,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperHelper.cs,CreateIndexes,The length of the statement  "                var indexFieldnames = MongoMapperHelper.ConvertFieldName(ClassType.Name' pk.ToList()).Select(PkField => PkField.Trim()); " is 120.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapper<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapper.cs,IsLastVersion,The length of the statement  "            var result = CollectionsManager.GetCollection<BsonDocument>(_classType.Name).Find(Builders<BsonDocument>.Filter.And(query)).Project(Builders<BsonDocument>.Projection.Include("m_dv")).Limit(1).ToListAsync().Result; " is 213.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapper<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapper.cs,FillFromLastVersion,The length of the statement  "            var result = CollectionsManager.GetCollection<BsonDocument>(_classType.Name).Find(Builders<BsonDocument>.Filter.And(query)).Limit(1).ToListAsync().Result; " is 154.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapper<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapper.cs,GetOriginalObject,The length of the statement  "                throw new NotImplementedException("OriginalObject: This functionality is disabled' enable EnableOriginalObject in the App.config"); " is 131.
Long Statement,EtoolTech.MongoDB.Mapper,MongoMapper<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapper.cs,ServerDelete,The length of the statement  "            var result = CollectionsManager.GetCollection<T>(typeof (T).Name).FindOneAndDeleteAsync(Query).GetAwaiter().GetResult();             " is 120.
Long Statement,EtoolTech.MongoDB.Mapper,Relations<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Relations.cs,CheckRelation,The length of the statement  "            var filters = fieldValues.Select(CurrentFieldvalue => MongoQuery<BsonDocument>.Eq(Relation.RelationObjectName' CurrentFieldvalue.Key' CurrentFieldvalue.Value)).ToList(); " is 169.
Long Statement,EtoolTech.MongoDB.Mapper,Relations<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Relations.cs,GetDownRelations,The length of the statement  "                    var downRelations = relationAttList.Where(RelationAtt => RelationAtt != null && !((MongoRelation) RelationAtt).UpRelation).Cast<MongoRelation>().ToList(); " is 154.
Long Statement,EtoolTech.MongoDB.Mapper,Relations<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Relations.cs,GetUpRelations,The length of the statement  "                    var upRelations = relationAttList.Where(RelationAtt => RelationAtt != null && ((MongoRelation)RelationAtt).UpRelation).Cast<MongoRelation>().ToList(); " is 150.
Complex Conditional,EtoolTech.MongoDB.Mapper,Finder,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\Finder.cs,FindIdByKey,The conditional expression  "KeyValues.Count == 1 && KeyValues.First().Key == "m_id" &&                   KeyValues.First().Value is long &&                   (long) KeyValues.First().Value == default(long)"  is complex.
Empty Catch Block,EtoolTech.MongoDB.Mapper,MongoMapperTransaction,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Transaction\MongoMapperTransaction.cs,Commit,The method has an empty catch block.
Magic Number,EtoolTech.MongoDB.Mapper.Configuration,MongoMapperConfiguration,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\MongoMapperConfiguration.cs,SetDbConfig,The following statement contains a magic number: if (!String.IsNullOrEmpty(dbConfigKey))              {                  string[] values = dbConfigKey.Split('|');                  var client = new MongoClient(values[0]);                                  var db = client.GetDatabase(values[1]);                  db.GetCollection<MongoMapperConfiguracionBase>(values[2]).InsertOneAsync((MongoMapperConfiguracionBase) Configuration);              }
Magic Number,EtoolTech.MongoDB.Mapper.Configuration,MongoMapperConfiguration,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\MongoMapperConfiguration.cs,GetConfig,The following statement contains a magic number: if (string.IsNullOrEmpty(dbConfigKey))              {                  lock (LockCacheObject)                  {                      if (_cache.ContainsKey(ConfigurationKey)) return _cache[ConfigurationKey];                        var configurationKeyConfigSectionName = ConfigSectionName;                      if (!string.IsNullOrEmpty(ConfigurationKey))                      {                          configurationKeyConfigSectionName = string.Format("{0}.{1}"' ConfigurationKey' configurationKeyConfigSectionName);                      }                        var fileConfig = (MongoMapperConfiguration) ConfigurationManager.GetSection(configurationKeyConfigSectionName) ??                           (MongoMapperConfiguration)ConfigurationManager.GetSection(ConfigSectionName);                        var config = new MongoMapperConfiguracionBase                      {                          Context =                              new MongoMapperConfigurationContext                              {                                  EnableOriginalObject = fileConfig.Context.EnableOriginalObject'                                  ExceptionOnDuplicateKey = fileConfig.Context.ExceptionOnDuplicateKey'                                  Generated = fileConfig.Context.Generated'                                  MaxDocumentSize = fileConfig.Context.MaxDocumentSize'                                  UseChidlsIncrementalId = fileConfig.Context.UseChidlsIncrementalId'                                  UseIncrementalId = fileConfig.Context.UseIncrementalId                              }'                          Database = new MongoMapperConfigurationDababase {Name = fileConfig.Database.Name}'                          Server = new MongoMapperConfigurationServer {Url = fileConfig.Server.Url}'                          CustomCollectionConfig = new List<MongoMapperConfigurationElement>()                      };                        foreach (CollectionElement element in fileConfig.CollectionConfig)                      {                          var configElement = new MongoMapperConfigurationElement                          {                              Name = element.Name'                              Context =                                  new MongoMapperConfigurationContext                                  {                                      EnableOriginalObject = element.Context.EnableOriginalObject'                                      ExceptionOnDuplicateKey = element.Context.ExceptionOnDuplicateKey'                                      Generated = element.Context.Generated'                                      MaxDocumentSize = element.Context.MaxDocumentSize'                                      UseChidlsIncrementalId = element.Context.UseChidlsIncrementalId'                                      UseIncrementalId = element.Context.UseIncrementalId                                  }'                              Database = new MongoMapperConfigurationDababase {Name = element.Database.Name}'                              Server = new MongoMapperConfigurationServer {Url = element.Server.Url}                          };                              config.CustomCollectionConfig.Add(configElement);                      }                        _cache.Add(ConfigurationKey' config);                        return _cache[ConfigurationKey];                  }              }              else              {                  string[] values = dbConfigKey.Split('|');                  var client = new MongoClient(values[0]);                  var db = client.GetDatabase(values[1]);                  var config =                      db.GetCollection<MongoMapperConfiguracionBase>(values[2])                          .Find(C => C.Key == values[3])                          .Limit(1)                          .ToListAsync().Result.FirstOrDefault();                      return config;              }
Magic Number,EtoolTech.MongoDB.Mapper.Configuration,MongoMapperConfiguration,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Configuration\MongoMapperConfiguration.cs,GetConfig,The following statement contains a magic number: if (string.IsNullOrEmpty(dbConfigKey))              {                  lock (LockCacheObject)                  {                      if (_cache.ContainsKey(ConfigurationKey)) return _cache[ConfigurationKey];                        var configurationKeyConfigSectionName = ConfigSectionName;                      if (!string.IsNullOrEmpty(ConfigurationKey))                      {                          configurationKeyConfigSectionName = string.Format("{0}.{1}"' ConfigurationKey' configurationKeyConfigSectionName);                      }                        var fileConfig = (MongoMapperConfiguration) ConfigurationManager.GetSection(configurationKeyConfigSectionName) ??                           (MongoMapperConfiguration)ConfigurationManager.GetSection(ConfigSectionName);                        var config = new MongoMapperConfiguracionBase                      {                          Context =                              new MongoMapperConfigurationContext                              {                                  EnableOriginalObject = fileConfig.Context.EnableOriginalObject'                                  ExceptionOnDuplicateKey = fileConfig.Context.ExceptionOnDuplicateKey'                                  Generated = fileConfig.Context.Generated'                                  MaxDocumentSize = fileConfig.Context.MaxDocumentSize'                                  UseChidlsIncrementalId = fileConfig.Context.UseChidlsIncrementalId'                                  UseIncrementalId = fileConfig.Context.UseIncrementalId                              }'                          Database = new MongoMapperConfigurationDababase {Name = fileConfig.Database.Name}'                          Server = new MongoMapperConfigurationServer {Url = fileConfig.Server.Url}'                          CustomCollectionConfig = new List<MongoMapperConfigurationElement>()                      };                        foreach (CollectionElement element in fileConfig.CollectionConfig)                      {                          var configElement = new MongoMapperConfigurationElement                          {                              Name = element.Name'                              Context =                                  new MongoMapperConfigurationContext                                  {                                      EnableOriginalObject = element.Context.EnableOriginalObject'                                      ExceptionOnDuplicateKey = element.Context.ExceptionOnDuplicateKey'                                      Generated = element.Context.Generated'                                      MaxDocumentSize = element.Context.MaxDocumentSize'                                      UseChidlsIncrementalId = element.Context.UseChidlsIncrementalId'                                      UseIncrementalId = element.Context.UseIncrementalId                                  }'                              Database = new MongoMapperConfigurationDababase {Name = element.Database.Name}'                              Server = new MongoMapperConfigurationServer {Url = element.Server.Url}                          };                              config.CustomCollectionConfig.Add(configElement);                      }                        _cache.Add(ConfigurationKey' config);                        return _cache[ConfigurationKey];                  }              }              else              {                  string[] values = dbConfigKey.Split('|');                  var client = new MongoClient(values[0]);                  var db = client.GetDatabase(values[1]);                  var config =                      db.GetCollection<MongoMapperConfiguracionBase>(values[2])                          .Find(C => C.Key == values[3])                          .Limit(1)                          .ToListAsync().Result.FirstOrDefault();                      return config;              }
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: var baseDate = new DateTime(1900' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(days)' 0' bytes' 10' 2);
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(days)' 0' bytes' 10' 2);
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(milliseconds)' 0' bytes' 12' 4);
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(milliseconds)' 0' bytes' 12' 4);
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  Array.Reverse(bytes' 10' 2);                  Array.Reverse(bytes' 12' 4);              }
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  Array.Reverse(bytes' 10' 2);                  Array.Reverse(bytes' 12' 4);              }
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  Array.Reverse(bytes' 10' 2);                  Array.Reverse(bytes' 12' 4);              }
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperIdGenerator,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Core\MongoMapperIdGenerator.cs,GenerateId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  Array.Reverse(bytes' 10' 2);                  Array.Reverse(bytes' 12' 4);              }
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapper<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapper.cs,MongoMapper,The following statement contains a magic number: BsonDefaults.MaxDocumentSize = ConfigManager.MaxDocumentSize(_classType.Name) * 1024 * 1024;
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapper<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapper.cs,MongoMapper,The following statement contains a magic number: BsonDefaults.MaxDocumentSize = ConfigManager.MaxDocumentSize(_classType.Name) * 1024 * 1024;
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperCollection<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapperCollection.cs,MongoMapperCollection,The following statement contains a magic number: BsonDefaults.MaxDocumentSize = ConfigManager.MaxDocumentSize(typeof(T).Name) * 1024 * 1024;
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperCollection<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapperCollection.cs,MongoMapperCollection,The following statement contains a magic number: BsonDefaults.MaxDocumentSize = ConfigManager.MaxDocumentSize(typeof(T).Name) * 1024 * 1024;
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperCollection<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapperCollection.cs,MongoMapperCollection,The following statement contains a magic number: BsonDefaults.MaxDocumentSize = ConfigManager.MaxDocumentSize(typeof(T).Name) * 1024 * 1024;
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperCollection<T>,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\MongoMapperCollection.cs,MongoMapperCollection,The following statement contains a magic number: BsonDefaults.MaxDocumentSize = ConfigManager.MaxDocumentSize(typeof(T).Name) * 1024 * 1024;
Magic Number,EtoolTech.MongoDB.Mapper,MongoMapperTransaction,C:\repos\emiliotorrens_MongoMapper.NET\EtoolTech.MongoDB.Mapper\Transaction\MongoMapperTransaction.cs,Commit,The following statement contains a magic number: try              {                  Commiting = true;                    foreach (Queue queue in TransactionQueue.OrderBy(q => q.Order))                  {                      if (queue.OperationType == OperationType.Insert)                      {                          var result = Writer.Instance.Insert(queue.Type.Name' queue.Type' queue.Document);                          queue.Procesed = true;                      }                        if (queue.OperationType == OperationType.Update)                      {                          var result = Writer.Instance.Update(queue.Type.Name' queue.Type' queue.Document);                          queue.Procesed = true;                      }                        if (queue.OperationType == OperationType.Delete)                      {                          var result = Writer.Instance.Delete(queue.Type.Name' queue.Type' queue.Document);                          queue.Procesed = true;                          queue.Result = 2;                      }                  }              }              catch (Exception)              {                  //TODO: Dejarlo todo como estaba.              }              finally              {                  TransactionQueue.Clear();                  Commiting = false;              }
