Implementation smell,Namespace,Class,File,Method,Description
Long Method,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,CheckUpdateItem,The method has 139 lines of code.
Complex Method,FTPboxLib,AccountController,C:\repos\FTPbox_FTPbox\FTPboxLib\AccountController.cs,GetCommonPath,Cyclomatic complexity of the method is 10
Complex Method,FTPboxLib,Settings,C:\repos\FTPbox_FTPbox\FTPboxLib\Settings.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,StartQueue,Cyclomatic complexity of the method is 8
Complex Method,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,CheckLocalFolder,Cyclomatic complexity of the method is 11
Complex Method,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,CheckUpdateItem,Cyclomatic complexity of the method is 18
Long Parameter List,FTPboxLib,ClientItem,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\ClientItem.cs,ClientItem,The method has 5 parameters. Parameters: name' path' type' size' lastWriteTime
Long Parameter List,Utilities.Encryption,AESEncryption,C:\repos\FTPbox_FTPbox\FTPboxLib\Crypto\AESEncryption.cs,Encrypt,The method has 6 parameters. Parameters: plainText' password' salt' passwordIterations' initialVector' keySize
Long Parameter List,Utilities.Encryption,AESEncryption,C:\repos\FTPbox_FTPbox\FTPboxLib\Crypto\AESEncryption.cs,Decrypt,The method has 6 parameters. Parameters: cipherText' password' salt' passwordIterations' initialVector' keySize
Long Statement,FTPboxLib,AccountController,C:\repos\FTPbox_FTPbox\FTPboxLib\AccountController.cs,GetCommonPath,The length of the statement  "                    if (p.StartsWithButNotEqual(HomePath) || p.StartsWithButNotEqual(HomePath.RemoveSlashes()) || p.RemoveSlashes().StartsWithButNotEqual(HomePath)) " is 144.
Long Statement,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The length of the statement  "            var p = (uint)attr.GetType().GetProperty("Permissions"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance).GetValue(attr' null); " is 147.
Long Statement,FTPboxLib,CustomFilter,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncFilter.cs,IsIgnored,The length of the statement  "            if (IgnoreTempFiles && (name.ToLower().EndsWith(".tmp") || name.EndsWith("~") || name.StartsWith(".goutputstream") || name.StartsWith("~") || name.Equals("Thumbs.db"))) " is 168.
Long Statement,FTPboxLib,FolderWatcher,C:\repos\FTPbox_FTPbox\FTPboxLib\FolderWatcher.cs,OnRenamed,The length of the statement  "            Log.Write(l.Debug' $"isFile: {isFile} renamedFromTempFile: {renamedFromTempFile} renamedToTempFile: {renamedToTempFile} inFileLog: {_controller.FileLog.Contains(oldCommon)}"); " is 175.
Long Statement,FTPboxLib,Notifications,C:\repos\FTPbox_FTPbox\FTPboxLib\Notifications.cs,Show,The length of the statement  "            string change = (file) ? Common.Languages[MessageType.FilesOrFoldersUpdated] : Common.Languages[MessageType.FilesOrFoldersCreated]; " is 131.
Long Statement,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,StartQueue,The length of the statement  "            var successful = _completedList.Where(x => x.Value == StatusType.Success && !x.Key.SkipNotification).Select(x => x.Key); " is 120.
Long Statement,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,CheckExistingFile,The length of the statement  "            var remLwt = (_controller.Account.Protocol != FtpProtocol.SFTP) ? _controller.Client.TryGetModifiedTime(item.CommonPath) : item.Item.LastWriteTime; " is 147.
Complex Conditional,FTPboxLib,CustomFilter,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncFilter.cs,IsIgnored,The conditional expression  "IgnoreTempFiles && (name.ToLower().EndsWith(".tmp") || name.EndsWith("~") || name.StartsWith(".goutputstream") || name.StartsWith("~") || name.Equals("Thumbs.db"))"  is complex.
Complex Conditional,FTPboxLib,FolderWatcher,C:\repos\FTPbox_FTPbox\FTPboxLib\FolderWatcher.cs,OnRenamed,The conditional expression  "isFile && renamedFromTempFile && !renamedToTempFile && !_controller.FileLog.Contains(oldCommon)"  is complex.
Complex Conditional,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,Add,The conditional expression  "item.Item.Type == ClientItemType.Folder && item.SyncTo == SyncTo.Remote                  && item.ActionType != ChangeAction.deleted && item.ActionType != ChangeAction.renamed"  is complex.
Complex Conditional,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,StartQueue,The conditional expression  "(_controller.Account.SyncDirection == SyncDirection.Local && item.SyncTo == SyncTo.Remote) ||                      (_controller.Account.SyncDirection == SyncDirection.Remote && item.SyncTo == SyncTo.Local)"  is complex.
Complex Conditional,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,StartQueue,The conditional expression  "(folders == 1 && files == 0) || (folders == 0 && files == 1)"  is complex.
Complex Conditional,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,CheckExistingFile,The conditional expression  "(remoteChanged && localChanged && remoteChangedMore) || (!localChanged && remoteChanged)"  is complex.
Empty Catch Block,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,FinalWrite,The method has an empty catch block.
Empty Catch Block,FTPboxLib,WebInterface,C:\repos\FTPbox_FTPbox\FTPboxLib\WebInterface.cs,UploadFiles,The method has an empty catch block.
Magic Number,FTPboxLib,AccountController,C:\repos\FTPbox_FTPbox\FTPboxLib\AccountController.cs,GetCommonPath,The following statement contains a magic number: if (p.StartsWith("./"))                  p = p.Substring(2);
Magic Number,FTPboxLib,Client,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\Client.cs,ThrottleTransfer,The following statement contains a magic number: if (limit > 0 && rate > 1000 * limit)              {                  double millisecDelay = (transfered / limit - elapsed.TotalMilliseconds);                    if (millisecDelay > int.MaxValue)                      millisecDelay = int.MaxValue;                    Thread.Sleep((int)millisecDelay);              }
Magic Number,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,Init,The following statement contains a magic number: if (del && File.Exists(fname))              {                  try                  {                      // delete log file after a certain size                      long size = new FileInfo(fname).Length;                      if (size > 10*1024*1024)                          File.Delete(fname);                  }                  catch                  {                      Write(l.Warning' "Could not delete previous log file");                  }              }
Magic Number,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,Init,The following statement contains a magic number: if (del && File.Exists(fname))              {                  try                  {                      // delete log file after a certain size                      long size = new FileInfo(fname).Length;                      if (size > 10*1024*1024)                          File.Delete(fname);                  }                  catch                  {                      Write(l.Warning' "Could not delete previous log file");                  }              }
Magic Number,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,Init,The following statement contains a magic number: if (del && File.Exists(fname))              {                  try                  {                      // delete log file after a certain size                      long size = new FileInfo(fname).Length;                      if (size > 10*1024*1024)                          File.Delete(fname);                  }                  catch                  {                      Write(l.Warning' "Could not delete previous log file");                  }              }
Magic Number,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,LogWriter,The following statement contains a magic number: while (true)              {                  if (LogQueue.Count > 0)                  {                      OutputLog(0);                      while (!LogQueue[0].IsDone)                          Thread.Sleep(5);                      LogQueue.RemoveAt(0);                  }                  Thread.Sleep(5);              }
Magic Number,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,LogWriter,The following statement contains a magic number: while (true)              {                  if (LogQueue.Count > 0)                  {                      OutputLog(0);                      while (!LogQueue[0].IsDone)                          Thread.Sleep(5);                      LogQueue.RemoveAt(0);                  }                  Thread.Sleep(5);              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,ValidateCertificateEventArgs,C:\repos\FTPbox_FTPbox\FTPboxLib\EventArgs.cs,ValidationMessage,The following statement contains a magic number: if (!string.IsNullOrEmpty(Key) && !string.IsNullOrEmpty(KeySize))              {                  return $"{"Key:"'-8}\t {Key}\n" +                         $"{"Key Size:"'-8}\t {KeySize}\n" +                         $"{"Fingerprint: "'-8}\t {Fingerprint}\n\n" +                          "Trust this certificate and continue?";              }              else              {                  var validFrom = cert.GetEffectiveDateString();                  var validTo = cert.GetExpirationDateString();                  var serialNumber = cert.GetSerialNumberString();                  var algorithm = cert.SignatureAlgorithm.FriendlyName;                  var publicKey = $"{cert.PublicKey.Oid.FriendlyName} with {cert.PublicKey.Key.KeySize} bits";                  var issuer = cert.Issuer;                  var fingerprint = cert.Thumbprint;                    return $"{"Valid from:"'-25}\t {validFrom}\n" +                         $"{"Valid to:"'-25}\t {validTo}\n" +                         $"{"Serial number:"'-25}\t {serialNumber}\n" +                         $"{"Public key:"'-25}\t {publicKey}\n" +                         $"{"Algorithm:"'-25}\t {algorithm}\n" +                         $"{"Issuer:"'-25}\n {issuer}\n" +                         $"{"Fingerprint: "'-8}\t {fingerprint}\n\n" +                         "Trust this certificate and continue?";              }
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,GetCertificateData,The following statement contains a magic number: foreach (var b in key) sb.Append(String.Format("{0:x}:"' b).PadLeft(3' '0'));
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,Extensions,C:\repos\FTPbox_FTPbox\FTPboxLib\Extensions.cs,Permissions,The following statement contains a magic number: return string.Format("{2}{1}{0}"' p & (1 | 2 | 4)' (p & (8 | 16 | 32)) >> 3' (p & (64 | 128 | 256)) >> 6);
Magic Number,FTPboxLib,FolderWatcher,C:\repos\FTPbox_FTPbox\FTPboxLib\FolderWatcher.cs,OnChanged,The following statement contains a magic number: if (File.Exists(e.FullPath))              {                  // avoid queuing the same file multiple times                  while (true)                  {                      if (!Common.FileIsUsed(e.FullPath)) break;                      // Exit after 5 retries                      if (retries > 5) return;                      // Sleep for a 10th of a second' then check again                      Thread.Sleep(100);                      retries++;                  }              }
Magic Number,FTPboxLib,FolderWatcher,C:\repos\FTPbox_FTPbox\FTPboxLib\FolderWatcher.cs,OnChanged,The following statement contains a magic number: if (File.Exists(e.FullPath))              {                  // avoid queuing the same file multiple times                  while (true)                  {                      if (!Common.FileIsUsed(e.FullPath)) break;                      // Exit after 5 retries                      if (retries > 5) return;                      // Sleep for a 10th of a second' then check again                      Thread.Sleep(100);                      retries++;                  }              }
Magic Number,FTPboxLib,FtpClient,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\FtpClient.cs,Download,The following statement contains a magic number: using (Stream fileStream = File.OpenWrite(localPath)' rem = await _ftpc.OpenReadAsync(path))              {                  var buf = new byte[8192];                  int read;                    while ((read = await rem.ReadAsync(buf' 0' buf.Length)) > 0)                      await fileStream.WriteAsync(buf' 0' read);              }
Magic Number,FTPboxLib,FtpClient,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\FtpClient.cs,Download,The following statement contains a magic number: using (var s = await _ftpc.OpenReadAsync(path))              {                  var startedOn = DateTime.Now;                  long transfered = 0;                    var buf = new byte[8192];                  int read;                    while ((read = s.Read(buf' 0' buf.Length)) > 0)                  {                      await fileStream.WriteAsync(buf' 0' read);                      transfered += read;                        progress.Report(new TransferProgress(transfered' i' startedOn));                        ThrottleTransfer(Settings.General.DownloadLimit' transfered' startedOn);                  }              }
Magic Number,FTPboxLib,FtpClient,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\FtpClient.cs,Upload,The following statement contains a magic number: using (Stream uploadStream = File.OpenRead(localPath))              {                  using (var s = await _ftpc.OpenWriteAsync(path))                  {                      var startedOn = DateTime.Now;                      long transfered = 0;                      var buf = new byte[8192];                        int read;                      while ((read = await uploadStream.ReadAsync(buf' 0' buf.Length)) > 0)                      {                          await s.WriteAsync(buf' 0' read);                          transfered += read;                            Console.WriteLine("{0}/{1} {2:p}"'                          transfered' uploadStream.Length'                          transfered / (double)uploadStream.Length);                      }                  }              }
Magic Number,FTPboxLib,FtpClient,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\FtpClient.cs,Upload,The following statement contains a magic number: using (var s = await _ftpc.OpenWriteAsync(path))              {                  var startedOn = DateTime.Now;                  long transfered = 0;                    var buf = new byte[8192];                    int read;                  while ((read = await uploadStream.ReadAsync(buf' 0' buf.Length)) > 0)                  {                      await s.WriteAsync(buf' 0' read);                      transfered += read;                        progress.Report(new TransferProgress(transfered' i' startedOn));                        ThrottleTransfer(Settings.General.UploadLimit' transfered' startedOn);                  }              }
Magic Number,FTPboxLib,FtpClient,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\FtpClient.cs,SetKeepAlive,The following statement contains a magic number: if (Controller.Account.KeepAliveInterval > 0)              {                  _tKeepAlive.Change(0' 1000 * Controller.Account.KeepAliveInterval);              }
Magic Number,FTPboxLib,FtpClient,C:\repos\FTPbox_FTPbox\FTPboxLib\Client\FtpClient.cs,ConvertItem,The following statement contains a magic number: if (fullPath.StartsWith("./"))              {                  var cwd = WorkingDirectory;                  var wd = (Controller.Paths.Remote != null && cwd.StartsWithButNotEqual(Controller.Paths.Remote) &&                            cwd != "/")                      ? cwd                      : Controller.GetCommonPath(cwd' false);                  fullPath = fullPath.Substring(2);                  if (wd != "/")                      fullPath = string.Format("/{0}/{1}"' wd' fullPath);                  fullPath = fullPath.Replace("//"' "/");              }
Magic Number,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,StartQueue,The following statement contains a magic number: while (this.Count > 0)              {                  var item = this.First();                  var status = StatusType.Waiting;                  RemoveAt(0);                    if ((_controller.Account.SyncDirection == SyncDirection.Local && item.SyncTo == SyncTo.Remote) ||                      (_controller.Account.SyncDirection == SyncDirection.Remote && item.SyncTo == SyncTo.Local))                  {                      item.SkipNotification = true;                      status = StatusType.Skipped;                  }                  else                  {                      // do stuff here                      switch (item.ActionType)                      {                          case ChangeAction.deleted:                              status = await DeleteItem(item);                              break;                          case ChangeAction.renamed:                              status = await RenameItem(item);                              break;                          case ChangeAction.changed:                          case ChangeAction.created:                              status = await CheckUpdateItem(item);                              break;                      }                  }                  item.Status = status;                  _completedList.Add(item' status);                    RemoveLast(item);                    if (this.Count == 0) await Task.Delay(1000);              }
Magic Number,Utilities.Encryption,AESEncryption,C:\repos\FTPbox_FTPbox\FTPboxLib\Crypto\AESEncryption.cs,Encrypt,The following statement contains a magic number: var keyBytes = derivedPassword.GetBytes(keySize / 8);
Magic Number,Utilities.Encryption,AESEncryption,C:\repos\FTPbox_FTPbox\FTPboxLib\Crypto\AESEncryption.cs,Decrypt,The following statement contains a magic number: var keyBytes = derivedPassword.GetBytes(keySize / 8);
Missing Default,FTPboxLib,Log,C:\repos\FTPbox_FTPbox\FTPboxLib\Console\Log.cs,GetColorCode,The following switch statement is missing a default case: switch (li)              {                  case l.Debug:                      return "#222";                  case l.Info:                      return "#666";                  case l.Warning:                      return "orange";                  case l.Error:                      return "red";              }
Missing Default,FTPboxLib,SyncQueue,C:\repos\FTPbox_FTPbox\FTPboxLib\SyncQueue.cs,StartQueue,The following switch statement is missing a default case: switch (item.ActionType)                      {                          case ChangeAction.deleted:                              status = await DeleteItem(item);                              break;                          case ChangeAction.renamed:                              status = await RenameItem(item);                              break;                          case ChangeAction.changed:                          case ChangeAction.created:                              status = await CheckUpdateItem(item);                              break;                      }
