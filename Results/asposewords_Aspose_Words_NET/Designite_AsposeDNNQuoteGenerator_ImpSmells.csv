Implementation smell,Namespace,Class,File,Method,Description
Long Method,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The method has 130 lines of code.
Complex Method,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,Cyclomatic complexity of the method is 11
Complex Method,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,Cyclomatic complexity of the method is 14
Complex Method,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,GetSaveFormat,Cyclomatic complexity of the method is 25
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord.Data,DataProvider,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Data\DataProvider.cs,Instance,The length of the statement  "		const string assembly = "Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord.Data.SqlDataprovider'AsposeDNNQuoteGenerator"; " is 125.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord.Data,DataProvider,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Data\DataProvider.cs,GetConnection,The length of the statement  "	if (!String.IsNullOrEmpty (objProvider.Attributes ["connectionStringName"]) && !String.IsNullOrEmpty (System.Configuration.ConfigurationManager.AppSettings [objProvider.Attributes ["connectionStringName"]])) { " is 209.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord.Data,DataProvider,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Data\DataProvider.cs,GetConnection,The length of the statement  "		_connectionString = System.Configuration.ConfigurationManager.AppSettings [objProvider.Attributes ["connectionStringName"]]; " is 124.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,Page_Load,The length of the statement  "			PopulateProductsGrid (int.Parse ((txtAddProductRows.Text.Trim ().Equals ("") == false ? txtAddProductRows.Text.Trim () : "3"))); " is 128.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The length of the statement  "			if (ext.ToUpper ().Trim () != ".JPG" && ext.ToUpper () != ".PNG" && ext.ToUpper () != ".GIF" && ext.ToUpper () != ".JPEG") { " is 124.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The length of the statement  "			TargetPathFileSave = TargetPathFileSave + nimgGUID.ToString ().Trim () + fuCompanyLogo.FileName.Substring (fuCompanyLogo.FileName.LastIndexOf ('.')).ToLower (); " is 160.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The length of the statement  "		MergeWithWordTemplate (Server.MapPath (GetDataDir_Templates ())' Server.MapPath (GetDataDir_OutputDocs ())' TargetPathFileSave); " is 128.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The length of the statement  "							if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) { " is 159.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The length of the statement  "								data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount); " is 283.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The length of the statement  "				doc.MailMerge.CleanupOptions = MailMergeCleanupOptions.RemoveEmptyParagraphs | MailMergeCleanupOptions.RemoveContainingFields | MailMergeCleanupOptions.RemoveUnusedFields; " is 171.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The length of the statement  "				string fname = System.Guid.NewGuid ().ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue); " is 122.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The length of the statement  "				Response.AddHeader ("content-disposition"' "attachment;filename=ExportedFile_" + DateTime.Now.Day.ToString () + "_" + DateTime.Now.Month.ToString () + "_" + DateTime.Now.Year.ToString () + "_" + DateTime.Now.Hour.ToString () + DateTime.Now.Minute.ToString () + DateTime.Now.Second.ToString () + "_" + DateTime.Now.Millisecond.ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue)); " is 411.
Long Statement,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,GetDataDir_LogoImages,The length of the statement  "			System.IO.Directory.CreateDirectory (Server.MapPath ("~/DesktopModules/Aspose.DNN.QuoteGenerator.Word/UploadedImages/")); " is 121.
Long Statement,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The length of the statement  "			ddlVAT.Items.AddRange (((ListItemCollection)currentSession ["VATListItems"]).Cast<System.Web.UI.WebControls.ListItem> ().ToArray ()); " is 133.
Long Statement,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The length of the statement  "			// creating items for VAT %age from 1 to 20 with decimal places 1 to 9' in this way we will have items like (e.g 1%' 1.1%' 1.2%.........19.9%' 20%) " is 147.
Long Statement,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The length of the statement  "					ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ()))); " is 145.
Complex Conditional,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The conditional expression  "ext.ToUpper ().Trim () != ".JPG" && ext.ToUpper () != ".PNG" && ext.ToUpper () != ".GIF" && ext.ToUpper () != ".JPEG""  is complex.
Complex Conditional,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The conditional expression  "txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null"  is complex.
Complex Conditional,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The conditional expression  "txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0"  is complex.
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The following statement contains a magic number: try {  	lblMessage.Text = "";  	string TargetPathFileSave = "";  	// verify logo file is selected by user to upload  	if (fuCompanyLogo.HasFile) {  		int imgSize = fuCompanyLogo.PostedFile.ContentLength;  		string ext = System.IO.Path.GetExtension (this.fuCompanyLogo.PostedFile.FileName);  		if (ext.ToUpper ().Trim () != ".JPG" && ext.ToUpper () != ".PNG" && ext.ToUpper () != ".GIF" && ext.ToUpper () != ".JPEG") {  			lblMessage.Text = "Please choose only .jpg' .png and .gif image types";  			return;  		} else {  			if (imgSize > 1048576) {  				lblMessage.Text = "Maximum image file size 1 MB";  				return;  			}  		}  		// Verify and secure your upload that only allow image files and no security risks attached  		System.Drawing.Image image = System.Drawing.Image.FromStream (fuCompanyLogo.FileContent);  		string FormetType = string.Empty;  		if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Gif.Guid)  			FormetType = "GIF";  		else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Jpeg.Guid)  			FormetType = "JPG";  		else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Bmp.Guid)  			FormetType = "BMP";  		else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Png.Guid)  			FormetType = "PNG";  		else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Icon.Guid)  			FormetType = "ICO";  		else  			throw new System.ArgumentException ("Invalid File Type");  		// base directory path to upload image  		TargetPathFileSave = Server.MapPath (GetDataDir_LogoImages ());  		// use GUID to distinct each file name  		Guid nimgGUID = Guid.NewGuid ();  		TargetPathFileSave = TargetPathFileSave + nimgGUID.ToString ().Trim () + fuCompanyLogo.FileName.Substring (fuCompanyLogo.FileName.LastIndexOf ('.')).ToLower ();  		// upload file to server  		fuCompanyLogo.PostedFile.SaveAs (TargetPathFileSave);  	} else {  		// if no file selected then company name should be provided by user  		if (txtCompanyName.Text.Trim ().Equals ("")) {  			// in case no file and company name provided then notify user and stop process  			lblMessage.Text = "please select file to upload.";  			return;  		}  	}  	// generating PDF for user input using template document  	MergeWithWordTemplate (Server.MapPath (GetDataDir_Templates ())' Server.MapPath (GetDataDir_OutputDocs ())' TargetPathFileSave);  } catch (Exception exc) {  	lblMessage.Text = exc.Message;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The following statement contains a magic number: if (fuCompanyLogo.HasFile) {  	int imgSize = fuCompanyLogo.PostedFile.ContentLength;  	string ext = System.IO.Path.GetExtension (this.fuCompanyLogo.PostedFile.FileName);  	if (ext.ToUpper ().Trim () != ".JPG" && ext.ToUpper () != ".PNG" && ext.ToUpper () != ".GIF" && ext.ToUpper () != ".JPEG") {  		lblMessage.Text = "Please choose only .jpg' .png and .gif image types";  		return;  	} else {  		if (imgSize > 1048576) {  			lblMessage.Text = "Maximum image file size 1 MB";  			return;  		}  	}  	// Verify and secure your upload that only allow image files and no security risks attached  	System.Drawing.Image image = System.Drawing.Image.FromStream (fuCompanyLogo.FileContent);  	string FormetType = string.Empty;  	if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Gif.Guid)  		FormetType = "GIF";  	else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Jpeg.Guid)  		FormetType = "JPG";  	else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Bmp.Guid)  		FormetType = "BMP";  	else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Png.Guid)  		FormetType = "PNG";  	else if (image.RawFormat.Guid == System.Drawing.Imaging.ImageFormat.Icon.Guid)  		FormetType = "ICO";  	else  		throw new System.ArgumentException ("Invalid File Type");  	// base directory path to upload image  	TargetPathFileSave = Server.MapPath (GetDataDir_LogoImages ());  	// use GUID to distinct each file name  	Guid nimgGUID = Guid.NewGuid ();  	TargetPathFileSave = TargetPathFileSave + nimgGUID.ToString ().Trim () + fuCompanyLogo.FileName.Substring (fuCompanyLogo.FileName.LastIndexOf ('.')).ToLower ();  	// upload file to server  	fuCompanyLogo.PostedFile.SaveAs (TargetPathFileSave);  } else {  	// if no file selected then company name should be provided by user  	if (txtCompanyName.Text.Trim ().Equals ("")) {  		// in case no file and company name provided then notify user and stop process  		lblMessage.Text = "please select file to upload.";  		return;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The following statement contains a magic number: if (ext.ToUpper ().Trim () != ".JPG" && ext.ToUpper () != ".PNG" && ext.ToUpper () != ".GIF" && ext.ToUpper () != ".JPEG") {  	lblMessage.Text = "Please choose only .jpg' .png and .gif image types";  	return;  } else {  	if (imgSize > 1048576) {  		lblMessage.Text = "Maximum image file size 1 MB";  		return;  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,btnGeneratePDF_Click,The following statement contains a magic number: if (imgSize > 1048576) {  	lblMessage.Text = "Maximum image file size 1 MB";  	return;  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: try {  	lblMessage.Text = "";  	// Check for license and apply if exists  	string licenseFile = Server.MapPath ("~/App_Data/Aspose.Words.lic");  	if (File.Exists (licenseFile)) {  		License license = new License ();  		license.SetLicense (licenseFile);  	}  	Document doc = QuoteGenerator.GetUnmergedTemplateObject (templatePath + "MailMerge_Template.doc"' Session);  	if (doc != null) {  		// Fill the fields in the document with user data.  		DataSet data = QuoteGenerator.GetDataSetForGridView (Session);  		if (data != null) {  			decimal itemtotalBeforeVAT = 0;  			decimal itemtotalVATAmount = 0;  			decimal itemtotalAmount = 0;  			decimal grandTotalAllItemsAmount = 0;  			if (grdInvoiceProducts.Rows.Count > 0) {  				// removing all rows in collection  				data.Tables [0].Rows.Clear ();  				System.Web.UI.WebControls.TextBox txtProductDescription;  				System.Web.UI.WebControls.TextBox txtProductPrice;  				System.Web.UI.WebControls.TextBox txtProductQuantity;  				DropDownList ddlProductVAT;  				foreach (GridViewRow gr in grdInvoiceProducts.Rows) {  					// find control in each gridview rows  					txtProductDescription = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductDescription");  					txtProductPrice = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductPrice");  					txtProductQuantity = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductQuantity");  					ddlProductVAT = (DropDownList)gr.FindControl ("ddlProductVAT");  					// varify the found controls should not be null  					if (txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null) {  						// varify the found controls should not be empty  						if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  							// actual amount price X quantity  							itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  							// VAT amount = (actual X VAT)/100  							itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  							// Total amount including VAT  							itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  							grandTotalAllItemsAmount += itemtotalAmount;  							// Add the temp data row to the tables for each row.  							data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  						}  					}  				}  			}  			if (imagePath != "") {  				Shape shape = (Shape)doc.GetChild (NodeType.Shape' 0' true);  				if (shape != null) {  					shape.ImageData.ImageBytes = File.ReadAllBytes (imagePath);  				}  			} else {  				Shape shape = (Shape)doc.GetChild (NodeType.Shape' 0' true);  				if (shape != null) {  					shape.Remove ();  				}  			}  			// updating fix fields using simple aspose mail merge  			doc.MailMerge.Execute (new string[] {  				"CompanyName"'  				"CompanyAddress"'  				"CompanyZipState"'  				"CompanyCountry"'  				"CustomerName"'  				"CustomerAddress"'  				"CustomerZipState"'  				"CustomerCountry"'  				"InvoiceTotalAmount"'  				"DocCaption"'  				"DocDate"'  				"DocNo"'  				"DocDescription"'  				"DocTC"  			}' new object[] {  				txtCompanyName.Text.Trim ()'  				txtCompanyAddress.Text.Trim ()'  				txtCompanyStateZip.Text.Trim ()'  				txtCompanyCountry.Text.Trim ()'  				txtCustomerName.Text.Trim ()'  				txtCustomerAddress.Text.Trim ()'  				txtCustomerStateZip.Text.Trim ()'  				txtCustomerCountry.Text.Trim ()'  				grandTotalAllItemsAmount'  				txtDocCaption.Text.Trim ()'  				txtDocDate.Text.Trim ()'  				txtDocNo.Text.Trim ()'  				txtDescription.Text.Trim ()'  				txtTC.Text.Trim ()  			});  			doc.MailMerge.ExecuteWithRegions (data);  			// removing unused fields in template  			doc.MailMerge.CleanupOptions = MailMergeCleanupOptions.RemoveEmptyParagraphs | MailMergeCleanupOptions.RemoveContainingFields | MailMergeCleanupOptions.RemoveUnusedFields;  			// updating document layout' to be cached and re-use  			doc.UpdatePageLayout ();  			// Saves the document to disk.  			string fname = System.Guid.NewGuid ().ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue);  			doc.Save (outputPath + fname);  			Response.Clear ();  			Response.Buffer = true;  			Response.AddHeader ("content-disposition"' "attachment;filename=ExportedFile_" + DateTime.Now.Day.ToString () + "_" + DateTime.Now.Month.ToString () + "_" + DateTime.Now.Year.ToString () + "_" + DateTime.Now.Hour.ToString () + DateTime.Now.Minute.ToString () + DateTime.Now.Second.ToString () + "_" + DateTime.Now.Millisecond.ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue));  			Response.Charset = "";  			Response.ContentType = "application/pdf";  			Response.Cache.SetCacheability (HttpCacheability.NoCache);  			Response.ContentType = "Application/" + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue);  			//Get the physical path to the file.  			string FilePath = MapPath (GetDataDir_OutputDocs () + fname);  			//Write the file directly to the HTTP content output stream.  			Response.WriteFile (FilePath);  			Response.Flush ();  			// delete file as its already in stream and available for user to download/save/view.  			FileInfo file = new FileInfo (FilePath);  			if (file.Exists)//check file exsit or not  			 {  				file.Delete ();  			}  			file = new FileInfo (imagePath);  			if (file.Exists)//check file exsit or not  			 {  				file.Delete ();  			}  		}  	}  } catch (Exception exc) {  	lblMessage.Text = exc.Message;  	Response.Clear ();  	Response.Flush ();  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: if (doc != null) {  	// Fill the fields in the document with user data.  	DataSet data = QuoteGenerator.GetDataSetForGridView (Session);  	if (data != null) {  		decimal itemtotalBeforeVAT = 0;  		decimal itemtotalVATAmount = 0;  		decimal itemtotalAmount = 0;  		decimal grandTotalAllItemsAmount = 0;  		if (grdInvoiceProducts.Rows.Count > 0) {  			// removing all rows in collection  			data.Tables [0].Rows.Clear ();  			System.Web.UI.WebControls.TextBox txtProductDescription;  			System.Web.UI.WebControls.TextBox txtProductPrice;  			System.Web.UI.WebControls.TextBox txtProductQuantity;  			DropDownList ddlProductVAT;  			foreach (GridViewRow gr in grdInvoiceProducts.Rows) {  				// find control in each gridview rows  				txtProductDescription = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductDescription");  				txtProductPrice = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductPrice");  				txtProductQuantity = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductQuantity");  				ddlProductVAT = (DropDownList)gr.FindControl ("ddlProductVAT");  				// varify the found controls should not be null  				if (txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null) {  					// varify the found controls should not be empty  					if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  						// actual amount price X quantity  						itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  						// VAT amount = (actual X VAT)/100  						itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  						// Total amount including VAT  						itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  						grandTotalAllItemsAmount += itemtotalAmount;  						// Add the temp data row to the tables for each row.  						data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  					}  				}  			}  		}  		if (imagePath != "") {  			Shape shape = (Shape)doc.GetChild (NodeType.Shape' 0' true);  			if (shape != null) {  				shape.ImageData.ImageBytes = File.ReadAllBytes (imagePath);  			}  		} else {  			Shape shape = (Shape)doc.GetChild (NodeType.Shape' 0' true);  			if (shape != null) {  				shape.Remove ();  			}  		}  		// updating fix fields using simple aspose mail merge  		doc.MailMerge.Execute (new string[] {  			"CompanyName"'  			"CompanyAddress"'  			"CompanyZipState"'  			"CompanyCountry"'  			"CustomerName"'  			"CustomerAddress"'  			"CustomerZipState"'  			"CustomerCountry"'  			"InvoiceTotalAmount"'  			"DocCaption"'  			"DocDate"'  			"DocNo"'  			"DocDescription"'  			"DocTC"  		}' new object[] {  			txtCompanyName.Text.Trim ()'  			txtCompanyAddress.Text.Trim ()'  			txtCompanyStateZip.Text.Trim ()'  			txtCompanyCountry.Text.Trim ()'  			txtCustomerName.Text.Trim ()'  			txtCustomerAddress.Text.Trim ()'  			txtCustomerStateZip.Text.Trim ()'  			txtCustomerCountry.Text.Trim ()'  			grandTotalAllItemsAmount'  			txtDocCaption.Text.Trim ()'  			txtDocDate.Text.Trim ()'  			txtDocNo.Text.Trim ()'  			txtDescription.Text.Trim ()'  			txtTC.Text.Trim ()  		});  		doc.MailMerge.ExecuteWithRegions (data);  		// removing unused fields in template  		doc.MailMerge.CleanupOptions = MailMergeCleanupOptions.RemoveEmptyParagraphs | MailMergeCleanupOptions.RemoveContainingFields | MailMergeCleanupOptions.RemoveUnusedFields;  		// updating document layout' to be cached and re-use  		doc.UpdatePageLayout ();  		// Saves the document to disk.  		string fname = System.Guid.NewGuid ().ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue);  		doc.Save (outputPath + fname);  		Response.Clear ();  		Response.Buffer = true;  		Response.AddHeader ("content-disposition"' "attachment;filename=ExportedFile_" + DateTime.Now.Day.ToString () + "_" + DateTime.Now.Month.ToString () + "_" + DateTime.Now.Year.ToString () + "_" + DateTime.Now.Hour.ToString () + DateTime.Now.Minute.ToString () + DateTime.Now.Second.ToString () + "_" + DateTime.Now.Millisecond.ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue));  		Response.Charset = "";  		Response.ContentType = "application/pdf";  		Response.Cache.SetCacheability (HttpCacheability.NoCache);  		Response.ContentType = "Application/" + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue);  		//Get the physical path to the file.  		string FilePath = MapPath (GetDataDir_OutputDocs () + fname);  		//Write the file directly to the HTTP content output stream.  		Response.WriteFile (FilePath);  		Response.Flush ();  		// delete file as its already in stream and available for user to download/save/view.  		FileInfo file = new FileInfo (FilePath);  		if (file.Exists)//check file exsit or not  		 {  			file.Delete ();  		}  		file = new FileInfo (imagePath);  		if (file.Exists)//check file exsit or not  		 {  			file.Delete ();  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: if (data != null) {  	decimal itemtotalBeforeVAT = 0;  	decimal itemtotalVATAmount = 0;  	decimal itemtotalAmount = 0;  	decimal grandTotalAllItemsAmount = 0;  	if (grdInvoiceProducts.Rows.Count > 0) {  		// removing all rows in collection  		data.Tables [0].Rows.Clear ();  		System.Web.UI.WebControls.TextBox txtProductDescription;  		System.Web.UI.WebControls.TextBox txtProductPrice;  		System.Web.UI.WebControls.TextBox txtProductQuantity;  		DropDownList ddlProductVAT;  		foreach (GridViewRow gr in grdInvoiceProducts.Rows) {  			// find control in each gridview rows  			txtProductDescription = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductDescription");  			txtProductPrice = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductPrice");  			txtProductQuantity = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductQuantity");  			ddlProductVAT = (DropDownList)gr.FindControl ("ddlProductVAT");  			// varify the found controls should not be null  			if (txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null) {  				// varify the found controls should not be empty  				if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  					// actual amount price X quantity  					itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  					// VAT amount = (actual X VAT)/100  					itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  					// Total amount including VAT  					itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  					grandTotalAllItemsAmount += itemtotalAmount;  					// Add the temp data row to the tables for each row.  					data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  				}  			}  		}  	}  	if (imagePath != "") {  		Shape shape = (Shape)doc.GetChild (NodeType.Shape' 0' true);  		if (shape != null) {  			shape.ImageData.ImageBytes = File.ReadAllBytes (imagePath);  		}  	} else {  		Shape shape = (Shape)doc.GetChild (NodeType.Shape' 0' true);  		if (shape != null) {  			shape.Remove ();  		}  	}  	// updating fix fields using simple aspose mail merge  	doc.MailMerge.Execute (new string[] {  		"CompanyName"'  		"CompanyAddress"'  		"CompanyZipState"'  		"CompanyCountry"'  		"CustomerName"'  		"CustomerAddress"'  		"CustomerZipState"'  		"CustomerCountry"'  		"InvoiceTotalAmount"'  		"DocCaption"'  		"DocDate"'  		"DocNo"'  		"DocDescription"'  		"DocTC"  	}' new object[] {  		txtCompanyName.Text.Trim ()'  		txtCompanyAddress.Text.Trim ()'  		txtCompanyStateZip.Text.Trim ()'  		txtCompanyCountry.Text.Trim ()'  		txtCustomerName.Text.Trim ()'  		txtCustomerAddress.Text.Trim ()'  		txtCustomerStateZip.Text.Trim ()'  		txtCustomerCountry.Text.Trim ()'  		grandTotalAllItemsAmount'  		txtDocCaption.Text.Trim ()'  		txtDocDate.Text.Trim ()'  		txtDocNo.Text.Trim ()'  		txtDescription.Text.Trim ()'  		txtTC.Text.Trim ()  	});  	doc.MailMerge.ExecuteWithRegions (data);  	// removing unused fields in template  	doc.MailMerge.CleanupOptions = MailMergeCleanupOptions.RemoveEmptyParagraphs | MailMergeCleanupOptions.RemoveContainingFields | MailMergeCleanupOptions.RemoveUnusedFields;  	// updating document layout' to be cached and re-use  	doc.UpdatePageLayout ();  	// Saves the document to disk.  	string fname = System.Guid.NewGuid ().ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue);  	doc.Save (outputPath + fname);  	Response.Clear ();  	Response.Buffer = true;  	Response.AddHeader ("content-disposition"' "attachment;filename=ExportedFile_" + DateTime.Now.Day.ToString () + "_" + DateTime.Now.Month.ToString () + "_" + DateTime.Now.Year.ToString () + "_" + DateTime.Now.Hour.ToString () + DateTime.Now.Minute.ToString () + DateTime.Now.Second.ToString () + "_" + DateTime.Now.Millisecond.ToString () + "." + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue));  	Response.Charset = "";  	Response.ContentType = "application/pdf";  	Response.Cache.SetCacheability (HttpCacheability.NoCache);  	Response.ContentType = "Application/" + QuoteGenerator.GetSaveFormat (ExportTypeDropDown.SelectedValue);  	//Get the physical path to the file.  	string FilePath = MapPath (GetDataDir_OutputDocs () + fname);  	//Write the file directly to the HTTP content output stream.  	Response.WriteFile (FilePath);  	Response.Flush ();  	// delete file as its already in stream and available for user to download/save/view.  	FileInfo file = new FileInfo (FilePath);  	if (file.Exists)//check file exsit or not  	 {  		file.Delete ();  	}  	file = new FileInfo (imagePath);  	if (file.Exists)//check file exsit or not  	 {  		file.Delete ();  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: if (grdInvoiceProducts.Rows.Count > 0) {  	// removing all rows in collection  	data.Tables [0].Rows.Clear ();  	System.Web.UI.WebControls.TextBox txtProductDescription;  	System.Web.UI.WebControls.TextBox txtProductPrice;  	System.Web.UI.WebControls.TextBox txtProductQuantity;  	DropDownList ddlProductVAT;  	foreach (GridViewRow gr in grdInvoiceProducts.Rows) {  		// find control in each gridview rows  		txtProductDescription = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductDescription");  		txtProductPrice = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductPrice");  		txtProductQuantity = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductQuantity");  		ddlProductVAT = (DropDownList)gr.FindControl ("ddlProductVAT");  		// varify the found controls should not be null  		if (txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null) {  			// varify the found controls should not be empty  			if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  				// actual amount price X quantity  				itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  				// VAT amount = (actual X VAT)/100  				itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  				// Total amount including VAT  				itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  				grandTotalAllItemsAmount += itemtotalAmount;  				// Add the temp data row to the tables for each row.  				data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  			}  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: foreach (GridViewRow gr in grdInvoiceProducts.Rows) {  	// find control in each gridview rows  	txtProductDescription = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductDescription");  	txtProductPrice = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductPrice");  	txtProductQuantity = (System.Web.UI.WebControls.TextBox)gr.FindControl ("txtProductQuantity");  	ddlProductVAT = (DropDownList)gr.FindControl ("ddlProductVAT");  	// varify the found controls should not be null  	if (txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null) {  		// varify the found controls should not be empty  		if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  			// actual amount price X quantity  			itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  			// VAT amount = (actual X VAT)/100  			itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  			// Total amount including VAT  			itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  			grandTotalAllItemsAmount += itemtotalAmount;  			// Add the temp data row to the tables for each row.  			data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  		}  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: if (txtProductDescription != null && txtProductPrice != null && txtProductQuantity != null && ddlProductVAT != null) {  	// varify the found controls should not be empty  	if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  		// actual amount price X quantity  		itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  		// VAT amount = (actual X VAT)/100  		itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  		// Total amount including VAT  		itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  		grandTotalAllItemsAmount += itemtotalAmount;  		// Add the temp data row to the tables for each row.  		data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: if (txtProductDescription.Text.Trim () != "" && txtProductPrice.Text.Trim () != "" && txtProductQuantity.Text.Trim () != "" && ddlProductVAT.Items.Count > 0) {  	// actual amount price X quantity  	itemtotalBeforeVAT = (decimal.Parse (txtProductPrice.Text.Trim ()) * decimal.Parse (txtProductQuantity.Text.Trim ()));  	// VAT amount = (actual X VAT)/100  	itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  	// Total amount including VAT  	itemtotalAmount = itemtotalBeforeVAT + itemtotalVATAmount;  	grandTotalAllItemsAmount += itemtotalAmount;  	// Add the temp data row to the tables for each row.  	data.Tables [0].Rows.Add (gr.Cells [0].Text' txtProductDescription.Text.Trim ()' decimal.Parse (txtProductPrice.Text.Trim ())' decimal.Parse (txtProductQuantity.Text.Trim ())' itemtotalBeforeVAT' decimal.Parse (ddlProductVAT.SelectedItem.Value)' itemtotalVATAmount' itemtotalAmount);  }  
Magic Number,Aspose.DotNetNuke.Modules.AsposeDNNQuoteGeneratorWord,View,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\View.ascx.cs,MergeWithWordTemplate,The following statement contains a magic number: itemtotalVATAmount = ((itemtotalBeforeVAT * decimal.Parse (ddlProductVAT.SelectedItem.Value.Trim ())) / 100);  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: try {  	// if session already contains the list items then no need to execute loop and items  	if (currentSession ["VATListItems"] != null) {  		// extract items from session  		ddlVAT.Items.AddRange (((ListItemCollection)currentSession ["VATListItems"]).Cast<System.Web.UI.WebControls.ListItem> ().ToArray ());  	} else {  		// creating items for VAT %age from 1 to 20 with decimal places 1 to 9' in this way we will have items like (e.g 1%' 1.1%' 1.2%.........19.9%' 20%)  		// outer look for 1 to 20 items  		for (int i = 0; i < 20; i++) {  			// inner loop to create decimal items 1 to 9 for each outer loop value  			for (int j = 0; j < 10; j++) {  				// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  				ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  			}  		}  		// adding last item as loops created max 19.9% item  		ddlVAT.Items.Add (new ListItem ("20%"' "20"));  		// adding list items to session' caching it to re-use  		currentSession ["VATListItems"] = ddlVAT.Items;  	}  } catch (Exception exc) {  	throw exc;  }  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: try {  	// if session already contains the list items then no need to execute loop and items  	if (currentSession ["VATListItems"] != null) {  		// extract items from session  		ddlVAT.Items.AddRange (((ListItemCollection)currentSession ["VATListItems"]).Cast<System.Web.UI.WebControls.ListItem> ().ToArray ());  	} else {  		// creating items for VAT %age from 1 to 20 with decimal places 1 to 9' in this way we will have items like (e.g 1%' 1.1%' 1.2%.........19.9%' 20%)  		// outer look for 1 to 20 items  		for (int i = 0; i < 20; i++) {  			// inner loop to create decimal items 1 to 9 for each outer loop value  			for (int j = 0; j < 10; j++) {  				// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  				ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  			}  		}  		// adding last item as loops created max 19.9% item  		ddlVAT.Items.Add (new ListItem ("20%"' "20"));  		// adding list items to session' caching it to re-use  		currentSession ["VATListItems"] = ddlVAT.Items;  	}  } catch (Exception exc) {  	throw exc;  }  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: if (currentSession ["VATListItems"] != null) {  	// extract items from session  	ddlVAT.Items.AddRange (((ListItemCollection)currentSession ["VATListItems"]).Cast<System.Web.UI.WebControls.ListItem> ().ToArray ());  } else {  	// creating items for VAT %age from 1 to 20 with decimal places 1 to 9' in this way we will have items like (e.g 1%' 1.1%' 1.2%.........19.9%' 20%)  	// outer look for 1 to 20 items  	for (int i = 0; i < 20; i++) {  		// inner loop to create decimal items 1 to 9 for each outer loop value  		for (int j = 0; j < 10; j++) {  			// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  			ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  		}  	}  	// adding last item as loops created max 19.9% item  	ddlVAT.Items.Add (new ListItem ("20%"' "20"));  	// adding list items to session' caching it to re-use  	currentSession ["VATListItems"] = ddlVAT.Items;  }  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: if (currentSession ["VATListItems"] != null) {  	// extract items from session  	ddlVAT.Items.AddRange (((ListItemCollection)currentSession ["VATListItems"]).Cast<System.Web.UI.WebControls.ListItem> ().ToArray ());  } else {  	// creating items for VAT %age from 1 to 20 with decimal places 1 to 9' in this way we will have items like (e.g 1%' 1.1%' 1.2%.........19.9%' 20%)  	// outer look for 1 to 20 items  	for (int i = 0; i < 20; i++) {  		// inner loop to create decimal items 1 to 9 for each outer loop value  		for (int j = 0; j < 10; j++) {  			// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  			ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  		}  	}  	// adding last item as loops created max 19.9% item  	ddlVAT.Items.Add (new ListItem ("20%"' "20"));  	// adding list items to session' caching it to re-use  	currentSession ["VATListItems"] = ddlVAT.Items;  }  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	// inner loop to create decimal items 1 to 9 for each outer loop value  	for (int j = 0; j < 10; j++) {  		// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  		ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: for (int i = 0; i < 20; i++) {  	// inner loop to create decimal items 1 to 9 for each outer loop value  	for (int j = 0; j < 10; j++) {  		// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  		ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  	}  }  
Magic Number,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,PopulateVATDropdownList,The following statement contains a magic number: for (int j = 0; j < 10; j++) {  	// NOTE: (j == 0 ? "" : "." + j.ToString()) skip and allow to add start value  	ddlVAT.Items.Add (new ListItem (i.ToString () + (j == 0 ? "" : "." + j.ToString ()) + "%"' i.ToString () + (j == 0 ? "" : "." + j.ToString ())));  }  
Missing Default,Aspose.DotNetNuke.Modules.DNNQuoteGenerator,QuoteGenerator,F:\newReposMay17\asposewords_Aspose_Words_NET\Plugins\DotNetNuke\Aspose.DNN.QuoteGenerator.Words\Library\QuoteGenerator.cs,GetSaveFormat,The following switch statement is missing a default case: switch (format) {  case "Pdf":  	saveOption = SaveFormat.Pdf.ToString ();  	break;  case "Doc":  	saveOption = SaveFormat.Doc.ToString ();  	break;  case "Docx":  	saveOption = SaveFormat.Docx.ToString ();  	break;  case "Odt":  	saveOption = SaveFormat.Odt.ToString ();  	break;  case "Xps":  	saveOption = SaveFormat.Xps.ToString ();  	break;  case "Tiff":  	saveOption = SaveFormat.Tiff.ToString ();  	break;  case "Png":  	saveOption = SaveFormat.Png.ToString ();  	break;  case "Jpeg":  	saveOption = SaveFormat.Jpeg.ToString ();  	break;  // there are many document formats supported' check SaveFormat property for more  }  
