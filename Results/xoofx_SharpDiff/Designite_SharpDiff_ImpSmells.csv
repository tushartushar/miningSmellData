Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,Find,Cyclomatic complexity of the method is 16
Complex Method,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,Generate,Cyclomatic complexity of the method is 11
Complex Method,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,TryAlignChanges,Cyclomatic complexity of the method is 16
Long Parameter List,SharpDiff,Diff2,C:\repos\xoofx_SharpDiff\SharpDiff\Diff2.FrontEnd.cs,CompareAndAlign,The method has 5 parameters.
Long Parameter List,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,LongestCommonSubstring,The method has 5 parameters.
Long Parameter List,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,AlignedDiff,The method has 5 parameters.
Long Parameter List,SharpDiff,StringAlignmentFilter,C:\repos\xoofx_SharpDiff\SharpDiff\StringAlignmentFilter.cs,StringAlignmentFilter,The method has 5 parameters.
Long Statement,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,Find,The length of the statement  "		throw new ArgumentOutOfRangeException ("lower1"' string.Format (CultureInfo.InvariantCulture' "lower1 must be equal to or less than upper1 ({0})"' upper1)); " is 156.
Long Statement,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,Find,The length of the statement  "		throw new ArgumentOutOfRangeException ("upper1"' "upper1 must be equal to or less than the length of the first collection"); " is 124.
Long Statement,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,Find,The length of the statement  "		throw new ArgumentOutOfRangeException ("lower2"' string.Format (CultureInfo.InvariantCulture' "lower2 must be equal to or less than upper2 ({0})"' upper2)); " is 156.
Long Statement,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,Find,The length of the statement  "		throw new ArgumentOutOfRangeException ("upper2"' "upper2 must be equal to or less than the length of the first collection"); " is 124.
Long Statement,SharpDiff,LongestCommonSubstring,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstring.cs,Find,The length of the statement  "				if (maxMatchingLength > 0 && !_Comparer.Equals (_Collection1 [index1 + maxMatchingLength].Item' _Collection2 [index2 + maxMatchingLength].Item)) " is 144.
Long Statement,SharpDiff,LongestCommonSubstringResult,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstringResult.cs,Equals,The length of the statement  "	return other._Length == _Length && other._PositionInCollection1 == _PositionInCollection1 && other._PositionInCollection2 == _PositionInCollection2; " is 148.
Long Statement,SharpDiff,LongestCommonSubstringResult,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstringResult.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' "Length: {0}' PositionInCollection1: {1}' PositionInCollection2: {2}"' _Length' _PositionInCollection1' _PositionInCollection2); " is 180.
Long Statement,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,CalculateAlignmentNodes,The length of the statement  "		result = new ChangeNode (ChangeType.Added' restAfterAddition.Score' restAfterAddition.NodeCount + 1' restAfterAddition); " is 120.
Long Statement,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,CalculateAlignmentNodes,The length of the statement  "		result = new ChangeNode (ChangeType.Deleted' restAfterDeletion.Score' restAfterDeletion.NodeCount + 1' restAfterDeletion); " is 122.
Long Statement,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,CalculateAlignmentNodes,The length of the statement  "		var resultAdded = new ChangeNode (ChangeType.Added' restAfterAddition.Score' restAfterAddition.NodeCount + 1' restAfterAddition); " is 129.
Long Statement,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,CalculateAlignmentNodes,The length of the statement  "		var resultDeleted = new ChangeNode (ChangeType.Deleted' restAfterDeletion.Score' restAfterDeletion.NodeCount + 1' restAfterDeletion); " is 133.
Long Statement,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,CalculateAlignmentNodes,The length of the statement  "		var resultChanged = new ChangeNode (ChangeType.Changed' similarity + restAfterChange.Score' restAfterChange.NodeCount + 1' restAfterChange); " is 140.
Long Statement,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,CalculateAlignmentNodes,The length of the statement  "		else if (resultAdded.AverageScore >= resultChanged.AverageScore && resultAdded.AverageScore >= resultDeleted.AverageScore) " is 122.
Magic Number,SharpDiff,AlignedDiffChange,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiffChange.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = index1.GetHashCode ();  	result = (result * 397) ^ index2.GetHashCode ();  	result = (result * 397) ^ change.GetHashCode ();  	return result;  }  
Magic Number,SharpDiff,AlignedDiffChange,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiffChange.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = index1.GetHashCode ();  	result = (result * 397) ^ index2.GetHashCode ();  	result = (result * 397) ^ change.GetHashCode ();  	return result;  }  
Magic Number,SharpDiff,AlignedDiffChange,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiffChange.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ index2.GetHashCode ();  
Magic Number,SharpDiff,AlignedDiffChange,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiffChange.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ change.GetHashCode ();  
Magic Number,SharpDiff,Diff2Change,C:\repos\xoofx_SharpDiff\SharpDiff\Diff2Change.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = _Equal.GetHashCode ();  	result = (result * 397) ^ _Length1;  	result = (result * 397) ^ _Length2;  	return result;  }  
Magic Number,SharpDiff,Diff2Change,C:\repos\xoofx_SharpDiff\SharpDiff\Diff2Change.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = _Equal.GetHashCode ();  	result = (result * 397) ^ _Length1;  	result = (result * 397) ^ _Length2;  	return result;  }  
Magic Number,SharpDiff,Diff2Change,C:\repos\xoofx_SharpDiff\SharpDiff\Diff2Change.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ _Length1;  
Magic Number,SharpDiff,Diff2Change,C:\repos\xoofx_SharpDiff\SharpDiff\Diff2Change.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ _Length2;  
Magic Number,SharpDiff,LongestCommonSubstringResult,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstringResult.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = _Length;  	result = (result * 397) ^ _PositionInCollection1;  	result = (result * 397) ^ _PositionInCollection2;  	return result;  }  
Magic Number,SharpDiff,LongestCommonSubstringResult,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstringResult.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int result = _Length;  	result = (result * 397) ^ _PositionInCollection1;  	result = (result * 397) ^ _PositionInCollection2;  	return result;  }  
Magic Number,SharpDiff,LongestCommonSubstringResult,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstringResult.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ _PositionInCollection1;  
Magic Number,SharpDiff,LongestCommonSubstringResult,C:\repos\xoofx_SharpDiff\SharpDiff\LongestCommonSubstringResult.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ _PositionInCollection2;  
Magic Number,SharpDiff,Span,C:\repos\xoofx_SharpDiff\SharpDiff\Span.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (From * 397) ^ To;  }  
Magic Number,SharpDiff,Span,C:\repos\xoofx_SharpDiff\SharpDiff\Span.cs,GetHashCode,The following statement contains a magic number: return (From * 397) ^ To;  
Magic Number,SharpDiff,StringSimilarityComparer,C:\repos\xoofx_SharpDiff\SharpDiff\StringSimilarityComparer.cs,Compare,The following statement contains a magic number: return (same * 2.0) / (value1.Length + value2.Length + 0.0);  
Magic Number,SharpDiff,StringAlignmentFilter,C:\repos\xoofx_SharpDiff\SharpDiff\StringAlignmentFilter.cs,StringAlignmentFilter,The following statement contains a magic number: _DiffPredicate = delegate (string value1' string value2' IEnumerable<Diff2Change> diff) {  	int same = diff.Where (s => s.Equal).Sum (s => s.Length1);  	return ((same * 2.0) / (value1.Length + value2.Length + 0.0)) >= 0.1;  };  
Magic Number,SharpDiff,StringAlignmentFilter,C:\repos\xoofx_SharpDiff\SharpDiff\StringAlignmentFilter.cs,StringAlignmentFilter,The following statement contains a magic number: _DiffPredicate = delegate (string value1' string value2' IEnumerable<Diff2Change> diff) {  	int same = diff.Where (s => s.Equal).Sum (s => s.Length1);  	return ((same * 2.0) / (value1.Length + value2.Length + 0.0)) >= 0.1;  };  
Magic Number,SharpDiff,StringAlignmentFilter,C:\repos\xoofx_SharpDiff\SharpDiff\StringAlignmentFilter.cs,StringAlignmentFilter,The following statement contains a magic number: return ((same * 2.0) / (value1.Length + value2.Length + 0.0)) >= 0.1;  
Magic Number,SharpDiff,StringAlignmentFilter,C:\repos\xoofx_SharpDiff\SharpDiff\StringAlignmentFilter.cs,StringAlignmentFilter,The following statement contains a magic number: return ((same * 2.0) / (value1.Length + value2.Length + 0.0)) >= 0.1;  
Missing Default,SharpDiff,AlignedDiff,C:\repos\xoofx_SharpDiff\SharpDiff\AlignedDiff.cs,TryAlignChanges,The following switch statement is missing a default case: switch (alignmentNodes.Type) {  case ChangeType.Added:  	result.Add (new AlignedDiffChange (ChangeType.Added' -1' i2));  	i2++;  	break;  case ChangeType.Deleted:  	result.Add (new AlignedDiffChange (ChangeType.Deleted' i1' -1));  	i1++;  	break;  case ChangeType.Changed:  	if (_AlignmentFilter.CanAlign (_Collection1 [i1]' _Collection2 [i2]))  		result.Add (new AlignedDiffChange (ChangeType.Changed' i1' i2));  	else {  		result.Add (new AlignedDiffChange (ChangeType.Deleted' i1' -1));  		result.Add (new AlignedDiffChange (ChangeType.Added' -1' i2));  	}  	i1++;  	i2++;  	break;  }  
