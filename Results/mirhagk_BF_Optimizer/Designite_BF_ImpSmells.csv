Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BF,Interpreter,C:\repos\mirhagk_BF_Optimizer\BF\BF\Interpreter.cs,Run,Cyclomatic complexity of the method is 38
Long Parameter List,BF,Program,C:\repos\mirhagk_BF_Optimizer\BF\BF\Program.cs,RunTest,The method has 5 parameters.
Long Statement,BF,Program,C:\repos\mirhagk_BF_Optimizer\BF\BF\Program.cs,RunTestFile,The length of the statement  "	string expectedOutput = ReplaceEscapedCharacters (Regex.Match (code' @"\[Expected Output:([^\]]*)\]").Groups [1].Value); " is 120.
Magic Number,BF,Interpreter,C:\repos\mirhagk_BF_Optimizer\BF\BF\Interpreter.cs,Run,The following statement contains a magic number: for (int i = 0; i < code.Length; i++) {  	switch (code [i]) {  	case '+':  		memory [ptr]++;  		break;  	case '-':  		memory [ptr]--;  		break;  	case '<':  		ptr--;  		break;  	case '>':  		ptr++;  		break;  	case '[':  		if (memory [ptr] == 0) {  			int numToMatch = 1;  			while (numToMatch > 0) {  				i++;  				if (code [i] == ']')  					numToMatch--;  				else if (code [i] == '[')  					numToMatch++;  			}  		}  		else  			labels.Push (i);  		break;  	case ']':  		if (labels.Count == 0)  			Error.WriteLine ("ERROR: ] has no matching [ at position {0}"' i);  		if (memory [ptr] != 0)  			i = labels.Peek ();  		else  			labels.Pop ();  		break;  	case ''':  		memory [ptr] = Input.Read ();  		break;  	case '.':  		Output.Write ((char)memory [ptr]);  		break;  	default:  		//the BF spec states that any non-understood characters should simply be ignored  		break;  	case '#':  		if (debug) {  			Error.WriteLine ("DEBUG: {0}"' string.Join (" "' memory.Take (5).Select (x => x.ToString ())));  			Console.ReadKey ();  		}  		break;  	}  }  
Magic Number,BF,Interpreter,C:\repos\mirhagk_BF_Optimizer\BF\BF\Interpreter.cs,Run,The following statement contains a magic number: switch (code [i]) {  case '+':  	memory [ptr]++;  	break;  case '-':  	memory [ptr]--;  	break;  case '<':  	ptr--;  	break;  case '>':  	ptr++;  	break;  case '[':  	if (memory [ptr] == 0) {  		int numToMatch = 1;  		while (numToMatch > 0) {  			i++;  			if (code [i] == ']')  				numToMatch--;  			else if (code [i] == '[')  				numToMatch++;  		}  	}  	else  		labels.Push (i);  	break;  case ']':  	if (labels.Count == 0)  		Error.WriteLine ("ERROR: ] has no matching [ at position {0}"' i);  	if (memory [ptr] != 0)  		i = labels.Peek ();  	else  		labels.Pop ();  	break;  case ''':  	memory [ptr] = Input.Read ();  	break;  case '.':  	Output.Write ((char)memory [ptr]);  	break;  default:  	//the BF spec states that any non-understood characters should simply be ignored  	break;  case '#':  	if (debug) {  		Error.WriteLine ("DEBUG: {0}"' string.Join (" "' memory.Take (5).Select (x => x.ToString ())));  		Console.ReadKey ();  	}  	break;  }  
Magic Number,BF,Interpreter,C:\repos\mirhagk_BF_Optimizer\BF\BF\Interpreter.cs,Run,The following statement contains a magic number: if (debug) {  	Error.WriteLine ("DEBUG: {0}"' string.Join (" "' memory.Take (5).Select (x => x.ToString ())));  	Console.ReadKey ();  }  
Magic Number,BF,Interpreter,C:\repos\mirhagk_BF_Optimizer\BF\BF\Interpreter.cs,Run,The following statement contains a magic number: Error.WriteLine ("DEBUG: {0}"' string.Join (" "' memory.Take (5).Select (x => x.ToString ())));  
